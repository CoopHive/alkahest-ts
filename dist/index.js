// src/index.ts
import {
  decodeAbiParameters as decodeAbiParameters10,
  parseAbiItem as parseAbiItem3,
  parseAbiParameters,
  parseEventLogs as parseEventLogs2,
  publicActions
} from "viem";

// src/clients/attestationPropertiesArbiters.ts
import { decodeAbiParameters, encodeAbiParameters, getAbiItem } from "viem";

// src/contracts/AttesterArbiterComposing.ts
var abi = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct AttesterArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "AttesterMismatched",
    inputs: []
  }
];

// src/contracts/AttesterArbiterNonComposing.ts
var abi2 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct AttesterArbiter.DemandData",
        components: [
          {
            name: "attester",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "AttesterMismatched",
    inputs: []
  }
];

// src/contracts/ExpirationTimeAfterArbiterComposing.ts
var abi3 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeAfterArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotAfter",
    inputs: []
  }
];

// src/contracts/ExpirationTimeAfterArbiterNonComposing.ts
var abi4 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeAfterArbiter.DemandData",
        components: [
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotAfter",
    inputs: []
  }
];

// src/contracts/ExpirationTimeBeforeArbiterComposing.ts
var abi5 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeBeforeArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotBefore",
    inputs: []
  }
];

// src/contracts/ExpirationTimeBeforeArbiterNonComposing.ts
var abi6 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeBeforeArbiter.DemandData",
        components: [
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotBefore",
    inputs: []
  }
];

// src/contracts/ExpirationTimeEqualArbiterComposing.ts
var abi7 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeEqualArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotEqual",
    inputs: []
  }
];

// src/contracts/ExpirationTimeEqualArbiterNonComposing.ts
var abi8 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ExpirationTimeEqualArbiter.DemandData",
        components: [
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "ExpirationTimeNotEqual",
    inputs: []
  }
];

// src/contracts/RecipientArbiterComposing.ts
var abi9 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RecipientArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RecipientMismatched",
    inputs: []
  }
];

// src/contracts/RecipientArbiterNonComposing.ts
var abi10 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RecipientArbiter.DemandData",
        components: [
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RecipientMismatched",
    inputs: []
  }
];

// src/contracts/RefUidArbiterComposing.ts
var abi11 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RefUidArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RefUidMismatched",
    inputs: []
  }
];

// src/contracts/RefUidArbiterNonComposing.ts
var abi12 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RefUidArbiter.DemandData",
        components: [
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RefUidMismatched",
    inputs: []
  }
];

// src/contracts/RevocableArbiterComposing.ts
var abi13 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RevocableArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RevocabilityMismatched",
    inputs: []
  }
];

// src/contracts/RevocableArbiterNonComposing.ts
var abi14 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct RevocableArbiter.DemandData",
        components: [
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "RevocabilityMismatched",
    inputs: []
  }
];

// src/contracts/SchemaArbiterComposing.ts
var abi15 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct SchemaArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "SchemaMismatched",
    inputs: []
  }
];

// src/contracts/SchemaArbiterNonComposing.ts
var abi16 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct SchemaArbiter.DemandData",
        components: [
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "SchemaMismatched",
    inputs: []
  }
];

// src/contracts/TimeAfterArbiterComposing.ts
var abi17 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeAfterArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotAfter",
    inputs: []
  }
];

// src/contracts/TimeAfterArbiterNonComposing.ts
var abi18 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeAfterArbiter.DemandData",
        components: [
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotAfter",
    inputs: []
  }
];

// src/contracts/TimeBeforeArbiterComposing.ts
var abi19 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeBeforeArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotBefore",
    inputs: []
  }
];

// src/contracts/TimeBeforeArbiterNonComposing.ts
var abi20 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeBeforeArbiter.DemandData",
        components: [
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotBefore",
    inputs: []
  }
];

// src/contracts/TimeEqualArbiterComposing.ts
var abi21 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeEqualArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotEqual",
    inputs: []
  }
];

// src/contracts/TimeEqualArbiterNonComposing.ts
var abi22 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TimeEqualArbiter.DemandData",
        components: [
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "TimeNotEqual",
    inputs: []
  }
];

// src/contracts/UidArbiterComposing.ts
var abi23 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "counteroffer",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct UidArbiter.DemandData",
        components: [
          {
            name: "baseArbiter",
            type: "address",
            internalType: "address"
          },
          {
            name: "baseDemand",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "UidMismatched",
    inputs: []
  }
];

// src/contracts/UidArbiterNonComposing.ts
var abi24 = [
  {
    type: "function",
    name: "checkStatement",
    inputs: [
      {
        name: "statement",
        type: "tuple",
        internalType: "struct Attestation",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "schema",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "time",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "expirationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "revocationTime",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "refUID",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address"
          },
          {
            name: "attester",
            type: "address",
            internalType: "address"
          },
          {
            name: "revocable",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "demand",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "decodeDemandData",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct UidArbiter.DemandData",
        components: [
          {
            name: "uid",
            type: "bytes32",
            internalType: "bytes32"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "error",
    name: "UidMismatched",
    inputs: []
  }
];

// src/clients/attestationPropertiesArbiters.ts
var attesterArbiterComposingDecodeDemandFunction = getAbiItem({
  abi,
  name: "decodeDemandData"
});
var attesterArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi2,
  name: "decodeDemandData"
});
var timeAfterArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi17,
  name: "decodeDemandData"
});
var timeAfterArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi18,
  name: "decodeDemandData"
});
var timeBeforeArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi19,
  name: "decodeDemandData"
});
var timeBeforeArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi20,
  name: "decodeDemandData"
});
var timeEqualArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi21,
  name: "decodeDemandData"
});
var timeEqualArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi22,
  name: "decodeDemandData"
});
var expirationTimeAfterArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi3,
  name: "decodeDemandData"
});
var expirationTimeAfterArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi4,
  name: "decodeDemandData"
});
var expirationTimeBeforeArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi5,
  name: "decodeDemandData"
});
var expirationTimeBeforeArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi6,
  name: "decodeDemandData"
});
var expirationTimeEqualArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi7,
  name: "decodeDemandData"
});
var expirationTimeEqualArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi8,
  name: "decodeDemandData"
});
var recipientArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi9,
  name: "decodeDemandData"
});
var recipientArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi10,
  name: "decodeDemandData"
});
var refUidArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi11,
  name: "decodeDemandData"
});
var refUidArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi12,
  name: "decodeDemandData"
});
var revocableArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi13,
  name: "decodeDemandData"
});
var revocableArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi14,
  name: "decodeDemandData"
});
var schemaArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi15,
  name: "decodeDemandData"
});
var schemaArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi16,
  name: "decodeDemandData"
});
var uidArbiterComposingDecodeDemandFunction = getAbiItem({
  abi: abi23,
  name: "decodeDemandData"
});
var uidArbiterNonComposingDecodeDemandFunction = getAbiItem({
  abi: abi24,
  name: "decodeDemandData"
});
var attesterArbiterComposingDemandDataType = attesterArbiterComposingDecodeDemandFunction.outputs[0];
var attesterArbiterNonComposingDemandDataType = attesterArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeAfterArbiterComposingDemandDataType = timeAfterArbiterComposingDecodeDemandFunction.outputs[0];
var timeAfterArbiterNonComposingDemandDataType = timeAfterArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeBeforeArbiterComposingDemandDataType = timeBeforeArbiterComposingDecodeDemandFunction.outputs[0];
var timeBeforeArbiterNonComposingDemandDataType = timeBeforeArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeEqualArbiterComposingDemandDataType = timeEqualArbiterComposingDecodeDemandFunction.outputs[0];
var timeEqualArbiterNonComposingDemandDataType = timeEqualArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeAfterArbiterComposingDemandDataType = expirationTimeAfterArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeAfterArbiterNonComposingDemandDataType = expirationTimeAfterArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeBeforeArbiterComposingDemandDataType = expirationTimeBeforeArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeBeforeArbiterNonComposingDemandDataType = expirationTimeBeforeArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeEqualArbiterComposingDemandDataType = expirationTimeEqualArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeEqualArbiterNonComposingDemandDataType = expirationTimeEqualArbiterNonComposingDecodeDemandFunction.outputs[0];
var recipientArbiterComposingDemandDataType = recipientArbiterComposingDecodeDemandFunction.outputs[0];
var recipientArbiterNonComposingDemandDataType = recipientArbiterNonComposingDecodeDemandFunction.outputs[0];
var refUidArbiterComposingDemandDataType = refUidArbiterComposingDecodeDemandFunction.outputs[0];
var refUidArbiterNonComposingDemandDataType = refUidArbiterNonComposingDecodeDemandFunction.outputs[0];
var revocableArbiterComposingDemandDataType = revocableArbiterComposingDecodeDemandFunction.outputs[0];
var revocableArbiterNonComposingDemandDataType = revocableArbiterNonComposingDecodeDemandFunction.outputs[0];
var schemaArbiterComposingDemandDataType = schemaArbiterComposingDecodeDemandFunction.outputs[0];
var schemaArbiterNonComposingDemandDataType = schemaArbiterNonComposingDecodeDemandFunction.outputs[0];
var uidArbiterComposingDemandDataType = uidArbiterComposingDecodeDemandFunction.outputs[0];
var uidArbiterNonComposingDemandDataType = uidArbiterNonComposingDecodeDemandFunction.outputs[0];
var makeAttestationPropertiesArbitersClient = (viemClient) => {
  return {
    // Attester Arbiters
    /**
     * Encodes AttesterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address attester}
     */
    encodeAttesterArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([attesterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes AttesterArbiterComposing.DemandData from bytes.
     */
    decodeAttesterArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([attesterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes AttesterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {address attester}
     */
    encodeAttesterArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([attesterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes AttesterArbiterNonComposing.DemandData from bytes.
     */
    decodeAttesterArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([attesterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time After Arbiters
    /**
     * Encodes TimeAfterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeAfterArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([timeAfterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeAfterArbiterComposing.DemandData from bytes.
     */
    decodeTimeAfterArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([timeAfterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeAfterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeAfterArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([timeAfterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeAfterArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeAfterArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([timeAfterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time Before Arbiters
    /**
     * Encodes TimeBeforeArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeBeforeArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([timeBeforeArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeBeforeArbiterComposing.DemandData from bytes.
     */
    decodeTimeBeforeArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([timeBeforeArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeBeforeArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeBeforeArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([timeBeforeArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeBeforeArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeBeforeArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([timeBeforeArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time Equal Arbiters
    /**
     * Encodes TimeEqualArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeEqualArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([timeEqualArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeEqualArbiterComposing.DemandData from bytes.
     */
    decodeTimeEqualArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([timeEqualArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeEqualArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeEqualArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([timeEqualArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeEqualArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeEqualArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([timeEqualArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time After Arbiters
    /**
     * Encodes ExpirationTimeAfterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeAfterArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeAfterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeAfterArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeAfterArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeAfterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeAfterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeAfterArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeAfterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeAfterArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeAfterArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeAfterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time Before Arbiters
    /**
     * Encodes ExpirationTimeBeforeArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeBeforeArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeBeforeArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeBeforeArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeBeforeArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeBeforeArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeBeforeArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeBeforeArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeBeforeArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeBeforeArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeBeforeArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeBeforeArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time Equal Arbiters
    /**
     * Encodes ExpirationTimeEqualArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeEqualArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeEqualArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeEqualArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeEqualArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeEqualArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeEqualArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeEqualArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([expirationTimeEqualArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeEqualArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeEqualArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([expirationTimeEqualArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Recipient Arbiters
    /**
     * Encodes RecipientArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address recipient}
     */
    encodeRecipientArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([recipientArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RecipientArbiterComposing.DemandData from bytes.
     */
    decodeRecipientArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([recipientArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RecipientArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {address recipient}
     */
    encodeRecipientArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([recipientArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RecipientArbiterNonComposing.DemandData from bytes.
     */
    decodeRecipientArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([recipientArbiterNonComposingDemandDataType], demandData)[0];
    },
    // RefUID Arbiters
    /**
     * Encodes RefUidArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 refUID}
     */
    encodeRefUidArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([refUidArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RefUidArbiterComposing.DemandData from bytes.
     */
    decodeRefUidArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([refUidArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RefUidArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 refUID}
     */
    encodeRefUidArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([refUidArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RefUidArbiterNonComposing.DemandData from bytes.
     */
    decodeRefUidArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([refUidArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Revocable Arbiters
    /**
     * Encodes RevocableArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bool revocable}
     */
    encodeRevocableArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([revocableArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RevocableArbiterComposing.DemandData from bytes.
     */
    decodeRevocableArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([revocableArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RevocableArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bool revocable}
     */
    encodeRevocableArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([revocableArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RevocableArbiterNonComposing.DemandData from bytes.
     */
    decodeRevocableArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([revocableArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Schema Arbiters
    /**
     * Encodes SchemaArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 schema}
     */
    encodeSchemaArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([schemaArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes SchemaArbiterComposing.DemandData from bytes.
     */
    decodeSchemaArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([schemaArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes SchemaArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 schema}
     */
    encodeSchemaArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([schemaArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes SchemaArbiterNonComposing.DemandData from bytes.
     */
    decodeSchemaArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([schemaArbiterNonComposingDemandDataType], demandData)[0];
    },
    // UID Arbiters
    /**
     * Encodes UidArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 uid}
     */
    encodeUidArbiterComposingDemand: (demand) => {
      return encodeAbiParameters([uidArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes UidArbiterComposing.DemandData from bytes.
     */
    decodeUidArbiterComposingDemand: (demandData) => {
      return decodeAbiParameters([uidArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes UidArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 uid}
     */
    encodeUidArbiterNonComposingDemand: (demand) => {
      return encodeAbiParameters([uidArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes UidArbiterNonComposing.DemandData from bytes.
     */
    decodeUidArbiterNonComposingDemand: (demandData) => {
      return decodeAbiParameters([uidArbiterNonComposingDemandDataType], demandData)[0];
    }
  };
};

// src/clients/generalArbiters.ts
import { decodeAbiParameters as decodeAbiParameters2, encodeAbiParameters as encodeAbiParameters2, getAbiItem as getAbiItem2, parseAbiItem } from "viem";

// src/contracts/IntrinsicsArbiter2.ts
var abi25 = {
  abi: [
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IntrinsicsArbiter2.DemandData",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x60808060405234601557610362908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101fd5763e6c9714d1461002f575f80fd5b346101e55760603660031901126101e55760043567ffffffffffffffff81116101e55761014060031982360301126101e557604051610140810181811067ffffffffffffffff8211176101e95760405281600401358152602081016024830135815261009d6044840161029b565b60408301526100ae6064840161029b565b91606081019283526100c26084850161029b565b936080820194855260a481013560a08301526100e060c482016102b0565b60c08301526100f160e482016102b0565b60e083015261010481013580151581036101e55761010083015261012481013567ffffffffffffffff81116101e55761012091600461013392369201016102c4565b91015260243567ffffffffffffffff81116101e5576101569036906004016102c4565b906020828051810103126101e557602061016e61027b565b92015180925251036101d6575167ffffffffffffffff1680151590816101cc575b506101bd575167ffffffffffffffff166101ae57602060405160018152f35b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61018f565b635f9bd90760e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101e55760203660031901126101e55760043567ffffffffffffffff81116101e557366023820112156101e557806004013567ffffffffffffffff81116101e55781013660248201116101e5576020905f61025761027b565b52829003126101e557602090602461026d61027b565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff8211176101e957604052565b359067ffffffffffffffff821682036101e557565b35906001600160a01b03821682036101e557565b81601f820112156101e55780359067ffffffffffffffff82116101e95760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101e957604052828452602083830101116101e557815f92602080930183860137830101529056fea26469706673582212206757814f18b254daac024d6ec096363539e82d1870c700ae099c39612c5e1c6964736f6c634300081b0033",
    sourceMap: "203:691:84:-:0;;;;;;;;;;;;;;;;;",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101fd5763e6c9714d1461002f575f80fd5b346101e55760603660031901126101e55760043567ffffffffffffffff81116101e55761014060031982360301126101e557604051610140810181811067ffffffffffffffff8211176101e95760405281600401358152602081016024830135815261009d6044840161029b565b60408301526100ae6064840161029b565b91606081019283526100c26084850161029b565b936080820194855260a481013560a08301526100e060c482016102b0565b60c08301526100f160e482016102b0565b60e083015261010481013580151581036101e55761010083015261012481013567ffffffffffffffff81116101e55761012091600461013392369201016102c4565b91015260243567ffffffffffffffff81116101e5576101569036906004016102c4565b906020828051810103126101e557602061016e61027b565b92015180925251036101d6575167ffffffffffffffff1680151590816101cc575b506101bd575167ffffffffffffffff166101ae57602060405160018152f35b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61018f565b635f9bd90760e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101e55760203660031901126101e55760043567ffffffffffffffff81116101e557366023820112156101e557806004013567ffffffffffffffff81116101e55781013660248201116101e5576020905f61025761027b565b52829003126101e557602090602461026d61027b565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff8211176101e957604052565b359067ffffffffffffffff821682036101e557565b35906001600160a01b03821682036101e557565b81601f820112156101e55780359067ffffffffffffffff82116101e95760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101e957604052828452602083830101116101e557815f92602080930183860137830101529056fea26469706673582212206757814f18b254daac024d6ec096363539e82d1870c700ae099c39612c5e1c6964736f6c634300081b0033",
    sourceMap: "203:691:84:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;633:32;;203:691;;;;;;;:::i;:::-;633:32;;203:691;;;;;1016:27:78;1012:55;;203:691:84;;;353:30:78;;;;;:89;;203:691:84;721:55:78;;;203:691:84;;;786:58:78;;203:691:84;;;;;;;786:58:78;824:20;;;203:691:84;824:20:78;203:691:84;;824:20:78;721:55;759:17;;;203:691:84;759:17:78;203:691:84;;759:17:78;353:89;427:15;;;-1:-1:-1;353:89:78;;;1012:55;1052:15;;;203:691:84;1052:15:78;203:691:84;;1052:15:78;203:691:84;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;203:691:84;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;203:691:84;;;;;;;;;;;;;;:::o",
    linkReferences: {}
  },
  methodIdentifiers: {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"}],"internalType":"struct IntrinsicsArbiter2.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/IntrinsicsArbiter2.sol":"IntrinsicsArbiter2"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/IntrinsicsArbiter2.sol":{"keccak256":"0xaa7673cfdb2ca0482a53da4f336b588c4034d95af1dd41df96ac1da3b91c08ea","license":"UNLICENSED","urls":["bzz-raw://9ee11ca22195fb780e49bf90e2554dcdaf7e3876995e6763886e6b2a4575e14f","dweb:/ipfs/QmVcZAqerfqb6qF8bLURhhV6C1KAtzS9nxqU6wEVXpo9SV"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct IntrinsicsArbiter2.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                }
              ]
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/IntrinsicsArbiter2.sol": "IntrinsicsArbiter2"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/IntrinsicsArbiter2.sol": {
        keccak256: "0xaa7673cfdb2ca0482a53da4f336b588c4034d95af1dd41df96ac1da3b91c08ea",
        urls: [
          "bzz-raw://9ee11ca22195fb780e49bf90e2554dcdaf7e3876995e6763886e6b2a4575e14f",
          "dweb:/ipfs/QmVcZAqerfqb6qF8bLURhhV6C1KAtzS9nxqU6wEVXpo9SV"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 84
};

// src/contracts/SpecificAttestationArbiter.ts
var abi26 = {
  abi: [
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SpecificAttestationArbiter.DemandData",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "error",
      name: "NotDemandedAttestation",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x6080806040523460155761030b908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b631579b0f760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea264697066735822122022d2d15979213653fd8038e9eae28c8109681bf04092cec881a0e64af627f91764736f6c634300081b0033",
    sourceMap: "156:649:120:-:0;;;;;;;;;;;;;;;;;",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b631579b0f760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea264697066735822122022d2d15979213653fd8038e9eae28c8109681bf04092cec881a0e64af627f91764736f6c634300081b0033",
    sourceMap: "156:649:120:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;506:32;;156:649;;;;;;;:::i;:::-;506:32;;156:649;;;;;552:29;548:66;;156:649;;;;;;;548:66;590:24;;;156:649;590:24;156:649;;590:24;156:649;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;156:649:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;156:649:120;;;;;;;;;;;;;;:::o",
    linkReferences: {}
  },
  methodIdentifiers: {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"NotDemandedAttestation","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct SpecificAttestationArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/deprecated/SpecificAttestationArbiter.sol":"SpecificAttestationArbiter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/deprecated/SpecificAttestationArbiter.sol":{"keccak256":"0xfb5181d8c5db61ff4fce0e7c964eb3449f028325014e67c6a81458d288dda91e","license":"UNLICENSED","urls":["bzz-raw://146feee63a3fdce150fd4bb93a46f10f0f048e1c6ee3c55286b8da6151100db5","dweb:/ipfs/QmUF478Y4pF9XXRVvc7VQ74erN6SA2h5WfuvJxvCKPMXKP"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "NotDemandedAttestation"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct SpecificAttestationArbiter.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                }
              ]
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/deprecated/SpecificAttestationArbiter.sol": "SpecificAttestationArbiter"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/deprecated/SpecificAttestationArbiter.sol": {
        keccak256: "0xfb5181d8c5db61ff4fce0e7c964eb3449f028325014e67c6a81458d288dda91e",
        urls: [
          "bzz-raw://146feee63a3fdce150fd4bb93a46f10f0f048e1c6ee3c55286b8da6151100db5",
          "dweb:/ipfs/QmUF478Y4pF9XXRVvc7VQ74erN6SA2h5WfuvJxvCKPMXKP"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 120
};

// src/contracts/TrustedOracleArbiter.ts
var abi27 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "arbitrate",
      inputs: [
        {
          name: "obligation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "decision",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TrustedOracleArbiter.DemandData",
          components: [
            {
              name: "oracle",
              type: "address",
              internalType: "address"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "requestArbitration",
      inputs: [
        {
          name: "_obligation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "oracle",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "ArbitrationMade",
      inputs: [
        {
          name: "obligation",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "oracle",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "decision",
          type: "bool",
          indexed: false,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ArbitrationRequested",
      inputs: [
        {
          name: "obligation",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "oracle",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "UnauthorizedArbitrationRequest",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x608034606f57601f61077638819003918201601f19168301916001600160401b03831184841017607357808492602094604052833981010312606f57516001600160a01b03811690819003606f575f80546001600160a01b0319169190911790556040516106ee90816100888239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461043c575080638c08667e146103c9578063e6c9714d146102195763ef9fb71d14610048575f80fd5b3461020a57604036600319011261020a576024356001600160a01b038116906004359082900361020a575f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa90811561020e575f91610116575b5060e08101516001600160a01b031633141590816100fe575b506100ef577f4a55e4a537f0b657a8b464f243ae30dd8404841df3956cceee1aabac341d382f5f80a3005b63ff323ecb60e01b5f5260045ffd5b60c001516001600160a01b031633141590505f6100c4565b90503d805f833e61012781836105a0565b81019060208183031261020a578051906001600160401b03821161020a57016101408183031261020a576040519161015e83610584565b8151835260208201516020840152610178604083016106a4565b6040840152610189606083016106a4565b606084015261019a608083016106a4565b608084015260a082015160a08401526101b560c0830161064a565b60c08401526101c660e0830161064a565b60e0840152610100820151801515810361020a576101008401526101208201516001600160401b03811161020a576101fe920161065e565b6101208201525f6100ab565b5f80fd5b6040513d5f823e3d90fd5b3461020a57606036600319011261020a576004356001600160401b03811161020a57610140600319823603011261020a576040519061025782610584565b8060040135825260248101356020830152610274604482016105c1565b6040830152610285606482016105c1565b6060830152610296608482016105c1565b608083015260a481013560a08301526102b160c482016105d5565b60c08301526102c260e482016105d5565b60e0830152610104810135801515810361020a57610100830152610124810135906001600160401b03821161020a5760046103009236920101610604565b6101208201526024356001600160401b03811161020a57610325903690600401610604565b805181019060208183031261020a576020810151906001600160401b03821161020a57019060408282031261020a576040519161036183610555565b61036d6020820161064a565b83526040810151916001600160401b03831161020a5761039492602080920192010161065e565b602082015260018060a01b039051165f52600160205260405f2090515f52602052602060ff60405f2054166040519015158152f35b3461020a57604036600319011261020a576004356024359081151580920361020a57335f52600160205260405f20815f5260205260405f2060ff1981541660ff84161790556040519182527f17b56dd782cd998b68e9b95d1fc547096b22671d6848644badf18d515329792760203393a3005b3461020a57602036600319011261020a576004356001600160401b03811161020a573660238201121561020a5780600401356001600160401b03811161020a57810190602482019236841161020a57602081610499606093610555565b5f8152015260208183031261020a576024810135906001600160401b03821161020a5701906040908290031261020a57604051916104d683610555565b6104e2602483016105d5565b83526044820135906001600160401b03821161020a576024610508926080940101610604565b9160208101928352602060405193849282845260018060a01b0390511682840152516040808401528051918291826060860152018484015e5f828201840152601f01601f19168101030190f35b604081019081106001600160401b0382111761057057604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b0382111761057057604052565b90601f801991011681019081106001600160401b0382111761057057604052565b35906001600160401b038216820361020a57565b35906001600160a01b038216820361020a57565b6001600160401b03811161057057601f01601f191660200190565b81601f8201121561020a5780359061061b826105e9565b9261062960405194856105a0565b8284526020838301011161020a57815f926020809301838601378301015290565b51906001600160a01b038216820361020a57565b81601f8201121561020a57805190610675826105e9565b9261068360405194856105a0565b8284526020838301011161020a57815f9260208093018386015e8301015290565b51906001600160401b038216820361020a5756fea2646970667358221220e6a696deb09cb43d35bbe9965606336d0942caa13c2928ff92f01d551956168964736f6c634300081b0033",
    sourceMap: "239:1622:50:-:0;;;;;;;;;;;;;-1:-1:-1;;239:1622:50;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;-1:-1:-1;239:1622:50;;-1:-1:-1;;;;;;239:1622:50;;;;;;;;;;;;;;;;;-1:-1:-1;239:1622:50;;;;;;-1:-1:-1;239:1622:50;;;;;-1:-1:-1;239:1622:50",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461043c575080638c08667e146103c9578063e6c9714d146102195763ef9fb71d14610048575f80fd5b3461020a57604036600319011261020a576024356001600160a01b038116906004359082900361020a575f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa90811561020e575f91610116575b5060e08101516001600160a01b031633141590816100fe575b506100ef577f4a55e4a537f0b657a8b464f243ae30dd8404841df3956cceee1aabac341d382f5f80a3005b63ff323ecb60e01b5f5260045ffd5b60c001516001600160a01b031633141590505f6100c4565b90503d805f833e61012781836105a0565b81019060208183031261020a578051906001600160401b03821161020a57016101408183031261020a576040519161015e83610584565b8151835260208201516020840152610178604083016106a4565b6040840152610189606083016106a4565b606084015261019a608083016106a4565b608084015260a082015160a08401526101b560c0830161064a565b60c08401526101c660e0830161064a565b60e0840152610100820151801515810361020a576101008401526101208201516001600160401b03811161020a576101fe920161065e565b6101208201525f6100ab565b5f80fd5b6040513d5f823e3d90fd5b3461020a57606036600319011261020a576004356001600160401b03811161020a57610140600319823603011261020a576040519061025782610584565b8060040135825260248101356020830152610274604482016105c1565b6040830152610285606482016105c1565b6060830152610296608482016105c1565b608083015260a481013560a08301526102b160c482016105d5565b60c08301526102c260e482016105d5565b60e0830152610104810135801515810361020a57610100830152610124810135906001600160401b03821161020a5760046103009236920101610604565b6101208201526024356001600160401b03811161020a57610325903690600401610604565b805181019060208183031261020a576020810151906001600160401b03821161020a57019060408282031261020a576040519161036183610555565b61036d6020820161064a565b83526040810151916001600160401b03831161020a5761039492602080920192010161065e565b602082015260018060a01b039051165f52600160205260405f2090515f52602052602060ff60405f2054166040519015158152f35b3461020a57604036600319011261020a576004356024359081151580920361020a57335f52600160205260405f20815f5260205260405f2060ff1981541660ff84161790556040519182527f17b56dd782cd998b68e9b95d1fc547096b22671d6848644badf18d515329792760203393a3005b3461020a57602036600319011261020a576004356001600160401b03811161020a573660238201121561020a5780600401356001600160401b03811161020a57810190602482019236841161020a57602081610499606093610555565b5f8152015260208183031261020a576024810135906001600160401b03821161020a5701906040908290031261020a57604051916104d683610555565b6104e2602483016105d5565b83526044820135906001600160401b03821161020a576024610508926080940101610604565b9160208101928352602060405193849282845260018060a01b0390511682840152516040808401528051918291826060860152018484015e5f828201840152601f01601f19168101030190f35b604081019081106001600160401b0382111761057057604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b0382111761057057604052565b90601f801991011681019081106001600160401b0382111761057057604052565b35906001600160401b038216820361020a57565b35906001600160a01b038216820361020a57565b6001600160401b03811161057057601f01601f191660200190565b81601f8201121561020a5780359061061b826105e9565b9261062960405194856105a0565b8284526020838301011161020a57815f926020809301838601378301015290565b51906001600160a01b038216820361020a57565b81601f8201121561020a57805190610675826105e9565b9261068360405194856105a0565b8284526020838301011161020a57815f9260208093018386015e8301015290565b51906001600160401b038216820361020a5756fea2646970667358221220e6a696deb09cb43d35bbe9965606336d0942caa13c2928ff92f01d551956168964736f6c634300081b0033",
    sourceMap: "239:1622:50:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1622:50;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;-1:-1:-1;;;1125:31:50;;239:1622;1125:31;;239:1622;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;1125:31;;;;;;;239:1622;1125:31;;;239:1622;-1:-1:-1;239:1622:50;1183:19;;239:1622;-1:-1:-1;;;;;239:1622:50;1206:10;1183:33;;;;:83;;239:1622;1166:150;;;1332:41;239:1622;1332:41;;239:1622;1166:150;1284:32;;;239:1622;1284:32;239:1622;;1284:32;1183:83;1232:20;;239:1622;-1:-1:-1;;;;;239:1622:50;1206:10;1232:34;;;-1:-1:-1;1183:83:50;;;1125:31;;;;;239:1622;1125:31;;;;;;:::i;:::-;;;239:1622;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;:::i;:::-;;;;;1125:31;;;239:1622;;;;1125:31;239:1622;;;;;;;;;;;;;;;-1:-1:-1;;239:1622:50;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;:::i;:::-;;;1601:32;;239:1622;;;;;;;;;1601:32;;239:1622;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;1601:32;239:1622;1601:32;;;239:1622;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1622:50;;;;;;;;;;;;;;;;;900:10;239:1622;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;949:49;239:1622;900:10;949:49;;239:1622;;;;;;;-1:-1:-1;;239:1622:50;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1622:50;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;:::o;:::-;;;;-1:-1:-1;239:1622:50;;;;;-1:-1:-1;239:1622:50;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;239:1622:50;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1622:50;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1622:50;;;;;;:::o;:::-;-1:-1:-1;;;;;239:1622:50;;;;;;-1:-1:-1;;239:1622:50;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;239:1622:50;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1622:50;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;239:1622:50;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1622:50;;;;;;:::o",
    linkReferences: {}
  },
  methodIdentifiers: {
    "arbitrate(bytes32,bool)": "8c08667e",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9",
    "requestArbitration(bytes32,address)": "ef9fb71d"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"UnauthorizedArbitrationRequest","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"obligation","type":"bytes32"},{"indexed":true,"internalType":"address","name":"oracle","type":"address"},{"indexed":false,"internalType":"bool","name":"decision","type":"bool"}],"name":"ArbitrationMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"obligation","type":"bytes32"},{"indexed":true,"internalType":"address","name":"oracle","type":"address"}],"name":"ArbitrationRequested","type":"event"},{"inputs":[{"internalType":"bytes32","name":"obligation","type":"bytes32"},{"internalType":"bool","name":"decision","type":"bool"}],"name":"arbitrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"oracle","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct TrustedOracleArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_obligation","type":"bytes32"},{"internalType":"address","name":"oracle","type":"address"}],"name":"requestArbitration","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/TrustedOracleArbiter.sol":"TrustedOracleArbiter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/TrustedOracleArbiter.sol":{"keccak256":"0x254e74316cee878f6611b7715ef0202697fc6b70c462276dfbd0ae547bf550ff","license":"UNLICENSED","urls":["bzz-raw://6f21c7aec65251cb1c7482071ce7392f2eab379febac0c8666ed1b6f8e479a8d","dweb:/ipfs/QmPBGCsWBujmZ2rYHmomPGzA6cV8cnG9jrihdSZZ3gM4Kd"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedArbitrationRequest"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "obligation",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "oracle",
              type: "address",
              indexed: true
            },
            {
              internalType: "bool",
              name: "decision",
              type: "bool",
              indexed: false
            }
          ],
          type: "event",
          name: "ArbitrationMade",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "obligation",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "oracle",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "ArbitrationRequested",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "obligation",
              type: "bytes32"
            },
            {
              internalType: "bool",
              name: "decision",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "arbitrate"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct TrustedOracleArbiter.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "oracle",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_obligation",
              type: "bytes32"
            },
            {
              internalType: "address",
              name: "oracle",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "requestArbitration"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/TrustedOracleArbiter.sol": "TrustedOracleArbiter"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/TrustedOracleArbiter.sol": {
        keccak256: "0x254e74316cee878f6611b7715ef0202697fc6b70c462276dfbd0ae547bf550ff",
        urls: [
          "bzz-raw://6f21c7aec65251cb1c7482071ce7392f2eab379febac0c8666ed1b6f8e479a8d",
          "dweb:/ipfs/QmPBGCsWBujmZ2rYHmomPGzA6cV8cnG9jrihdSZZ3gM4Kd"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 50
};

// src/contracts/TrustedPartyArbiter.ts
var abi28 = {
  abi: [
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "counteroffer",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TrustedPartyArbiter.DemandData",
          components: [
            {
              name: "baseArbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "baseDemand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "creator",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "error",
      name: "NotTrustedParty",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x6080806040523460155761060e908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b634673ab7b60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea264697066735822122010eda76136f64f57ae77d5994a531e9df4cac433f6f1c41c970d2340983c6fe464736f6c634300081b0033",
    sourceMap: "209:896:122:-:0;;;;;;;;;;;;;;;;;",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b634673ab7b60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea264697066735822122010eda76136f64f57ae77d5994a531e9df4cac433f6f1c41c970d2340983c6fe464736f6c634300081b0033",
    sourceMap: "209:896:122:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:896:122;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;:::i;:::-;;;;641:32;;209:896;641:32;;209:896;;;;;;;;;641:32;;209:896;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;-1:-1:-1;209:896:122;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;687:39;683:69;;209:896;873:18;;209:896;;-1:-1:-1;;;782:153:122;;209:896;;782:153;;209:896;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:896:122;;;;;;;;:::i;:::-;;;;;;;782:153;;;;209:896;782:153;;;;;;209:896;782:153;;;209:896;;;;;;;;;;;782:153;;209:896;782:153;;209:896;782:153;;;;;;209:896;782:153;;;:::i;:::-;;;209:896;;;;;;;;;;;;;782:153;;;209:896;;;;782:153;;;-1:-1:-1;782:153:122;;;209:896;;;;;;;;;683:69;735:17;;;209:896;735:17;209:896;;735:17;209:896;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:896:122;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;209:896:122;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:896:122;;;;;;;;-1:-1:-1;;209:896:122;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:122;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:122;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:122;;;;;;:::o;:::-;-1:-1:-1;;;;;209:896:122;;;;;;-1:-1:-1;;209:896:122;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:896:122;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:122;;;;;;:::o",
    linkReferences: {}
  },
  methodIdentifiers: {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"NotTrustedParty","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"address","name":"creator","type":"address"}],"internalType":"struct TrustedPartyArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/deprecated/TrustedPartyArbiter.sol":"TrustedPartyArbiter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/deprecated/TrustedPartyArbiter.sol":{"keccak256":"0x598cacff078f75f663339bcaa44bce8a56ef84a25a1e0badc580b1305147043f","license":"UNLICENSED","urls":["bzz-raw://20767f2d2625fbb5dda5b6545122ff398e97217a902a460187a45da576dae84b","dweb:/ipfs/QmSEpAwmFuRnffhcZATGmmExvmBKRj1qm145kko5NKCLBn"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "NotTrustedParty"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "counteroffer",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct TrustedPartyArbiter.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "baseArbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "baseDemand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "creator",
                  type: "address"
                }
              ]
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/deprecated/TrustedPartyArbiter.sol": "TrustedPartyArbiter"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/deprecated/TrustedPartyArbiter.sol": {
        keccak256: "0x598cacff078f75f663339bcaa44bce8a56ef84a25a1e0badc580b1305147043f",
        urls: [
          "bzz-raw://20767f2d2625fbb5dda5b6545122ff398e97217a902a460187a45da576dae84b",
          "dweb:/ipfs/QmSEpAwmFuRnffhcZATGmmExvmBKRj1qm145kko5NKCLBn"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 122
};

// src/utils.ts
import { parseEventLogs } from "viem";

// src/config.ts
var contractAddresses = {
  "Base Sepolia": {
    eas: "0x4200000000000000000000000000000000000021",
    easSchemaRegistry: "0x4200000000000000000000000000000000000020",
    erc20BarterUtils: "0xF02d5fD6c858b7E7088D5E6912008936846519E5",
    erc20EscrowObligation: "0x3826430c1C358623a76e7E240f186D8ad0aEc1d1",
    erc20PaymentObligation: "0x70573b0A9E98cc9E5E8a9899C1756510057eeC70",
    erc721BarterUtils: "0x83417Ea0b4dE1333C40CC8F98A4Fee2A0BAD8A8F",
    erc721EscrowObligation: "0xAb647525526BeBBE59B23af166F708b0e7A23C31",
    erc721PaymentObligation: "0x64f89f110378219cb9A70Aa175d3936e36e64495",
    erc1155BarterUtils: "0xC5DC89829091D35AD2aBb8c7f32C20eCF30C3eA5",
    erc1155EscrowObligation: "0xe29A8516dd347919cC1939c2113EFD611Ba47a9E",
    erc1155PaymentObligation: "0xE083f6B4b1b5F89e6E2E1E043a1947fa14839A67",
    tokenBundleBarterUtils: "0x1300a5AD4C33F482f106B72fAA72a0e73D7e94eA",
    tokenBundleEscrowObligation: "0x187cc572B48F296A579FC8998FF65e94eaB678f0",
    tokenBundlePaymentObligation: "0xd46EEE3c196D09cCDb752EbB79e3762fA9147E42",
    attestationBarterUtils: "0x20b49D94D71B686db5Da0d4E4Ea76dD158E03C4F",
    attestationEscrowObligation: "0xbeeae6735892f2dEf5F0A3D9EfEC2eAC02324b20",
    attestationEscrowObligation2: "0x11909d3AB6D539469422B5830533c3B9B3dDaF0c",
    stringObligation: "0x655677c421BA84f97D7A17A4A2D5038c8B564dCD",
    trustedPartyArbiter: "0x",
    specificAttestationArbiter: "0x",
    trivialArbiter: "0xeAc6eDB3341b295f6eD815a66B0d7D79216a66B4",
    trustedOracleArbiter: "0xC343eA368bb7c4a54c92a1aB4d46Db38D7CCaf39",
    allArbiter: "0x033EB5BF55fE4d002096232Ca7bDfF600f4e0a2b",
    anyArbiter: "0x0e1B34fB00AfD95e7dD7a686B676C6bB7efA2481",
    notArbiter: "0x6f9BFDF8556e6619D525ae9c13849090c0Cf886f",
    intrinsicsArbiter: "0xB950a89e42570Bd9cdf4f800F830bE095706CFf9",
    intrinsicsArbiter2: "0x16Bc823B27d964bbb6b48592b8b2E019b4897C62",
    erc8004Arbiter: "0xbF27542802e10c7370eb12fe5Cc4cc33521B46B0",
    confirmationArbiter: "0x10BC6135736A94AbB538C83ab03affd8e4aEe49D",
    confirmationArbiterComposing: "0xDB68575Ca35D926dB9045d367C6878F27d79eA5B",
    revocableConfirmationArbiter: "0xB74eBd0C5acdfDfD9222D4B9985aF79d537aaED7",
    revocableConfirmationArbiterComposing: "0xCa06fF3Cbd798F4A5777BBDf3B3A0bFc7d48e7cf",
    unrevocableConfirmationArbiter: "0x063B177e2765658183C28caD8BC35458cb0Be8e1",
    unrevocableArbiterComposing: "0x1ab005Af053246674cF3bF19747b55F34D49D6aA",
    nativeTokenEscrowObligation: "0x5Cd459c5775bEB4aDBbB5E6e0714E7CBefa7103a",
    nativeTokenPaymentObligation: "0x82c4778699A498e07E31ee0678F1Db146CA47e50",
    nativeTokenBarterUtils: "0x592C653B1d28787c645528dfF84D06A26eE3E9c5"
  },
  "Filecoin Calibration": {
    eas: "0x3c79a0225380fb6f3cb990ffc4e3d5af4546b524",
    easSchemaRegistry: "0x2bb94a4e6ec0d81de7f81007b572ac09a5be37b4",
    specificAttestationArbiter: "0x10788ba2c4c65d1e97bc6005436b61c2c2e51572",
    trustedPartyArbiter: "0xed550301b3258612509615bbddd4b2383cf32df4",
    trivialArbiter: "0x6e9bc0d34fff16140401fc51653347be0a1f0ec0",
    trustedOracleArbiter: "0x5f1db54dbc5006894ef6c43b2174c05ccaa250ec",
    stringObligation: "0xbb022fc36d0cc97b6cae5a2e15d45b7a9ad46f99",
    erc20EscrowObligation: "0x235792a6d077a04fb190a19f362acecab7866ab5",
    erc20PaymentObligation: "0xd8b6199aa91992f5d3bafddc3372b391e46c92ce",
    erc721EscrowObligation: "0x336f2f91b093001edd90e49216422b33b8b4e03b",
    erc721PaymentObligation: "0x4b9b6ff4a7c2bc89eee6f28355b9a94e6649bbf8",
    erc1155EscrowObligation: "0x96c14b182cd99a09ddddc6b755ba0c4ed3d6991c",
    erc1155PaymentObligation: "0x903caa028b1848ab8fdd15c4ccd20c4e7be2b1c0",
    tokenBundleEscrowObligation: "0xdcc1104325d9d99c6bd5faa0804a7d743f3d0c20",
    tokenBundlePaymentObligation: "0xab43cce34a7b831fa7ab134bcdc21a6ba20882b6",
    tokenBundleBarterUtils: "0xb63cf08c6623f69d2ad34e37b8a68cca6c125d49",
    erc20BarterUtils: "0xaeeddd0a2f24f7286eae7e7fa5cea746fcf064fc",
    erc721BarterUtils: "0x2129f46737135fe4ebb3c49953487122088bc739",
    erc1155BarterUtils: "0x66b7398b2bb322bb4a480ae370142c02c52b886a",
    attestationEscrowObligation: "0x553e4de0916074201a9d32123efcc8f734ee5675",
    attestationEscrowObligation2: "0x11c3931f2715d8fca8ea5ca79fac4bbbcdbe9903",
    attestationBarterUtils: "0x0c19138441e1bee2964e65e0edf1702d59a2e786",
    anyArbiter: "0x",
    allArbiter: "0x",
    notArbiter: "0x",
    intrinsicsArbiter: "0x",
    intrinsicsArbiter2: "0x",
    erc8004Arbiter: "0x",
    confirmationArbiter: "0x",
    confirmationArbiterComposing: "0x",
    revocableConfirmationArbiter: "0x",
    revocableConfirmationArbiterComposing: "0x",
    unrevocableConfirmationArbiter: "0x",
    unrevocableArbiterComposing: "0x",
    nativeTokenEscrowObligation: "0x",
    nativeTokenPaymentObligation: "0x",
    nativeTokenBarterUtils: "0x"
  }
};
var supportedChains = ["Base Sepolia", "Filecoin Calibration"];

// src/contracts/IEAS.ts
var abi29 = {
  abi: [
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "request",
          type: "tuple",
          internalType: "struct AttestationRequest",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple",
              internalType: "struct AttestationRequestData",
              components: [
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "expirationTime",
                  type: "uint64",
                  internalType: "uint64"
                },
                {
                  name: "revocable",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "refUID",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "attestByDelegation",
      inputs: [
        {
          name: "delegatedRequest",
          type: "tuple",
          internalType: "struct DelegatedAttestationRequest",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple",
              internalType: "struct AttestationRequestData",
              components: [
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "expirationTime",
                  type: "uint64",
                  internalType: "uint64"
                },
                {
                  name: "revocable",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "refUID",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "signature",
              type: "tuple",
              internalType: "struct Signature",
              components: [
                {
                  name: "v",
                  type: "uint8",
                  internalType: "uint8"
                },
                {
                  name: "r",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "s",
                  type: "bytes32",
                  internalType: "bytes32"
                }
              ]
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "deadline",
              type: "uint64",
              internalType: "uint64"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "getAttestation",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getRevokeOffchain",
      inputs: [
        {
          name: "revoker",
          type: "address",
          internalType: "address"
        },
        {
          name: "data",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchemaRegistry",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getTimestamp",
      inputs: [
        {
          name: "data",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isAttestationValid",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "multiRequests",
          type: "tuple[]",
          internalType: "struct MultiAttestationRequest[]",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple[]",
              internalType: "struct AttestationRequestData[]",
              components: [
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "expirationTime",
                  type: "uint64",
                  internalType: "uint64"
                },
                {
                  name: "revocable",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "refUID",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32[]",
          internalType: "bytes32[]"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiAttestByDelegation",
      inputs: [
        {
          name: "multiDelegatedRequests",
          type: "tuple[]",
          internalType: "struct MultiDelegatedAttestationRequest[]",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple[]",
              internalType: "struct AttestationRequestData[]",
              components: [
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "expirationTime",
                  type: "uint64",
                  internalType: "uint64"
                },
                {
                  name: "revocable",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "refUID",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "signatures",
              type: "tuple[]",
              internalType: "struct Signature[]",
              components: [
                {
                  name: "v",
                  type: "uint8",
                  internalType: "uint8"
                },
                {
                  name: "r",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "s",
                  type: "bytes32",
                  internalType: "bytes32"
                }
              ]
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "deadline",
              type: "uint64",
              internalType: "uint64"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32[]",
          internalType: "bytes32[]"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "multiRequests",
          type: "tuple[]",
          internalType: "struct MultiRevocationRequest[]",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple[]",
              internalType: "struct RevocationRequestData[]",
              components: [
                {
                  name: "uid",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevokeByDelegation",
      inputs: [
        {
          name: "multiDelegatedRequests",
          type: "tuple[]",
          internalType: "struct MultiDelegatedRevocationRequest[]",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple[]",
              internalType: "struct RevocationRequestData[]",
              components: [
                {
                  name: "uid",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "signatures",
              type: "tuple[]",
              internalType: "struct Signature[]",
              components: [
                {
                  name: "v",
                  type: "uint8",
                  internalType: "uint8"
                },
                {
                  name: "r",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "s",
                  type: "bytes32",
                  internalType: "bytes32"
                }
              ]
            },
            {
              name: "revoker",
              type: "address",
              internalType: "address"
            },
            {
              name: "deadline",
              type: "uint64",
              internalType: "uint64"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevokeOffchain",
      inputs: [
        {
          name: "data",
          type: "bytes32[]",
          internalType: "bytes32[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "multiTimestamp",
      inputs: [
        {
          name: "data",
          type: "bytes32[]",
          internalType: "bytes32[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "request",
          type: "tuple",
          internalType: "struct RevocationRequest",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple",
              internalType: "struct RevocationRequestData",
              components: [
                {
                  name: "uid",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revokeByDelegation",
      inputs: [
        {
          name: "delegatedRequest",
          type: "tuple",
          internalType: "struct DelegatedRevocationRequest",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple",
              internalType: "struct RevocationRequestData",
              components: [
                {
                  name: "uid",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "signature",
              type: "tuple",
              internalType: "struct Signature",
              components: [
                {
                  name: "v",
                  type: "uint8",
                  internalType: "uint8"
                },
                {
                  name: "r",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "s",
                  type: "bytes32",
                  internalType: "bytes32"
                }
              ]
            },
            {
              name: "revoker",
              type: "address",
              internalType: "address"
            },
            {
              name: "deadline",
              type: "uint64",
              internalType: "uint64"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revokeOffchain",
      inputs: [
        {
          name: "data",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "timestamp",
      inputs: [
        {
          name: "data",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "Attested",
      inputs: [
        {
          name: "recipient",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "attester",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "uid",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32"
        },
        {
          name: "schemaUID",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Revoked",
      inputs: [
        {
          name: "recipient",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "attester",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "uid",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32"
        },
        {
          name: "schemaUID",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "RevokedOffchain",
      inputs: [
        {
          name: "revoker",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "data",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "timestamp",
          type: "uint64",
          indexed: true,
          internalType: "uint64"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Timestamped",
      inputs: [
        {
          name: "data",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "timestamp",
          type: "uint64",
          indexed: true,
          internalType: "uint64"
        }
      ],
      anonymous: false
    }
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  methodIdentifiers: {
    "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": "f17325e7",
    "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": "3c042715",
    "getAttestation(bytes32)": "a3112a64",
    "getRevokeOffchain(address,bytes32)": "b469318d",
    "getSchemaRegistry()": "f10b5cc8",
    "getTimestamp(bytes32)": "d45c4435",
    "isAttestationValid(bytes32)": "e30bb563",
    "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": "44adc90e",
    "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": "95411525",
    "multiRevoke((bytes32,(bytes32,uint256)[])[])": "4cb7e9e5",
    "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": "0eabf660",
    "multiRevokeOffchain(bytes32[])": "13893f61",
    "multiTimestamp(bytes32[])": "e71ff365",
    "revoke((bytes32,(bytes32,uint256)))": "46926267",
    "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": "a6d4dbc7",
    "revokeOffchain(bytes32)": "cf190f34",
    "timestamp(bytes32)": "4d003070",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID of the new attestation."}},"Revoked(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"params":{"request":"The arguments of the attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attest({         schema: \\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\",         data: {             recipient: \\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\",             expirationTime: 0,             revocable: true,             refUID: \\"0x0000000000000000000000000000000000000000000000000000000000000000\\",             data: \\"0xF00D\\",             value: 0         }     })"}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"}},"getAttestation(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"}},"multiRevokeOffchain(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"params":{"request":"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"}},"revokeOffchain(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"IEAS","version":1},"userdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been made."},"Revoked(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been revoked."},"RevokedOffchain(address,bytes32,uint64)":{"notice":"Emitted when a data has been revoked."},"Timestamped(bytes32,uint64)":{"notice":"Emitted when a data has been timestamped."}},"kind":"user","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"notice":"Attests to a specific schema."},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Attests to a specific schema via the provided ECDSA signature."},"getAttestation(bytes32)":{"notice":"Returns an existing attestation by UID."},"getRevokeOffchain(address,bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"getSchemaRegistry()":{"notice":"Returns the address of the global schema registry."},"getTimestamp(bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"isAttestationValid(bytes32)":{"notice":"Checks whether an attestation exists."},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"notice":"Attests to multiple schemas."},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Attests to multiple schemas using via provided ECDSA signatures."},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"notice":"Revokes existing attestations to multiple schemas."},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Revokes existing attestations to multiple schemas via provided ECDSA signatures."},"multiRevokeOffchain(bytes32[])":{"notice":"Revokes the specified multiple bytes32 data."},"multiTimestamp(bytes32[])":{"notice":"Timestamps the specified multiple bytes32 data."},"revoke((bytes32,(bytes32,uint256)))":{"notice":"Revokes an existing attestation to a specific schema."},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Revokes an existing attestation to a specific schema via the provided ECDSA signature."},"revokeOffchain(bytes32)":{"notice":"Revokes the specified bytes32 data."},"timestamp(bytes32)":{"notice":"Timestamps the specified bytes32 data."},"version()":{"notice":"Returns the full semver contract version."}},"notice":"EAS - Ethereum Attestation Service interface.","version":1}},"settings":{"compilationTarget":{"lib/eas-contracts/contracts/IEAS.sol":"IEAS"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "recipient",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "attester",
              type: "address",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32",
              indexed: false
            },
            {
              internalType: "bytes32",
              name: "schemaUID",
              type: "bytes32",
              indexed: true
            }
          ],
          type: "event",
          name: "Attested",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "recipient",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "attester",
              type: "address",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32",
              indexed: false
            },
            {
              internalType: "bytes32",
              name: "schemaUID",
              type: "bytes32",
              indexed: true
            }
          ],
          type: "event",
          name: "Revoked",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "revoker",
              type: "address",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "uint64",
              name: "timestamp",
              type: "uint64",
              indexed: true
            }
          ],
          type: "event",
          name: "RevokedOffchain",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "uint64",
              name: "timestamp",
              type: "uint64",
              indexed: true
            }
          ],
          type: "event",
          name: "Timestamped",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "struct AttestationRequest",
              name: "request",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct AttestationRequestData",
                  name: "data",
                  type: "tuple",
                  components: [
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address"
                    },
                    {
                      internalType: "uint64",
                      name: "expirationTime",
                      type: "uint64"
                    },
                    {
                      internalType: "bool",
                      name: "revocable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes32",
                      name: "refUID",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes",
                      name: "data",
                      type: "bytes"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct DelegatedAttestationRequest",
              name: "delegatedRequest",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct AttestationRequestData",
                  name: "data",
                  type: "tuple",
                  components: [
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address"
                    },
                    {
                      internalType: "uint64",
                      name: "expirationTime",
                      type: "uint64"
                    },
                    {
                      internalType: "bool",
                      name: "revocable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes32",
                      name: "refUID",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes",
                      name: "data",
                      type: "bytes"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                },
                {
                  internalType: "struct Signature",
                  name: "signature",
                  type: "tuple",
                  components: [
                    {
                      internalType: "uint8",
                      name: "v",
                      type: "uint8"
                    },
                    {
                      internalType: "bytes32",
                      name: "r",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes32",
                      name: "s",
                      type: "bytes32"
                    }
                  ]
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attestByDelegation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getAttestation",
          outputs: [
            {
              internalType: "struct Attestation",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "revoker",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getRevokeOffchain",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchemaRegistry",
          outputs: [
            {
              internalType: "contract ISchemaRegistry",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getTimestamp",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "isAttestationValid",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct MultiAttestationRequest[]",
              name: "multiRequests",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct AttestationRequestData[]",
                  name: "data",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address"
                    },
                    {
                      internalType: "uint64",
                      name: "expirationTime",
                      type: "uint64"
                    },
                    {
                      internalType: "bool",
                      name: "revocable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes32",
                      name: "refUID",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes",
                      name: "data",
                      type: "bytes"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bytes32[]",
              name: "",
              type: "bytes32[]"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct MultiDelegatedAttestationRequest[]",
              name: "multiDelegatedRequests",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct AttestationRequestData[]",
                  name: "data",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address"
                    },
                    {
                      internalType: "uint64",
                      name: "expirationTime",
                      type: "uint64"
                    },
                    {
                      internalType: "bool",
                      name: "revocable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes32",
                      name: "refUID",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes",
                      name: "data",
                      type: "bytes"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                },
                {
                  internalType: "struct Signature[]",
                  name: "signatures",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "uint8",
                      name: "v",
                      type: "uint8"
                    },
                    {
                      internalType: "bytes32",
                      name: "r",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes32",
                      name: "s",
                      type: "bytes32"
                    }
                  ]
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttestByDelegation",
          outputs: [
            {
              internalType: "bytes32[]",
              name: "",
              type: "bytes32[]"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct MultiRevocationRequest[]",
              name: "multiRequests",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct RevocationRequestData[]",
                  name: "data",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "uid",
                      type: "bytes32"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke"
        },
        {
          inputs: [
            {
              internalType: "struct MultiDelegatedRevocationRequest[]",
              name: "multiDelegatedRequests",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct RevocationRequestData[]",
                  name: "data",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "uid",
                      type: "bytes32"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                },
                {
                  internalType: "struct Signature[]",
                  name: "signatures",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "uint8",
                      name: "v",
                      type: "uint8"
                    },
                    {
                      internalType: "bytes32",
                      name: "r",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes32",
                      name: "s",
                      type: "bytes32"
                    }
                  ]
                },
                {
                  internalType: "address",
                  name: "revoker",
                  type: "address"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevokeByDelegation"
        },
        {
          inputs: [
            {
              internalType: "bytes32[]",
              name: "data",
              type: "bytes32[]"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "multiRevokeOffchain",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32[]",
              name: "data",
              type: "bytes32[]"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "multiTimestamp",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct RevocationRequest",
              name: "request",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct RevocationRequestData",
                  name: "data",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "uid",
                      type: "bytes32"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke"
        },
        {
          inputs: [
            {
              internalType: "struct DelegatedRevocationRequest",
              name: "delegatedRequest",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct RevocationRequestData",
                  name: "data",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "uid",
                      type: "bytes32"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                },
                {
                  internalType: "struct Signature",
                  name: "signature",
                  type: "tuple",
                  components: [
                    {
                      internalType: "uint8",
                      name: "v",
                      type: "uint8"
                    },
                    {
                      internalType: "bytes32",
                      name: "r",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes32",
                      name: "s",
                      type: "bytes32"
                    }
                  ]
                },
                {
                  internalType: "address",
                  name: "revoker",
                  type: "address"
                },
                {
                  internalType: "uint64",
                  name: "deadline",
                  type: "uint64"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revokeByDelegation"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "revokeOffchain",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "data",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "timestamp",
          outputs: [
            {
              internalType: "uint64",
              name: "",
              type: "uint64"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": {
            params: {
              request: "The arguments of the attestation request."
            },
            returns: {
              _0: 'The UID of the new attestation. Example:     attest({         schema: "0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0",         data: {             recipient: "0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf",             expirationTime: 0,             revocable: true,             refUID: "0x0000000000000000000000000000000000000000000000000000000000000000",             data: "0xF00D",             value: 0         }     })'
            }
          },
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            params: {
              delegatedRequest: "The arguments of the delegated attestation request."
            },
            returns: {
              _0: "The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"
            }
          },
          "getAttestation(bytes32)": {
            params: {
              uid: "The UID of the attestation to retrieve."
            },
            returns: {
              _0: "The attestation data members."
            }
          },
          "getRevokeOffchain(address,bytes32)": {
            params: {
              data: "The data to query."
            },
            returns: {
              _0: "The timestamp the data was timestamped with."
            }
          },
          "getSchemaRegistry()": {
            returns: {
              _0: "The address of the global schema registry."
            }
          },
          "getTimestamp(bytes32)": {
            params: {
              data: "The data to query."
            },
            returns: {
              _0: "The timestamp the data was timestamped with."
            }
          },
          "isAttestationValid(bytes32)": {
            params: {
              uid: "The UID of the attestation to retrieve."
            },
            returns: {
              _0: "Whether an attestation exists."
            }
          },
          "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": {
            params: {
              multiRequests: "The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."
            },
            returns: {
              _0: "The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"
            }
          },
          "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            params: {
              multiDelegatedRequests: "The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."
            },
            returns: {
              _0: "The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"
            }
          },
          "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
            params: {
              multiRequests: "The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"
            }
          },
          "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            params: {
              multiDelegatedRequests: "The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"
            }
          },
          "multiRevokeOffchain(bytes32[])": {
            params: {
              data: "The data to timestamp."
            },
            returns: {
              _0: "The timestamp the data was revoked with."
            }
          },
          "multiTimestamp(bytes32[])": {
            params: {
              data: "The data to timestamp."
            },
            returns: {
              _0: "The timestamp the data was timestamped with."
            }
          },
          "revoke((bytes32,(bytes32,uint256)))": {
            params: {
              request: "The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"
            }
          },
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            params: {
              delegatedRequest: "The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"
            }
          },
          "revokeOffchain(bytes32)": {
            params: {
              data: "The data to timestamp."
            },
            returns: {
              _0: "The timestamp the data was revoked with."
            }
          },
          "timestamp(bytes32)": {
            params: {
              data: "The data to timestamp."
            },
            returns: {
              _0: "The timestamp the data was timestamped with."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": {
            notice: "Attests to a specific schema."
          },
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            notice: "Attests to a specific schema via the provided ECDSA signature."
          },
          "getAttestation(bytes32)": {
            notice: "Returns an existing attestation by UID."
          },
          "getRevokeOffchain(address,bytes32)": {
            notice: "Returns the timestamp that the specified data was timestamped with."
          },
          "getSchemaRegistry()": {
            notice: "Returns the address of the global schema registry."
          },
          "getTimestamp(bytes32)": {
            notice: "Returns the timestamp that the specified data was timestamped with."
          },
          "isAttestationValid(bytes32)": {
            notice: "Checks whether an attestation exists."
          },
          "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": {
            notice: "Attests to multiple schemas."
          },
          "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            notice: "Attests to multiple schemas using via provided ECDSA signatures."
          },
          "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
            notice: "Revokes existing attestations to multiple schemas."
          },
          "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            notice: "Revokes existing attestations to multiple schemas via provided ECDSA signatures."
          },
          "multiRevokeOffchain(bytes32[])": {
            notice: "Revokes the specified multiple bytes32 data."
          },
          "multiTimestamp(bytes32[])": {
            notice: "Timestamps the specified multiple bytes32 data."
          },
          "revoke((bytes32,(bytes32,uint256)))": {
            notice: "Revokes an existing attestation to a specific schema."
          },
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            notice: "Revokes an existing attestation to a specific schema via the provided ECDSA signature."
          },
          "revokeOffchain(bytes32)": {
            notice: "Revokes the specified bytes32 data."
          },
          "timestamp(bytes32)": {
            notice: "Timestamps the specified bytes32 data."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "lib/eas-contracts/contracts/IEAS.sol": "IEAS"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      }
    },
    version: 1
  },
  id: 2
};

// src/utils.ts
var isWebSocketTransport = (viemClient) => {
  const transport = viemClient.transport;
  return transport.type === "webSocket" || // Additional check for subscription capabilities
  typeof transport === "object" && transport !== null && "subscribe" in transport;
};
var getOptimalPollingInterval = (viemClient, defaultInterval = 1e3) => {
  return isWebSocketTransport(viemClient) ? void 0 : defaultInterval;
};
var getAttestation = async (viemClient, uid, addresses) => {
  const easAddress = addresses?.eas ?? contractAddresses[viemClient.chain.name]?.eas;
  if (!easAddress) {
    throw new Error(`No EAS address found for chain ${viemClient.chain.name}`);
  }
  const attestation = await viemClient.readContract({
    address: easAddress,
    abi: abi29.abi,
    functionName: "getAttestation",
    args: [uid]
  });
  return attestation;
};
var getAttestedEventFromTxHash = async (client, hash) => {
  let tx;
  try {
    tx = await client.waitForTransactionReceipt({ hash });
  } catch (error) {
    throw new Error(`Failed to get transaction receipt for ${hash}: ${error}`);
  }
  const events = parseEventLogs({
    abi: abi29.abi,
    eventName: "Attested",
    logs: tx.logs
  });
  if (events.length === 0 || !events[0]) {
    throw new Error(`No Attested event found in transaction ${hash}`);
  }
  return events[0].args;
};
var flattenTokenBundle = (bundle) => ({
  erc20Tokens: bundle.erc20s.map((x) => x.address),
  erc20Amounts: bundle.erc20s.map((x) => x.value),
  erc721Tokens: bundle.erc721s.map((x) => x.address),
  erc721TokenIds: bundle.erc721s.map((x) => x.id),
  erc1155Tokens: bundle.erc1155s.map((x) => x.address),
  erc1155TokenIds: bundle.erc1155s.map((x) => x.id),
  erc1155Amounts: bundle.erc1155s.map((x) => x.value)
});

// src/clients/generalArbiters.ts
var intrinsicsArbiter2DecodeDemandFunction = getAbiItem2({
  abi: abi25.abi,
  name: "decodeDemandData"
});
var trustedPartyArbiterDecodeDemandFunction = getAbiItem2({
  abi: abi28.abi,
  name: "decodeDemandData"
});
var specificAttestationArbiterDecodeDemandFunction = getAbiItem2({
  abi: abi26.abi,
  name: "decodeDemandData"
});
var trustedOracleArbiterDecodeDemandFunction = getAbiItem2({
  abi: abi27.abi,
  name: "decodeDemandData"
});
var intrinsicsArbiter2DemandDataType = intrinsicsArbiter2DecodeDemandFunction.outputs[0];
var trustedPartyArbiterDemandDataType = trustedPartyArbiterDecodeDemandFunction.outputs[0];
var specificAttestationArbiterDemandDataType = specificAttestationArbiterDecodeDemandFunction.outputs[0];
var trustedOracleArbiterDemandDataType = trustedOracleArbiterDecodeDemandFunction.outputs[0];
var makeGeneralArbitersClient = (viemClient, addresses) => {
  const arbitrationMadeEvent = parseAbiItem(
    "event ArbitrationMade(bytes32 indexed obligation, address indexed oracle, bool decision)"
  );
  const arbitrationRequestedEvent = parseAbiItem(
    "event ArbitrationRequested(bytes32 indexed obligation, address indexed oracle)"
  );
  return {
    /**
     * Encodes IntrinsicsArbiter2.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 schema}
     * @returns abi encoded bytes
     */
    encodeIntrinsics2Demand: (demand) => {
      return encodeAbiParameters2([intrinsicsArbiter2DemandDataType], [demand]);
    },
    /**
     * Decodes IntrinsicsArbiter2.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeIntrinsics2Demand: (demandData) => {
      return decodeAbiParameters2([intrinsicsArbiter2DemandDataType], demandData)[0];
    },
    /**
     * Encodes TrustedPartyArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address creator}
     * @returns abi encoded bytes
     */
    encodeTrustedPartyDemand: (demand) => {
      return encodeAbiParameters2([trustedPartyArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes TrustedPartyArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeTrustedPartyDemand: (demandData) => {
      return decodeAbiParameters2([trustedPartyArbiterDemandDataType], demandData)[0];
    },
    /**
     * Encodes SpecificAttestationArbiter.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 uid}
     * @returns abi encoded bytes
     */
    encodeSpecificAttestationDemand: (demand) => {
      return encodeAbiParameters2([specificAttestationArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes SpecificAttestationArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeSpecificAttestationDemand: (demandData) => {
      return decodeAbiParameters2([specificAttestationArbiterDemandDataType], demandData)[0];
    },
    /**
     * Encodes TrustedOracleArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address oracle, bytes data}
     * @returns abi encoded bytes
     */
    encodeTrustedOracleDemand: (demand) => {
      return encodeAbiParameters2([trustedOracleArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes TrustedOracleArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeTrustedOracleDemand: (demandData) => {
      return decodeAbiParameters2([trustedOracleArbiterDemandDataType], demandData)[0];
    },
    /**
     * Arbitrate on the validality of an obligation fulfilling
     * a demand for TrustedOracleArbiter
     * @param obligation - bytes32 obligation
     * @param decision - bool decision
     * @returns transaction hash
     */
    arbitrateAsTrustedOracle: async (obligation, decision) => {
      const hash = await viemClient.writeContract({
        address: addresses.trustedOracleArbiter,
        abi: abi27.abi,
        functionName: "arbitrate",
        args: [obligation, decision]
      });
      return hash;
    },
    /**
     * Request arbitration on an obligation from TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle to request arbitration from
     * @returns transaction hash
     */
    requestArbitrationFromTrustedOracle: async (obligation, oracle) => {
      const hash = await viemClient.writeContract({
        address: addresses.trustedOracleArbiter,
        abi: abi27.abi,
        functionName: "requestArbitration",
        args: [obligation, oracle]
      });
      return hash;
    },
    /**
     * Check if an arbitration has already been made for a specific obligation by a specific oracle
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @returns the arbitration result if exists, undefined if not
     */
    checkExistingArbitration: async (obligation, oracle) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationMadeEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length > 0 && logs[0]) {
        return logs[0].args;
      }
      return void 0;
    },
    /**
     * Wait for an arbitration to be made on a TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns the event args
     */
    waitForTrustedOracleArbitration: async (obligation, oracle, pollingInterval) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationMadeEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0]) return logs[0].args;
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: addresses.trustedOracleArbiter,
          event: arbitrationMadeEvent,
          args: { obligation, oracle },
          pollingInterval: optimalInterval,
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve(logs2[0].args);
            unwatch();
          },
          fromBlock: 1n
        });
      });
    },
    /**
     * Wait for an arbitration request to be made on a TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns the event args
     */
    waitForTrustedOracleArbitrationRequest: async (obligation, oracle, pollingInterval) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationRequestedEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0]) return logs[0].args;
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: addresses.trustedOracleArbiter,
          event: arbitrationRequestedEvent,
          args: { obligation, oracle },
          pollingInterval: optimalInterval,
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve(logs2[0].args);
            unwatch();
          },
          fromBlock: 1n
        });
      });
    },
    /**
     * Listen for arbitration requests and only arbitrate on request
     * This function continuously listens for ArbitrationRequested events
     * and calls the provided arbitration handler for each request
     * @param oracle - address of the oracle (filter for requests to this oracle)
     * @param arbitrationHandler - function to handle arbitration requests
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns unwatch function to stop listening
     */
    listenForArbitrationRequestsOnly: (oracle, arbitrationHandler, pollingInterval) => {
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return viemClient.watchEvent({
        address: addresses.trustedOracleArbiter,
        event: arbitrationRequestedEvent,
        args: { oracle },
        pollingInterval: optimalInterval,
        onLogs: async (logs) => {
          for (const log of logs) {
            const { obligation: requestedObligation, oracle: requestedOracle } = log.args;
            if (requestedObligation && requestedOracle) {
              try {
                const decision = await arbitrationHandler(requestedObligation, requestedOracle);
                await viemClient.writeContract({
                  address: addresses.trustedOracleArbiter,
                  abi: abi27.abi,
                  functionName: "arbitrate",
                  args: [requestedObligation, decision]
                });
              } catch (error) {
                console.error(`Failed to arbitrate for obligation ${requestedObligation}:`, error);
              }
            }
          }
        },
        fromBlock: 1n
      });
    }
  };
};

// src/clients/logicalArbiters.ts
import { decodeAbiParameters as decodeAbiParameters3, encodeAbiParameters as encodeAbiParameters3, getAbiItem as getAbiItem3 } from "viem";

// src/contracts/AllArbiter.ts
var abi30 = {
  abi: [
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "counteroffer",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AllArbiter.DemandData",
          components: [
            {
              name: "arbiters",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "demands",
              type: "bytes[]",
              internalType: "bytes[]"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "error",
      name: "MismatchedArrayLengths",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x60808060405234601557610884908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082e57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c857505050505060208401918083528451519051036107b9575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa9081156107a3575f91610769575b501561076057600101610635565b50505050505f90565b90506020813d821161079b575b8161078360209383610428565b8101031261016857518015158103610168575f610752565b3d9150610776565b6040513d5f823e3d90fd5b505050505050600190565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f483610471565b6108016040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea264697066735822122042b950ea72cf4fd15f0482308a928bdd165e156b1ecb4bfcb752f26381f5564964736f6c634300081b0033",
    sourceMap: "209:1250:124:-:0;;;;;;;;;;;;;;;;;",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082e57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c857505050505060208401918083528451519051036107b9575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa9081156107a3575f91610769575b501561076057600101610635565b50505050505f90565b90506020813d821161079b575b8161078360209383610428565b8101031261016857518015158103610168575f610752565b3d9150610776565b6040513d5f823e3d90fd5b505050505050600190565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f483610471565b6108016040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea264697066735822122042b950ea72cf4fd15f0482308a928bdd165e156b1ecb4bfcb752f26381f5564964736f6c634300081b0033",
    sourceMap: "209:1250:124:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1250:124;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1250:124;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;-1:-1:-1;209:1250:124;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:1250:124;;;;;;;;-1:-1:-1;;209:1250:124;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1250:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1250:124;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1250:124;;;;;;-1:-1:-1;;209:1250:124;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:1250:124;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1250:124;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;418:878;;;209:1250;;621:32;;;;;;209:1250;621:32;209:1250;;;;;;621:32;;;209:1250;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;:::i;:::-;621:32;209:1250;;;-1:-1:-1;;;;;209:1250:124;;;;621:32;209:1250;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1250;;;;;;;;;;;;;;;621:32;209:1250;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;621:32;209:1250;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1250;;;;;;;;;;;;;;;621:32;209:1250;;;;;;;;;;;;;;621:32;209:1250;;;;;;667:16;;209:1250;;;667:49;663:98;;209:1250;821:3;796:16;;209:1250;;792:27;;;;;209:1250;;621:32;;-1:-1:-1;;;;;209:1250:124;1039:19;;209:1250;;1039:19;:::i;:::-;209:1250;;1129:18;:15;;;:18;:::i;:::-;;209:1250;;;;;;;;;;;1030:169;;209:1250;1030:169;;;209:1250;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:1250:124;;;;;;;:::i;:::-;;;;;;1030:169;;;;;;;;;209:1250;1030:169;;;821:3;1029:170;;840:419;;209:1250;;777:13;;840:419;1232:12;;;;;209:1250;1232:12;:::o;1030:169::-;;;621:32;1030:169;;;;;;;;;621:32;1030:169;;;:::i;:::-;;;209:1250;;;;;;;;;;;;1030:169;;;;;;-1:-1:-1;1030:169:124;;;209:1250;;;;;;;;;792:27;;;;;;;209:1250;418:878;:::o;663:98::-;737:24;;;209:1250;737:24;;209:1250;737:24;209:1250;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;;;;;;;621:32;209:1250;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;209:1250:124;;;621:32;209:1250;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:124;;;;;;;;621:32;209:1250;;;;;;",
    linkReferences: {}
  },
  methodIdentifiers: {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"MismatchedArrayLengths","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address[]","name":"arbiters","type":"address[]"},{"internalType":"bytes[]","name":"demands","type":"bytes[]"}],"internalType":"struct AllArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/logical/AllArbiter.sol":"AllArbiter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/logical/AllArbiter.sol":{"keccak256":"0x2ef93f84a7af5d0e8b0c130b9843745c206a89abdb32f3fecdc8249630581185","license":"UNLICENSED","urls":["bzz-raw://fe3e7288f2f558ca43e9951df3d4172546796152034c5ae1e8a252399ee2f531","dweb:/ipfs/QmQdE3K9i26CtWRGoWMhhrgtqqFkypDcppehkvEGHVrLpP"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "MismatchedArrayLengths"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "counteroffer",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct AllArbiter.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "arbiters",
                  type: "address[]"
                },
                {
                  internalType: "bytes[]",
                  name: "demands",
                  type: "bytes[]"
                }
              ]
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/logical/AllArbiter.sol": "AllArbiter"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/logical/AllArbiter.sol": {
        keccak256: "0x2ef93f84a7af5d0e8b0c130b9843745c206a89abdb32f3fecdc8249630581185",
        urls: [
          "bzz-raw://fe3e7288f2f558ca43e9951df3d4172546796152034c5ae1e8a252399ee2f531",
          "dweb:/ipfs/QmQdE3K9i26CtWRGoWMhhrgtqqFkypDcppehkvEGHVrLpP"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 124
};

// src/contracts/AnyArbiter.ts
var abi31 = {
  abi: [
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "counteroffer",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeDemandData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AnyArbiter.DemandData",
          components: [
            {
              name: "arbiters",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "demands",
              type: "bytes[]",
              internalType: "bytes[]"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "error",
      name: "MismatchedArrayLengths",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x60808060405234601557610883908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082d57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c757505050505060208401918083528451519051036107b8575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa5f9181610772575b5061075c57506001905b01610635565b61076857600190610756565b5050505050600190565b9091506020813d82116107a6575b8161078d60209383610428565b810103126101685751801515810361016857905f61074c565b3d9150610780565b5050505050505f90565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f383610471565b6108006040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea2646970667358221220541195d7c265f49c63c22385a00afe00b95a426608ed643d8fda3c0859001f1864736f6c634300081b0033",
    sourceMap: "209:1372:125:-:0;;;;;;;;;;;;;;;;;",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082d57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c757505050505060208401918083528451519051036107b8575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa5f9181610772575b5061075c57506001905b01610635565b61076857600190610756565b5050505050600190565b9091506020813d82116107a6575b8161078d60209383610428565b810103126101685751801515810361016857905f61074c565b3d9150610780565b5050505050505f90565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f383610471565b6108006040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea2646970667358221220541195d7c265f49c63c22385a00afe00b95a426608ed643d8fda3c0859001f1864736f6c634300081b0033",
    sourceMap: "209:1372:125:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1372:125;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1372:125;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;-1:-1:-1;209:1372:125;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:1372:125;;;;;;;;-1:-1:-1;;209:1372:125;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1372:125;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1372:125;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1372:125;;;;;;-1:-1:-1;;209:1372:125;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:1372:125;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1372:125;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;418:1000;;;209:1372;;621:32;;;;;;209:1372;621:32;209:1372;;;;;;621:32;;;209:1372;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;:::i;:::-;621:32;209:1372;;;-1:-1:-1;;;;;209:1372:125;;;;621:32;209:1372;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1372;;;;;;;;;;;;;;;621:32;209:1372;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;621:32;209:1372;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1372;;;;;;;;;;;;;;;621:32;209:1372;;;;;;;;;;;;;;621:32;209:1372;;;;;;667:16;;209:1372;;;667:49;663:98;;209:1372;821:3;796:16;;209:1372;;792:27;;;;;209:1372;;621:32;;-1:-1:-1;;;;;209:1372:125;970:19;;209:1372;;970:19;:::i;:::-;209:1372;;1060:18;:15;;;:18;:::i;:::-;;209:1372;;;;;;;;;;;961:169;;209:1372;961:169;;;209:1372;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:1372:125;;;;;;;:::i;:::-;;;;;;961:169;;;;209:1372;;961:169;;;821:3;-1:-1:-1;840:540:125;;1357:8;209:1372;1357:8;777:13;209:1372;777:13;;840:540;1183:64;;209:1372;840:540;821:3;;1183:64;1217:11;;;;;209:1372;1217:11;:::o;961:169::-;;;;621:32;961:169;;;;;;;;;621:32;961:169;;;:::i;:::-;;;209:1372;;;;;;;;;;;;961:169;;;;;;;-1:-1:-1;961:169:125;;792:27;;;;;;;209:1372;418:1000;:::o;663:98::-;737:24;;;209:1372;737:24;;209:1372;737:24;209:1372;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;;;;;;;621:32;209:1372;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;209:1372:125;;;621:32;209:1372;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:125;;;;;;;;621:32;209:1372;;;;;;",
    linkReferences: {}
  },
  methodIdentifiers: {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"MismatchedArrayLengths","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address[]","name":"arbiters","type":"address[]"},{"internalType":"bytes[]","name":"demands","type":"bytes[]"}],"internalType":"struct AnyArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/logical/AnyArbiter.sol":"AnyArbiter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/logical/AnyArbiter.sol":{"keccak256":"0x4d1cda9beb26d6f6e532421b351dd2929cee24af761b34a27eb145fa8d60e456","license":"UNLICENSED","urls":["bzz-raw://632293b7b484842d552bdf4f124fe80de97e592f27279a333744958a8c44a06c","dweb:/ipfs/QmSxaC94fDEoFyanjqLjHdQX5Z2FvigTEa7zyiykpmsM8Q"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "MismatchedArrayLengths"
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "counteroffer",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeDemandData",
          outputs: [
            {
              internalType: "struct AnyArbiter.DemandData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "arbiters",
                  type: "address[]"
                },
                {
                  internalType: "bytes[]",
                  name: "demands",
                  type: "bytes[]"
                }
              ]
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/arbiters/logical/AnyArbiter.sol": "AnyArbiter"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/arbiters/logical/AnyArbiter.sol": {
        keccak256: "0x4d1cda9beb26d6f6e532421b351dd2929cee24af761b34a27eb145fa8d60e456",
        urls: [
          "bzz-raw://632293b7b484842d552bdf4f124fe80de97e592f27279a333744958a8c44a06c",
          "dweb:/ipfs/QmSxaC94fDEoFyanjqLjHdQX5Z2FvigTEa7zyiykpmsM8Q"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 125
};

// src/clients/logicalArbiters.ts
var anyArbiterDecodeDemandFunction = getAbiItem3({
  abi: abi31.abi,
  name: "decodeDemandData"
});
var allArbiterDecodeDemandFunction = getAbiItem3({
  abi: abi30.abi,
  name: "decodeDemandData"
});
var anyDemandDataType = anyArbiterDecodeDemandFunction.outputs[0];
var allDemandDataType = allArbiterDecodeDemandFunction.outputs[0];
var makeLogicalArbitersClient = (viemClient) => {
  return {
    /**
     * Encodes AnyArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address[] arbiters, bytes[] demands}
     * @returns abi encoded bytes
     */
    encodeAnyArbiterDemand: (demand) => {
      return encodeAbiParameters3([anyDemandDataType], [demand]);
    },
    /**
     * Decodes AnyArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeAnyArbiterDemand: (demandData) => {
      return decodeAbiParameters3([anyDemandDataType], demandData)[0];
    },
    /**
     * Encodes AllArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address[] arbiters, bytes[] demands}
     * @returns abi encoded bytes
     */
    encodeAllArbiterDemand: (demand) => {
      return encodeAbiParameters3([allDemandDataType], [demand]);
    },
    /**
     * Decodes AllArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeAllArbiterDemand: (demandData) => {
      return decodeAbiParameters3([allDemandDataType], demandData)[0];
    }
  };
};

// src/clients/arbiters.ts
var makeArbitersClient = (viemClient, addresses) => {
  const generalArbiters = makeGeneralArbitersClient(viemClient, addresses);
  const logicalArbiters = makeLogicalArbitersClient(viemClient);
  const attestationPropertiesArbiters = makeAttestationPropertiesArbitersClient(viemClient);
  return {
    // General arbiters
    ...generalArbiters,
    // Logical arbiters
    ...logicalArbiters,
    // Attestation properties arbiters
    ...attestationPropertiesArbiters,
    // Backward compatibility aliases
    /**
     * @deprecated Use encodeAnyArbiterDemand instead
     */
    encodeMultiArbiterDemand: logicalArbiters.encodeAnyArbiterDemand,
    /**
     * @deprecated Use decodeAnyArbiterDemand instead
     */
    decodeMultiArbiterDemand: logicalArbiters.decodeAnyArbiterDemand
  };
};

// src/clients/attestation.ts
import { decodeAbiParameters as decodeAbiParameters4, encodeAbiParameters as encodeAbiParameters4, getAbiItem as getAbiItem4 } from "viem";

// src/contracts/AttestationBarterUtils.ts
var abi32 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        },
        {
          name: "_escrowContract",
          type: "address",
          internalType: "contract AttestationEscrowObligation2"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "schema",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "revocable",
          type: "bool",
          internalType: "bool"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "attestAndCreateEscrow",
      inputs: [
        {
          name: "attestationRequest",
          type: "tuple",
          internalType: "struct AttestationRequest",
          components: [
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "data",
              type: "tuple",
              internalType: "struct AttestationRequestData",
              components: [
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "expirationTime",
                  type: "uint64",
                  internalType: "uint64"
                },
                {
                  name: "revocable",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "refUID",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            }
          ]
        },
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "attestationUid",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "escrowUid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "eas",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IEAS"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "escrowContract",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract AttestationEscrowObligation2"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [
        {
          name: "schemaId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "registerSchema",
      inputs: [
        {
          name: "schema",
          type: "string",
          internalType: "string"
        },
        {
          name: "resolver",
          type: "address",
          internalType: "contract SchemaResolver"
        },
        {
          name: "revocable",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "schemaRegistry",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "schemaResolvers",
      inputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "SchemaRegistered",
      inputs: [
        {
          name: "schemaId",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "schema",
          type: "string",
          indexed: false,
          internalType: "string"
        },
        {
          name: "resolver",
          type: "address",
          indexed: false,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidResolver",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x6101603461012557601f61109f38819003918201601f19168301916001600160401b03831184841017610129578084926060946040528339810103126101255780516001600160a01b0381169190828103610125576020820151916001600160a01b03831683036101255760400151926001600160a01b0384168403610125576001608052600360a0525f60c05215610116578060e052610100526101205261014052604051610f61908161013e82396080518161067b015260a051816106a6015260c051816106d1015260e05181610eec0152610100518181816104600152818161062d0152610a6d0152610120518181816101a2015281816107ed01526108e1015261014051818181610101015261052d0152f35b6341bc07ff60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816313bbebfc14610ae2575080632ac17f32146109105780634441bbd9146108cc57806353d55cc01461075e57806354fd4d501461065c5780638150864d1461061857806388e5b2d9146105ef57806391db0b7e146105ef57806394ede4d014610300578063a2ea7c6e1461014e578063ce46e04614610134578063e42a96e7146100ec578063e49617e1146100cf5763e60c3505146100cf575f61000f565b6100d836610bfa565b506100e1610eea565b602060405160018152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610130575f3660031901126101305760206040515f8152f35b346101305760203660031901126101305760608060405161016e81610c2e565b5f81525f60208201525f604082015201526040516351753e3760e11b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156102f5575f9061021b575b606090610217604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b56565b0390f35b503d805f833e61022b8183610c49565b810190602081830312610130578051906001600160401b0382116101305701608081830312610130576040519061026182610c2e565b8051825260208101516001600160a01b0381168103610130576020830152604081015180151581036101305760408301526060810151906001600160401b03821161013057019180601f840112156101305782516102be81610c6a565b916102cc6040519384610c49565b81835260208286010111610130576020815f9282606097018386015e83010152828201526101d1565b6040513d5f823e3d90fd5b34610130576080366003190112610130576004356001600160401b03811161013057803603604060031982011261013057610339610b13565b6044356001600160401b03811161013057610358903690600401610b29565b9390606435916001600160401b038316809303610130576040519463f17325e760e01b8652602060048701528160040135602487015260248201359060c2190181121561013057604060448701520160048101356001600160a01b0381169081900361013057606486015260248101356001600160401b03811680910361013057608486015260448101358015158091036101305760a4860152606481013560c48601526084810135602219368390030181121561013057816004910101602081359101906001600160401b0381116101305780360382136101305760209260a46104528994859460c060e4870152610124860191610cbb565b91013561010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19384156102f5575f946105bb575b506040519060608201908282106001600160401b038311176105a75761051c966020956104d39360405260018060a01b031684523691610c85565b918382019283526040820190858252604051968794859463aadc8f6360e01b86526040600487015260018060a01b039051166044860152516060606486015260a4850190610b56565b91516084840152602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610574575b6040809350519182526020820152f35b506020823d60201161059f575b8161058e60209383610c49565b810103126101305760409151610564565b3d9150610581565b634e487b7160e01b5f52604160045260245ffd5b9093506020813d6020116105e7575b816105d760209383610c49565b8101031261013057519285610498565b3d91506105ca565b602061060e6105fd36610baa565b92610609929192610eea565b610d12565b6040519015158152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610130575f36600319011261013057610217602061074a600161069f7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81846106ca7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81806106f57f0000000000000000000000000000000000000000000000000000000000000000610d7d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c49565b604051918291602083526020830190610b56565b34610130576060366003190112610130576004356001600160401b0381116101305761078e903690600401610b29565b6024356001600160a01b03811691908290036101305760443591821515809303610130576020604051808095630c1af44f60e31b8252606060048301526107d960648301878a610cbb565b60248301869052604483019190915203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156102f5575f93610895575b5060209383927fe1de970d17b45f7e907a7d4a1b40501d574c2d5ac3426c2ac4acb06f43c1b35a92845f525f875260405f20816bffffffffffffffffffffffff60a01b825416179055610885604051938493604085526040850191610cbb565b90878301520390a2604051908152f35b909192506020813d6020116108c4575b816108b260209383610c49565b81010312610130575191906020610825565b3d91506108a5565b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101305760c036600319011261013057610929610b13565b604435906001600160401b038216809203610130576064358015158091036101305760a4356001600160401b0381116101305761096a903690600401610b29565b90916040519460c08601948686106001600160401b038711176105a7576109b19560405260018060a01b031686526020860152604085015260843560608501523691610c85565b60808201525f60a082015260405160408101908082106001600160401b038311176105a75760209160405260043581528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610a5f608083015160c060e4860152610124850190610b56565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610aaf575b602090604051908152f35b506020813d602011610ada575b81610ac960209383610c49565b810103126101305760209051610aa4565b3d9150610abc565b34610130576020366003190112610130576004355f90815260208181526040909120546001600160a01b0316825290f35b602435906001600160a01b038216820361013057565b9181601f84011215610130578235916001600160401b038311610130576020838186019501011161013057565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610130578235916001600160401b038311610130576020808501948460051b01011161013057565b6040600319820112610130576004356001600160401b0381116101305781610bd491600401610b7a565b92909291602435906001600160401b03821161013057610bf691600401610b7a565b9091565b602060031982011261013057600435906001600160401b038211610130576101409082900360031901126101305760040190565b608081019081106001600160401b038211176105a757604052565b90601f801991011681019081106001600160401b038211176105a757604052565b6001600160401b0381116105a757601f01601f191660200190565b929192610c9182610c6a565b91610c9f6040519384610c49565b829481845281830111610130578281602093845f960137010152565b908060209392818452848401375f828201840152601f01601f1916010190565b9190811015610cfe5760051b8101359061013e1981360301821215610130570190565b634e487b7160e01b5f52603260045260245ffd5b9291828203610d6e575f90345b838310610d3157505050505050600190565b84831015610cfe578260051b820135818111610d5f57600191610d5585878a610cdb565b5003920191610d1f565b63044044a560e21b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ec7575b806d04ee2d6d415b85acef8100000000600a921015610eac575b662386f26fc10000811015610e98575b6305f5e100811015610e87575b612710811015610e78575b6064811015610e6a575b1015610e5f575b600a60216001840193610e0485610c6a565b94610e126040519687610c49565b808652610e21601f1991610c6a565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e5a57600a9091610e2c565b505090565b600190910190610df2565b606460029104930192610deb565b61271060049104930192610de1565b6305f5e10060089104930192610dd6565b662386f26fc1000060109104930192610dc9565b6d04ee2d6d415b85acef810000000060209104930192610db9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610d9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f1c57565b634ca8886760e01b5f5260045ffdfea2646970667358221220b83f138acf531c2427b467bece71d568690a6220a9d9dad46524cbe22c5d630664736f6c634300081b0033",
    sourceMap: "422:3049:132:-:0;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;685:1:9;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;790:10;;;1024::132;;1044:32;;1086;;422:3049;;;;;;;;759:14:6;422:3049:132;;;;;783:14:6;422:3049:132;;;;;807:14:6;422:3049:132;;;;;790:10:9;422:3049:132;;;;;1024:10;422:3049;;;;;;;;;;;;;;;1044:32;422:3049;;;;;;;;;;;;;;;1086:32;422:3049;;;;;;;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;422:3049:132;-1:-1:-1;422:3049:132;;;;;;-1:-1:-1;422:3049:132;;;;;-1:-1:-1;422:3049:132",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816313bbebfc14610ae2575080632ac17f32146109105780634441bbd9146108cc57806353d55cc01461075e57806354fd4d501461065c5780638150864d1461061857806388e5b2d9146105ef57806391db0b7e146105ef57806394ede4d014610300578063a2ea7c6e1461014e578063ce46e04614610134578063e42a96e7146100ec578063e49617e1146100cf5763e60c3505146100cf575f61000f565b6100d836610bfa565b506100e1610eea565b602060405160018152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610130575f3660031901126101305760206040515f8152f35b346101305760203660031901126101305760608060405161016e81610c2e565b5f81525f60208201525f604082015201526040516351753e3760e11b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156102f5575f9061021b575b606090610217604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b56565b0390f35b503d805f833e61022b8183610c49565b810190602081830312610130578051906001600160401b0382116101305701608081830312610130576040519061026182610c2e565b8051825260208101516001600160a01b0381168103610130576020830152604081015180151581036101305760408301526060810151906001600160401b03821161013057019180601f840112156101305782516102be81610c6a565b916102cc6040519384610c49565b81835260208286010111610130576020815f9282606097018386015e83010152828201526101d1565b6040513d5f823e3d90fd5b34610130576080366003190112610130576004356001600160401b03811161013057803603604060031982011261013057610339610b13565b6044356001600160401b03811161013057610358903690600401610b29565b9390606435916001600160401b038316809303610130576040519463f17325e760e01b8652602060048701528160040135602487015260248201359060c2190181121561013057604060448701520160048101356001600160a01b0381169081900361013057606486015260248101356001600160401b03811680910361013057608486015260448101358015158091036101305760a4860152606481013560c48601526084810135602219368390030181121561013057816004910101602081359101906001600160401b0381116101305780360382136101305760209260a46104528994859460c060e4870152610124860191610cbb565b91013561010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19384156102f5575f946105bb575b506040519060608201908282106001600160401b038311176105a75761051c966020956104d39360405260018060a01b031684523691610c85565b918382019283526040820190858252604051968794859463aadc8f6360e01b86526040600487015260018060a01b039051166044860152516060606486015260a4850190610b56565b91516084840152602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610574575b6040809350519182526020820152f35b506020823d60201161059f575b8161058e60209383610c49565b810103126101305760409151610564565b3d9150610581565b634e487b7160e01b5f52604160045260245ffd5b9093506020813d6020116105e7575b816105d760209383610c49565b8101031261013057519285610498565b3d91506105ca565b602061060e6105fd36610baa565b92610609929192610eea565b610d12565b6040519015158152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610130575f36600319011261013057610217602061074a600161069f7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81846106ca7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81806106f57f0000000000000000000000000000000000000000000000000000000000000000610d7d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c49565b604051918291602083526020830190610b56565b34610130576060366003190112610130576004356001600160401b0381116101305761078e903690600401610b29565b6024356001600160a01b03811691908290036101305760443591821515809303610130576020604051808095630c1af44f60e31b8252606060048301526107d960648301878a610cbb565b60248301869052604483019190915203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156102f5575f93610895575b5060209383927fe1de970d17b45f7e907a7d4a1b40501d574c2d5ac3426c2ac4acb06f43c1b35a92845f525f875260405f20816bffffffffffffffffffffffff60a01b825416179055610885604051938493604085526040850191610cbb565b90878301520390a2604051908152f35b909192506020813d6020116108c4575b816108b260209383610c49565b81010312610130575191906020610825565b3d91506108a5565b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101305760c036600319011261013057610929610b13565b604435906001600160401b038216809203610130576064358015158091036101305760a4356001600160401b0381116101305761096a903690600401610b29565b90916040519460c08601948686106001600160401b038711176105a7576109b19560405260018060a01b031686526020860152604085015260843560608501523691610c85565b60808201525f60a082015260405160408101908082106001600160401b038311176105a75760209160405260043581528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610a5f608083015160c060e4860152610124850190610b56565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610aaf575b602090604051908152f35b506020813d602011610ada575b81610ac960209383610c49565b810103126101305760209051610aa4565b3d9150610abc565b34610130576020366003190112610130576004355f90815260208181526040909120546001600160a01b0316825290f35b602435906001600160a01b038216820361013057565b9181601f84011215610130578235916001600160401b038311610130576020838186019501011161013057565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610130578235916001600160401b038311610130576020808501948460051b01011161013057565b6040600319820112610130576004356001600160401b0381116101305781610bd491600401610b7a565b92909291602435906001600160401b03821161013057610bf691600401610b7a565b9091565b602060031982011261013057600435906001600160401b038211610130576101409082900360031901126101305760040190565b608081019081106001600160401b038211176105a757604052565b90601f801991011681019081106001600160401b038211176105a757604052565b6001600160401b0381116105a757601f01601f191660200190565b929192610c9182610c6a565b91610c9f6040519384610c49565b829481845281830111610130578281602093845f960137010152565b908060209392818452848401375f828201840152601f01601f1916010190565b9190811015610cfe5760051b8101359061013e1981360301821215610130570190565b634e487b7160e01b5f52603260045260245ffd5b9291828203610d6e575f90345b838310610d3157505050505050600190565b84831015610cfe578260051b820135818111610d5f57600191610d5585878a610cdb565b5003920191610d1f565b63044044a560e21b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ec7575b806d04ee2d6d415b85acef8100000000600a921015610eac575b662386f26fc10000811015610e98575b6305f5e100811015610e87575b612710811015610e78575b6064811015610e6a575b1015610e5f575b600a60216001840193610e0485610c6a565b94610e126040519687610c49565b808652610e21601f1991610c6a565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e5a57600a9091610e2c565b505090565b600190910190610df2565b606460029104930192610deb565b61271060049104930192610de1565b6305f5e10060089104930192610dd6565b662386f26fc1000060109104930192610dc9565b6d04ee2d6d415b85acef810000000060209104930192610db9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610d9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f1c57565b634ca8886760e01b5f5260045ffdfea2646970667358221220b83f138acf531c2427b467bece71d568690a6220a9d9dad46524cbe22c5d630664736f6c634300081b0033",
    sourceMap: "422:3049:132:-:0;;;;;;;;;;-1:-1:-1;422:3049:132;;;;;;;;;1183:12:9;;;1054:5;1183:12;422:3049:132;1054:5:9;1183:12;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;881:58:9;;:::i;:::-;422:3049:132;;;3274:4;422:3049;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;562:60;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3428:34;;422:3049;;;3428:34;;422:3049;;;3428:34;422:3049;;;;;;3428:14;422:3049;3428:34;;;;;;422:3049;3428:34;;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;3428:34;;;;422:3049;3428:34;;;;;;:::i;:::-;;;422:3049;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3428:34;;;422:3049;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;2521:30;;422:3049;;2521:30;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2521:30;422:3049;;2521:3;-1:-1:-1;;;;;422:3049:132;2521:30;;;;;;;422:3049;2521:30;;;422:3049;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2683:173;;;;422:3049;;;;2683:173;;422:3049;;;;;;;;;;;;;;2879:51;;422:3049;;2879:51;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;2879:51;422:3049;-1:-1:-1;2879:14:132;-1:-1:-1;;;;;422:3049:132;2879:51;;;;;;422:3049;2879:51;;;422:3049;;;;;;;;;;;;;;2879:51;;422:3049;2879:51;;422:3049;2879:51;;;;;;422:3049;2879:51;;;:::i;:::-;;;422:3049;;;;;;;2879:51;;;;;-1:-1:-1;2879:51:132;;422:3049;;;;;;;;;;;;2521:30;;;;422:3049;2521:30;;422:3049;2521:30;;;;;;422:3049;2521:30;;;:::i;:::-;;;422:3049;;;;;2521:30;;;;;;;-1:-1:-1;2521:30:132;;422:3049;;1442:1461:9;422:3049:132;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;:::-;422:3049:132;;;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;478:25;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;1055:104:6;;422:3049:132;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;422:3049:132;;;;;;;;;;;;1055:104:6;;;422:3049:132;;;;-1:-1:-1;;;422:3049:132;;;;;;;;;;;;;;;;;-1:-1:-1;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;422:3049:132;;;;;1055:104:6;422:3049:132;;1055:104:6;422:3049:132;;;;:::i;:::-;;;;;;-1:-1:-1;;422:3049:132;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1306:52;;422:3049;;1306:52;;422:3049;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1306:52;422:3049;-1:-1:-1;1306:14:132;-1:-1:-1;;;;;422:3049:132;1306:52;;;;;;;422:3049;1306:52;;;422:3049;;;;;;1428:53;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;1428:53;;;422:3049;;;;;;1306:52;;;;;422:3049;1306:52;;422:3049;1306:52;;;;;;422:3049;1306:52;;;:::i;:::-;;;422:3049;;;;;;1306:52;422:3049;1306:52;;;;;-1:-1:-1;1306:52:132;;422:3049;;;;;;-1:-1:-1;;422:3049:132;;;;;;509:47;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;1867:304;;422:3049;;1867:304;;422:3049;;;;1867:304;;422:3049;;;;:::i;:::-;;1867:304;;422:3049;;;1867:304;;422:3049;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;1784:406;;;422:3049;;;;;;;;;;;;1756:448;;;422:3049;1756:448;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1756:448;422:3049;;1756:3;-1:-1:-1;;;;;422:3049:132;1756:448;;;;;;422:3049;1756:448;;;422:3049;;;;;;;;;1756:448;;422:3049;1756:448;;422:3049;1756:448;;;;;;422:3049;1756:448;;;:::i;:::-;;;422:3049;;;;;;;1756:448;;;;;-1:-1:-1;1756:448:132;;422:3049;;;;;;-1:-1:-1;;422:3049:132;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;422:3049:132;;;;;;;;-1:-1:-1;;422:3049:132;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;422:3049:132;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;:::i;:::-;;;:::o;:::-;;-1:-1:-1;;422:3049:132;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;;;-1:-1:-1;;422:3049:132;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;:::o;:::-;;;1055:104:6;;422:3049:132;;;;;;;;-1:-1:-1;;;;;422:3049:132;;;;;;;:::o;:::-;-1:-1:-1;;;;;422:3049:132;;;;;;-1:-1:-1;;422:3049:132;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;422:3049:132;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;422:3049:132;;;;;;;;-1:-1:-1;;422:3049:132;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;3133:1460:9;;;3340:23;;;3336:76;;3881:1;;3844:9;3884:10;;;;;;4575:11;;;;;;1489:1:0;3133:1460:9;:::o;3896:19::-;422:3049:132;;;;;;;;;;;;4064:22:9;;;4060:87;;1489:1:0;4284:15:9;;;;;;:::i;:::-;;422:3049:132;3896:19:9;422:3049:132;3869:13:9;;;4060:87;4113:19;;;3881:1;4113:19;;3881:1;4113:19;3336:76;3386:15;;;;;;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;422:3049:132;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;422:3049:132;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;422:3049:132;;-1:-1:-1;;;1033:111:63;;;;422:3049:132;1033:111:63;422:3049:132;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;422:3049:132;;;;26127:66:70;;26014:100;26027:7;26098:1;422:3049:132;;;;26014:100:70;;;25901;25914:7;25985:1;422:3049:132;;;;25901:100:70;;;25788;25801:7;25872:1;422:3049:132;;;;25788:100:70;;;25672:103;25685:8;25758:2;422:3049:132;;;;25672:103:70;;;25556;25569:8;25642:2;422:3049:132;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;422:3049:132;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;422:3049:132;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 1659,
          length: 32
        }
      ],
      "2534": [
        {
          start: 1702,
          length: 32
        }
      ],
      "2536": [
        {
          start: 1745,
          length: 32
        }
      ],
      "3008": [
        {
          start: 3820,
          length: 32
        }
      ],
      "64421": [
        {
          start: 1120,
          length: 32
        },
        {
          start: 1581,
          length: 32
        },
        {
          start: 2669,
          length: 32
        }
      ],
      "64424": [
        {
          start: 418,
          length: 32
        },
        {
          start: 2029,
          length: 32
        },
        {
          start: 2273,
          length: 32
        }
      ],
      "64427": [
        {
          start: 257,
          length: 32
        },
        {
          start: 1325,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "attest(bytes32,address,uint64,bool,bytes32,bytes)": "2ac17f32",
    "attestAndCreateEscrow((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),address,bytes,uint64)": "94ede4d0",
    "eas()": "8150864d",
    "escrowContract()": "e42a96e7",
    "getSchema(bytes32)": "a2ea7c6e",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "registerSchema(string,address,bool)": "53d55cc0",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "schemaRegistry()": "4441bbd9",
    "schemaResolvers(bytes32)": "13bbebfc",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"},{"internalType":"contract AttestationEscrowObligation2","name":"_escrowContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidResolver","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"schemaId","type":"bytes32"},{"indexed":false,"internalType":"string","name":"schema","type":"string"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"SchemaRegistered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestationRequest","type":"tuple"},{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"attestAndCreateEscrow","outputs":[{"internalType":"bytes32","name":"attestationUid","type":"bytes32"},{"internalType":"bytes32","name":"escrowUid","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eas","outputs":[{"internalType":"contract IEAS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"escrowContract","outputs":[{"internalType":"contract AttestationEscrowObligation2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"schemaId","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract SchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"registerSchema","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"schemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"schemaResolvers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/utils/AttestationBarterUtils.sol":"AttestationBarterUtils"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation2.sol":{"keccak256":"0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252","license":"UNLICENSED","urls":["bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4","dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"]},"src/utils/AttestationBarterUtils.sol":{"keccak256":"0x83f6309f9bbede6435a4db88d5872946b74776f2259f07eae32841e630ad5548","license":"UNLICENSED","urls":["bzz-raw://385d1e6a80aa317f63a3ca95fd4f3f0ed48ef34eb7a4cff252b9addaed56853a","dweb:/ipfs/QmSzyADfEX1SiuGyua2CUXw1rQjDn5TsnXBBdwtRQksk9C"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            },
            {
              internalType: "contract AttestationEscrowObligation2",
              name: "_escrowContract",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidResolver"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "schemaId",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "string",
              name: "schema",
              type: "string",
              indexed: false
            },
            {
              internalType: "address",
              name: "resolver",
              type: "address",
              indexed: false
            }
          ],
          type: "event",
          name: "SchemaRegistered",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "schema",
              type: "bytes32"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bool",
              name: "revocable",
              type: "bool"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct AttestationRequest",
              name: "attestationRequest",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "struct AttestationRequestData",
                  name: "data",
                  type: "tuple",
                  components: [
                    {
                      internalType: "address",
                      name: "recipient",
                      type: "address"
                    },
                    {
                      internalType: "uint64",
                      name: "expirationTime",
                      type: "uint64"
                    },
                    {
                      internalType: "bool",
                      name: "revocable",
                      type: "bool"
                    },
                    {
                      internalType: "bytes32",
                      name: "refUID",
                      type: "bytes32"
                    },
                    {
                      internalType: "bytes",
                      name: "data",
                      type: "bytes"
                    },
                    {
                      internalType: "uint256",
                      name: "value",
                      type: "uint256"
                    }
                  ]
                }
              ]
            },
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "attestAndCreateEscrow",
          outputs: [
            {
              internalType: "bytes32",
              name: "attestationUid",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "escrowUid",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "eas",
          outputs: [
            {
              internalType: "contract IEAS",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "escrowContract",
          outputs: [
            {
              internalType: "contract AttestationEscrowObligation2",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "schemaId",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "schema",
              type: "string"
            },
            {
              internalType: "contract SchemaResolver",
              name: "resolver",
              type: "address"
            },
            {
              internalType: "bool",
              name: "revocable",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "registerSchema",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "schemaRegistry",
          outputs: [
            {
              internalType: "contract ISchemaRegistry",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "schemaResolvers",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/utils/AttestationBarterUtils.sol": "AttestationBarterUtils"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation2.sol": {
        keccak256: "0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252",
        urls: [
          "bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4",
          "dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"
        ],
        license: "UNLICENSED"
      },
      "src/utils/AttestationBarterUtils.sol": {
        keccak256: "0x83f6309f9bbede6435a4db88d5872946b74776f2259f07eae32841e630ad5548",
        urls: [
          "bzz-raw://385d1e6a80aa317f63a3ca95fd4f3f0ed48ef34eb7a4cff252b9addaed56853a",
          "dweb:/ipfs/QmSzyADfEX1SiuGyua2CUXw1rQjDn5TsnXBBdwtRQksk9C"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 132
};

// src/contracts/AttestationEscrowObligation.ts
var abi33 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestation",
              type: "tuple",
              internalType: "struct AttestationRequest",
              components: [
                {
                  name: "schema",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "tuple",
                  internalType: "struct AttestationRequestData",
                  components: [
                    {
                      name: "recipient",
                      type: "address",
                      internalType: "address"
                    },
                    {
                      name: "expirationTime",
                      type: "uint64",
                      internalType: "uint64"
                    },
                    {
                      name: "revocable",
                      type: "bool",
                      internalType: "bool"
                    },
                    {
                      name: "refUID",
                      type: "bytes32",
                      internalType: "bytes32"
                    },
                    {
                      name: "data",
                      type: "bytes",
                      internalType: "bytes"
                    },
                    {
                      name: "value",
                      type: "uint256",
                      internalType: "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestation",
              type: "tuple",
              internalType: "struct AttestationRequest",
              components: [
                {
                  name: "schema",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "tuple",
                  internalType: "struct AttestationRequestData",
                  components: [
                    {
                      name: "recipient",
                      type: "address",
                      internalType: "address"
                    },
                    {
                      name: "expirationTime",
                      type: "uint64",
                      internalType: "uint64"
                    },
                    {
                      name: "revocable",
                      type: "bool",
                      internalType: "bool"
                    },
                    {
                      name: "refUID",
                      type: "bytes32",
                      internalType: "bytes32"
                    },
                    {
                      name: "data",
                      type: "bytes",
                      internalType: "bytes"
                    },
                    {
                      name: "value",
                      type: "uint256",
                      internalType: "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestation",
              type: "tuple",
              internalType: "struct AttestationRequest",
              components: [
                {
                  name: "schema",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "tuple",
                  internalType: "struct AttestationRequestData",
                  components: [
                    {
                      name: "recipient",
                      type: "address",
                      internalType: "address"
                    },
                    {
                      name: "expirationTime",
                      type: "uint64",
                      internalType: "uint64"
                    },
                    {
                      name: "revocable",
                      type: "bool",
                      internalType: "bool"
                    },
                    {
                      name: "refUID",
                      type: "bytes32",
                      internalType: "bytes32"
                    },
                    {
                      name: "data",
                      type: "bytes",
                      internalType: "bytes"
                    },
                    {
                      name: "value",
                      type: "uint256",
                      internalType: "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestation",
              type: "tuple",
              internalType: "struct AttestationRequest",
              components: [
                {
                  name: "schema",
                  type: "bytes32",
                  internalType: "bytes32"
                },
                {
                  name: "data",
                  type: "tuple",
                  internalType: "struct AttestationRequestData",
                  components: [
                    {
                      name: "recipient",
                      type: "address",
                      internalType: "address"
                    },
                    {
                      name: "expirationTime",
                      type: "uint64",
                      internalType: "uint64"
                    },
                    {
                      name: "revocable",
                      type: "bool",
                      internalType: "bool"
                    },
                    {
                      name: "refUID",
                      type: "bytes32",
                      internalType: "bytes32"
                    },
                    {
                      name: "data",
                      type: "bytes",
                      internalType: "bytes"
                    },
                    {
                      name: "value",
                      type: "uint256",
                      internalType: "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationCreationFailed",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x610160806040523461028457604081611fe9803803809161002082856102be565b8339810103126102845780516001600160a01b038116918282036102845760200151916001600160a01b0383168084036102845760405160e081016001600160401b038111828210176102aa5760405260b1815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c207484527f75706c65286279746573333220736368656d612c207475706c6528616464726560408301527f737320726563697069656e742c2075696e7436342065787069726174696f6e5460608301527f696d652c20626f6f6c207265766f6361626c652c20627974657333322072656660808301527f5549442c20627974657320646174612c2075696e743235362076616c7565292060a0830152703230ba30949030ba3a32b9ba30ba34b7b760791b60c08301526001608052600360a0525f60c0521561029b576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af1908115610290575f9161025a575b5061014052604051611d0790816102e2823960805181610a51015260a05181610a7c015260c05181610aa7015260e05181611c1e015261010051816108d301526101205181818161055d015281816107cf015281816112820152611a1b01526101405181818161059d015281816108a101528181610a0f015281816114620152818161185701526119d00152f35b90506020813d602011610288575b81610275602093836102be565b8101031261028457515f6101cc565b5f80fd5b3d9150610268565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102aa5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610b2057806354fd4d5014610a325780635bf2f20d146109f85780636b122fe0146108625780637d2c2931146107975780638371ef591461073957806388e5b2d9146106ec578063891d9ea81461070b57806391db0b7e146106ec5780639c13d80e14610664578063b3b902d414610619578063c6ec50701461051e578063c93844be146103a1578063cce1f561146102c2578063ce46e046146102a8578063e49617e11461028d578063e60c35051461028d578063e6c9714d1461016d5763f0ffa1850361000e57346101695760a0366003190112610169576004356001600160401b0381116101695761012c903690600401610d8b565b610134610d37565b9161013d610d61565b606435906001600160a01b038216820361016957602094610161946084359461195f565b604051908152f35b5f80fd5b34610169576060366003190112610169576004356001600160401b03811161016957610140600319823603011261016957604051906101ab82610c0b565b80600401358252602481013560208301526101c860448201610d4d565b60408301526101d960648201610d4d565b60608301526101ea60848201610d4d565b608083015260a481013560a083015261020560c48201610d77565b60c083015261021660e48201610d77565b60e08301526102286101048201610ea2565b610100830152610124810135906001600160401b0382116101695760046102529236920101610c99565b6101208201526024356001600160401b0381116101695760209161027d610283923690600401610c99565b90611855565b6040519015158152f35b602061028361029b36610e6e565b6102a3611c1c565b611c5d565b34610169575f3660031901126101695760206040515f8152f35b34610169576040366003190112610169576004356001600160401b038111610169576060600319823603011261016957602061034591610318610326610306610d37565b926040519283916004018683016116ba565b03601f198101835282610c27565b60405163f0ffa18560e01b8152938492839233918291600486016117b4565b03815f305af18015610396575f90610363575b602090604051908152f35b506020813d60201161038e575b8161037d60209383610c27565b810103126101695760209051610358565b3d9150610370565b6040513d5f823e3d90fd5b34610169576020366003190112610169576004356001600160401b038111610169576103d1903690600401610d8b565b6103d96117f7565b50810190602081830312610169578035906001600160401b0382116101695701606081830312610169576040519061041082610bba565b61041981610d77565b825260208101356001600160401b038111610169578361043a918301610c99565b60208301526040810135906001600160401b0382116101695701604081840312610169576040519061046b82610bd5565b803582526020810135906001600160401b03821161016957019260c084820312610169576040519061049c82610bf0565b6104a585610d77565b82526104b360208601610d4d565b60208301526104c460408601610ea2565b6040830152606085013560608301526080850135946001600160401b038611610169576104f860a09261051a978301610c99565b6080840152013560a08201526020820152604082015260405191829182610e27565b0390f35b34610169576020366003190112610169576105376117f7565b50610540610ef2565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610396575f916105f7575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105e8576105dc61012061051a92015160208082518301019101611059565b60405191829182610e27565b635527981560e11b5f5260045ffd5b61061391503d805f833e61060b8183610c27565b810190610f7e565b81610595565b34610169576060366003190112610169576004356001600160401b0381116101695761016161064e6020923690600401610d8b565b610656610d37565b91604435923392339261195f565b34610169576060366003190112610169576004356001600160401b03811161016957606060031982360301126101695760206106be6106a1610d37565b6106cc6106ac610d61565b946040519384916004018683016116ba565b03601f198101845283610c27565b610345604051948593849363f0ffa18560e01b85523391600486016117b4565b60206102836106fa36610ce7565b92610706929192611c1c565b6111b4565b346101695761051a61072561071f36610b51565b90611258565b604051918291602083526020830190610b67565b34610169576020366003190112610169576004356001600160401b0381116101695761076c610771913690600401610c99565b61118b565b604080516001600160a01b03909316835260208301819052829161051a91830190610b67565b34610169576020366003190112610169576004356107b3610ef2565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610846575b5061081957506301fb6dd160e01b5f5260045260245ffd5b606001516001600160401b0316421061083757602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b61085b9192503d805f833e61060b8183610c27565b9083610801565b34610169575f3660031901126101695760608060405161088181610b8b565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610396575f90610948575b60609061051a604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b67565b503d805f833e6109588183610c27565b810190602081830312610169578051906001600160401b0382116101695701608081830312610169576040519061098e82610b8b565b8051825260208101516001600160a01b03811681036101695760208301526109b860408201610eaf565b60408301526060810151906001600160401b038211610169570182601f82011215610169576060928160206109ef93519101610ebc565b82820152610902565b34610169575f3660031901126101695760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610169575f3660031901126101695761051a60206107256001610a757f0000000000000000000000000000000000000000000000000000000000000000611aaf565b8184610aa07f0000000000000000000000000000000000000000000000000000000000000000611aaf565b8180610acb7f0000000000000000000000000000000000000000000000000000000000000000611aaf565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c27565b3461016957610b3161071f36610b51565b602081519181808201938492010103126101695760209051604051908152f35b6040906003190112610169576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610ba657604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ba657604052565b604081019081106001600160401b03821117610ba657604052565b60c081019081106001600160401b03821117610ba657604052565b61014081019081106001600160401b03821117610ba657604052565b90601f801991011681019081106001600160401b03821117610ba657604052565b6001600160401b038111610ba657601f01601f191660200190565b929192610c6f82610c48565b91610c7d6040519384610c27565b829481845281830111610169578281602093845f960137010152565b9080601f8301121561016957816020610cb493359101610c63565b90565b9181601f84011215610169578235916001600160401b038311610169576020808501948460051b01011161016957565b6040600319820112610169576004356001600160401b0381116101695781610d1191600401610cb7565b92909291602435906001600160401b03821161016957610d3391600401610cb7565b9091565b602435906001600160401b038216820361016957565b35906001600160401b038216820361016957565b604435906001600160a01b038216820361016957565b35906001600160a01b038216820361016957565b9181601f84011215610169578235916001600160401b038311610169576020838186019501011161016957565b602090805183520151906040602082015260018060a01b0382511660408201526001600160401b036020830151166060820152604082015115156080820152606082015160a082015260e060a0610e1e608085015160c080860152610100850190610b67565b93015191015290565b90610cb4916020815260018060a01b0382511660208201526040610e5960208401516060838501526080840190610b67565b920151906060601f1982850301910152610db8565b602060031982011261016957600435906001600160401b038211610169576101409082900360031901126101695760040190565b3590811515820361016957565b5190811515820361016957565b929192610ec882610c48565b91610ed66040519384610c27565b829481845281830111610169578281602093845f96015e010152565b60405190610eff82610c0b565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361016957565b51906001600160a01b038216820361016957565b9080601f83011215610169578151610cb492602001610ebc565b602081830312610169578051906001600160401b0382116101695701610140818303126101695760405191610fb283610c0b565b8151835260208201516020840152610fcc60408301610f3c565b6040840152610fdd60608301610f3c565b6060840152610fee60808301610f3c565b608084015260a082015160a084015261100960c08301610f50565b60c084015261101a60e08301610f50565b60e084015261102c6101008301610eaf565b6101008401526101208201516001600160401b038111610169576110509201610f64565b61012082015290565b602081830312610169578051906001600160401b038211610169570190606082820312610169576040519161108d83610bba565b61109681610f50565b835260208101516001600160401b03811161016957826110b7918301610f64565b60208401526040810151906001600160401b03821161016957019060408282031261016957604051916110e983610bd5565b805183526020810151906001600160401b03821161016957019060c082820312610169576040519161111a83610bf0565b61112381610f50565b835261113160208201610f3c565b602084015261114260408201610eaf565b60408401526060810151606084015260808101516001600160401b0381116101695760a092611172918301610f64565b6080840152015160a08201526020820152604082015290565b61119e9060208082518301019101611059565b80516020909101516001600160a01b0390911691565b929092818403611249575f91345b8584101561123e578184101561122a578360051b808601359082821161121b5784013561013e1985360301811215610169576111ff908501611c5d565b1561121057600191039301926111c2565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611262610ef2565b5061126b610ef2565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f918161164d575b506112d357856301fb6dd160e01b5f5260045260245ffd5b9491929394906040516328c44a9960e21b81528660048201525f81602481855afa5f9181611631575b5061131457866301fb6dd160e01b5f5260045260245ffd5b9591929394959261132481611c76565b156116225761140360206101208084019360c088611415611345885161118b565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b67565b84810360031901602486015290610b67565b604483019190915203916001600160a01b03165afa908115610396575f916115e8575b50156115d95760405161144a81610bd5565b8581525f60208201526040519061146082610bd5565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152833b1561016957604051634692626760e01b81529151600483015251805160248301526020015160448201525f8160648183875af190816115c4575b506114df5763614cf93960e01b86526004859052602486fd5b611524869260406114ff6020949896979851858082518301019101611059565b015160405194858094819363f17325e760e01b83528760048401526024830190610db8565b03925af1859181611590575b5061154457638d7100d760e01b8552600485fd5b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c090949360405195602087015260208652611580604087610c27565b516001600160a01b03169380a490565b9091506020813d6020116115bc575b816115ac60209383610c27565b810103126101695751905f611530565b3d915061159f565b6115d19197505f90610c27565b5f955f6114c6565b630ebe58ef60e11b5f5260045ffd5b90506020813d60201161161a575b8161160360209383610c27565b810103126101695761161490610eaf565b5f611438565b3d91506115f6565b63629cd40b60e11b5f5260045ffd5b6116469192503d805f833e61060b8183610c27565b905f6112fc565b6116629192503d805f833e61060b8183610c27565b905f6112bb565b9035601e19823603018112156101695701602081359101916001600160401b03821161016957813603831361016957565b908060209392818452848401375f828201840152601f01601f1916010190565b602081526001600160a01b036116cf83610d77565b1660208201526116f66116e56020840184611669565b60606040850152608084019161169a565b916040810135603e19823603018112156101695701906060601f198285030191015280358252602081013560be1982360301811215610169576040602084015201906001600160a01b0361174983610d77565b1660408201526001600160401b0361176360208401610d4d565b16606082015261177560408301610ea2565b15156080820152606082013560a082015260e060a06117ab61179a6080860186611669565b60c08087015261010086019161169a565b93013591015290565b90935f936001600160401b036117d6608095989760a0865260a0860190610b67565b971660208401526001600160a01b0390811660408401521660608201520152565b6040519061180482610bba565b815f815260606020820152604080519161181d83610bd5565b5f8352815161182b81610bf0565b5f81525f60208201525f838201525f6060820152606060808201525f60a082015260208401520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119505761188981611c76565b1561194a576118a96101206118b992015160208082518301019101611059565b9160208082518301019101611059565b60408201516040516118db816103186020820194602086526040830190610db8565b5190206040820151604051611900816103186020820194602086526040830190610db8565b519020149182611931575b8261191557505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061190b565b50505f90565b635f9bd90760e11b5f5260045ffd5b6020935061198390611a1697969295939561197b368284610c63565b503691610c63565b906001600160401b036040519361199985610bf0565b60018060a01b031695868552168484015260016040840152606083015260808201525f60a0820152604051906119ce82610bd5565b7f00000000000000000000000000000000000000000000000000000000000000008252828201526040518095819263f17325e760e01b83528460048401526024830190610db8565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610396575f93611a7b575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011611aa7575b81611a9760209383610c27565b810103126101695751915f611a53565b3d9150611a8a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611bf9575b806d04ee2d6d415b85acef8100000000600a921015611bde575b662386f26fc10000811015611bca575b6305f5e100811015611bb9575b612710811015611baa575b6064811015611b9c575b1015611b91575b600a60216001840193611b3685610c48565b94611b446040519687610c27565b808652611b53601f1991610c48565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b8c57600a9091611b5e565b505090565b600190910190611b24565b606460029104930192611b1d565b61271060049104930192611b13565b6305f5e10060089104930192611b08565b662386f26fc1000060109104930192611afb565b6d04ee2d6d415b85acef810000000060209104930192611aeb565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611ad1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c4e57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361016957301490565b6001600160401b036060820151168015159081611cc7575b50611cb857608001516001600160401b0316611ca957600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c8e56fea2646970667358221220f910b1f477527c62b8fcc171ad0be8058f737c541ad9ba79a8f020c6d710920b64736f6c634300081b0033",
    sourceMap: "407:4081:119:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4081:119;;;;1047:4;407:4081;759:14:6;688:1:9;407:4081:119;783:14:6;-1:-1:-1;407:4081:119;807:14:6;708:26:9;704:76;;407:4081:119;790:10:9;;407:4081:119;790:10:9;407:4081:119;790:10:9;789::77;;809:32;;-1:-1:-1;407:4081:119;;;;;;;;;;;872:48:77;;407:4081:119;872:48:77;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;904:4:77;407:4081:119;;;;1047:4;407:4081;;;;;;-1:-1:-1;;407:4081:119;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:32:77;407:4081:119;;;;;789:10:77;407:4081:119;;;;;;;;;;;;;;;;;;;;851:69:77;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;407:4081:119;872:48:77;;407:4081:119;872:48:77;;;;;;407:4081:119;872:48:77;;;:::i;:::-;;;407:4081:119;;;;;872:48:77;;;407:4081:119;-1:-1:-1;407:4081:119;;872:48:77;;;-1:-1:-1;872:48:77;;;407:4081:119;;;-1:-1:-1;407:4081:119;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;;-1:-1:-1;407:4081:119;;;;;;-1:-1:-1;;407:4081:119;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610b2057806354fd4d5014610a325780635bf2f20d146109f85780636b122fe0146108625780637d2c2931146107975780638371ef591461073957806388e5b2d9146106ec578063891d9ea81461070b57806391db0b7e146106ec5780639c13d80e14610664578063b3b902d414610619578063c6ec50701461051e578063c93844be146103a1578063cce1f561146102c2578063ce46e046146102a8578063e49617e11461028d578063e60c35051461028d578063e6c9714d1461016d5763f0ffa1850361000e57346101695760a0366003190112610169576004356001600160401b0381116101695761012c903690600401610d8b565b610134610d37565b9161013d610d61565b606435906001600160a01b038216820361016957602094610161946084359461195f565b604051908152f35b5f80fd5b34610169576060366003190112610169576004356001600160401b03811161016957610140600319823603011261016957604051906101ab82610c0b565b80600401358252602481013560208301526101c860448201610d4d565b60408301526101d960648201610d4d565b60608301526101ea60848201610d4d565b608083015260a481013560a083015261020560c48201610d77565b60c083015261021660e48201610d77565b60e08301526102286101048201610ea2565b610100830152610124810135906001600160401b0382116101695760046102529236920101610c99565b6101208201526024356001600160401b0381116101695760209161027d610283923690600401610c99565b90611855565b6040519015158152f35b602061028361029b36610e6e565b6102a3611c1c565b611c5d565b34610169575f3660031901126101695760206040515f8152f35b34610169576040366003190112610169576004356001600160401b038111610169576060600319823603011261016957602061034591610318610326610306610d37565b926040519283916004018683016116ba565b03601f198101835282610c27565b60405163f0ffa18560e01b8152938492839233918291600486016117b4565b03815f305af18015610396575f90610363575b602090604051908152f35b506020813d60201161038e575b8161037d60209383610c27565b810103126101695760209051610358565b3d9150610370565b6040513d5f823e3d90fd5b34610169576020366003190112610169576004356001600160401b038111610169576103d1903690600401610d8b565b6103d96117f7565b50810190602081830312610169578035906001600160401b0382116101695701606081830312610169576040519061041082610bba565b61041981610d77565b825260208101356001600160401b038111610169578361043a918301610c99565b60208301526040810135906001600160401b0382116101695701604081840312610169576040519061046b82610bd5565b803582526020810135906001600160401b03821161016957019260c084820312610169576040519061049c82610bf0565b6104a585610d77565b82526104b360208601610d4d565b60208301526104c460408601610ea2565b6040830152606085013560608301526080850135946001600160401b038611610169576104f860a09261051a978301610c99565b6080840152013560a08201526020820152604082015260405191829182610e27565b0390f35b34610169576020366003190112610169576105376117f7565b50610540610ef2565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610396575f916105f7575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105e8576105dc61012061051a92015160208082518301019101611059565b60405191829182610e27565b635527981560e11b5f5260045ffd5b61061391503d805f833e61060b8183610c27565b810190610f7e565b81610595565b34610169576060366003190112610169576004356001600160401b0381116101695761016161064e6020923690600401610d8b565b610656610d37565b91604435923392339261195f565b34610169576060366003190112610169576004356001600160401b03811161016957606060031982360301126101695760206106be6106a1610d37565b6106cc6106ac610d61565b946040519384916004018683016116ba565b03601f198101845283610c27565b610345604051948593849363f0ffa18560e01b85523391600486016117b4565b60206102836106fa36610ce7565b92610706929192611c1c565b6111b4565b346101695761051a61072561071f36610b51565b90611258565b604051918291602083526020830190610b67565b34610169576020366003190112610169576004356001600160401b0381116101695761076c610771913690600401610c99565b61118b565b604080516001600160a01b03909316835260208301819052829161051a91830190610b67565b34610169576020366003190112610169576004356107b3610ef2565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610846575b5061081957506301fb6dd160e01b5f5260045260245ffd5b606001516001600160401b0316421061083757602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b61085b9192503d805f833e61060b8183610c27565b9083610801565b34610169575f3660031901126101695760608060405161088181610b8b565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610396575f90610948575b60609061051a604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b67565b503d805f833e6109588183610c27565b810190602081830312610169578051906001600160401b0382116101695701608081830312610169576040519061098e82610b8b565b8051825260208101516001600160a01b03811681036101695760208301526109b860408201610eaf565b60408301526060810151906001600160401b038211610169570182601f82011215610169576060928160206109ef93519101610ebc565b82820152610902565b34610169575f3660031901126101695760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610169575f3660031901126101695761051a60206107256001610a757f0000000000000000000000000000000000000000000000000000000000000000611aaf565b8184610aa07f0000000000000000000000000000000000000000000000000000000000000000611aaf565b8180610acb7f0000000000000000000000000000000000000000000000000000000000000000611aaf565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c27565b3461016957610b3161071f36610b51565b602081519181808201938492010103126101695760209051604051908152f35b6040906003190112610169576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610ba657604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ba657604052565b604081019081106001600160401b03821117610ba657604052565b60c081019081106001600160401b03821117610ba657604052565b61014081019081106001600160401b03821117610ba657604052565b90601f801991011681019081106001600160401b03821117610ba657604052565b6001600160401b038111610ba657601f01601f191660200190565b929192610c6f82610c48565b91610c7d6040519384610c27565b829481845281830111610169578281602093845f960137010152565b9080601f8301121561016957816020610cb493359101610c63565b90565b9181601f84011215610169578235916001600160401b038311610169576020808501948460051b01011161016957565b6040600319820112610169576004356001600160401b0381116101695781610d1191600401610cb7565b92909291602435906001600160401b03821161016957610d3391600401610cb7565b9091565b602435906001600160401b038216820361016957565b35906001600160401b038216820361016957565b604435906001600160a01b038216820361016957565b35906001600160a01b038216820361016957565b9181601f84011215610169578235916001600160401b038311610169576020838186019501011161016957565b602090805183520151906040602082015260018060a01b0382511660408201526001600160401b036020830151166060820152604082015115156080820152606082015160a082015260e060a0610e1e608085015160c080860152610100850190610b67565b93015191015290565b90610cb4916020815260018060a01b0382511660208201526040610e5960208401516060838501526080840190610b67565b920151906060601f1982850301910152610db8565b602060031982011261016957600435906001600160401b038211610169576101409082900360031901126101695760040190565b3590811515820361016957565b5190811515820361016957565b929192610ec882610c48565b91610ed66040519384610c27565b829481845281830111610169578281602093845f96015e010152565b60405190610eff82610c0b565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361016957565b51906001600160a01b038216820361016957565b9080601f83011215610169578151610cb492602001610ebc565b602081830312610169578051906001600160401b0382116101695701610140818303126101695760405191610fb283610c0b565b8151835260208201516020840152610fcc60408301610f3c565b6040840152610fdd60608301610f3c565b6060840152610fee60808301610f3c565b608084015260a082015160a084015261100960c08301610f50565b60c084015261101a60e08301610f50565b60e084015261102c6101008301610eaf565b6101008401526101208201516001600160401b038111610169576110509201610f64565b61012082015290565b602081830312610169578051906001600160401b038211610169570190606082820312610169576040519161108d83610bba565b61109681610f50565b835260208101516001600160401b03811161016957826110b7918301610f64565b60208401526040810151906001600160401b03821161016957019060408282031261016957604051916110e983610bd5565b805183526020810151906001600160401b03821161016957019060c082820312610169576040519161111a83610bf0565b61112381610f50565b835261113160208201610f3c565b602084015261114260408201610eaf565b60408401526060810151606084015260808101516001600160401b0381116101695760a092611172918301610f64565b6080840152015160a08201526020820152604082015290565b61119e9060208082518301019101611059565b80516020909101516001600160a01b0390911691565b929092818403611249575f91345b8584101561123e578184101561122a578360051b808601359082821161121b5784013561013e1985360301811215610169576111ff908501611c5d565b1561121057600191039301926111c2565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611262610ef2565b5061126b610ef2565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f918161164d575b506112d357856301fb6dd160e01b5f5260045260245ffd5b9491929394906040516328c44a9960e21b81528660048201525f81602481855afa5f9181611631575b5061131457866301fb6dd160e01b5f5260045260245ffd5b9591929394959261132481611c76565b156116225761140360206101208084019360c088611415611345885161118b565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b67565b84810360031901602486015290610b67565b604483019190915203916001600160a01b03165afa908115610396575f916115e8575b50156115d95760405161144a81610bd5565b8581525f60208201526040519061146082610bd5565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152833b1561016957604051634692626760e01b81529151600483015251805160248301526020015160448201525f8160648183875af190816115c4575b506114df5763614cf93960e01b86526004859052602486fd5b611524869260406114ff6020949896979851858082518301019101611059565b015160405194858094819363f17325e760e01b83528760048401526024830190610db8565b03925af1859181611590575b5061154457638d7100d760e01b8552600485fd5b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c090949360405195602087015260208652611580604087610c27565b516001600160a01b03169380a490565b9091506020813d6020116115bc575b816115ac60209383610c27565b810103126101695751905f611530565b3d915061159f565b6115d19197505f90610c27565b5f955f6114c6565b630ebe58ef60e11b5f5260045ffd5b90506020813d60201161161a575b8161160360209383610c27565b810103126101695761161490610eaf565b5f611438565b3d91506115f6565b63629cd40b60e11b5f5260045ffd5b6116469192503d805f833e61060b8183610c27565b905f6112fc565b6116629192503d805f833e61060b8183610c27565b905f6112bb565b9035601e19823603018112156101695701602081359101916001600160401b03821161016957813603831361016957565b908060209392818452848401375f828201840152601f01601f1916010190565b602081526001600160a01b036116cf83610d77565b1660208201526116f66116e56020840184611669565b60606040850152608084019161169a565b916040810135603e19823603018112156101695701906060601f198285030191015280358252602081013560be1982360301811215610169576040602084015201906001600160a01b0361174983610d77565b1660408201526001600160401b0361176360208401610d4d565b16606082015261177560408301610ea2565b15156080820152606082013560a082015260e060a06117ab61179a6080860186611669565b60c08087015261010086019161169a565b93013591015290565b90935f936001600160401b036117d6608095989760a0865260a0860190610b67565b971660208401526001600160a01b0390811660408401521660608201520152565b6040519061180482610bba565b815f815260606020820152604080519161181d83610bd5565b5f8352815161182b81610bf0565b5f81525f60208201525f838201525f6060820152606060808201525f60a082015260208401520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119505761188981611c76565b1561194a576118a96101206118b992015160208082518301019101611059565b9160208082518301019101611059565b60408201516040516118db816103186020820194602086526040830190610db8565b5190206040820151604051611900816103186020820194602086526040830190610db8565b519020149182611931575b8261191557505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061190b565b50505f90565b635f9bd90760e11b5f5260045ffd5b6020935061198390611a1697969295939561197b368284610c63565b503691610c63565b906001600160401b036040519361199985610bf0565b60018060a01b031695868552168484015260016040840152606083015260808201525f60a0820152604051906119ce82610bd5565b7f00000000000000000000000000000000000000000000000000000000000000008252828201526040518095819263f17325e760e01b83528460048401526024830190610db8565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610396575f93611a7b575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011611aa7575b81611a9760209383610c27565b810103126101695751915f611a53565b3d9150611a8a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611bf9575b806d04ee2d6d415b85acef8100000000600a921015611bde575b662386f26fc10000811015611bca575b6305f5e100811015611bb9575b612710811015611baa575b6064811015611b9c575b1015611b91575b600a60216001840193611b3685610c48565b94611b446040519687610c27565b808652611b53601f1991610c48565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b8c57600a9091611b5e565b505090565b600190910190611b24565b606460029104930192611b1d565b61271060049104930192611b13565b6305f5e10060089104930192611b08565b662386f26fc1000060109104930192611afb565b6d04ee2d6d415b85acef810000000060209104930192611aeb565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611ad1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c4e57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361016957301490565b6001600160401b036060820151168015159081611cc7575b50611cb857608001516001600160401b0316611ca957600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c8e56fea2646970667358221220f910b1f477527c62b8fcc171ad0be8058f737c541ad9ba79a8f020c6d710920b64736f6c634300081b0033",
    sourceMap: "407:4081:119:-:0;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;;;1183:12:9;;;1054:5;1183:12;407:4081:119;1054:5:9;1183:12;407:4081:119;;;;;;;;;;4040:29;407:4081;4040:29;;;407:4081;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;407:4081:119;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;407:4081:119:-;;;;;;-1:-1:-1;;407:4081:119;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;3263:187;407:4081;3304:16;;407:4081;;:::i;:::-;;;;;;;;;3304:16;;;;:::i;:::-;;1055:104:6;;3304:16:119;;;;;;:::i;:::-;407:4081;;-1:-1:-1;;;3263:187:119;;407:4081;;;;;3370:10;;;;407:4081;3263:187;;;:::i;:::-;;:4;407:4081;3263:4;:187;;;;;;407:4081;3263:187;;;407:4081;;;;;;;;;3263:187;;407:4081;3263:187;;407:4081;3263:187;;;;;;407:4081;3263:187;;;:::i;:::-;;;407:4081;;;;;;;3263:187;;;;;-1:-1:-1;3263:187:119;;;407:4081;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;4445:34;;407:4081;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;407:4081:119;;-1:-1:-1;;;2392:23:77;;407:4081:119;;;2392:23:77;;;407:4081:119;-1:-1:-1;407:4081:119;2392:23:77;407:4081:119;2392:3:77;-1:-1:-1;;;;;407:4081:119;2392:23:77;;;;;;;407:4081:119;2392:23:77;;;407:4081:119;2429:19:77;407:4081:119;2429:19:77;;407:4081:119;2452:18:77;2429:41;2425:87;;4260:46:119;4271:16;407:4081;4271:16;;;407:4081;;;;4260:46;;;;;;:::i;:::-;407:4081;;;;;;;:::i;2425:87:77:-;2491:21;;;407:4081:119;2491:21:77;407:4081:119;;2491:21:77;2392:23;;;;;;407:4081:119;2392:23:77;;;;;;:::i;:::-;;;;;:::i;:::-;;;;407:4081:119;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;716:142:80;407:4081:119;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;407:4081:119:-;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;3687:16;407:4081;;:::i;:::-;3687:16;407:4081;;:::i;:::-;;;;;;;;;3687:16;;;;:::i;:::-;;1055:104:6;;3687:16:119;;;;;;:::i;:::-;3646:186;407:4081;;;;;;;;;;3646:186;;3753:10;3646:186;407:4081;3646:186;;;:::i;407:4081::-;;1442:1461:9;407:4081:119;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;407:4081:119:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4081:119;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4081:119;;;;;;;;:::i;:::-;-1:-1:-1;407:4081:119;;-1:-1:-1;;;3989:23:78;;407:4081:119;3989:23:78;;407:4081:119;;;-1:-1:-1;407:4081:119;3989:23:78;407:4081:119;3989:3:78;-1:-1:-1;;;;;407:4081:119;3989:23:78;;407:4081:119;;3989:23:78;;;407:4081:119;-1:-1:-1;3985:172:78;;4122:24;;;;407:4081:119;4122:24:78;407:4081:119;;3989:23:78;407:4081:119;4122:24:78;3985:172;4189:26;;407:4081:119;-1:-1:-1;;;;;407:4081:119;4171:15:78;:44;4167:87;;407:4081:119;;;;;;;4167:87:78;4236:18;;;407:4081:119;4236:18:78;407:4081:119;;4236:18:78;3989:23;;;;;;;407:4081:119;3989:23:78;;;;;;:::i;:::-;;;;;407:4081:119;;;;;;-1:-1:-1;;407:4081:119;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;407:4081:119;1497:44:77;;407:4081:119;;;1497:44:77;407:4081:119;;;;;;1497:14:77;407:4081:119;1497:44:77;;;;;;407:4081:119;1497:44:77;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;407:4081:119;1497:44:77;;;;;;:::i;:::-;;;407:4081:119;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;407:4081:119;;;;;;-1:-1:-1;;407:4081:119;;;;;;;542:43:77;407:4081:119;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;1055:104:6;;407:4081:119;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;407:4081:119;;;;;;;;;;;;1055:104:6;;;407:4081:119;;;;-1:-1:-1;;;407:4081:119;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;407:4081:119:-;;;;3986:37;407:4081;;;:::i;3986:37::-;407:4081;;;4040:29;;;;;;;;;;407:4081;;;;4040:29;407:4081;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;;;-1:-1:-1;;407:4081:119;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;;;;-1:-1:-1;407:4081:119;;;;;-1:-1:-1;407:4081:119;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;;;1055:104:6;;407:4081:119;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;:::o;:::-;-1:-1:-1;;;;;407:4081:119;;;;;;-1:-1:-1;;407:4081:119;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4081:119;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1055:104:6;407:4081:119;1055:104:6;;407:4081:119;;;;;;;;:::i;:::-;;-1:-1:-1;;407:4081:119;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;-1:-1:-1;;407:4081:119;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;407:4081:119;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:119;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;1126:267::-;1302:34;1126:267;1302:34;407:4081;;;1302:34;;;;;;:::i;:::-;407:4081;;1302:34;1371:14;;;;-1:-1:-1;;;;;407:4081:119;;;;1126:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;407:4081:119;;;;;;;;;;;;;4064:22:9;;;;4060:87;;407:4081:119;;;;;;;;;;;;;;4274:33:9;407:4081:119;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;407:4081:119;;3896:19:9;407:4081:119;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;407:4081:119;;;;3881:1:9;407:4081:119;;;;;3881:1:9;407:4081:119;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;407:4081:119;;:::i;:::-;2224:30:78;407:4081:119;;:::i;:::-;-1:-1:-1;407:4081:119;;-1:-1:-1;;;2317:27:78;;;;;407:4081:119;;;2317:3:78;-1:-1:-1;;;;;407:4081:119;;-1:-1:-1;407:4081:119;2317:27:78;407:4081:119;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;407:4081:119;2317:27:78;-1:-1:-1;2493:28:78;2313:219;2428:26;;;;;2313:219;407:4081:119;;;;;2546:32:78;;;2317:27;2546:32;;407:4081:119;-1:-1:-1;2546:32:78;2317:27;2546:32;;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;407:4081:119;2317:27:78;-1:-1:-1;2732:33:78;2542:234;2662:31;;;;;;2542:234;2791:24;;;:::i;:::-;2790:25;2786:64;;407:4081:119;;2994:11:78;;;;;407:4081:119;2994:11:78;407:4081:119;2957:58:78;2994:11;;2957:58;:::i;:::-;407:4081:119;;;;;;;;;;;;;;;;;3086:66:78;;407:4081:119;2317:27:78;3086:66;;407:4081:119;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;407:4081:119;2317:27:78;407:4081:119;;;;;:::i;:::-;;;;;;;;3086:66:78;;-1:-1:-1;;;;;407:4081:119;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;407:4081:119;;;;;:::i;:::-;;;;-1:-1:-1;407:4081:119;3372:47:78;;407:4081:119;;;;;;;:::i;:::-;3326:18:78;407:4081:119;;;3278:160:78;;407:4081:119;;;3250:202:78;;;;;407:4081:119;;-1:-1:-1;;;3250:202:78;;407:4081:119;;2317:27:78;3250:202;;407:4081:119;;;;2317:27:78;407:4081:119;;;;;;;;;;-1:-1:-1;407:4081:119;;;-1:-1:-1;3250:202:78;;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;407:4081:119;;;2317:27:78;3491:25;;3234:293;407:4081:119;3234:293:78;;407:4081:119;1802:74;407:4081;3234:293:78;;;;;3625:11;407:4081:119;;;;1802:74;;;;;;:::i;:::-;1934:19;;407:4081;;;;;;;;;;;1923:31;;;2317:27:78;1923:31:119;;407:4081;2317:27:78;407:4081:119;;;;:::i;:::-;1923:31;;;;;;;;;3234:293:78;-1:-1:-1;1919:169:119;;-1:-1:-1;;;2050:27:119;;2317::78;2050::119;;1919:169;3723:61:78;1991:20:119;;;407:4081;;2105:26;407:4081;2105:26;;407:4081;;2105:26;;;407:4081;2105:26;;:::i;:::-;407:4081;-1:-1:-1;;;;;407:4081:119;;3723:61:78;;2054:1760;:::o;1923:31:119:-;;;;407:4081;1923:31;;407:4081;1923:31;;;;;;407:4081;1923:31;;;:::i;:::-;;;407:4081;;;;;1923:31;;;;;;;-1:-1:-1;1923:31:119;;3250:202:78;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;407:4081:119;3086:66:78;;407:4081:119;3086:66:78;;;;;;407:4081:119;3086:66:78;;;:::i;:::-;;;407:4081:119;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;407:4081:119;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;;;-1:-1:-1;;407:4081:119;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:119;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1055:104:6;407:4081:119;1055:104:6;;407:4081:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:119;;;:::i;:::-;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:119;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;-1:-1:-1;407:4081:119;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;407:4081:119;;;;;;;:::i;:::-;-1:-1:-1;407:4081:119;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;-1:-1:-1;407:4081:119;;;;;;;;;-1:-1:-1;407:4081:119;;;;;;;;;;:::o;2360:711::-;2573:18;1016:17:76;;;407:4081:119;1016:27:76;1012:55;;1084:27;;;:::i;:::-;2545:47:119;2541:65;;2648:79;2672:15;2772:36;2672:15;;;1016:17:76;407:4081:119;;;2648:79;;;;;;:::i;:::-;407:4081;1016:17:76;407:4081:119;;;2772:36;;;;;;:::i;:::-;2859:18;;;;;407:4081;2848:30;;407:4081;1016:17:76;2848:30:119;;407:4081;1016:17:76;407:4081:119;;2859:18;407:4081;;;;:::i;2848:30::-;407:4081;2838:41;;2859:18;2916:22;;;2859:18;407:4081;2905:34;;407:4081;1016:17:76;2905:34:119;;407:4081;1016:17:76;407:4081:119;;2859:18;407:4081;;;;:::i;2905:34::-;407:4081;2895:45;;2838:102;:154;;;;2360:711;2838:226;;;2819:245;;2360:711;:::o;2838:226::-;1016:17:76;3018:13:119;;;;;;407:4081;;;;;3008:24;3046:17;;;1016::76;407:4081:119;;;;3036:28;3008:56;2360:711;:::o;2838:154::-;407:4081;;;;-1:-1:-1;;;;;407:4081:119;;;;;2956:36;;-1:-1:-1;2838:154:119;;2541:65;2594:12;;407:4081;2594:12;:::o;1012:55:76:-;1052:15;;;407:4081:119;1052:15:76;;407:4081:119;1052:15:76;871:377:80;1914:299:77;871:377:80;;407:4081:119;871:377:80;407:4081:119;871:377:80;;;;;;407:4081:119;;;;;:::i;:::-;;;;;:::i;:::-;;-1:-1:-1;;;;;407:4081:119;;;;;;:::i;:::-;;;;;;;;;;;;1914:299:77;;;407:4081:119;2076:4:77;407:4081:119;1914:299:77;;407:4081:119;1914:299:77;;;407:4081:119;1914:299:77;;;407:4081:119;-1:-1:-1;1914:299:77;;;407:4081:119;;;;;;;:::i;:::-;1868:18:77;407:4081:119;;1819:413:77;;;407:4081:119;;;;;;;;;;1791:455:77;;;;;;407:4081:119;;;;;;:::i;:::-;1791:455:77;407:4081:119;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;407:4081:119;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;871:377:80;1134:55;;4820:26:78;-1:-1:-1;4820:26:78;;871:377:80:o;1791:455:77:-;;;;1914:299;1791:455;;1914:299;1791:455;;;;;;407:4081:119;1791:455:77;;;:::i;:::-;;;407:4081:119;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;407:4081:119;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;407:4081:119;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;407:4081:119;;-1:-1:-1;;;1033:111:63;;;;407:4081:119;1033:111:63;407:4081:119;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;407:4081:119;;;;26127:66:70;;26014:100;26027:7;26098:1;407:4081:119;;;;26014:100:70;;;25901;25914:7;25985:1;407:4081:119;;;;25901:100:70;;;25788;25801:7;25872:1;407:4081:119;;;;25788:100:70;;;25672:103;25685:8;25758:2;407:4081:119;;;;25672:103:70;;;25556;25569:8;25642:2;407:4081:119;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;407:4081:119;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;407:4081:119;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;407:4081:119;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;407:4081:119;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;407:4081:119;-1:-1:-1;;;;;407:4081:119;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2641,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2684,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2727,
          length: 32
        }
      ],
      "3008": [
        {
          start: 7198,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2259,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1373,
          length: 32
        },
        {
          start: 1999,
          length: 32
        },
        {
          start: 4738,
          length: 32
        },
        {
          start: 6683,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1437,
          length: 32
        },
        {
          start: 2209,
          length: 32
        },
        {
          start: 2575,
          length: 32
        },
        {
          start: 5218,
          length: 32
        },
        {
          start: 6231,
          length: 32
        },
        {
          start: 6608,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,(bytes32,(address,uint64,bool,bytes32,bytes,uint256))),uint64)": "cce1f561",
    "doObligationFor((address,bytes,(bytes32,(address,uint64,bool,bytes32,bytes,uint256))),uint64,address)": "9c13d80e",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationCreationFailed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/AttestationEscrowObligation.sol":"AttestationEscrowObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation.sol":{"keccak256":"0x8dacc27072a9e9d4ff4ba77b2a5d5ba0e877991ce18710db2f25506288b47a46","license":"UNLICENSED","urls":["bzz-raw://8b19b185874889feecc9fcd19ab9d3713f7ad5b6adb5b8e0fb964e4b9c80375b","dweb:/ipfs/QmdXP6zn1y65qKdGNc4Atyc4URrcBBSXehrfZFxXEZnD9c"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationCreationFailed"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct AttestationEscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "struct AttestationRequest",
                  name: "attestation",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "schema",
                      type: "bytes32"
                    },
                    {
                      internalType: "struct AttestationRequestData",
                      name: "data",
                      type: "tuple",
                      components: [
                        {
                          internalType: "address",
                          name: "recipient",
                          type: "address"
                        },
                        {
                          internalType: "uint64",
                          name: "expirationTime",
                          type: "uint64"
                        },
                        {
                          internalType: "bool",
                          name: "revocable",
                          type: "bool"
                        },
                        {
                          internalType: "bytes32",
                          name: "refUID",
                          type: "bytes32"
                        },
                        {
                          internalType: "bytes",
                          name: "data",
                          type: "bytes"
                        },
                        {
                          internalType: "uint256",
                          name: "value",
                          type: "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct AttestationEscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "struct AttestationRequest",
                  name: "attestation",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "schema",
                      type: "bytes32"
                    },
                    {
                      internalType: "struct AttestationRequestData",
                      name: "data",
                      type: "tuple",
                      components: [
                        {
                          internalType: "address",
                          name: "recipient",
                          type: "address"
                        },
                        {
                          internalType: "uint64",
                          name: "expirationTime",
                          type: "uint64"
                        },
                        {
                          internalType: "bool",
                          name: "revocable",
                          type: "bool"
                        },
                        {
                          internalType: "bytes32",
                          name: "refUID",
                          type: "bytes32"
                        },
                        {
                          internalType: "bytes",
                          name: "data",
                          type: "bytes"
                        },
                        {
                          internalType: "uint256",
                          name: "value",
                          type: "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct AttestationEscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "struct AttestationRequest",
                  name: "attestation",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "schema",
                      type: "bytes32"
                    },
                    {
                      internalType: "struct AttestationRequestData",
                      name: "data",
                      type: "tuple",
                      components: [
                        {
                          internalType: "address",
                          name: "recipient",
                          type: "address"
                        },
                        {
                          internalType: "uint64",
                          name: "expirationTime",
                          type: "uint64"
                        },
                        {
                          internalType: "bool",
                          name: "revocable",
                          type: "bool"
                        },
                        {
                          internalType: "bytes32",
                          name: "refUID",
                          type: "bytes32"
                        },
                        {
                          internalType: "bytes",
                          name: "data",
                          type: "bytes"
                        },
                        {
                          internalType: "uint256",
                          name: "value",
                          type: "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct AttestationEscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "struct AttestationRequest",
                  name: "attestation",
                  type: "tuple",
                  components: [
                    {
                      internalType: "bytes32",
                      name: "schema",
                      type: "bytes32"
                    },
                    {
                      internalType: "struct AttestationRequestData",
                      name: "data",
                      type: "tuple",
                      components: [
                        {
                          internalType: "address",
                          name: "recipient",
                          type: "address"
                        },
                        {
                          internalType: "uint64",
                          name: "expirationTime",
                          type: "uint64"
                        },
                        {
                          internalType: "bool",
                          name: "revocable",
                          type: "bool"
                        },
                        {
                          internalType: "bytes32",
                          name: "refUID",
                          type: "bytes32"
                        },
                        {
                          internalType: "bytes",
                          name: "data",
                          type: "bytes"
                        },
                        {
                          internalType: "uint256",
                          name: "value",
                          type: "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/AttestationEscrowObligation.sol": "AttestationEscrowObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation.sol": {
        keccak256: "0x8dacc27072a9e9d4ff4ba77b2a5d5ba0e877991ce18710db2f25506288b47a46",
        urls: [
          "bzz-raw://8b19b185874889feecc9fcd19ab9d3713f7ad5b6adb5b8e0fb964e4b9c80375b",
          "dweb:/ipfs/QmdXP6zn1y65qKdGNc4Atyc4URrcBBSXehrfZFxXEZnD9c"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 119
};

// src/contracts/AttestationEscrowObligation2.ts
var abi34 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "VALIDATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation2.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestationUid",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation2.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestationUid",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation2.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestationUid",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct AttestationEscrowObligation2.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "attestationUid",
              type: "bytes32",
              internalType: "bytes32"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "407:4453:120:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;966:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;790:10;407:4453:120;790:10:9;;;789::77;;809:32;;407:4453:120;;;;;;;;;;872:48:77;;407:4453:120;872:48:77;;;407:4453:120;;;;;;;;;;;;;-1:-1:-1;407:4453:120;;;;;;904:4:77;407:4453:120;;;;966:4;407:4453;;;;;;;;;;;;872:48:77;;;-1:-1:-1;872:48:77;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;-1:-1:-1;851:69:77;407:4453:120;851:69:77;;;1057:117:120;407:4453;;;;;;;;;1057:117;;407:4453;872:48:77;1057:117:120;;407:4453;;;;;;;;;;;904:4:77;407:4453:120;;;;966:4;407:4453;;;;1057:117;;;;;;;-1:-1:-1;1057:117:120;;;-1:-1:-1;1037:137:120;;;407:4453;;;;;;;;759:14:6;407:4453:120;;;;;783:14:6;407:4453:120;;;;;807:14:6;407:4453:120;;;;;790:10:9;407:4453:120;;;;;809:32:77;407:4453:120;;;;;789:10:77;407:4453:120;;;;;;;;;;;;;;;;;;;;851:69:77;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1037:137;407:4453;;;;;;;;;;;1057:117;;;407:4453;1057:117;;407:4453;1057:117;;;;;;407:4453;1057:117;;;:::i;:::-;;;407:4453;;;;;1057:117;;;407:4453;-1:-1:-1;407:4453:120;;1057:117;;;-1:-1:-1;1057:117:120;;;407:4453;;;-1:-1:-1;407:4453:120;;;;;872:48:77;;;407:4453:120;872:48:77;;407:4453:120;872:48:77;;;;;;407:4453:120;872:48:77;;;:::i;:::-;;;407:4453:120;;;;;-1:-1:-1;872:48:77;;;;;-1:-1:-1;872:48:77;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;;-1:-1:-1;407:4453:120;;;;;;-1:-1:-1;;407:4453:120;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "",
    sourceMap: "407:4453:120:-:0;;;;;;;;;-1:-1:-1;407:4453:120;;;;;;;;1183:12:9;;;1054:5;1183:12;407:4453:120;1054:5:9;1183:12;407:4453:120;;;;;;;;;;4412:29;407:4453;4412:29;;;407:4453;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;407:4453:120;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;407:4453:120:-;;;;;;-1:-1:-1;;407:4453:120;;;;;;;526:42;407:4453;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;4817:34;;407:4453;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;407:4453:120;;-1:-1:-1;;;2392:23:77;;407:4453:120;;;2392:23:77;;;407:4453:120;-1:-1:-1;407:4453:120;2392:23:77;407:4453:120;2392:3:77;-1:-1:-1;;;;;407:4453:120;2392:23:77;;;;;;;407:4453:120;2392:23:77;;;407:4453:120;2429:19:77;407:4453:120;2429:19:77;;407:4453:120;2452:18:77;2429:41;2425:87;;4632:46:120;4643:16;407:4453;4643:16;;;407:4453;;;;4632:46;;;;;;:::i;:::-;407:4453;;;;;;;:::i;2425:87:77:-;2491:21;;;407:4453:120;2491:21:77;407:4453:120;;2491:21:77;2392:23;;;;;;407:4453:120;2392:23:77;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;407:4453:120;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;4059:16;407:4453;;:::i;:::-;4059:16;407:4453;;:::i;:::-;;;;;;;;;4059:16;;;;:::i;:::-;;1055:104:6;;4059:16:120;;;;;;:::i;:::-;4018:186;407:4453;;;;;;;;;;4018:186;;4125:10;4018:186;407:4453;4018:186;;;:::i;:::-;;:4;407:4453;4018:4;:186;;;;;;407:4453;4018:186;;;407:4453;;;;;;;;;4018:186;;407:4453;4018:186;;407:4453;4018:186;;;;;;407:4453;4018:186;;;:::i;:::-;;;407:4453;;;;;;;4018:186;;;;;-1:-1:-1;4018:186:120;;407:4453;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;716:142:80;407:4453:120;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;407:4453:120:-;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;3635:187;407:4453;3676:16;;407:4453;;:::i;:::-;;;;;;;;;3676:16;;;;:::i;:::-;;1055:104:6;;3676:16:120;;;;;;:::i;:::-;407:4453;;-1:-1:-1;;;3635:187:120;;407:4453;;;;;3742:10;;;;407:4453;3635:187;;;:::i;407:4453::-;;1442:1461:9;407:4453:120;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;407:4453:120:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4453:120;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4453:120;;;;;;;;:::i;:::-;-1:-1:-1;407:4453:120;;-1:-1:-1;;;3989:23:78;;407:4453:120;3989:23:78;;407:4453:120;;;-1:-1:-1;407:4453:120;3989:23:78;407:4453:120;3989:3:78;-1:-1:-1;;;;;407:4453:120;3989:23:78;;407:4453:120;;3989:23:78;;;407:4453:120;-1:-1:-1;3985:172:78;;4122:24;;;;407:4453:120;4122:24:78;407:4453:120;;3989:23:78;407:4453:120;4122:24:78;3985:172;4189:26;;407:4453:120;-1:-1:-1;;;;;407:4453:120;4171:15:78;:44;4167:87;;407:4453:120;;;;;;;4167:87:78;4236:18;;;407:4453:120;4236:18:78;407:4453:120;;4236:18:78;3989:23;;;;;;;407:4453:120;3989:23:78;;;;;;:::i;:::-;;;;;407:4453:120;;;;;;-1:-1:-1;;407:4453:120;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;407:4453:120;1497:44:77;;407:4453:120;;;1497:44:77;407:4453:120;;;;;;1497:14:77;407:4453:120;1497:44:77;;;;;;407:4453:120;1497:44:77;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;407:4453:120;1497:44:77;;;;;;:::i;:::-;;;407:4453:120;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;407:4453:120;;;;;;-1:-1:-1;;407:4453:120;;;;;;;542:43:77;407:4453:120;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;1055:104:6;;407:4453:120;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;407:4453:120;;;;;;;;;;;;1055:104:6;;;407:4453:120;;;;-1:-1:-1;;;407:4453:120;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;407:4453:120:-;;;;4358:37;407:4453;;;:::i;4358:37::-;407:4453;;;4412:29;;;;;;;;;;407:4453;;;;4412:29;407:4453;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:120;;;;;;;;-1:-1:-1;;407:4453:120;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;;;;-1:-1:-1;407:4453:120;;;;;-1:-1:-1;407:4453:120;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;;;1055:104:6;;407:4453:120;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;:::o;:::-;-1:-1:-1;;;;;407:4453:120;;;;;;-1:-1:-1;;407:4453:120;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4453:120;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4453:120;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;-1:-1:-1;;407:4453:120;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:120;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;407:4453:120;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;-1:-1:-1;407:4453:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1239:267::-;1415:34;1239:267;1415:34;407:4453;;;1415:34;;;;;;:::i;:::-;407:4453;;1415:34;1484:14;;;;-1:-1:-1;;;;;407:4453:120;;;;1239:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;407:4453:120;;;;;;;;;;;;;4064:22:9;;;;4060:87;;407:4453:120;;;;;;;;;;;;;;4274:33:9;407:4453:120;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;407:4453:120;;3896:19:9;407:4453:120;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;407:4453:120;;;;3881:1:9;407:4453:120;;;;;3881:1:9;407:4453:120;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;407:4453:120;;:::i;:::-;2224:30:78;407:4453:120;;:::i;:::-;-1:-1:-1;407:4453:120;;-1:-1:-1;;;2317:27:78;;;;;407:4453:120;;;2317:3:78;-1:-1:-1;;;;;407:4453:120;;-1:-1:-1;407:4453:120;2317:27:78;407:4453:120;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;407:4453:120;2317:27:78;-1:-1:-1;2493:28:78;2313:219;2428:26;;;;;2313:219;407:4453:120;;;;;2546:32:78;;;2317:27;2546:32;;407:4453:120;-1:-1:-1;2546:32:78;2317:27;2546:32;;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;407:4453:120;2317:27:78;-1:-1:-1;2732:33:78;2542:234;2662:31;;;;;2542:234;2791:24;;;:::i;:::-;2790:25;2786:64;;407:4453:120;;2994:11:78;;;;;407:4453:120;2994:11:78;407:4453:120;2957:58:78;2994:11;;2957:58;:::i;:::-;407:4453:120;;;;;;;;;;;;;;;;;3086:66:78;;407:4453:120;2317:27:78;3086:66;;407:4453:120;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;407:4453:120;2317:27:78;407:4453:120;;;;;:::i;:::-;;;;;;;;3086:66:78;;-1:-1:-1;;;;;407:4453:120;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;407:4453:120;;;;;:::i;:::-;;;;-1:-1:-1;407:4453:120;3372:47:78;;407:4453:120;;;;;;;:::i;:::-;3326:18:78;407:4453:120;;;3278:160:78;;407:4453:120;;;3250:202:78;;;;;407:4453:120;;-1:-1:-1;;;3250:202:78;;407:4453:120;;2317:27:78;3250:202;;407:4453:120;;;;2317:27:78;407:4453:120;;;;;;;;;;-1:-1:-1;407:4453:120;;;-1:-1:-1;3250:202:78;;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;407:4453:120;;;2317:27:78;3491:25;;3234:293;2066:446:120;3234:293:78;;;;407:4453:120;3234:293:78;3625:11;407:4453:120;1916:74;407:4453;;;;;;;;;;;;;1916:74;;;;;;:::i;:::-;2354:22;407:4453;;;2404:34;;;;;407:4453;2404:34;;;;407:4453;2404:34;;:::i;:::-;407:4453;;;;;;:::i;:::-;;;2176:311;;;;407:4453;2176:311;407:4453;2176:311;;407:4453;;2176:311;;407:4453;;2176:311;;407:4453;2176:311;407:4453;2176:311;;407:4453;;;;;;;:::i;:::-;2135:17;407:4453;;2090:412;;;407:4453;;;;;;;;;;;;2066:446;;2317:27:78;2066:446:120;;;:::i;:::-;;;;;;;;;;;;;;3234:293:78;407:4453:120;3723:61:78;407:4453:120;;;2530:25;407:4453;2530:25;;407:4453;;2530:25;;;407:4453;2530:25;;:::i;:::-;407:4453;-1:-1:-1;;;;;407:4453:120;;3723:61:78;;2054:1760;:::o;2066:446:120:-;;;;407:4453;2066:446;;407:4453;2066:446;;;;;;407:4453;2066:446;;;:::i;:::-;;;407:4453;;;;;;3723:61:78;2066:446:120;;;;;-1:-1:-1;2066:446:120;;;407:4453;;;;;;;;;3250:202:78;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;407:4453:120;3086:66:78;;407:4453:120;3086:66:78;;;;;;407:4453:120;3086:66:78;;;:::i;:::-;;;407:4453:120;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;407:4453:120;;;;-1:-1:-1;;;;;407:4453:120;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:120;;;;:::o;:::-;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;-1:-1:-1;407:4453:120;;;;;;;;;;;;:::o;2784:659::-;2997:18;1016:17:76;;;407:4453:120;1016:27:76;1012:55;;1084:27;;;:::i;:::-;2969:47:120;2965:65;;3072:79;3096:15;3196:36;3096:15;;;1016:17:76;407:4453:120;;;3072:79;;;;;;:::i;:::-;407:4453;1016:17:76;407:4453:120;;;3196:36;;;;;;:::i;:::-;3262:21;;;407:4453;3262:21;3287:25;;407:4453;3262:50;:102;;;;2784:659;3262:174;;;3243:193;;2784:659;:::o;3262:174::-;1016:17:76;3390:13:120;;;;;;407:4453;;;;;3380:24;3418:17;;;1016::76;407:4453:120;;;;3408:28;3380:56;2784:659;:::o;3262:102::-;407:4453;;;;-1:-1:-1;;;;;407:4453:120;;;;;3328:36;;-1:-1:-1;3262:102:120;;2965:65;3018:12;;407:4453;3018:12;:::o;1012:55:76:-;1052:15;;;407:4453:120;1052:15:76;;407:4453:120;1052:15:76;871:377:80;1914:299:77;871:377:80;;407:4453:120;871:377:80;1791:455:77;871:377:80;;;;;;407:4453:120;;;;;:::i;:::-;;;;;:::i;:::-;;-1:-1:-1;;;;;407:4453:120;;;;;;:::i;:::-;;;;;;;;;;;;1914:299:77;;;407:4453:120;2076:4:77;407:4453:120;1914:299:77;;407:4453:120;1914:299:77;;;407:4453:120;1914:299:77;;;407:4453:120;-1:-1:-1;1914:299:77;;;407:4453:120;;;;;;;:::i;:::-;1868:18:77;407:4453:120;;1819:413:77;;;407:4453:120;;;;;;;;;;1791:455:77;;;;;;:::i;:::-;;407:4453:120;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;407:4453:120;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;871:377:80;1134:55;;4820:26:78;-1:-1:-1;4820:26:78;;871:377:80:o;1791:455:77:-;;;;1914:299;1791:455;;1914:299;1791:455;;;;;;407:4453:120;1791:455:77;;;:::i;:::-;;;407:4453:120;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;407:4453:120;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;407:4453:120;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;407:4453:120;;-1:-1:-1;;;1033:111:63;;;;407:4453:120;1033:111:63;407:4453:120;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;407:4453:120;;;;26127:66:70;;26014:100;26027:7;26098:1;407:4453:120;;;;26014:100:70;;;25901;25914:7;25985:1;407:4453:120;;;;25901:100:70;;;25788;25801:7;25872:1;407:4453:120;;;;25788:100:70;;;25672:103;25685:8;25758:2;407:4453:120;;;;25672:103:70;;;25556;25569:8;25642:2;407:4453:120;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;407:4453:120;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;407:4453:120;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;407:4453:120;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;407:4453:120;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;407:4453:120;-1:-1:-1;;;;;407:4453:120;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2519,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2562,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2605,
          length: 32
        }
      ],
      "3008": [
        {
          start: 6548,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2137,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1028,
          length: 32
        },
        {
          start: 1877,
          length: 32
        },
        {
          start: 4281,
          length: 32
        },
        {
          start: 6033,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1092,
          length: 32
        },
        {
          start: 2087,
          length: 32
        },
        {
          start: 2453,
          length: 32
        },
        {
          start: 4760,
          length: 32
        },
        {
          start: 5652,
          length: 32
        },
        {
          start: 5965,
          length: 32
        }
      ],
      "59594": [
        {
          start: 716,
          length: 32
        },
        {
          start: 5008,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "VALIDATION_SCHEMA()": "df61dd2c",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,bytes32),uint64)": "aadc8f63",
    "doObligationFor((address,bytes,bytes32),uint64,address)": "b5f3baff",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VALIDATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/AttestationEscrowObligation2.sol":"AttestationEscrowObligation2"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation2.sol":{"keccak256":"0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252","license":"UNLICENSED","urls":["bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4","dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "VALIDATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct AttestationEscrowObligation2.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "bytes32",
                  name: "attestationUid",
                  type: "bytes32"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct AttestationEscrowObligation2.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "bytes32",
                  name: "attestationUid",
                  type: "bytes32"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct AttestationEscrowObligation2.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "bytes32",
                  name: "attestationUid",
                  type: "bytes32"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct AttestationEscrowObligation2.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "bytes32",
                  name: "attestationUid",
                  type: "bytes32"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/AttestationEscrowObligation2.sol": "AttestationEscrowObligation2"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation2.sol": {
        keccak256: "0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252",
        urls: [
          "bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4",
          "dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 120
};

// src/clients/attestation.ts
var makeAttestationClient = (viemClient, addresses) => {
  const escrowObligationDataType = getAbiItem4({
    abi: abi33.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const escrow2ObligationDataType = getAbiItem4({
    abi: abi34.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const attestationAbi = [escrowObligationDataType];
  const attestation2Abi = [escrow2ObligationDataType];
  const getEscrowSchema = async () => await viemClient.readContract({
    address: addresses.attestationEscrowObligation,
    abi: abi33.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const getEscrow2Schema = async () => await viemClient.readContract({
    address: addresses.attestationEscrowObligation2,
    abi: abi34.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  return {
    /**
     * Encodes AttestationEscrowObligation.ObligationData to bytes.
     * @param data - ObligationData object to encode
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (data) => {
      return encodeAbiParameters4(attestationAbi, [data]);
    },
    /**
     * Encodes AttestationEscrowObligation2.ObligationData to bytes.
     * @param data - ObligationData object to encode
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrow2Obligation: (data) => {
      return encodeAbiParameters4(attestation2Abi, [data]);
    },
    /**
     * Decodes AttestationEscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return decodeAbiParameters4(attestationAbi, obligationData)[0];
    },
    /**
     * Decodes AttestationEscrowObligation2.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrow2Obligation: (obligationData) => {
      return decodeAbiParameters4(attestation2Abi, obligationData)[0];
    },
    getEscrowSchema,
    getEscrow2Schema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getEscrowObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrowSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters4(attestationAbi, attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getEscrow2Obligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrow2Schema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters4(attestation2Abi, attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    /**
     * Creates an escrow using an attestation as the escrowed item.
     * This function uses the original AttestationEscrowObligation contract where the full attestation
     * data is stored in the escrow obligation. When collecting payment, this contract creates a new
     * attestation as the collection event, requiring the contract to have attestation rights.
     *
     * @param attestation - The attestation data to be escrowed
     * @param item - The arbiter and demand data for the escrow
     * @param expiration - Optional expiration time for the escrow (default: 0 = no expiration)
     * @returns The transaction hash and attested escrow data
     */
    buyWithAttestation: async (attestation, item, expiration = 0n) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation,
        abi: abi33.abi,
        functionName: "doObligation",
        args: [
          {
            attestation,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Collects payment from an attestation escrow by providing a fulfillment attestation.
     * This function is used with the original AttestationEscrowObligation contract.
     *
     * @param escrowAttestation - The UID of the escrow attestation
     * @param fulfillmentAttestation - The UID of the fulfillment attestation
     * @returns The transaction hash and validation attestation data
     */
    collectEscrow: async (escrowAttestation, fulfillmentAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation,
        abi: abi33.abi,
        functionName: "collectEscrow",
        args: [escrowAttestation, fulfillmentAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow using an attestation UID as reference.
     * This function uses AttestationEscrowObligation2 which references the attestation by UID
     * instead of storing the full attestation data, making it more gas efficient. When collecting
     * payment, this contract creates a validation attestation that references the original attestation,
     * allowing it to work with any schema implementation without requiring attestation rights.
     *
     * @param attestationUid - The UID of the attestation to be escrowed
     * @param item - The arbiter and demand data for the escrow
     * @param expiration - Optional expiration time for the escrow (default: 0 = no expiration)
     * @returns The transaction hash and attested escrow data
     */
    buyWithAttestation2: async (attestationUid, item, expiration = 0n) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation2,
        abi: abi34.abi,
        functionName: "doObligation",
        args: [
          {
            attestationUid,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Collects payment from an attestation escrow by providing a fulfillment attestation.
     * This function is used with AttestationEscrowObligation2 and creates a validation
     * attestation referencing the original attestation.
     *
     * @param escrowAttestation - The UID of the escrow attestation
     * @param fulfillmentAttestation - The UID of the fulfillment attestation
     * @returns The transaction hash and validation attestation data
     */
    collectEscrow2: async (escrowAttestation, fulfillmentAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation2,
        abi: abi34.abi,
        functionName: "collectEscrow",
        args: [escrowAttestation, fulfillmentAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Registers a new schema in the EAS Schema Registry.
     *
     * @param schema - The schema string defining the attestation structure
     * @param resolver - The address of the resolver contract
     * @param revocable - Whether attestations using this schema can be revoked
     * @returns The transaction hash
     */
    registerSchema: async (schema, resolver, revocable) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "registerSchema",
        args: [schema, resolver, revocable]
      });
      return hash;
    },
    /**
     * Creates a new attestation using the AttestationBarterUtils contract.
     *
     * @param schema - The schema UID for the attestation
     * @param recipient - The recipient address of the attestation
     * @param expirationTime - The expiration time for the attestation
     * @param revocable - Whether the attestation can be revoked
     * @param refUID - Reference to another attestation UID (if any)
     * @param data - The encoded attestation data
     * @returns The transaction hash and attested data
     */
    createAttestation: async (schema, recipient, expirationTime, revocable, refUID, data) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "attest",
        args: [schema, recipient, expirationTime, revocable, refUID, data]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an attestation and immediately escrows it in a single transaction.
     * This is a convenience function that combines createAttestation and createEscrow.
     *
     * @param attestation - The attestation data to create and escrow
     * @param escrow - The escrow parameters including arbiter, demand, and expiration
     * @returns The transaction hash and attested data
     */
    attestAndCreateEscrow: async (attestation, escrow) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "attestAndCreateEscrow",
        args: [attestation, escrow.arbiter, escrow.demand, escrow.expirationTime]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc20.ts
import { decodeAbiParameters as decodeAbiParameters5, encodeAbiParameters as encodeAbiParameters5, getAbiItem as getAbiItem5, hexToNumber, parseAbiParameter, slice } from "viem";

// src/contracts/ERC20BarterCrossToken.ts
var abi35 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_erc20Escrow",
          type: "address",
          internalType: "contract ERC20EscrowObligation"
        },
        {
          name: "_erc20Payment",
          type: "address",
          internalType: "contract ERC20PaymentObligation"
        },
        {
          name: "_erc721Escrow",
          type: "address",
          internalType: "contract ERC721EscrowObligation"
        },
        {
          name: "_erc721Payment",
          type: "address",
          internalType: "contract ERC721PaymentObligation"
        },
        {
          name: "_erc1155Escrow",
          type: "address",
          internalType: "contract ERC1155EscrowObligation"
        },
        {
          name: "_erc1155Payment",
          type: "address",
          internalType: "contract ERC1155PaymentObligation"
        },
        {
          name: "_bundleEscrow",
          type: "address",
          internalType: "contract TokenBundleEscrowObligation"
        },
        {
          name: "_bundlePayment",
          type: "address",
          internalType: "contract TokenBundlePaymentObligation"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyBundleWithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askData",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc1155WithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc20ForErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc721WithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc20ForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc20ForErc1155",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc20ForErc20",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc20ForErc721",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndBuyBundleWithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askData",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndBuyErc1155WithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndBuyErc20ForErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndBuyErc721WithErc20",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndBuyWithErc20",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayErc20ForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayErc20ForErc1155",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayErc20ForErc20",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayErc20ForErc721",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayWithErc20",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "payee",
          type: "address",
          internalType: "address"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "CouldntCollectEscrow",
      inputs: []
    },
    {
      type: "error",
      name: "PermitFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "reason",
          type: "string",
          internalType: "string"
        }
      ]
    }
  ],
  bytecode: {
    object: "0x6080346101ae57601f61227638819003918201601f19168301916001600160401b038311848410176101b257808492610120946040528339810103126101ae5780516001600160a01b03811691908290036101ae5760208101516001600160a01b038116908190036101ae5760408201516001600160a01b038116908190036101ae5760608301516001600160a01b038116908190036101ae5760808401516001600160a01b03811691908290036101ae5760a08501516001600160a01b03811693908490036101ae5760c08601516001600160a01b03811695908690036101ae5760e08701516001600160a01b03811697908890036101ae5761010001516001600160a01b03811698908990036101ae5760018060a01b03195f5416175f5560018060a01b0319600154161760015560018060a01b0319600254161760025560018060a01b0319600354161760035560018060a01b0319600454161760045560018060a01b0319600554161760055560018060a01b0319600654161760065560018060a01b0319600754161760075560018060a01b031960085416176008556040516120af90816101c78239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081631454e3d214610d34575080631b24bf5214610d185780632bf2ee3914610c6d5780633d94053d14610c5157806346b3aca214610c1157806367cebb7014610a9a57806372448d4d14610983578063759503f2146108d5578063a6c002e914610842578063a7a6884d146107a2578063a827053014610703578063a96addea146106a1578063ab2fc26514610609578063b56edf541461054b578063c17783891461047d578063c266137314610303578063e1982e13146101ab5763e3139e86146100e4575f80fd5b346101a8576100f236610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d5791610166602061015661012061016d97956101729b9a99978d859e9261017a575b5050015182808251830101910161174a565b015189808251830101910161118f565b95866118fc565b611fb2565b604051908152f35b61019692503d8091833e61018e8183610f0f565b810190611034565b5f80610144565b6040513d89823e3d90fd5b80fd5b50346101a8576101003660031901126101a8576101c6610deb565b906024356044356001600160401b0381116102ff5761010060031982360301126102ff576101f2610e41565b9260a43560ff811681036102fb576001546001600160a01b039081169190871690813b156102f75791839291868461024f96946040519788958694859363d505accf60e01b855260e4359260c435926084359133600489016112b2565b03925af191826102e2575b50506102c6578361026961159e565b6308c379a014610295575b6040516308f14ec160e11b81529081906102919060048301611650565b0390fd5b61029d6115b9565b90816102aa579050610274565b6102916040519283926308f14ec160e11b84526004840161162e565b9261017292916102dc6020953690600401611466565b91611eb2565b6102ed828092610f0f565b6101a8578061025a565b8380fd5b5080fd5b8280fd5b50346101a85760e03660031901126101a8578061031e610deb565b602435610329610e01565b6084359260ff84168403610479576002546001600160a01b03918216949116843b156104755761037e918691604051938492839263d505accf60e01b845260c4359160a435918a6064359133600489016112b2565b038183885af190811561046a57859161044c575b5050906020926103ed9260018060a01b036002541692604051926103b584610ed8565b8352858301526001600160a01b03166040808301919091525163446c5bf160e11b8152958693849283919033908190600485016118bd565b03925af19081156104405790610409575b602090604051908152f35b506020813d602011610438575b8161042360209383610f0f565b8101031261043457602090516103fe565b5f80fd5b3d9150610416565b604051903d90823e3d90fd5b8161045991949394610f0f565b6104655790835f610392565b505050fd5b6040513d87823e3d90fd5b8580fd5b8480fd5b50346101a8576101403660031901126101a857610498610deb565b602435916104a4610e01565b926104ad610e2b565b9160e43560ff811681036102fb576001546001600160a01b038681169116813b156102f7579183929183926105089560405180978195829463d505accf60e01b8452610124359161010435918d60c4359133600489016112b2565b03925af19182610536575b5050610522578261026961159e565b610172926020946084359260643592611cf9565b610541828092610f0f565b6101a85780610513565b50346101a85760203660031901126101a85760249060043561056b6111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa809383946105ed575b506105b6576301fb6dd160e01b825260045260249150fd5b6101726020916105e7836105d761012088015182808251830101910161174a565b015184808251830101910161118f565b90611fb2565b6106029194503d8085833e61018e8183610f0f565b925f61059e565b50346101a85761061836610f4b565b60015497999497959695929493926001600160a01b038a81169391169190833b1561047557859493926106668d9387936040519a8b988997889663d505accf60e01b885233600489016112b2565b03925af1918261068c575b5050610680578361026961159e565b60209461017294611ccc565b610697828092610f0f565b6101a85780610671565b50346101a85760803660031901126101a8576106bb610deb565b604435916001600160401b0383116101a85761010060031984360301126101a857602061017284846106f96106ee610e41565b923690600401611466565b9060243590611eb2565b50346101a85760203660031901126101a85780546040516328c44a9960e21b815260048035908201819052918390829060249082906001600160a01b03165afa9081156107975760206105d76101206101729594610776948885999261077c575b5050015182808251830101910161110f565b90611d7c565b61079092503d8091833e61018e8183610f0f565b5f80610764565b6040513d85823e3d90fd5b50346101a8576107b136610f4b565b6001549499959896979695949293926001600160a01b038088169391169190833b1561083e57869493926108008a938793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af180156108335761081e575b60206101728888888888611af6565b610829828092610f0f565b6101a8578061080f565b6040513d84823e3d90fd5b8680fd5b50346101a85761085136610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d579161016660206101566101206108b597956101729b9a99978d859e926108ba575b50500151828082518301019101611218565b611c05565b6108ce92503d8091833e61018e8183610f0f565b5f806108a3565b50346101a85760203660031901126101a8576024906004356108f56111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa80938394610967575b50610940576301fb6dd160e01b825260045260249150fd5b610172602091610961836105d761012088015182808251830101910161110f565b906119e5565b61097c9194503d8085833e61018e8183610f0f565b925f610928565b50346101a85761099236610dbf565b85546040516328c44a9960e21b81526004810187905292969492908590829060249082906001600160a01b03165afa90811561046a576109ed6101206109fe936020938991610a80575b50015182808251830101910161110f565b01516020808251830101910161118f565b8051600254602083015192986001600160a01b03928316949190921691843b15610a7c5791610a4c8896959493928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af1801561083357610a67575b60206101728585611d7c565b610a72828092610f0f565b6101a85780610a5b565b8780fd5b610a9491503d808b833e61018e8183610f0f565b5f6109dc565b50346104345761012036600319011261043457610ab5610deb565b9060243590610ac2610e01565b6064356001600160401b0381116104345736602382011215610434578060040135610aec81610f30565b91610afa6040519384610f0f565b818352366024838301011161043457815f926024602093018386013783010152608435916001600160401b03831683036104345760c4359560ff87168703610434576001546001600160a01b03918216969116863b1561043457610b84975f91604051998a92839263d505accf60e01b8452610104359160e435918860a4359133600489016112b2565b0381838a5af1968715610c06576103ed97610bf1575b506020949560018060a01b03600154169360405193610bb885610ea9565b60018060a01b03168452868401526040830152606082015284604051809781958294631e72ae8160e11b84523391339160048601611317565b602095505f610bff91610f0f565b5f94610b9a565b6040513d5f823e3d90fd5b346104345760c0366003190112610434576020610172610c2f610deb565b610c37610e01565b610c3f610e2b565b91608435916064359160243590611cf9565b34610434576020610172610c6436610e57565b93929092611ccc565b3461043457602036600319011261043457600435610c896111ce565b505f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa5f9181610cfc575b50610cd557506301fb6dd160e01b5f5260045260245ffd5b602091610cf6836105d7610120610172950151828082518301019101611218565b90611c05565b610d119192503d805f833e61018e8183610f0f565b9083610cbd565b34610434576020610172610d2b36610e57565b93929092611af6565b3461043457610d4236610dbf565b5f80546328c44a9960e21b8852600488018790529396929593839060249082906001600160a01b03165afa948515610c0657602096610166886101566101206101729a610da0985f91610da55750015182808251830101910161110f565b6119e5565b610db991503d805f833e61018e8183610f0f565b8d6109dc565b60a090600319011261043457600435906024359060443560ff8116810361043457906064359060843590565b600435906001600160a01b038216820361043457565b604435906001600160a01b038216820361043457565b35906001600160a01b038216820361043457565b60a435906001600160401b038216820361043457565b606435906001600160401b038216820361043457565b60a0906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b03811681036104345790565b608081019081106001600160401b03821117610ec457604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ec457604052565b61014081019081106001600160401b03821117610ec457604052565b90601f801991011681019081106001600160401b03821117610ec457604052565b6001600160401b038111610ec457601f01601f191660200190565b610120906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b0381168103610434579060a4359060c43560ff81168103610434579060e435906101043590565b51906001600160401b038216820361043457565b51906001600160a01b038216820361043457565b5190811515820361043457565b81601f820112156104345780519061100582610f30565b926110136040519485610f0f565b8284526020838301011161043457815f9260208093018386015e8301015290565b602081830312610434578051906001600160401b038211610434570161014081830312610434576040519161106883610ef3565b815183526020820151602084015261108260408301610fb9565b604084015261109360608301610fb9565b60608401526110a460808301610fb9565b608084015260a082015160a08401526110bf60c08301610fcd565b60c08401526110d060e08301610fcd565b60e08401526110e26101008301610fe1565b6101008401526101208201516001600160401b038111610434576111069201610fee565b61012082015290565b602081830312610434578051906001600160401b038211610434570190608082820312610434576040519161114383610ea9565b61114c81610fcd565b835260208101516001600160401b0381116104345760609261116f918301610fee565b602084015261118060408201610fcd565b60408401520151606082015290565b90816060910312610434576111c660408051926111ab84610ed8565b6111b481610fcd565b84526020810151602085015201610fcd565b604082015290565b604051906111db82610ef3565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b602081830312610434578051906001600160401b03821161043457019060a082820312610434576040519160a083018381106001600160401b03821117610ec45760405261126581610fcd565b835260208101516001600160401b03811161043457608092611288918301610fee565b602084015261129960408201610fcd565b6040840152606081015160608401520151608082015290565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b926001600160401b036060939695926080865260018060a01b038151166080870152846113546020830151608060a08a01526101008901906112f3565b6040838101516001600160a01b0390811660c08b0152929093015160e08901529890921660208701529181169185019190915216910152565b6001600160401b038111610ec45760051b60200190565b9080601f830112156104345781356113bb8161138d565b926113c96040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106113f15750505090565b602080916113fe84610e17565b8152019101906113e4565b9080601f830112156104345781356114208161138d565b9261142e6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106114565750505090565b8135815260209182019101611449565b91909161010081840312610434576040519061010082018281106001600160401b03821117610ec457604052819381356001600160401b03811161043457816114b09184016113a4565b835260208201356001600160401b03811161043457816114d1918401611409565b602084015260408201356001600160401b03811161043457816114f59184016113a4565b604084015260608201356001600160401b0381116104345781611519918401611409565b606084015260808201356001600160401b038111610434578161153d9184016113a4565b608084015260a08201356001600160401b0381116104345781611561918401611409565b60a084015260c0820135906001600160401b038211610434578261158e60e0949261159994869401611409565b60c086015201610e17565b910152565b5f9060033d116115aa57565b905060045f803e5f5160e01c90565b5f60443d1061161d576040513d600319016004823e8051913d60248401116001600160401b0384111761162857828201928351916001600160401b038311611620573d84016003190185840160200111611620575061161d92910160200190610f0f565b90565b949350505050565b92915050565b6001600160a01b03909116815260406020820181905261161d929101906112f3565b6001600160a01b039091168152604060208201819052600d908201526c2ab735b737bbb71032b93937b960991b606082015260800190565b9080601f8301121561043457815161169f8161138d565b926116ad6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106116d55750505090565b602080916116e284610fcd565b8152019101906116c8565b9080601f830112156104345781516117048161138d565b926117126040519485610f0f565b81845260208085019260051b82010192831161043457602001905b82821061173a5750505090565b815181526020918201910161172d565b602081830312610434578051906001600160401b038211610434570161012081830312610434576040519161012083018381106001600160401b03821117610ec45760405261179882610fcd565b835260208201516001600160401b03811161043457816117b9918401610fee565b602084015260408201516001600160401b03811161043457816117dd918401611688565b604084015260608201516001600160401b03811161043457816118019184016116ed565b606084015260808201516001600160401b0381116104345781611825918401611688565b608084015260a08201516001600160401b03811161043457816118499184016116ed565b60a084015260c08201516001600160401b038111610434578161186d918401611688565b60c084015260e08201516001600160401b03811161043457816118919184016116ed565b60e08401526101008201516001600160401b038111610434576118b492016116ed565b61010082015290565b81516001600160a01b03908116825260208084015190830152604092830151811692820192909252918116606083015291909116608082015260a00190565b805160025460208301519297969495946001600160a01b039283169392909116833b15610434576119495f96928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af190816119d5575b506119d1575061196261159e565b6308c379a014611994575b516040516308f14ec160e11b8152908190610291906001600160a01b031660048301611650565b61199c6115b9565b90816119a957905061196d565b516040516308f14ec160e11b815291829161029191906001600160a01b03166004840161162e565b9050565b5f6119df91610f0f565b5f611954565b6020611a185f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611ac1575b50600354604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575b5015611a785790565b63a97a981d60e01b5f5260045ffd5b90506020813d602011611ab9575b81611aa260209383610f0f565b8101031261043457611ab390610fe1565b5f611a6f565b3d9150611a95565b9091506020813d602011611aee575b81611add60209383610f0f565b810103126104345751906020611a2a565b3d9150611ad0565b600154600254604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b60018060a01b0316825287820152336040820152611b6c604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b60608152611b7b608082610f0f565b60405193611b8885610ea9565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601611317565b03925af1908115610c06575f91611bd6575090565b90506020813d602011611bfd575b81611bf160209383610f0f565b81010312610434575190565b3d9150611be4565b6020611c385f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611c97575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611cc4575b81611cb360209383610f0f565b810103126104345751906020611c4a565b3d9150611ca6565b600154600454604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b600154600654604051611bc19860209890976001600160a01b0394851697939094169594939192606090611d2c85610ea9565b60018060a01b0316938481528a8101938452604081019283520191338352604051938a85015251604084015251606083015260018060a01b03905116608082015260808152611b7b60a082610f0f565b6020611daf5f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611e0e575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611e3b575b81611e2a60209383610f0f565b810103126104345751906020611dc1565b3d9150611e1d565b90602080835192838152019201905f5b818110611e605750505090565b82516001600160a01b0316845260209384019390920191600101611e53565b90602080835192838152019201905f5b818110611e9c5750505090565b8251845260209384019390920191600101611e8f565b602092611bc1949260018060a01b03600154169260018060a01b036008541692611b7b60405180928980830152611f8e611f77611f61611f4b611f35611f1f611f09875161010060408b01526101408a0190611e43565b6020880151898203603f190160608b0152611e7f565b6040870151888203603f190160808a0152611e43565b6060860151878203603f190160a0890152611e7f565b6080850151868203603f190160c0880152611e43565b60a0840151858203603f190160e0870152611e7f565b60c0830151848203603f1901610100860152611e7f565b60e091909101516001600160a01b031661012083015203601f198101835282610f0f565b6020611fe55f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92612044575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011612071575b8161206060209383610f0f565b810103126104345751906020611ff7565b3d915061205356fea26469706673582212204e9b583372e62f6001794e06da74f3f250937ab70e5d99bcf115e80628e071e764736f6c634300081b0033",
    sourceMap: "982:14186:135:-:0;;;;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;-1:-1:-1;982:14186:135;;;-1:-1:-1;982:14186:135;;;;;;;749:26:136;982:14186:135;;;749:26:136;982:14186:135;;;;;;;785:28:136;982:14186:135;;;785:28:136;982:14186:135;;;;;;;1954:28;982:14186;;;1954:28;982:14186;;;;;;;1992:30;982:14186;;;1992:30;982:14186;;;;;;;2032:30;982:14186;;;2032:30;982:14186;;;;;;;2072:32;982:14186;;;2072:32;982:14186;;;;;;;2114:28;982:14186;;;2114:28;982:14186;;;;;;;2152:30;982:14186;;;2152:30;982:14186;;;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;-1:-1:-1;982:14186:135;;;;;-1:-1:-1;982:14186:135",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081631454e3d214610d34575080631b24bf5214610d185780632bf2ee3914610c6d5780633d94053d14610c5157806346b3aca214610c1157806367cebb7014610a9a57806372448d4d14610983578063759503f2146108d5578063a6c002e914610842578063a7a6884d146107a2578063a827053014610703578063a96addea146106a1578063ab2fc26514610609578063b56edf541461054b578063c17783891461047d578063c266137314610303578063e1982e13146101ab5763e3139e86146100e4575f80fd5b346101a8576100f236610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d5791610166602061015661012061016d97956101729b9a99978d859e9261017a575b5050015182808251830101910161174a565b015189808251830101910161118f565b95866118fc565b611fb2565b604051908152f35b61019692503d8091833e61018e8183610f0f565b810190611034565b5f80610144565b6040513d89823e3d90fd5b80fd5b50346101a8576101003660031901126101a8576101c6610deb565b906024356044356001600160401b0381116102ff5761010060031982360301126102ff576101f2610e41565b9260a43560ff811681036102fb576001546001600160a01b039081169190871690813b156102f75791839291868461024f96946040519788958694859363d505accf60e01b855260e4359260c435926084359133600489016112b2565b03925af191826102e2575b50506102c6578361026961159e565b6308c379a014610295575b6040516308f14ec160e11b81529081906102919060048301611650565b0390fd5b61029d6115b9565b90816102aa579050610274565b6102916040519283926308f14ec160e11b84526004840161162e565b9261017292916102dc6020953690600401611466565b91611eb2565b6102ed828092610f0f565b6101a8578061025a565b8380fd5b5080fd5b8280fd5b50346101a85760e03660031901126101a8578061031e610deb565b602435610329610e01565b6084359260ff84168403610479576002546001600160a01b03918216949116843b156104755761037e918691604051938492839263d505accf60e01b845260c4359160a435918a6064359133600489016112b2565b038183885af190811561046a57859161044c575b5050906020926103ed9260018060a01b036002541692604051926103b584610ed8565b8352858301526001600160a01b03166040808301919091525163446c5bf160e11b8152958693849283919033908190600485016118bd565b03925af19081156104405790610409575b602090604051908152f35b506020813d602011610438575b8161042360209383610f0f565b8101031261043457602090516103fe565b5f80fd5b3d9150610416565b604051903d90823e3d90fd5b8161045991949394610f0f565b6104655790835f610392565b505050fd5b6040513d87823e3d90fd5b8580fd5b8480fd5b50346101a8576101403660031901126101a857610498610deb565b602435916104a4610e01565b926104ad610e2b565b9160e43560ff811681036102fb576001546001600160a01b038681169116813b156102f7579183929183926105089560405180978195829463d505accf60e01b8452610124359161010435918d60c4359133600489016112b2565b03925af19182610536575b5050610522578261026961159e565b610172926020946084359260643592611cf9565b610541828092610f0f565b6101a85780610513565b50346101a85760203660031901126101a85760249060043561056b6111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa809383946105ed575b506105b6576301fb6dd160e01b825260045260249150fd5b6101726020916105e7836105d761012088015182808251830101910161174a565b015184808251830101910161118f565b90611fb2565b6106029194503d8085833e61018e8183610f0f565b925f61059e565b50346101a85761061836610f4b565b60015497999497959695929493926001600160a01b038a81169391169190833b1561047557859493926106668d9387936040519a8b988997889663d505accf60e01b885233600489016112b2565b03925af1918261068c575b5050610680578361026961159e565b60209461017294611ccc565b610697828092610f0f565b6101a85780610671565b50346101a85760803660031901126101a8576106bb610deb565b604435916001600160401b0383116101a85761010060031984360301126101a857602061017284846106f96106ee610e41565b923690600401611466565b9060243590611eb2565b50346101a85760203660031901126101a85780546040516328c44a9960e21b815260048035908201819052918390829060249082906001600160a01b03165afa9081156107975760206105d76101206101729594610776948885999261077c575b5050015182808251830101910161110f565b90611d7c565b61079092503d8091833e61018e8183610f0f565b5f80610764565b6040513d85823e3d90fd5b50346101a8576107b136610f4b565b6001549499959896979695949293926001600160a01b038088169391169190833b1561083e57869493926108008a938793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af180156108335761081e575b60206101728888888888611af6565b610829828092610f0f565b6101a8578061080f565b6040513d84823e3d90fd5b8680fd5b50346101a85761085136610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d579161016660206101566101206108b597956101729b9a99978d859e926108ba575b50500151828082518301019101611218565b611c05565b6108ce92503d8091833e61018e8183610f0f565b5f806108a3565b50346101a85760203660031901126101a8576024906004356108f56111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa80938394610967575b50610940576301fb6dd160e01b825260045260249150fd5b610172602091610961836105d761012088015182808251830101910161110f565b906119e5565b61097c9194503d8085833e61018e8183610f0f565b925f610928565b50346101a85761099236610dbf565b85546040516328c44a9960e21b81526004810187905292969492908590829060249082906001600160a01b03165afa90811561046a576109ed6101206109fe936020938991610a80575b50015182808251830101910161110f565b01516020808251830101910161118f565b8051600254602083015192986001600160a01b03928316949190921691843b15610a7c5791610a4c8896959493928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af1801561083357610a67575b60206101728585611d7c565b610a72828092610f0f565b6101a85780610a5b565b8780fd5b610a9491503d808b833e61018e8183610f0f565b5f6109dc565b50346104345761012036600319011261043457610ab5610deb565b9060243590610ac2610e01565b6064356001600160401b0381116104345736602382011215610434578060040135610aec81610f30565b91610afa6040519384610f0f565b818352366024838301011161043457815f926024602093018386013783010152608435916001600160401b03831683036104345760c4359560ff87168703610434576001546001600160a01b03918216969116863b1561043457610b84975f91604051998a92839263d505accf60e01b8452610104359160e435918860a4359133600489016112b2565b0381838a5af1968715610c06576103ed97610bf1575b506020949560018060a01b03600154169360405193610bb885610ea9565b60018060a01b03168452868401526040830152606082015284604051809781958294631e72ae8160e11b84523391339160048601611317565b602095505f610bff91610f0f565b5f94610b9a565b6040513d5f823e3d90fd5b346104345760c0366003190112610434576020610172610c2f610deb565b610c37610e01565b610c3f610e2b565b91608435916064359160243590611cf9565b34610434576020610172610c6436610e57565b93929092611ccc565b3461043457602036600319011261043457600435610c896111ce565b505f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa5f9181610cfc575b50610cd557506301fb6dd160e01b5f5260045260245ffd5b602091610cf6836105d7610120610172950151828082518301019101611218565b90611c05565b610d119192503d805f833e61018e8183610f0f565b9083610cbd565b34610434576020610172610d2b36610e57565b93929092611af6565b3461043457610d4236610dbf565b5f80546328c44a9960e21b8852600488018790529396929593839060249082906001600160a01b03165afa948515610c0657602096610166886101566101206101729a610da0985f91610da55750015182808251830101910161110f565b6119e5565b610db991503d805f833e61018e8183610f0f565b8d6109dc565b60a090600319011261043457600435906024359060443560ff8116810361043457906064359060843590565b600435906001600160a01b038216820361043457565b604435906001600160a01b038216820361043457565b35906001600160a01b038216820361043457565b60a435906001600160401b038216820361043457565b606435906001600160401b038216820361043457565b60a0906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b03811681036104345790565b608081019081106001600160401b03821117610ec457604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ec457604052565b61014081019081106001600160401b03821117610ec457604052565b90601f801991011681019081106001600160401b03821117610ec457604052565b6001600160401b038111610ec457601f01601f191660200190565b610120906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b0381168103610434579060a4359060c43560ff81168103610434579060e435906101043590565b51906001600160401b038216820361043457565b51906001600160a01b038216820361043457565b5190811515820361043457565b81601f820112156104345780519061100582610f30565b926110136040519485610f0f565b8284526020838301011161043457815f9260208093018386015e8301015290565b602081830312610434578051906001600160401b038211610434570161014081830312610434576040519161106883610ef3565b815183526020820151602084015261108260408301610fb9565b604084015261109360608301610fb9565b60608401526110a460808301610fb9565b608084015260a082015160a08401526110bf60c08301610fcd565b60c08401526110d060e08301610fcd565b60e08401526110e26101008301610fe1565b6101008401526101208201516001600160401b038111610434576111069201610fee565b61012082015290565b602081830312610434578051906001600160401b038211610434570190608082820312610434576040519161114383610ea9565b61114c81610fcd565b835260208101516001600160401b0381116104345760609261116f918301610fee565b602084015261118060408201610fcd565b60408401520151606082015290565b90816060910312610434576111c660408051926111ab84610ed8565b6111b481610fcd565b84526020810151602085015201610fcd565b604082015290565b604051906111db82610ef3565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b602081830312610434578051906001600160401b03821161043457019060a082820312610434576040519160a083018381106001600160401b03821117610ec45760405261126581610fcd565b835260208101516001600160401b03811161043457608092611288918301610fee565b602084015261129960408201610fcd565b6040840152606081015160608401520151608082015290565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b926001600160401b036060939695926080865260018060a01b038151166080870152846113546020830151608060a08a01526101008901906112f3565b6040838101516001600160a01b0390811660c08b0152929093015160e08901529890921660208701529181169185019190915216910152565b6001600160401b038111610ec45760051b60200190565b9080601f830112156104345781356113bb8161138d565b926113c96040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106113f15750505090565b602080916113fe84610e17565b8152019101906113e4565b9080601f830112156104345781356114208161138d565b9261142e6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106114565750505090565b8135815260209182019101611449565b91909161010081840312610434576040519061010082018281106001600160401b03821117610ec457604052819381356001600160401b03811161043457816114b09184016113a4565b835260208201356001600160401b03811161043457816114d1918401611409565b602084015260408201356001600160401b03811161043457816114f59184016113a4565b604084015260608201356001600160401b0381116104345781611519918401611409565b606084015260808201356001600160401b038111610434578161153d9184016113a4565b608084015260a08201356001600160401b0381116104345781611561918401611409565b60a084015260c0820135906001600160401b038211610434578261158e60e0949261159994869401611409565b60c086015201610e17565b910152565b5f9060033d116115aa57565b905060045f803e5f5160e01c90565b5f60443d1061161d576040513d600319016004823e8051913d60248401116001600160401b0384111761162857828201928351916001600160401b038311611620573d84016003190185840160200111611620575061161d92910160200190610f0f565b90565b949350505050565b92915050565b6001600160a01b03909116815260406020820181905261161d929101906112f3565b6001600160a01b039091168152604060208201819052600d908201526c2ab735b737bbb71032b93937b960991b606082015260800190565b9080601f8301121561043457815161169f8161138d565b926116ad6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106116d55750505090565b602080916116e284610fcd565b8152019101906116c8565b9080601f830112156104345781516117048161138d565b926117126040519485610f0f565b81845260208085019260051b82010192831161043457602001905b82821061173a5750505090565b815181526020918201910161172d565b602081830312610434578051906001600160401b038211610434570161012081830312610434576040519161012083018381106001600160401b03821117610ec45760405261179882610fcd565b835260208201516001600160401b03811161043457816117b9918401610fee565b602084015260408201516001600160401b03811161043457816117dd918401611688565b604084015260608201516001600160401b03811161043457816118019184016116ed565b606084015260808201516001600160401b0381116104345781611825918401611688565b608084015260a08201516001600160401b03811161043457816118499184016116ed565b60a084015260c08201516001600160401b038111610434578161186d918401611688565b60c084015260e08201516001600160401b03811161043457816118919184016116ed565b60e08401526101008201516001600160401b038111610434576118b492016116ed565b61010082015290565b81516001600160a01b03908116825260208084015190830152604092830151811692820192909252918116606083015291909116608082015260a00190565b805160025460208301519297969495946001600160a01b039283169392909116833b15610434576119495f96928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af190816119d5575b506119d1575061196261159e565b6308c379a014611994575b516040516308f14ec160e11b8152908190610291906001600160a01b031660048301611650565b61199c6115b9565b90816119a957905061196d565b516040516308f14ec160e11b815291829161029191906001600160a01b03166004840161162e565b9050565b5f6119df91610f0f565b5f611954565b6020611a185f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611ac1575b50600354604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575b5015611a785790565b63a97a981d60e01b5f5260045ffd5b90506020813d602011611ab9575b81611aa260209383610f0f565b8101031261043457611ab390610fe1565b5f611a6f565b3d9150611a95565b9091506020813d602011611aee575b81611add60209383610f0f565b810103126104345751906020611a2a565b3d9150611ad0565b600154600254604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b60018060a01b0316825287820152336040820152611b6c604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b60608152611b7b608082610f0f565b60405193611b8885610ea9565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601611317565b03925af1908115610c06575f91611bd6575090565b90506020813d602011611bfd575b81611bf160209383610f0f565b81010312610434575190565b3d9150611be4565b6020611c385f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611c97575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611cc4575b81611cb360209383610f0f565b810103126104345751906020611c4a565b3d9150611ca6565b600154600454604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b600154600654604051611bc19860209890976001600160a01b0394851697939094169594939192606090611d2c85610ea9565b60018060a01b0316938481528a8101938452604081019283520191338352604051938a85015251604084015251606083015260018060a01b03905116608082015260808152611b7b60a082610f0f565b6020611daf5f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611e0e575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611e3b575b81611e2a60209383610f0f565b810103126104345751906020611dc1565b3d9150611e1d565b90602080835192838152019201905f5b818110611e605750505090565b82516001600160a01b0316845260209384019390920191600101611e53565b90602080835192838152019201905f5b818110611e9c5750505090565b8251845260209384019390920191600101611e8f565b602092611bc1949260018060a01b03600154169260018060a01b036008541692611b7b60405180928980830152611f8e611f77611f61611f4b611f35611f1f611f09875161010060408b01526101408a0190611e43565b6020880151898203603f190160608b0152611e7f565b6040870151888203603f190160808a0152611e43565b6060860151878203603f190160a0890152611e7f565b6080850151868203603f190160c0880152611e43565b60a0840151858203603f190160e0870152611e7f565b60c0830151848203603f1901610100860152611e7f565b60e091909101516001600160a01b031661012083015203601f198101835282610f0f565b6020611fe55f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92612044575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011612071575b8161206060209383610f0f565b810103126104345751906020611ff7565b3d915061205356fea26469706673582212204e9b583372e62f6001794e06da74f3f250937ab70e5d99bcf115e80628e071e764736f6c634300081b0033",
    sourceMap: "982:14186:135:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;14694:34;982:14186;;;;;;;;;;;;;;;;;;;;;14694:34;;;982:14186;14694:34;;982:14186;14694:34;;;;;;;;14944:104;982:14186;14801:79;14825:8;15098:1;14694:34;;15117:42;14694:34;;;;;;;;;;982:14186;14825:8;;;;982:14186;;;;14801:79;;;;;;:::i;:::-;14968:17;;982:14186;;;;14944:104;;;;;;:::i;:::-;15098:1;;;:::i;:::-;15117:42;:::i;:::-;982:14186;;;;;;14694:34;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;982:14186;;;;;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;10359:206;;;;;982:14186;;;;;;10359:206;982:14186;;;;;;;;;;;;;;10359:206;;982:14186;;;;;;;;10393:10;;982:14186;10359:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;10343:408:135;;;;;:::i;:::-;;;;;;982:14186;;-1:-1:-1;;;10701:39:135;;982:14186;;;10701:39;;982:14186;10701:39;;;:::i;:::-;;;;10343:408;10577:96;;:::i;:::-;;;;;10343:408;;;;10577:96;10632:30;982:14186;;7801:30;;;;;;10632;;982:14186;10632:30;;;:::i;10343:408::-;;10768:61;10343:408;;982:14186;;10343:408;982:14186;;;;;:::i;:::-;10768:61;;:::i;10359:206::-;;;;;;:::i;:::-;982:14186;;10359:206;;;;982:14186;;;;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;2048:12:136;982:14186:135;-1:-1:-1;;;;;982:14186:135;;;;;;1989:169:136;;;;;;982:14186:135;;;;;;;;;;;;;1989:169:136;;982:14186:135;;;;;;;;;2016:10:136;;982:14186:135;1989:169:136;;;:::i;:::-;;;;;;;;;;;;;;;;982:14186:135;;;;;;2187:277:136;982:14186:135;;;;;;2048:12:136;982:14186:135;;;;;;;;;:::i;:::-;;;2233:161:136;;;982:14186:135;-1:-1:-1;;;;;982:14186:135;;2233:161:136;;;982:14186:135;;;;;-1:-1:-1;;;2187:277:136;;982:14186:135;;;;;;;;2016:10:136;;;;982:14186:135;2187:277:136;;;:::i;:::-;;;;;;;;;;;;;982:14186:135;;;;;;;;;2187:277:136;;982:14186:135;2187:277:136;;982:14186:135;2187:277:136;;;;;;982:14186:135;2187:277:136;;;:::i;:::-;;;982:14186:135;;;;;;;2187:277:136;;982:14186:135;-1:-1:-1;982:14186:135;;2187:277:136;;;-1:-1:-1;2187:277:136;;;982:14186:135;;;;;;;;;;1989:169:136;;;;;;;;:::i;:::-;982:14186:135;;1989:169:136;;;;;982:14186:135;;;;;1989:169:136;982:14186:135;;;;;;;;;1989:169:136;982:14186:135;;;;;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;9005:206;;;;;982:14186;;;;;;9005:206;982:14186;;;;;;;;;;;;9005:206;;982:14186;;;;;;;;;9039:10;;982:14186;9005:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;8989:408:135;;;;;:::i;:::-;9426:191;8989:408;982:14186;8989:408;982:14186;;;;;9426:191;;:::i;9005:206::-;;;;;;:::i;:::-;982:14186;;9005:206;;;982:14186;;;;;;;-1:-1:-1;;982:14186:135;;;;12468:34;982:14186;;;;;:::i;:::-;-1:-1:-1;982:14186:135;;;;-1:-1:-1;;;12468:34:135;;982:14186;12468:34;;982:14186;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;12468:34;;;;;;;;982:14186;-1:-1:-1;12464:204:135;;-1:-1:-1;;;12622:35:135;;982:14186;;12468:34;;-1:-1:-1;12622:35:135;12464:204;13006:42;982:14186;12573:10;12884:104;12573:10;12741:79;12765:8;12573:10;12765:8;;982:14186;;;;12741:79;;;;;;:::i;:::-;12908:17;;982:14186;;;;12884:104;;;;;;:::i;:::-;13006:42;;:::i;12468:34::-;;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;7528:206;;;;;982:14186;;;;7528:206;982:14186;;;;;;;;;;;;;;;;7528:206;;7562:10;982:14186;7528:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;7512:408:135;;;;;:::i;:::-;982:14186;7512:408;7949:163;7512:408;7949:163;:::i;7528:206::-;;;;;;:::i;:::-;982:14186;;7528:206;;;982:14186;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;9901:61;982:14186;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;9901:61;;:::i;982:14186::-;;;;;;;-1:-1:-1;;982:14186:135;;;;;;;;-1:-1:-1;;;5958:34:136;;982:14186:135;;;5958:34:136;;;982:14186:135;;;;;;;;5958:34:136;;982:14186:135;;-1:-1:-1;;;;;982:14186:135;5958:34:136;;;;;;;982:14186:135;6059:94:136;6083:8;6339:41;5958:34;;6217:104;5958:34;;;;;;;982:14186:135;6083:8:136;;;;982:14186:135;;;;6059:94:136;;;;;;:::i;6217:104::-;6339:41;;:::i;5958:34::-;;;;;;;;;;;;;:::i;:::-;;;;;;982:14186:135;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;4150:174:136;;;;;982:14186:135;;;;4150:174:136;982:14186:135;;;;;;;;;;;;;;;;4150:174:136;;4180:10;982:14186:135;4150:174:136;;;:::i;:::-;;;;;;;;;;;982:14186:135;;4353:165:136;;;;;;;:::i;4150:174::-;;;;;;:::i;:::-;982:14186:135;;4150:174:136;;;;982:14186:135;;;;;;;;;4150:174:136;982:14186:135;;;;;;;;;;;:::i;:::-;;13985:34;982:14186;;;;;;;;;;;;;;;;;;;;;13985:34;;;982:14186;13985:34;;982:14186;13985:34;;;;;;;;14248:104;982:14186;14088:96;14112:8;14402:1;13985:34;;14421:43;13985:34;;;;;;;;;;982:14186;14112:8;;;;982:14186;;;;14088:96;;;;;;:::i;14402:1::-;14421:43;:::i;13985:34::-;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;-1:-1:-1;;982:14186:135;;;;10980:34;982:14186;;;;;:::i;:::-;-1:-1:-1;982:14186:135;;;;-1:-1:-1;;;10980:34:135;;982:14186;10980:34;;982:14186;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;10980:34;;;;;;;;982:14186;-1:-1:-1;10976:204:135;;-1:-1:-1;;;11134:35:135;;982:14186;;10980:34;;-1:-1:-1;11134:35:135;10976:204;11529:42;982:14186;11085:10;11407:104;11085:10;11248:95;11272:8;11085:10;11272:8;;982:14186;;;;11248:95;;;;;;:::i;11407:104::-;11529:42;;:::i;10980:34::-;;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;4747:34:136;;982:14186:135;4747:34:136;;982:14186:135;;;;;;;;;;;;4747:34:136;;982:14186:135;;-1:-1:-1;;;;;982:14186:135;4747:34:136;;;;;;;4848:94;4872:8;5006:104;4747:34;982:14186:135;4747:34:136;;;;;982:14186:135;4872:8:136;;;982:14186:135;;;;4848:94:136;;;;;;:::i;:::-;5030:17;;982:14186:135;;;;5006:104:136;;;;;;:::i;:::-;982:14186:135;;5244:12:136;982:14186:135;;5271:13:136;;982:14186:135;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;5182:179:136;;;;;982:14186:135;5182:179:136;982:14186:135;;;;;;;;;;;;;;;;;;;;5182:179:136;;5212:10;982:14186:135;5182:179:136;;;:::i;:::-;;;;;;;;;;;982:14186:135;;5379:41:136;;;;:::i;5182:179::-;;;;;;:::i;:::-;982:14186:135;;5182:179:136;;;;982:14186:135;;;4747:34:136;;;;;;;;;;;;;:::i;:::-;;;;982:14186:135;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;1160:168:136;;;;;;982:14186:135;;;;;;;;;;;;;1160:168:136;;982:14186:135;;;;;;;;;1187:10:136;;982:14186:135;1160:168:136;;;:::i;:::-;;;;;;;;;;;;1357:343;1160:168;;;982:14186:135;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1402:200:136;;;982:14186:135;;1402:200:136;;982:14186:135;;1402:200:136;;982:14186:135;;;;;;;;;;;;;1357:343:136;;1187:10;;;1357:343;982:14186:135;1357:343:136;;;:::i;1160:168::-;982:14186:135;1160:168:136;;982:14186:135;1160:168:136;;;:::i;:::-;982:14186:135;1160:168:136;;;;982:14186:135;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;;8410:191;982:14186;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;8410:191;;:::i;982:14186::-;;;;;6989:163;982:14186;;;:::i;:::-;6989:163;;;;;:::i;982:14186::-;;;;;;-1:-1:-1;;982:14186:135;;;;;;;;:::i;:::-;-1:-1:-1;982:14186:135;;;;;-1:-1:-1;;;11723:34:135;;982:14186;11723:34;;982:14186;;;;;;;11723:34;;982:14186;;-1:-1:-1;;;;;982:14186:135;11723:34;;982:14186;;11723:34;;;982:14186;-1:-1:-1;11719:204:135;;11877:35;;;;982:14186;11877:35;982:14186;;11723:34;982:14186;11877:35;11719:204;982:14186;11828:10;12152:104;11828:10;11992:96;12016:8;12274:43;11828:10;12016:8;;982:14186;;;;11992:96;;;;;;:::i;12152:104::-;12274:43;;:::i;11723:34::-;;;;;;;982:14186;11723:34;;;;;;:::i;:::-;;;;;982:14186;;;;;5654:165:136;982:14186:135;;;:::i;:::-;5654:165:136;;;;;:::i;982:14186:135:-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;13278:34:135;;982:14186;13278:34;;982:14186;;;;;;;;;;13278:34;;982:14186;;-1:-1:-1;;;;;982:14186:135;13278:34;;;;;;;982:14186;13278:34;13539:104;13278:34;13380:95;13404:8;13712:42;13278:34;13693:1;13278:34;982:14186;13278:34;;;13404:8;;;982:14186;;;;13380:95;;;;;;:::i;13693:1::-;13712:42;:::i;13278:34::-;;;;;;982:14186;13278:34;;;;;;:::i;:::-;;;;982:14186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;:::o;:::-;;;;-1:-1:-1;982:14186:135;;;;;-1:-1:-1;982:14186:135;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:135;;;;;;-1:-1:-1;;982:14186:135;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;982:14186:135;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;-1:-1:-1;982:14186:135;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;;;-1:-1:-1;;982:14186:135;;;;:::o;:::-;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:135;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;-1:-1:-1;;982:14186:135;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;-1:-1:-1;;;982:14186:135;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2221:680::-;982:14186;;2560:12;982:14186;2591:13;;;982:14186;2221:680;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;2221:680;;982:14186;2490:211;;;;;;-1:-1:-1;982:14186:135;;;;;;;;;;;;;;;;2490:211;;2524:10;2490:211;;;;:::i;:::-;;;;;;;;;2221:680;-1:-1:-1;2474:421:135;;;;;:::i;:::-;;;;;;982:14186;;;-1:-1:-1;;;2841:43:135;;982:14186;;;2841:43;;-1:-1:-1;;;;;982:14186:135;2490:211;2841:43;;;:::i;2474:421::-;2713:100;;:::i;:::-;;;;;2474:421;;;;2713:100;982:14186;;;-1:-1:-1;;;2768:34:135;;982:14186;;;2768:34;;7801:30;-1:-1:-1;;;;;982:14186:135;2490:211;2768:34;;;:::i;2474:421::-;;;2221:680::o;2490:211::-;-1:-1:-1;2490:211:135;;;:::i;:::-;-1:-1:-1;2490:211:135;;5315:466;5505:106;;-1:-1:-1;5315:466:135;982:14186;;;;;5505:12;982:14186;;;;;;;;;;;;;;5505:106;;5567:10;;;5505:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;5505:106:135;;;5315:466;-1:-1:-1;5627:12:135;982:14186;;;-1:-1:-1;;;5627:59:135;;5505:106;5627:59;;982:14186;;;;;;;;;;5505:106;;982:14186;;5627:59;;982:14186;;-1:-1:-1;;;;;;;982:14186:135;5627:59;;;;;;;-1:-1:-1;5627:59:135;;;5315:466;5626:60;;5622:120;;5315:466;:::o;5622:120::-;5709:22;;;-1:-1:-1;5709:22:135;5505:106;-1:-1:-1;5709:22:135;5627:59;;;5505:106;5627:59;;5505:106;5627:59;;;;;;5505:106;5627:59;;;:::i;:::-;;;982:14186;;;;;;;:::i;:::-;5627:59;;;;;;-1:-1:-1;5627:59:135;;5505:106;;;;;;;;;;;;;;982:14186;5505:106;;;:::i;:::-;;;982:14186;;;;;;5505:106;;;;;;-1:-1:-1;5505:106:135;;2477:848:136;982:14186:135;;2896:12:136;982:14186:135;;;2699:619:136;;2975:204;;2699:619;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2975:204:136;;;982:14186:135;3142:10:136;982:14186:135;2975:204:136;;982:14186:135;;;;2939:262:136;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:262:136;;;;;;:::i;:::-;982:14186:135;;;;;;:::i;:::-;;;2744:476:136;;;982:14186:135;;;;;;;;2744:476:136;;982:14186:135;;2744:476:136;;982:14186:135;-1:-1:-1;982:14186:135;;;;;;;;;;;2699:619:136;;3142:10;;;2699:619;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;2699:619:136;;;2680:638;2477:848;:::o;2699:619::-;;;2975:204;2699:619;;2975:204;2699:619;;;;;;982:14186:135;2699:619:136;;;:::i;:::-;;;982:14186:135;;;;;2477:848:136;:::o;2699:619::-;;;-1:-1:-1;2699:619:136;;5787:468:135;5978:106;;-1:-1:-1;5787:468:135;982:14186;;;;;5978:12;982:14186;;;;;;;;;;;;;;5978:106;;6040:10;;;5978:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;5978:106:135;;;5787:468;-1:-1:-1;6100:13:135;982:14186;;;-1:-1:-1;;;6100:60:135;;5978:106;6100:60;;982:14186;;;;;;;;;;5978:106;;982:14186;;6100:60;;982:14186;;-1:-1:-1;;;;;;;982:14186:135;6100:60;;;;;;;-1:-1:-1;6100:60:135;;;6099:61;;6095:121;;5787:468;:::o;5978:106::-;;;;;;;;;;;;;;982:14186;5978:106;;;:::i;:::-;;;982:14186;;;;;;5978:106;;;;;;-1:-1:-1;5978:106:135;;2907:845;982:14186;;3324:13;982:14186;;;3127:618;;3404:202;;3127:618;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;:::i;3758:922::-;982:14186;;4203:14;982:14186;;;4006:667;;4284:250;;3758:922;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;3758:922;;982:14186;;4284:250;;982:14186;;;:::i;:::-;;;;;;;;;;;4284:250;;;982:14186;;;;4284:250;;982:14186;;;4284:250;4497:10;;982:14186;;;;4248:308;;;;982:14186;;;;;;;4284:250;982:14186;;;;;;;;;;;;;;;;4248:308;;;;;;:::i;3331:464:136:-;3520:106;;-1:-1:-1;3331:464:136;982:14186:135;;;;;3520:12:136;982:14186:135;;;;;;;;;;;;;;3520:106:136;;3582:10;;;3520:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;3520:106:136;;;3331:464;-1:-1:-1;982:14186:135;;;;-1:-1:-1;;;3642:58:136;;3520:106;3642:58;;982:14186:135;;;;;;;;;;3520:106:136;;982:14186:135;;3642:58:136;;982:14186:135;;-1:-1:-1;;;;;;;982:14186:135;3642:58:136;;;;;;;-1:-1:-1;3642:58:136;;;3641:59;;3637:119;;3331:464;:::o;3520:106::-;;;;;;;;;;;;;;982:14186:135;3520:106:136;;;:::i;:::-;;;982:14186:135;;;;;;3520:106:136;;;;;;-1:-1:-1;3520:106:136;;982:14186:135;;;;;;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;982:14186:135;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;4686:623;5166:19;4686:623;4925:377;4686:623;;982:14186;;;;;4925:11;982:14186;;;;;;;;5122:13;982:14186;;;5166:19;982:14186;;5166:19;;;;;;982:14186;;;;;;;;;;;;;;;;;;;;:::i;:::-;5166:19;982:14186;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:135;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:135;;;;;5166:19;-1:-1:-1;;5166:19:135;;;;;;:::i;6261:466::-;6451:106;;-1:-1:-1;6261:466:135;982:14186;;;;;6451:12;982:14186;;;;;;;;;;;;;;6451:106;;6513:10;;;6451:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;6451:106:135;;;6261:466;-1:-1:-1;6573:12:135;982:14186;;;-1:-1:-1;;;6573:59:135;;6451:106;6573:59;;982:14186;;;;;;;;;;6451:106;;982:14186;;6573:59;;982:14186;;-1:-1:-1;;;;;;;982:14186:135;6573:59;;;;;;;-1:-1:-1;6573:59:135;;;6572:60;;6568:120;;6261:466;:::o;6451:106::-;;;;;;;;;;;;;;982:14186;6451:106;;;:::i;:::-;;;982:14186;;;;;;6451:106;;;;;;-1:-1:-1;6451:106:135;",
    linkReferences: {}
  },
  methodIdentifiers: {
    "buyBundleWithErc20(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "a96addea",
    "buyErc1155WithErc20(address,uint256,address,uint256,uint256,uint64)": "46b3aca2",
    "buyErc20ForErc20(address,uint256,address,uint256,uint64)": "1b24bf52",
    "buyErc721WithErc20(address,uint256,address,uint256,uint64)": "3d94053d",
    "payErc20ForBundle(bytes32)": "b56edf54",
    "payErc20ForErc1155(bytes32)": "2bf2ee39",
    "payErc20ForErc20(bytes32)": "a8270530",
    "payErc20ForErc721(bytes32)": "759503f2",
    "permitAndBuyBundleWithErc20(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64,uint256,uint8,bytes32,bytes32)": "e1982e13",
    "permitAndBuyErc1155WithErc20(address,uint256,address,uint256,uint256,uint64,uint256,uint8,bytes32,bytes32)": "c1778389",
    "permitAndBuyErc20ForErc20(address,uint256,address,uint256,uint64,uint256,uint8,bytes32,bytes32)": "a7a6884d",
    "permitAndBuyErc721WithErc20(address,uint256,address,uint256,uint64,uint256,uint8,bytes32,bytes32)": "ab2fc265",
    "permitAndBuyWithErc20(address,uint256,address,bytes,uint64,uint256,uint8,bytes32,bytes32)": "67cebb70",
    "permitAndPayErc20ForBundle(bytes32,uint256,uint8,bytes32,bytes32)": "e3139e86",
    "permitAndPayErc20ForErc1155(bytes32,uint256,uint8,bytes32,bytes32)": "a6c002e9",
    "permitAndPayErc20ForErc20(bytes32,uint256,uint8,bytes32,bytes32)": "72448d4d",
    "permitAndPayErc20ForErc721(bytes32,uint256,uint8,bytes32,bytes32)": "1454e3d2",
    "permitAndPayWithErc20(address,uint256,address,uint256,uint8,bytes32,bytes32)": "c2661373"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"string","name":"reason","type":"string"}],"name":"PermitFailed","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyBundleWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc1155WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc721WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC20BarterCrossToken.sol":"ERC20BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3","license":"UNLICENSED","urls":["bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10","dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f","license":"UNLICENSED","urls":["bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a","dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a","license":"UNLICENSED","urls":["bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7","dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4","license":"UNLICENSED","urls":["bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258","dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"]},"src/utils/ERC20BarterCrossToken.sol":{"keccak256":"0x184e3195ea4bf95fe10083a36192cb4be23cb5d80ecc9ee9bc6d561a6d77ae30","license":"UNLICENSED","urls":["bzz-raw://1d1cebfbb0301a6393601cee78479b46d3743ed87724a51d01e510b91e05b639","dweb:/ipfs/QmeFrxcT49e6j7MHyfQWmakUaZJZ8tL1veDYfpX7Wtq5zf"]},"src/utils/ERC20BarterUtils.sol":{"keccak256":"0x057fa06fd0ce0f5c0befd73f0bd424c12ff72fdcb02f9cb759a0a74780d09160","license":"UNLICENSED","urls":["bzz-raw://267205a248ad08155e99fbe567e73378e93adb9a34146bb3c5a01b754a5cc894","dweb:/ipfs/QmSE4UcGQ2DPXpM7JVJEZRMSGSWLnYdwtWXtiodRs6oTvk"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ERC20EscrowObligation",
              name: "_erc20Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC20PaymentObligation",
              name: "_erc20Payment",
              type: "address"
            },
            {
              internalType: "contract ERC721EscrowObligation",
              name: "_erc721Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC721PaymentObligation",
              name: "_erc721Payment",
              type: "address"
            },
            {
              internalType: "contract ERC1155EscrowObligation",
              name: "_erc1155Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC1155PaymentObligation",
              name: "_erc1155Payment",
              type: "address"
            },
            {
              internalType: "contract TokenBundleEscrowObligation",
              name: "_bundleEscrow",
              type: "address"
            },
            {
              internalType: "contract TokenBundlePaymentObligation",
              name: "_bundlePayment",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "CouldntCollectEscrow"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "string",
              name: "reason",
              type: "string"
            }
          ],
          type: "error",
          name: "PermitFailed"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askData",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyBundleWithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc1155WithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc20ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askId",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc721WithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc20ForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc20ForErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc20ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc20ForErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askData",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndBuyBundleWithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndBuyErc1155WithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndBuyErc20ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askId",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndBuyErc721WithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndBuyWithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayErc20ForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayErc20ForErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayErc20ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayErc20ForErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "payee",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayWithErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/utils/ERC20BarterCrossToken.sol": "ERC20BarterCrossToken"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        keccak256: "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        urls: [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        keccak256: "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        urls: [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        keccak256: "0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3",
        urls: [
          "bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10",
          "dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        keccak256: "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        urls: [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        keccak256: "0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f",
        urls: [
          "bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a",
          "dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        keccak256: "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        urls: [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        keccak256: "0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a",
        urls: [
          "bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7",
          "dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        keccak256: "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        urls: [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        keccak256: "0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4",
        urls: [
          "bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258",
          "dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC20BarterCrossToken.sol": {
        keccak256: "0x184e3195ea4bf95fe10083a36192cb4be23cb5d80ecc9ee9bc6d561a6d77ae30",
        urls: [
          "bzz-raw://1d1cebfbb0301a6393601cee78479b46d3743ed87724a51d01e510b91e05b639",
          "dweb:/ipfs/QmeFrxcT49e6j7MHyfQWmakUaZJZ8tL1veDYfpX7Wtq5zf"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC20BarterUtils.sol": {
        keccak256: "0x057fa06fd0ce0f5c0befd73f0bd424c12ff72fdcb02f9cb759a0a74780d09160",
        urls: [
          "bzz-raw://267205a248ad08155e99fbe567e73378e93adb9a34146bb3c5a01b754a5cc894",
          "dweb:/ipfs/QmSE4UcGQ2DPXpM7JVJEZRMSGSWLnYdwtWXtiodRs6oTvk"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 135
};

// src/contracts/ERC20EscrowObligation.ts
var abi36 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC20EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC20EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC20EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC20EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC20TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "434:5212:123:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;1045:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;434:5212:123;790:10:9;;434:5212:123;790:10:9;;;789::77;;809:32;;-1:-1:-1;434:5212:123;;;;;;;;;;;872:48:77;;434:5212:123;872:48:77;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;904:4:77;434:5212:123;;;;1045:4;434:5212;;;;;;-1:-1:-1;;434:5212:123;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;434:5212:123;;;;;;;;759:14:6;434:5212:123;;;;;783:14:6;434:5212:123;;;;;807:14:6;434:5212:123;;;;;790:10:9;434:5212:123;;;;;809:32:77;434:5212:123;;;;;789:10:77;434:5212:123;;;;;;;;;;;;;;;;;;;;851:69:77;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;434:5212:123;872:48:77;;434:5212:123;872:48:77;;;;;;434:5212:123;872:48:77;;;:::i;:::-;;;434:5212:123;;;;;872:48:77;;;434:5212:123;-1:-1:-1;434:5212:123;;872:48:77;;;-1:-1:-1;872:48:77;;;434:5212:123;;;-1:-1:-1;434:5212:123;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;;-1:-1:-1;434:5212:123;;;;;;-1:-1:-1;;434:5212:123;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "",
    sourceMap: "434:5212:123:-:0;;;;;;;;;-1:-1:-1;434:5212:123;;;;;;;;1183:12:9;;;1054:5;1183:12;434:5212:123;1054:5:9;1183:12;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;434:5212:123;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;434:5212:123:-;;;;;;-1:-1:-1;;434:5212:123;;;;;;;;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;5603:34;;434:5212;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;434:5212:123;;-1:-1:-1;;;2392:23:77;;434:5212:123;;;2392:23:77;;;434:5212:123;-1:-1:-1;434:5212:123;2392:23:77;434:5212:123;2392:3:77;-1:-1:-1;;;;;434:5212:123;2392:23:77;;;;;;;434:5212:123;2392:23:77;;;434:5212:123;2429:19:77;434:5212:123;2429:19:77;;434:5212:123;2452:18:77;2429:41;2425:87;;5418:46:123;5429:16;434:5212;5429:16;;;434:5212;;;;5418:46;;;;;;:::i;:::-;434:5212;;;;;;;:::i;2425:87:77:-;2491:21;;;434:5212:123;2491:21:77;434:5212:123;;2491:21:77;2392:23;;;;;;434:5212:123;2392:23:77;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;434:5212:123;;;;;;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;716:142:80;434:5212:123;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;434:5212:123:-;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;4453:187;434:5212;4494:16;;434:5212;;:::i;:::-;;;;;;;;;4494:16;;;;:::i;:::-;;4900;;4494;;;;;;:::i;:::-;434:5212;;-1:-1:-1;;;4453:187:123;;434:5212;;;;;4560:10;;;;434:5212;4453:187;;;:::i;:::-;;:4;434:5212;4453:4;:187;;;;;;434:5212;4453:187;;;434:5212;;;;;;;;;4453:187;;434:5212;4453:187;;434:5212;4453:187;;;;;;434:5212;4453:187;;;:::i;:::-;;;434:5212;;;;;;;4453:187;;;;;-1:-1:-1;4453:187:123;;434:5212;;1442:1461:9;434:5212:123;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;434:5212:123:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;434:5212:123;;;;;;;;:::i;:::-;-1:-1:-1;434:5212:123;;-1:-1:-1;;;3989:23:78;;434:5212:123;3989:23:78;;434:5212:123;;;-1:-1:-1;434:5212:123;3989:23:78;434:5212:123;3989:3:78;-1:-1:-1;;;;;434:5212:123;3989:23:78;;434:5212:123;;3989:23:78;;;434:5212:123;-1:-1:-1;3985:172:78;;4122:24;;;;434:5212:123;4122:24:78;434:5212:123;;3989:23:78;434:5212:123;4122:24:78;3985:172;-1:-1:-1;;;;;4189:26:78;;;434:5212:123;;4171:15:78;:44;4167:87;;3070:34:123;4334:16:78;;;;434:5212:123;4352:21:78;434:5212:123;;;;;4352:21:78;;434:5212:123;;;;;;;3070:34;;;;;;:::i;:::-;434:5212;3148:13;;;434:5212;;4189:26:78;3176:14:123;;;434:5212;;;;-1:-1:-1;;;3141:50:123;;-1:-1:-1;;;;;434:5212:123;;;;3141:50;;434:5212;;;;;;;;3176:14;;3148:13;;434:5212;;;;;;;;;;-1:-1:-1;;434:5212:123;3141:50;;434:5212;;3141:50;;;3985:172:78;-1:-1:-1;3137:187:123;;3298:15;434:5212;3137:187;3338:8;3334:193;;434:5212;;;;;;;3334:193;434:5212;;;;;-1:-1:-1;;;3369:147:123;;-1:-1:-1;;;;;434:5212:123;;;;3369:147;;434:5212;3445:4;434:5212;;;;;;;;;;;;;;;;;;3369:147;3137:187;;;3141:50;;;;434:5212;3141:50;;434:5212;3141:50;;;;;;434:5212;3141:50;;;:::i;:::-;;;434:5212;;;;;;;:::i;:::-;3141:50;;;;;;;-1:-1:-1;3141:50:123;;4167:87:78;4236:18;;;434:5212:123;4236:18:78;434:5212:123;;4236:18:78;3989:23;;;;;;;434:5212:123;3989:23:78;;;;;;:::i;:::-;;;;;434:5212:123;;;;;;-1:-1:-1;;434:5212:123;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;434:5212:123;1497:44:77;;434:5212:123;;;1497:44:77;434:5212:123;;;;;;1497:14:77;434:5212:123;1497:44:77;;;;;;434:5212:123;1497:44:77;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;434:5212:123;1497:44:77;;;;;;:::i;:::-;;;434:5212:123;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;434:5212:123;;;;;;-1:-1:-1;;434:5212:123;;;;;;;542:43:77;434:5212:123;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;1055:104:6;;434:5212:123;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;434:5212:123;;;;;;;;;;;;1055:104:6;;;434:5212:123;;;;-1:-1:-1;;;434:5212:123;;;;;;;;;;;;;;;;;-1:-1:-1;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;1055:104:6;;4900:16:123;;1055:104:6;;;;;;:::i;434:5212:123:-;;;;;;-1:-1:-1;;434:5212:123;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;:::i;:::-;4900:16;4859:181;434:5212;;:::i;:::-;;4900:16;434:5212;;:::i;:::-;;;;;;;;;4900:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;434:5212;;-1:-1:-1;;;4859:181:123;;434:5212;;;;;;4859:181;;;:::i;434:5212::-;;;;5169:37;434:5212;;;:::i;5169:37::-;;434:5212;;;5223:4;434:5212;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:5212:123;;;;;;;;-1:-1:-1;;434:5212:123;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;:::o;:::-;;;;-1:-1:-1;434:5212:123;;;;;-1:-1:-1;434:5212:123;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;:::o;:::-;;;4900:16;;434:5212;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;:::o;:::-;-1:-1:-1;;;;;434:5212:123;;;;;;-1:-1:-1;;434:5212:123;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:5212:123;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;434:5212:123;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;434:5212:123;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;-1:-1:-1;;434:5212:123;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:5212:123;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;434:5212:123;;;;:::o;:::-;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:5212:123;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;434:5212:123;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;-1:-1:-1;434:5212:123;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:5212:123;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1125:267::-;1301:34;1125:267;1301:34;434:5212;;;1301:34;;;;;;:::i;:::-;434:5212;;1301:34;1370:14;;;;-1:-1:-1;;;;;434:5212:123;;;;1125:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;434:5212:123;;;;;;;;;;;;;4064:22:9;;;;4060:87;;434:5212:123;;;;;;;;;;;;;;4274:33:9;434:5212:123;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;434:5212:123;;3896:19:9;434:5212:123;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;434:5212:123;;;;3881:1:9;434:5212:123;;;;;3881:1:9;434:5212:123;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;434:5212:123;;:::i;:::-;2224:30:78;434:5212:123;;:::i;:::-;-1:-1:-1;434:5212:123;;-1:-1:-1;;;2317:27:78;;;;;434:5212:123;;;2317:3:78;-1:-1:-1;;;;;434:5212:123;;-1:-1:-1;434:5212:123;2317:27:78;434:5212:123;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;434:5212:123;2317:27:78;-1:-1:-1;2493:28:78;2313:219;2428:26;;;;;434:5212:123;;;;;2546:32:78;;;2317:27;2546:32;;434:5212:123;-1:-1:-1;2546:32:78;2317:27;2546:32;;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;434:5212:123;2317:27:78;-1:-1:-1;2732:33:78;2542:234;2662:31;;;;;;2542:234;2791:24;;;:::i;:::-;2790:25;2786:64;;434:5212:123;;2994:11:78;;;;;434:5212:123;2994:11:78;434:5212:123;2957:58:78;2994:11;;2957:58;:::i;:::-;434:5212:123;;;;;;;;;;;;;;;;;3086:66:78;;434:5212:123;2317:27:78;3086:66;;434:5212:123;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;434:5212:123;2317:27:78;434:5212:123;;;;;:::i;:::-;;;;;;;;3086:66:78;;-1:-1:-1;;;;;434:5212:123;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;434:5212:123;;;;;:::i;:::-;;;;-1:-1:-1;434:5212:123;3372:47:78;;434:5212:123;;;;;;;:::i;:::-;3326:18:78;434:5212:123;;;3278:160:78;;434:5212:123;;;3250:202:78;;;;;434:5212:123;-1:-1:-1;434:5212:123;;;;;;;;;;;;;;3250:202:78;;434:5212:123;2317:27:78;3250:202;;434:5212:123;;;;2317:27:78;434:5212:123;;;;;;;;;3250:202:78;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;434:5212:123;;;2317:27:78;3491:25;;3234:293;;;;;;3625:11;2339:74:123;434:5212;;;;;;;;;;;;;2339:74;;;;;;:::i;:::-;434:5212;2457:13;;;434:5212;;;2485:14;;;434:5212;;;;-1:-1:-1;;;2450:50:123;;-1:-1:-1;;;;;434:5212:123;;;2317:27:78;2450:50:123;;434:5212;;;;;;;;2485:14;;2457:13;;434:5212;;;;;;;;;;;;;2450:50;;;;;;;3234:293:78;-1:-1:-1;2446:187:123;;2607:15;;2446:187;2647:8;2643:193;;434:5212;;;3723:61:78;434:5212:123;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;434:5212:123;;;3723:61:78;2054:1760;:::o;2446:187:123:-;;;2450:50;;;;434:5212;2450:50;;434:5212;2450:50;;;;;;434:5212;2450:50;;;:::i;:::-;;;434:5212;;;;;;;:::i;:::-;2450:50;;;;434:5212;;;;2450:50;;;-1:-1:-1;2450:50:123;;3250:202:78;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;434:5212:123;3086:66:78;;434:5212:123;3086:66:78;;;;;;434:5212:123;3086:66:78;;;:::i;:::-;;;434:5212:123;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;434:5212:123;;;;;;;:::i;:::-;-1:-1:-1;434:5212:123;;;;;;;;;;;;;;;;;:::o;3565:696::-;3778:18;1016:17:76;;;434:5212:123;1016:27:76;1012:55;;1084:27;;;:::i;:::-;3750:47:123;3746:65;;3854:79;3878:15;3978:36;3878:15;;;1016:17:76;434:5212:123;;;3854:79;;;;;;:::i;:::-;434:5212;1016:17:76;434:5212:123;;;3978:36;;;;;;:::i;:::-;4044:13;;;;434:5212;4061:16;;;434:5212;-1:-1:-1;;;;;434:5212:123;;;;;4044:33;;;:84;;3565:696;4044:137;;;3565:696;4044:210;;;4025:229;;3565:696;:::o;4044:210::-;1016:17:76;4207:14:123;;;;;;434:5212;;;;;4197:25;4236:17;;;1016::76;434:5212:123;;;;4226:28;4197:57;3565:696;:::o;4044:137::-;434:5212;;;;-1:-1:-1;;;;;434:5212:123;;;;;4144:37;;-1:-1:-1;4044:137:123;;:84;4093:14;;;;;434:5212;4093:14;4111:17;;434:5212;-1:-1:-1;4093:35:123;4044:84;;;3746:65;3799:12;;434:5212;3799:12;:::o;1012:55:76:-;1052:15;;;434:5212:123;1052:15:76;;434:5212:123;1052:15:76;871:377:80;;;;;;1547:34:123;434:5212;;;;;:::i;:::-;1547:34;434:5212;;;1547:34;;;;;;:::i;:::-;1592:12;1637:13;;;-1:-1:-1;1547:34:123;1735:14;434:5212;;;;;;;;1735:14;;434:5212;1630:133;434:5212;;1637:13;434:5212;;;;;;;;;1630:133;;434:5212;;;;;;;1630:133;;;434:5212;1712:4;434:5212;;;;;;;;1630:133;;-1:-1:-1;;1630:133:123;;;871:377:80;-1:-1:-1;1614:268:123;;1856:15;-1:-1:-1;1614:268:123;1896:8;1892:195;;434:5212;;;;;;;;;:::i;:::-;;1637:13;434:5212;;;;;;;;;-1:-1:-1;;;;;434:5212:123;;;;;-1:-1:-1;;;;;434:5212:123;1637:13;434:5212;;;;;;;;;;;;1547:34;1914:299:77;;434:5212:123;2076:4:77;1637:13:123;1914:299:77;;434:5212:123;1735:14;1914:299:77;;434:5212:123;1914:299:77;;;434:5212:123;-1:-1:-1;1914:299:77;;;434:5212:123;1547:34;1637:13;434:5212;;;;:::i;:::-;1868:18:77;434:5212:123;;1819:413:77;;;434:5212:123;;;1637:13;434:5212;;;;;;;;1791:455:77;;;1630:133:123;1791:455:77;;434:5212:123;;;;;;;1637:13;434:5212;;;;;;;;;;;;1630:133;434:5212;;;-1:-1:-1;;;;;434:5212:123;;;;;;;;;1637:13;434:5212;;;;;;;;;1735:14;434:5212;;;;;;;1914:299:77;434:5212:123;1914:299:77;434:5212:123;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;434:5212:123;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;434:5212:123;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;1614:268:123;1134:55:80;;4820:26:78;-1:-1:-1;4820:26:78;;871:377:80:o;1791:455:77:-;;;;1547:34:123;1791:455:77;;1547:34:123;1791:455:77;;;;;;434:5212:123;1791:455:77;;;:::i;:::-;;;434:5212:123;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;1892:195:123;434:5212;;;1637:13;434:5212;-1:-1:-1;;;1927:149:123;;-1:-1:-1;;;;;434:5212:123;;;1630:133;1927:149;;434:5212;;;;;;;;;1712:4;434:5212;;;;;;;;;;;;;3369:147;1614:268;;;1630:133;;;;1547:34;1630:133;;1547:34;1630:133;;;;;;1547:34;1630:133;;;:::i;:::-;;;434:5212;;;;;;;:::i;:::-;1630:133;;;;;;;-1:-1:-1;1630:133:123;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;434:5212:123;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;4900:16;;434:5212;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;434:5212:123;;-1:-1:-1;;;1033:111:63;;;;434:5212:123;1033:111:63;434:5212:123;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;434:5212:123;;;;26127:66:70;;26014:100;26027:7;26098:1;434:5212:123;;;;26014:100:70;;;25901;25914:7;25985:1;434:5212:123;;;;25901:100:70;;;25788;25801:7;25872:1;434:5212:123;;;;25788:100:70;;;25672:103;25685:8;25758:2;434:5212:123;;;;25672:103:70;;;25556;25569:8;25642:2;434:5212:123;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;434:5212:123;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;434:5212:123;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;434:5212:123;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;434:5212:123;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;434:5212:123;-1:-1:-1;;;;;434:5212:123;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2572,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2615,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2658,
          length: 32
        }
      ],
      "3008": [
        {
          start: 7047,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2190,
          length: 32
        }
      ],
      "54661": [
        {
          start: 963,
          length: 32
        },
        {
          start: 1676,
          length: 32
        },
        {
          start: 4680,
          length: 32
        },
        {
          start: 6407,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1027,
          length: 32
        },
        {
          start: 2140,
          length: 32
        },
        {
          start: 2506,
          length: 32
        },
        {
          start: 5159,
          length: 32
        },
        {
          start: 5756,
          length: 32
        },
        {
          start: 6234,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256),uint64)": "a4f0d517",
    "doObligationFor((address,bytes,address,uint256),uint64,address,address)": "3ce55d02",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC20EscrowObligation.sol":"ERC20EscrowObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC20TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC20EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC20EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC20EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC20EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC20EscrowObligation.sol": "ERC20EscrowObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        keccak256: "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        urls: [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 123
};

// src/contracts/ERC20PaymentObligation.ts
var abi37 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC20PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC20PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC20PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC20PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "PaymentMade",
      inputs: [
        {
          name: "payment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC20TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x61016080604052346101d2576040816115d78038038091610020828561020c565b8339810103126101d25780516001600160a01b038116918282036101d25760200151916001600160a01b0383168084036101d257604051606081016001600160401b038111828210176101f857604052602c815260208101927f6164647265737320746f6b656e2c2075696e7432353620616d6f756e742c206184526b64647265737320706179656560a01b60408301526001608052600360a0525f60c052156101e9576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101de575f916101a8575b50610140526040516113a7908161023082396080518161099f015260a051816109ca015260c051816109f5015260e05181611305015261010051816108210152610120518181816104a3015261108201526101405181818161025d015281816104db015281816107ef0152818161095d0152610fd50152f35b90506020813d6020116101d6575b816101c36020938361020c565b810103126101d257515f61012f565b5f80fd5b3d91506101b6565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176101f85760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146109805780635bf2f20d146109465780636b122fe0146107b057806388d8b7e21461074857806388e5b2d91461072957806391db0b7e146107295780639b28978c14610684578063b3b902d414610639578063c6ec507014610420578063c93844be146103a3578063ce46e04614610389578063e49617e114610364578063e60c350514610364578063e6c9714d146101455763f0ffa1850361000e57346101415760a0366003190112610141576004356001600160401b03811161014157610100903690600401610b4c565b90610109610b79565b604435929091906001600160a01b0384168403610141576020936101399361012f610aa2565b9260843594610ed7565b604051908152f35b5f80fd5b34610141576060366003190112610141576004356001600160401b038111610141576101406003198236030112610141576040519061018382610c06565b806004013582526020820190602481013582526101a260448201610b8f565b60408401526101b360648201610b8f565b606084019081526101c660848301610b8f565b916080850192835260a481013560a08601526101e460c48201610ab8565b60c08601526101f560e48201610ab8565b60e08601526101048101358015158103610141576101008601526101248101356001600160401b038111610141576101209160046102369236920101610caf565b94019384526024356001600160401b0381116101415761025a903690600401610caf565b927f000000000000000000000000000000000000000000000000000000000000000090510361035557516001600160401b0316801515908161034b575b5061033c57516001600160401b031661032d576102d16102c260209351848082518301019101610e61565b91838082518301019101610e61565b815181516001600160a01b03908116911614918261031c575b826102fc575b50506040519015158152f35b6040908101519101516001600160a01b03908116911614905082806102f0565b8381015182850151111592506102ea565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610297565b635f9bd90760e11b5f5260045ffd5b602061037f61037236610ba3565b61037a611303565b611344565b6040519015158152f35b34610141575f3660031901126101415760206040515f8152f35b34610141576020366003190112610141576004356001600160401b038111610141576103ea6103d961041c923690600401610b4c565b6103e1610e2f565b50810190610ea0565b6040805182516001600160a01b0390811682526020808501519083015292820151909216908201529081906060820190565b0390f35b3461014157602036600319011261014157610439610e2f565b50606061012060405161044b81610c06565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561062e575f91610529575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361051a576103ea61012061041c92015160208082518301019101610e61565b635527981560e11b5f5260045ffd5b90503d805f833e61053a8183610c3d565b810190602081830312610141578051906001600160401b03821161014157019061014082820312610141576040519161057283610c06565b805183526020810151602084015261058c6040820161135d565b604084015261059d6060820161135d565b60608401526105ae6080820161135d565b608084015260a081015160a08401526105c960c08201610e4d565b60c08401526105da60e08201610e4d565b60e08401526105ec6101008201610ccd565b610100840152610120810151906001600160401b03821161014157019080601f8301121561014157815161062292602001610cda565b610120820152816104d3565b6040513d5f823e3d90fd5b34610141576060366003190112610141576004356001600160401b0381116101415761013961066e6020923690600401610b4c565b610676610b79565b916044359233923392610ed7565b34610141576060366003190112610141576106d860206040516106ba816106ac848201610d10565b03601f198101835282610c3d565b6040518093819263f0ffa18560e01b83523390339060048501610d51565b03815f305af1801561062e575f906106f6575b602090604051908152f35b506020813d602011610721575b8161071060209383610c3d565b8101031261014157602090516106eb565b3d9150610703565b602061037f61073736610afc565b92610743929192611303565b610d8b565b3461014157366003190160a081126101415760601361014157610769610aa2565b608435906001600160a01b038216820361014157602090604051610792816106ac858201610d10565b6106d8604051948593849363f0ffa18560e01b855260048501610d51565b34610141575f366003190112610141576060806040516107cf81610bd7565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561062e575f90610896575b60609061041c604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a7e565b503d805f833e6108a68183610c3d565b810190602081830312610141578051906001600160401b038211610141570160808183031261014157604051906108dc82610bd7565b8051825260208101516001600160a01b038116810361014157602083015261090660408201610ccd565b60408301526060810151906001600160401b038211610141570182601f820112156101415760609281602061093d93519101610cda565b82820152610850565b34610141575f3660031901126101415760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610141575f3660031901126101415761041c6020610a6e60016109c37f0000000000000000000000000000000000000000000000000000000000000000611196565b81846109ee7f0000000000000000000000000000000000000000000000000000000000000000611196565b8180610a197f0000000000000000000000000000000000000000000000000000000000000000611196565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c3d565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b6040600319820112610141576004356001600160401b0381116101415781610b2691600401610acc565b92909291602435906001600160401b03821161014157610b4891600401610acc565b9091565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b602435906001600160401b038216820361014157565b35906001600160401b038216820361014157565b602060031982011261014157600435906001600160401b038211610141576101409082900360031901126101415760040190565b608081019081106001600160401b03821117610bf257604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610bf257604052565b606081019081106001600160401b03821117610bf257604052565b90601f801991011681019081106001600160401b03821117610bf257604052565b6001600160401b038111610bf257601f01601f191660200190565b929192610c8582610c5e565b91610c936040519384610c3d565b829481845281830111610141578281602093845f960137010152565b9080601f8301121561014157816020610cca93359101610c79565b90565b5190811515820361014157565b929192610ce682610c5e565b91610cf46040519384610c3d565b829481845281830111610141578281602093845f96015e010152565b6060810191906004356001600160a01b0381169081900361014157815260243560208201526044356001600160a01b03811691908290036101415760400152565b5f929493610d6960809360a0845260a0840190610a7e565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e20575f91345b85841015610e155781841015610e01578360051b8086013590828211610df25784013561013e198536030181121561014157610dd6908501611344565b15610de75760019103930192610d99565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e3c82610c22565b5f6040838281528260208201520152565b51906001600160a01b038216820361014157565b9081606091031261014157610e986040805192610e7d84610c22565b610e8681610e4d565b84526020810151602085015201610e4d565b604082015290565b9081606091031261014157610e986040805192610ebc84610c22565b610ec581610ab8565b84526020810135602085015201610ab8565b9193959492610ee882840184610ea0565b8051604080830180516020808601805194516323b872dd60e01b81526001600160a01b0398891660048201819052938916602482015260448101959095529296919592949293929091839160649183915f91165af15f918161115a575b5061115557505f5b15611116575050505090610f62913691610c79565b906040519460c08601908682106001600160401b03831117610bf2576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a084015260405160408101908082106001600160401b03831117610bf2576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611074608083015160c060e4860152610124850190610a7e565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561062e575f936110e2575b50827f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad055f80a3565b9092506020813d60201161110e575b816110fe60209383610c3d565b810103126101415751915f6110ba565b3d91506110f1565b5192519051604051634a73404560e11b81526001600160a01b039485166004820152602481019390935292166044820152606481019190915260849150fd5b610f4d565b9091506020813d60201161118e575b8161117660209383610c3d565b810103126101415761118790610ccd565b905f610f45565b3d9150611169565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156112e0575b806d04ee2d6d415b85acef8100000000600a9210156112c5575b662386f26fc100008110156112b1575b6305f5e1008110156112a0575b612710811015611291575b6064811015611283575b1015611278575b600a6021600184019361121d85610c5e565b9461122b6040519687610c3d565b80865261123a601f1991610c5e565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561127357600a9091611245565b505090565b60019091019061120b565b606460029104930192611204565b612710600491049301926111fa565b6305f5e100600891049301926111ef565b662386f26fc10000601091049301926111e2565b6d04ee2d6d415b85acef8100000000602091049301926111d2565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046111b8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361133557565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361014157301490565b51906001600160401b03821682036101415756fea26469706673582212208b5e38185b56586f9629374d83566e83464007e5b60dab034371f1db9ebd371e64736f6c634300081b0033",
    sourceMap: "511:3459:124:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;511:3459:124;;;;1143:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;511:3459:124;790:10:9;;511:3459:124;790:10:9;;;789::77;;809:32;;-1:-1:-1;511:3459:124;;;;;;;;;;;872:48:77;;511:3459:124;872:48:77;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;904:4:77;511:3459:124;;;;1143:4;511:3459;;;;;;-1:-1:-1;;511:3459:124;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;511:3459:124;;;;;;;;759:14:6;511:3459:124;;;;;783:14:6;511:3459:124;;;;;807:14:6;511:3459:124;;;;;790:10:9;511:3459:124;;;;;809:32:77;511:3459:124;;;;;789:10:77;511:3459:124;;;;;;;;;;851:69:77;511:3459:124;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;511:3459:124;872:48:77;;511:3459:124;872:48:77;;;;;;511:3459:124;872:48:77;;;:::i;:::-;;;511:3459:124;;;;;872:48:77;;;511:3459:124;-1:-1:-1;511:3459:124;;872:48:77;;;-1:-1:-1;872:48:77;;;511:3459:124;;;-1:-1:-1;511:3459:124;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;511:3459:124;;;;-1:-1:-1;511:3459:124;;;;;-1:-1:-1;511:3459:124;;;;;;-1:-1:-1;;511:3459:124;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146109805780635bf2f20d146109465780636b122fe0146107b057806388d8b7e21461074857806388e5b2d91461072957806391db0b7e146107295780639b28978c14610684578063b3b902d414610639578063c6ec507014610420578063c93844be146103a3578063ce46e04614610389578063e49617e114610364578063e60c350514610364578063e6c9714d146101455763f0ffa1850361000e57346101415760a0366003190112610141576004356001600160401b03811161014157610100903690600401610b4c565b90610109610b79565b604435929091906001600160a01b0384168403610141576020936101399361012f610aa2565b9260843594610ed7565b604051908152f35b5f80fd5b34610141576060366003190112610141576004356001600160401b038111610141576101406003198236030112610141576040519061018382610c06565b806004013582526020820190602481013582526101a260448201610b8f565b60408401526101b360648201610b8f565b606084019081526101c660848301610b8f565b916080850192835260a481013560a08601526101e460c48201610ab8565b60c08601526101f560e48201610ab8565b60e08601526101048101358015158103610141576101008601526101248101356001600160401b038111610141576101209160046102369236920101610caf565b94019384526024356001600160401b0381116101415761025a903690600401610caf565b927f000000000000000000000000000000000000000000000000000000000000000090510361035557516001600160401b0316801515908161034b575b5061033c57516001600160401b031661032d576102d16102c260209351848082518301019101610e61565b91838082518301019101610e61565b815181516001600160a01b03908116911614918261031c575b826102fc575b50506040519015158152f35b6040908101519101516001600160a01b03908116911614905082806102f0565b8381015182850151111592506102ea565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610297565b635f9bd90760e11b5f5260045ffd5b602061037f61037236610ba3565b61037a611303565b611344565b6040519015158152f35b34610141575f3660031901126101415760206040515f8152f35b34610141576020366003190112610141576004356001600160401b038111610141576103ea6103d961041c923690600401610b4c565b6103e1610e2f565b50810190610ea0565b6040805182516001600160a01b0390811682526020808501519083015292820151909216908201529081906060820190565b0390f35b3461014157602036600319011261014157610439610e2f565b50606061012060405161044b81610c06565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561062e575f91610529575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361051a576103ea61012061041c92015160208082518301019101610e61565b635527981560e11b5f5260045ffd5b90503d805f833e61053a8183610c3d565b810190602081830312610141578051906001600160401b03821161014157019061014082820312610141576040519161057283610c06565b805183526020810151602084015261058c6040820161135d565b604084015261059d6060820161135d565b60608401526105ae6080820161135d565b608084015260a081015160a08401526105c960c08201610e4d565b60c08401526105da60e08201610e4d565b60e08401526105ec6101008201610ccd565b610100840152610120810151906001600160401b03821161014157019080601f8301121561014157815161062292602001610cda565b610120820152816104d3565b6040513d5f823e3d90fd5b34610141576060366003190112610141576004356001600160401b0381116101415761013961066e6020923690600401610b4c565b610676610b79565b916044359233923392610ed7565b34610141576060366003190112610141576106d860206040516106ba816106ac848201610d10565b03601f198101835282610c3d565b6040518093819263f0ffa18560e01b83523390339060048501610d51565b03815f305af1801561062e575f906106f6575b602090604051908152f35b506020813d602011610721575b8161071060209383610c3d565b8101031261014157602090516106eb565b3d9150610703565b602061037f61073736610afc565b92610743929192611303565b610d8b565b3461014157366003190160a081126101415760601361014157610769610aa2565b608435906001600160a01b038216820361014157602090604051610792816106ac858201610d10565b6106d8604051948593849363f0ffa18560e01b855260048501610d51565b34610141575f366003190112610141576060806040516107cf81610bd7565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561062e575f90610896575b60609061041c604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a7e565b503d805f833e6108a68183610c3d565b810190602081830312610141578051906001600160401b038211610141570160808183031261014157604051906108dc82610bd7565b8051825260208101516001600160a01b038116810361014157602083015261090660408201610ccd565b60408301526060810151906001600160401b038211610141570182601f820112156101415760609281602061093d93519101610cda565b82820152610850565b34610141575f3660031901126101415760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610141575f3660031901126101415761041c6020610a6e60016109c37f0000000000000000000000000000000000000000000000000000000000000000611196565b81846109ee7f0000000000000000000000000000000000000000000000000000000000000000611196565b8180610a197f0000000000000000000000000000000000000000000000000000000000000000611196565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c3d565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b6040600319820112610141576004356001600160401b0381116101415781610b2691600401610acc565b92909291602435906001600160401b03821161014157610b4891600401610acc565b9091565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b602435906001600160401b038216820361014157565b35906001600160401b038216820361014157565b602060031982011261014157600435906001600160401b038211610141576101409082900360031901126101415760040190565b608081019081106001600160401b03821117610bf257604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610bf257604052565b606081019081106001600160401b03821117610bf257604052565b90601f801991011681019081106001600160401b03821117610bf257604052565b6001600160401b038111610bf257601f01601f191660200190565b929192610c8582610c5e565b91610c936040519384610c3d565b829481845281830111610141578281602093845f960137010152565b9080601f8301121561014157816020610cca93359101610c79565b90565b5190811515820361014157565b929192610ce682610c5e565b91610cf46040519384610c3d565b829481845281830111610141578281602093845f96015e010152565b6060810191906004356001600160a01b0381169081900361014157815260243560208201526044356001600160a01b03811691908290036101415760400152565b5f929493610d6960809360a0845260a0840190610a7e565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e20575f91345b85841015610e155781841015610e01578360051b8086013590828211610df25784013561013e198536030181121561014157610dd6908501611344565b15610de75760019103930192610d99565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e3c82610c22565b5f6040838281528260208201520152565b51906001600160a01b038216820361014157565b9081606091031261014157610e986040805192610e7d84610c22565b610e8681610e4d565b84526020810151602085015201610e4d565b604082015290565b9081606091031261014157610e986040805192610ebc84610c22565b610ec581610ab8565b84526020810135602085015201610ab8565b9193959492610ee882840184610ea0565b8051604080830180516020808601805194516323b872dd60e01b81526001600160a01b0398891660048201819052938916602482015260448101959095529296919592949293929091839160649183915f91165af15f918161115a575b5061115557505f5b15611116575050505090610f62913691610c79565b906040519460c08601908682106001600160401b03831117610bf2576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a084015260405160408101908082106001600160401b03831117610bf2576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611074608083015160c060e4860152610124850190610a7e565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561062e575f936110e2575b50827f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad055f80a3565b9092506020813d60201161110e575b816110fe60209383610c3d565b810103126101415751915f6110ba565b3d91506110f1565b5192519051604051634a73404560e11b81526001600160a01b039485166004820152602481019390935292166044820152606481019190915260849150fd5b610f4d565b9091506020813d60201161118e575b8161117660209383610c3d565b810103126101415761118790610ccd565b905f610f45565b3d9150611169565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156112e0575b806d04ee2d6d415b85acef8100000000600a9210156112c5575b662386f26fc100008110156112b1575b6305f5e1008110156112a0575b612710811015611291575b6064811015611283575b1015611278575b600a6021600184019361121d85610c5e565b9461122b6040519687610c3d565b80865261123a601f1991610c5e565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561127357600a9091611245565b505090565b60019091019061120b565b606460029104930192611204565b612710600491049301926111fa565b6305f5e100600891049301926111ef565b662386f26fc10000601091049301926111e2565b6d04ee2d6d415b85acef8100000000602091049301926111d2565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046111b8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361133557565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361014157301490565b51906001600160401b03821682036101415756fea26469706673582212208b5e38185b56586f9629374d83566e83464007e5b60dab034371f1db9ebd371e64736f6c634300081b0033",
    sourceMap: "511:3459:124:-:0;;;;;;;;;-1:-1:-1;511:3459:124;;;;;;;;1183:12:9;;;1054:5;1183:12;511:3459:124;1054:5:9;1183:12;511:3459:124;;;;;;;;;;;;;;;;;;;;;;;;;1680:16;511:3459;1680:16;;;511:3459;;;;;;;;;;1303:16;511:3459;1303:16;;;511:3459;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;:::i;:::-;2939:619;3152:18;511:3459;;1016:27:76;1012:55;;511:3459:124;-1:-1:-1;;;;;511:3459:124;353:30:76;;;;;:89;;511:3459:124;721:55:76;;;511:3459:124;-1:-1:-1;;;;;511:3459:124;786:58:76;;3352:36:124;3228:79;511:3459;3252:15;;511:3459;;;;3228:79;;;;;;:::i;:::-;511:3459;;;;;3352:36;;;;;;:::i;:::-;511:3459;;;;-1:-1:-1;;;;;511:3459:124;;;;;3418:33;;;:84;;511:3459;3418:133;;;511:3459;3399:152;;511:3459;;;;;;;;3418:133;511:3459;3518:13;;;511:3459;3535:16;;511:3459;-1:-1:-1;;;;;511:3459:124;;;;;3518:33;;-1:-1:-1;3418:133:124;;;;:84;3467:14;;;511:3459;3485:17;;;511:3459;-1:-1:-1;3467:35:124;;-1:-1:-1;3418:84:124;;786:58:76;824:20;;;511:3459:124;824:20:76;511:3459:124;;824:20:76;721:55;759:17;;;511:3459:124;759:17:76;511:3459:124;;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;1012:55;1052:15;;;511:3459:124;1052:15:76;511:3459:124;;1052:15:76;511:3459:124;;3045:39:9;511:3459:124;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;511:3459:124;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;-1:-1:-1;;;;;511:3459:124;;;;3927:34;511:3459;;;;;;;;:::i;:::-;;;:::i;:::-;;3927:34;;;;:::i;:::-;511:3459;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:77;;511:3459:124;;;2392:23:77;;511:3459:124;;;2392:23:77;511:3459:124;;;;;;2392:3:77;511:3459:124;2392:23:77;;;;;;;511:3459:124;2392:23:77;;;511:3459:124;2429:19:77;511:3459:124;2429:19:77;;511:3459:124;2452:18:77;2429:41;2425:87;;3742:46:124;511:3459;;3753:16;;;511:3459;;;;3742:46;;;;;;:::i;2425:87:77:-;2491:21;;;511:3459:124;2491:21:77;511:3459:124;;2491:21:77;2392:23;;;;;511:3459:124;2392:23:77;;;;;;:::i;:::-;;;511:3459:124;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:77;;;;511:3459:124;;;;;;;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;-1:-1:-1;;;;;511:3459:124;;;;716:142:80;511:3459:124;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;511:3459:124:-;;;;;;-1:-1:-1;;511:3459:124;;;;1336:145;1303:16;511:3459;;1303:16;;;;;;;:::i;:::-;;1055:104:6;;1303:16:124;;;;;;:::i;:::-;511:3459;;;;;;;;;1336:145;;1413:10;;;1336:145;511:3459;1336:145;;;:::i;:::-;;:4;511:3459;1336:4;:145;;;;;;511:3459;1336:145;;;511:3459;1303:16;511:3459;;;;;;;1336:145;;1303:16;1336:145;;1303:16;1336:145;;;;;;511:3459;1336:145;;;:::i;:::-;;;511:3459;;;;1303:16;511:3459;;1336:145;;;;;-1:-1:-1;1336:145:124;;511:3459;;1442:1461:9;511:3459:124;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;511:3459:124:-;;;;;-1:-1:-1;;511:3459:124;;;;;;;-1:-1:-1;511:3459:124;;;;:::i;:::-;;;;-1:-1:-1;;;;;511:3459:124;;;;;;1680:16;511:3459;;;1680:16;;;;;;;:::i;:::-;1713:139;511:3459;;;;;;;;;;1713:139;;511:3459;1713:139;;;:::i;511:3459::-;;;;;;-1:-1:-1;;511:3459:124;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;511:3459:124;1497:44:77;;511:3459:124;;;1497:44:77;511:3459:124;;;;;;1497:14:77;511:3459:124;1497:44:77;;;;;;511:3459:124;1497:44:77;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;511:3459:124;1497:44:77;;;;;;:::i;:::-;;;511:3459:124;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;511:3459:124;;;;;;-1:-1:-1;;511:3459:124;;;;;;;542:43:77;511:3459:124;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;1055:104:6;;511:3459:124;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;511:3459:124;;;;;;;;;;;;1055:104:6;;;511:3459:124;;;;-1:-1:-1;;;511:3459:124;;;;;;;;;;;;;;;;;-1:-1:-1;;;511:3459:124;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;511:3459:124;;;;;1055:104:6;511:3459:124;;1055:104:6;511:3459:124;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:3459:124;;;;;;;;-1:-1:-1;;511:3459:124;;;;:::o;:::-;;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;511:3459:124;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o;:::-;;-1:-1:-1;;511:3459:124;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;-1:-1:-1;;511:3459:124;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;:::o;:::-;;;;-1:-1:-1;511:3459:124;;;;;-1:-1:-1;511:3459:124;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;:::o;:::-;;;1055:104:6;;511:3459:124;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;:::o;:::-;-1:-1:-1;;;;;511:3459:124;;;;;;-1:-1:-1;;511:3459:124;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;511:3459:124;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;511:3459:124;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;511:3459:124;;;;;;;;;;;;;4064:22:9;;;;4060:87;;511:3459:124;;;;;;;;;;;;;;4274:33:9;511:3459:124;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;511:3459:124;;3896:19:9;511:3459:124;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;511:3459:124;;;;3881:1:9;511:3459:124;;;;;3881:1:9;511:3459:124;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;511:3459:124;;;;;;;:::i;:::-;-1:-1:-1;511:3459:124;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;871:377:80:-;;;;;;2046:68:124;;;;;;:::i;:::-;511:3459;;2295:20;;;;511:3459;;2333:21;;;;511:3459;;;;-1:-1:-1;;;2213:155:124;;-1:-1:-1;;;;;511:3459:124;;;2213:155;;;511:3459;;;;;;;;;;;;;;;;;2295:20;;511:3459;;2333:21;;2175:12;;511:3459;2333:21;;511:3459;;2213:155;;511:3459;;-1:-1:-1;;511:3459:124;2213:155;;-1:-1:-1;;2213:155:124;;;871:377:80;-1:-1:-1;2197:290:124;;2461:15;-1:-1:-1;2197:290:124;2501:8;2497:217;;511:3459;;;;;;;;;;:::i;:::-;;2295:20;511:3459;;;;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;-1:-1:-1;;;;;511:3459:124;2295:20;511:3459;;;;;;;;;;;;2333:21;1914:299:77;;511:3459:124;2076:4:77;2295:20:124;1914:299:77;;511:3459:124;;1914:299:77;;511:3459:124;1914:299:77;;;511:3459:124;-1:-1:-1;1914:299:77;;;511:3459:124;2295:20;511:3459;2295:20;511:3459;;;;;;-1:-1:-1;;;;;511:3459:124;;;;;2333:21;511:3459;2295:20;511:3459;1868:18:77;511:3459:124;;1819:413:77;;;511:3459:124;;;2295:20;511:3459;;;;;;;;1791:455:77;;;2213:155:124;1791:455:77;;511:3459:124;;;;;;;2295:20;511:3459;;;;;;;;;;;;2213:155;511:3459;;;-1:-1:-1;;;;;511:3459:124;;;;;;;;;2295:20;511:3459;;;;;;;;;;;;;;;;;1914:299:77;511:3459:124;1914:299:77;511:3459:124;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;511:3459:124;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;511:3459:124;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;2197:290:124;1134:55:80;;2899:27:124;-1:-1:-1;2899:27:124;;871:377:80:o;1791:455:77:-;;;;2333:21:124;1791:455:77;;2333:21:124;1791:455:77;;;;;;511:3459:124;1791:455:77;;;:::i;:::-;;;511:3459:124;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;2497:217:124;511:3459;;;;;2295:20;511:3459;-1:-1:-1;;;2532:171:124;;-1:-1:-1;;;;;511:3459:124;;;2213:155;2532:171;;511:3459;;;;;;;;;;;;;;2213:155;511:3459;;;;;;2532:171;;-1:-1:-1;2532:171:124;2197:290;;;2213:155;;;;2333:21;2213:155;;2333:21;2213:155;;;;;;2333:21;2213:155;;;:::i;:::-;;;511:3459;;;;;;;:::i;:::-;2213:155;;;;;;;-1:-1:-1;2213:155:124;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;511:3459:124;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;511:3459:124;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;511:3459:124;;-1:-1:-1;;;1033:111:63;;;;511:3459:124;1033:111:63;511:3459:124;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;511:3459:124;;;;26127:66:70;;26014:100;26027:7;26098:1;511:3459:124;;;;26014:100:70;;;25901;25914:7;25985:1;511:3459:124;;;;25901:100:70;;;25788;25801:7;25872:1;511:3459:124;;;;25788:100:70;;;25672:103;25685:8;25758:2;511:3459:124;;;;25672:103:70;;;25556;25569:8;25642:2;511:3459:124;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;511:3459:124;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;511:3459:124;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;511:3459:124;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;511:3459:124:-;;;-1:-1:-1;;;;;511:3459:124;;;;;;:::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2463,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2506,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2549,
          length: 32
        }
      ],
      "3008": [
        {
          start: 4869,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2081,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1187,
          length: 32
        },
        {
          start: 4226,
          length: 32
        }
      ],
      "54663": [
        {
          start: 605,
          length: 32
        },
        {
          start: 1243,
          length: 32
        },
        {
          start: 2031,
          length: 32
        },
        {
          start: 2397,
          length: 32
        },
        {
          start: 4053,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,address))": "9b28978c",
    "doObligationFor((address,uint256,address),address,address)": "88d8b7e2",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC20PaymentObligation.sol":"ERC20PaymentObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f","license":"UNLICENSED","urls":["bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a","dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC20TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "payment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "PaymentMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC20PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC20PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC20PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC20PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC20PaymentObligation.sol": "ERC20PaymentObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        keccak256: "0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f",
        urls: [
          "bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a",
          "dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 124
};

// src/contracts/ERC20Permit.ts
var abi38 = {
  abi: [
    {
      type: "function",
      name: "DOMAIN_SEPARATOR",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "allowance",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address"
        },
        {
          name: "spender",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "approve",
      inputs: [
        {
          name: "spender",
          type: "address",
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "balanceOf",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decimals",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "eip712Domain",
      inputs: [],
      outputs: [
        {
          name: "fields",
          type: "bytes1",
          internalType: "bytes1"
        },
        {
          name: "name",
          type: "string",
          internalType: "string"
        },
        {
          name: "version",
          type: "string",
          internalType: "string"
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "verifyingContract",
          type: "address",
          internalType: "address"
        },
        {
          name: "salt",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "extensions",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "name",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "nonces",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "permit",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address"
        },
        {
          name: "spender",
          type: "address",
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "v",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "r",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "symbol",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "totalSupply",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "transfer",
      inputs: [
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "transferFrom",
      inputs: [
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "Approval",
      inputs: [
        {
          name: "owner",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "spender",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EIP712DomainChanged",
      inputs: [],
      anonymous: false
    },
    {
      type: "event",
      name: "Transfer",
      inputs: [
        {
          name: "from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "ECDSAInvalidSignature",
      inputs: []
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureLength",
      inputs: [
        {
          name: "length",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureS",
      inputs: [
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InsufficientAllowance",
      inputs: [
        {
          name: "spender",
          type: "address",
          internalType: "address"
        },
        {
          name: "allowance",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "needed",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InsufficientBalance",
      inputs: [
        {
          name: "sender",
          type: "address",
          internalType: "address"
        },
        {
          name: "balance",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "needed",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InvalidApprover",
      inputs: [
        {
          name: "approver",
          type: "address",
          internalType: "address"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InvalidReceiver",
      inputs: [
        {
          name: "receiver",
          type: "address",
          internalType: "address"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InvalidSender",
      inputs: [
        {
          name: "sender",
          type: "address",
          internalType: "address"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20InvalidSpender",
      inputs: [
        {
          name: "spender",
          type: "address",
          internalType: "address"
        }
      ]
    },
    {
      type: "error",
      name: "ERC2612ExpiredSignature",
      inputs: [
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ERC2612InvalidSigner",
      inputs: [
        {
          name: "signer",
          type: "address",
          internalType: "address"
        },
        {
          name: "owner",
          type: "address",
          internalType: "address"
        }
      ]
    },
    {
      type: "error",
      name: "InvalidAccountNonce",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address"
        },
        {
          name: "currentNonce",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InvalidShortString",
      inputs: []
    },
    {
      type: "error",
      name: "StringTooLong",
      inputs: [
        {
          name: "str",
          type: "string",
          internalType: "string"
        }
      ]
    }
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  methodIdentifiers: {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "decimals()": "313ce567",
    "eip712Domain()": "84b0196e",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"ERC2612ExpiredSignature","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC2612InvalidSigner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account\'s ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn\'t need to send a transaction, and thus is not required to hold Ether at all.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC2612ExpiredSignature(uint256)":[{"details":"Permit deadline has expired."}],"ERC2612InvalidSigner(address,address)":[{"details":"Mismatched signature."}],"InvalidAccountNonce(address,uint256)":[{"details":"The nonce used for an `account` is not the expected current nonce."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\"1\\"`. It\'s a good idea to use the same `name` that is defined as the ERC-20 token name."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it\'s overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"eip712Domain()":{"details":"See {IERC-5267}."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``\'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``\'s tokens, given ``owner``\'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``\'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``\'s tokens of at least `value`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol":"ERC20Permit"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"keccak256":"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92","license":"MIT","urls":["bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a","dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"]},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"keccak256":"0x9cac1f97ecc92043dd19235d6677e40cf6bac382886a94f7a80a957846b24229","license":"MIT","urls":["bzz-raw://a1e0c924e0edfdfd4abceeb552d99f1cd95c0d387b38ccb1f67c583607e3d155","dweb:/ipfs/QmZAi6qKa66zuS3jyEhsQR9bBNnZe1wSognYqw9nvseyUz"]},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xc61b3530214f6729db70cc02ffacf6218e601a5e351dd25e369a03c6ca201cfb","license":"MIT","urls":["bzz-raw://48b897a0323b8d04464848832b364ecfd6c002fd15c53a86304ca1eec1475d12","dweb:/ipfs/QmV1S2GmZgU9bDEfdXFyCe1HhDy4nND3z4Jyy4iBvh5wu2"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol":{"keccak256":"0x9f526037191e8215f7e3e0ade7efae2d728b249068767761343a97beb700f4c8","license":"MIT","urls":["bzz-raw://df9b63829446fc57867dab71da27606769ab50237b8bc6480ed6a405d816bb87","dweb:/ipfs/QmSf4J4EgFw9RnGCDR9W12fJ7rwYBYhENKppzsDaMJKXmK"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","license":"MIT","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","license":"MIT","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"]},"lib/openzeppelin-contracts/contracts/utils/Nonces.sol":{"keccak256":"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f","license":"MIT","urls":["bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e","dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol":{"keccak256":"0xbbd677d9730e606a98a8e99c66ea2665e1be7b2218245ab4bc8340f5d148c032","license":"MIT","urls":["bzz-raw://4220d046e8bb1591d65a95fe8f85474f4fd4ef88679f7960c5a25d2be40edd7b","dweb:/ipfs/QmcWmnwx82BAWKBDGxjmtgmHtgf9Mgo4PTTxvGFb2CJ7Kr"]},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0xb38a945832ca380d4ed08d91a6ebaf03fd66ea02057e574384fae3abf3ebc136","license":"MIT","urls":["bzz-raw://f933ce488ce79c1366d44dca530b1cc4db25fa1380ae691effdd5e3eec8fd8a5","dweb:/ipfs/Qmdyk8pSJasc9pZaRFRdmtX85BCs5faQ8xUKiWnzaEkFEt"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x499cb322fe046f09e7accdf52e4c0e3d4fcddecb9eded2e4a23d5303c5a16180","license":"MIT","urls":["bzz-raw://8f1801d1c9baf83d0fdb04515eb752e21a73a2a8973045f42e976821ab168c5f","dweb:/ipfs/QmNYMKSKkrgAW1YTfi9K5FsVzeg3zQh8nDyLdXAct8m8kU"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol":{"keccak256":"0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d","license":"MIT","urls":["bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88","dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0xf56e072d3c3b390275daa0a3f00c7a634604780b5daf4cf8590fc1c2c56b47ff","license":"MIT","urls":["bzz-raw://e48cec5a9338d1c7fd52783831a9fca2cae2152c5aa7cf23b364e789d6f01992","dweb:/ipfs/QmQCPm66skhi1LK9ji3rFk91atc95vqrpbyCmmtKXH8YUX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "ECDSAInvalidSignature"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "length",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ECDSAInvalidSignatureLength"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "ECDSAInvalidSignatureS"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "allowance",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "needed",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC20InsufficientAllowance"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "balance",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "needed",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC20InsufficientBalance"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "approver",
              type: "address"
            }
          ],
          type: "error",
          name: "ERC20InvalidApprover"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "receiver",
              type: "address"
            }
          ],
          type: "error",
          name: "ERC20InvalidReceiver"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address"
            }
          ],
          type: "error",
          name: "ERC20InvalidSender"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address"
            }
          ],
          type: "error",
          name: "ERC20InvalidSpender"
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC2612ExpiredSignature"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "signer",
              type: "address"
            },
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          type: "error",
          name: "ERC2612InvalidSigner"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "currentNonce",
              type: "uint256"
            }
          ],
          type: "error",
          name: "InvalidAccountNonce"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidShortString"
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "str",
              type: "string"
            }
          ],
          type: "error",
          name: "StringTooLong"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "spender",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
              indexed: false
            }
          ],
          type: "event",
          name: "Approval",
          anonymous: false
        },
        {
          inputs: [],
          type: "event",
          name: "EIP712DomainChanged",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
              indexed: false
            }
          ],
          type: "event",
          name: "Transfer",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "DOMAIN_SEPARATOR",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "address",
              name: "spender",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "allowance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "approve",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "decimals",
          outputs: [
            {
              internalType: "uint8",
              name: "",
              type: "uint8"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "eip712Domain",
          outputs: [
            {
              internalType: "bytes1",
              name: "fields",
              type: "bytes1"
            },
            {
              internalType: "string",
              name: "name",
              type: "string"
            },
            {
              internalType: "string",
              name: "version",
              type: "string"
            },
            {
              internalType: "uint256",
              name: "chainId",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "verifyingContract",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32"
            },
            {
              internalType: "uint256[]",
              name: "extensions",
              type: "uint256[]"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "nonces",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address"
            },
            {
              internalType: "address",
              name: "spender",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256"
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8"
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permit"
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "totalSupply",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transfer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferFrom",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "DOMAIN_SEPARATOR()": {
            details: "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
          },
          "allowance(address,address)": {
            details: "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            details: "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            details: "See {IERC20-balanceOf}."
          },
          constructor: {
            details: 'Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`. It\'s a good idea to use the same `name` that is defined as the ERC-20 token name.'
          },
          "decimals()": {
            details: "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "eip712Domain()": {
            details: "See {IERC-5267}."
          },
          "name()": {
            details: "Returns the name of the token."
          },
          "nonces(address)": {
            details: "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            details: "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
          },
          "symbol()": {
            details: "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            details: "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            details: "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
          },
          "transferFrom(address,address,uint256)": {
            details: "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": "ERC20Permit"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
        keccak256: "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
        urls: [
          "bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
          "dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        keccak256: "0x9cac1f97ecc92043dd19235d6677e40cf6bac382886a94f7a80a957846b24229",
        urls: [
          "bzz-raw://a1e0c924e0edfdfd4abceeb552d99f1cd95c0d387b38ccb1f67c583607e3d155",
          "dweb:/ipfs/QmZAi6qKa66zuS3jyEhsQR9bBNnZe1wSognYqw9nvseyUz"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        keccak256: "0xc61b3530214f6729db70cc02ffacf6218e601a5e351dd25e369a03c6ca201cfb",
        urls: [
          "bzz-raw://48b897a0323b8d04464848832b364ecfd6c002fd15c53a86304ca1eec1475d12",
          "dweb:/ipfs/QmV1S2GmZgU9bDEfdXFyCe1HhDy4nND3z4Jyy4iBvh5wu2"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
        keccak256: "0x9f526037191e8215f7e3e0ade7efae2d728b249068767761343a97beb700f4c8",
        urls: [
          "bzz-raw://df9b63829446fc57867dab71da27606769ab50237b8bc6480ed6a405d816bb87",
          "dweb:/ipfs/QmSf4J4EgFw9RnGCDR9W12fJ7rwYBYhENKppzsDaMJKXmK"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        keccak256: "0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28",
        urls: [
          "bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323",
          "dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        keccak256: "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        urls: [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        keccak256: "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        urls: [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
        keccak256: "0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f",
        urls: [
          "bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e",
          "dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
        keccak256: "0xbbd677d9730e606a98a8e99c66ea2665e1be7b2218245ab4bc8340f5d148c032",
        urls: [
          "bzz-raw://4220d046e8bb1591d65a95fe8f85474f4fd4ef88679f7960c5a25d2be40edd7b",
          "dweb:/ipfs/QmcWmnwx82BAWKBDGxjmtgmHtgf9Mgo4PTTxvGFb2CJ7Kr"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        keccak256: "0xb38a945832ca380d4ed08d91a6ebaf03fd66ea02057e574384fae3abf3ebc136",
        urls: [
          "bzz-raw://f933ce488ce79c1366d44dca530b1cc4db25fa1380ae691effdd5e3eec8fd8a5",
          "dweb:/ipfs/Qmdyk8pSJasc9pZaRFRdmtX85BCs5faQ8xUKiWnzaEkFEt"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        keccak256: "0x499cb322fe046f09e7accdf52e4c0e3d4fcddecb9eded2e4a23d5303c5a16180",
        urls: [
          "bzz-raw://8f1801d1c9baf83d0fdb04515eb752e21a73a2a8973045f42e976821ab168c5f",
          "dweb:/ipfs/QmNYMKSKkrgAW1YTfi9K5FsVzeg3zQh8nDyLdXAct8m8kU"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
        keccak256: "0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d",
        urls: [
          "bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88",
          "dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
        keccak256: "0xf56e072d3c3b390275daa0a3f00c7a634604780b5daf4cf8590fc1c2c56b47ff",
        urls: [
          "bzz-raw://e48cec5a9338d1c7fd52783831a9fca2cae2152c5aa7cf23b364e789d6f01992",
          "dweb:/ipfs/QmQCPm66skhi1LK9ji3rFk91atc95vqrpbyCmmtKXH8YUX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      }
    },
    version: 1
  },
  id: 45
};

// src/contracts/ERC721EscrowObligation.ts
var abi39 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC721EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC721EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC721EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC721EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC721TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x61016080604052346101f857604081611f1f80380380916100208285610232565b8339810103126101f85780516001600160a01b038116918282036101f85760200151916001600160a01b0383168084036101f857604051606081016001600160401b0381118282101761021e57604052603d815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c206184527f64647265737320746f6b656e2c2075696e7432353620746f6b656e496400000060408301526001608052600360a0525f60c0521561020f576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af1908115610204575f916101ce575b5061014052604051611cc99081610256823960805181610a16015260a05181610a41015260c05181610a6c015260e05181611be00152610100518161088d0152610120518181816103dc015281816106be01528181611270015261198001526101405181818161041c0152818161085b015281816109d401528181611449015281816116b801526118d30152f35b90506020813d6020116101fc575b816101e960209383610232565b810103126101f857515f610140565b5f80fd5b3d91506101dc565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b0382119082101761021e5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f5f3560e01c80632c713cd914610b915780633ce55d0214610ae557806354fd4d50146109f75780635bf2f20d146109bd5780636b122fe01461081c5780637d2c2931146106865780638371ef591461062757806388e5b2d9146105d9578063891d9ea8146105f857806391db0b7e146105d9578063a4f0d517146104f3578063b3b902d4146104a7578063c6ec50701461039b578063c93844be146102c4578063ce46e046146102a8578063e49617e11461028d578063e60c35051461028d578063e6c9714d146101665763f0ffa18514610103575061000e565b346101635760a036600319011261016357600435906001600160401b03821161016357602061015b6101383660048601610dc8565b610140610bc4565b610148610bee565b90610151610c04565b92608435946117a6565b604051908152f35b80fd5b503461016357606036600319011261016357600435906001600160401b03821161016357610140600319833603011261016357604051916101a683610c81565b80600401358352602481013560208401526101c360448201610bda565b60408401526101d460648201610bda565b60608401526101e560848201610bda565b608084015260a481013560a084015261020060c48201610c1a565b60c084015261021160e48201610c1a565b60e08401526101048101358015158103610289576101008401526101248101356001600160401b0381116102895761024e91369101600401610d2a565b610120830152602435906001600160401b03821161016357602061027f846102793660048701610d2a565b906116b6565b6040519015158152f35b8280fd5b602061027f61029b36610e3f565b6102a3611bde565b611c1f565b5034610163578060031936011261016357602090604051908152f35b5034610163576020366003190112610163576004356001600160401b038111610397576102f5903690600401610dc8565b610300929192611692565b50820191602081840312610397578035906001600160401b038211610289570191608083820312610397576040519161033883610c52565b61034184610c1a565b83526020840135906001600160401b03821161016357509261036a606092610393958301610d2a565b602084015261037b60408201610c1a565b60408401520135606082015260405191829182610df5565b0390f35b5080fd5b5034610163576020366003190112610163576103b5611692565b506103be610f91565b506040516328c44a9960e21b815260048035908201529080826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561049a578192610476575b5060208201517f0000000000000000000000000000000000000000000000000000000000000000036104675761039361045b610120840151602080825183010191016110f8565b60405191829182610df5565b635527981560e11b8152600490fd5b6104939192503d8084833e61048b8183610cb8565b81019061101d565b905f610414565b50604051903d90823e3d90fd5b503461016357606036600319011261016357600435906001600160401b03821161016357602061015b6104dd3660048601610dc8565b6104e5610bc4565b9160443592339233926117a6565b5034610163576040366003190112610163576004356001600160401b0381116103975760806003198236030112610397579060206105789261054b610559610539610bc4565b92604051928391600401868301610e73565b03601f198101835282610cb8565b60405163f0ffa18560e01b815294859283923391829160048601610f0b565b038184305af19081156105cd5790610596575b602090604051908152f35b506020813d6020116105c5575b816105b060209383610cb8565b810103126105c1576020905161058b565b5f80fd5b3d91506105a3565b604051903d90823e3d90fd5b602061027f6105e736610d78565b926105f3929192611bde565b6111a1565b50346101635761039361061361060d36610bae565b90611245565b604051918291602083526020830190610c2e565b503461016357602036600319011261016357600435906001600160401b0382116101635761066061065b3660048501610d2a565b611178565b604080516001600160a01b03909316835260208301819052829161039391830190610c2e565b346105c15760203660031901126105c1576004356106a2610f91565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610800575b5061070857506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106107f1576107436101208201519160c060018060a01b039101511691602080825183010191016110f8565b6040810180516060909201805190926001600160a01b0316803b156105c1576040516323b872dd60e01b81523060048201526001600160a01b038616602482015260448101929092525f908290606490829084905af190816107e1575b506107d65751905160405163045b391760e01b81529283926107d292919030906001600160a01b031660048601611bb3565b0390fd5b602060405160018152f35b5f6107eb91610cb8565b5f6107a0565b637bf6a16f60e01b5f5260045ffd5b6108159192503d805f833e61048b8183610cb8565b90836106f0565b346105c1575f3660031901126105c15760608060405161083b81610c52565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156109b2575f90610902575b606090610393604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610c2e565b503d805f833e6109128183610cb8565b8101906020818303126105c1578051906001600160401b0382116105c157016080818303126105c1576040519061094882610c52565b8051825260208101516001600160a01b03811681036105c157602083015261097260408201610f4e565b60408301526060810151906001600160401b0382116105c1570182601f820112156105c1576060928160206109a993519101610f5b565b828201526108bc565b6040513d5f823e3d90fd5b346105c1575f3660031901126105c15760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346105c1575f3660031901126105c15761039360206106136001610a3a7f0000000000000000000000000000000000000000000000000000000000000000611a46565b8184610a657f0000000000000000000000000000000000000000000000000000000000000000611a46565b8180610a907f0000000000000000000000000000000000000000000000000000000000000000611a46565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610cb8565b346105c15760803660031901126105c1576004356001600160401b0381116105c157608060031982360301126105c1576020610b1f610bc4565b610b4b610b74610b2d610bee565b94610b59610b39610c04565b91604051948591600401888301610e73565b03601f198101855284610cb8565b60405163f0ffa18560e01b8152958694859460048601610f0b565b03815f305af180156109b2575f9061059657602090604051908152f35b346105c157610ba261060d36610bae565b50602060405160018152f35b60409060031901126105c1576004359060243590565b602435906001600160401b03821682036105c157565b35906001600160401b03821682036105c157565b604435906001600160a01b03821682036105c157565b606435906001600160a01b03821682036105c157565b35906001600160a01b03821682036105c157565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610c6d57604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610c6d57604052565b604081019081106001600160401b03821117610c6d57604052565b90601f801991011681019081106001600160401b03821117610c6d57604052565b6001600160401b038111610c6d57601f01601f191660200190565b929192610d0082610cd9565b91610d0e6040519384610cb8565b8294818452818301116105c1578281602093845f960137010152565b9080601f830112156105c157816020610d4593359101610cf4565b90565b9181601f840112156105c1578235916001600160401b0383116105c1576020808501948460051b0101116105c157565b60406003198201126105c1576004356001600160401b0381116105c15781610da291600401610d48565b92909291602435906001600160401b0382116105c157610dc491600401610d48565b9091565b9181601f840112156105c1578235916001600160401b0383116105c157602083818601950101116105c157565b6020815260018060a01b03825116602082015260806060610e24602085015183604086015260a0850190610c2e565b60408501516001600160a01b03168483015293015191015290565b60206003198201126105c157600435906001600160401b0382116105c1576101409082900360031901126105c15760040190565b602081526001600160a01b03610e8883610c1a565b1660208201526020820135601e19833603018112156105c15782016020813591016001600160401b0382116105c15781360381136105c15760c09382606092608060408701528160a0870152868601375f8484018601526001600160a01b03610ef360408301610c1a565b168483015201356080830152601f01601f1916010190565b90935f936001600160401b03610f2d608095989760a0865260a0860190610c2e565b971660208401526001600160a01b0390811660408401521660608201520152565b519081151582036105c157565b929192610f6782610cd9565b91610f756040519384610cb8565b8294818452818301116105c1578281602093845f96015e010152565b60405190610f9e82610c81565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b03821682036105c157565b51906001600160a01b03821682036105c157565b9080601f830112156105c1578151610d4592602001610f5b565b6020818303126105c1578051906001600160401b0382116105c15701610140818303126105c1576040519161105183610c81565b815183526020820151602084015261106b60408301610fdb565b604084015261107c60608301610fdb565b606084015261108d60808301610fdb565b608084015260a082015160a08401526110a860c08301610fef565b60c08401526110b960e08301610fef565b60e08401526110cb6101008301610f4e565b6101008401526101208201516001600160401b0381116105c1576110ef9201611003565b61012082015290565b6020818303126105c1578051906001600160401b0382116105c15701906080828203126105c1576040519161112c83610c52565b61113581610fef565b835260208101516001600160401b0381116105c157606092611158918301611003565b602084015261116960408201610fef565b60408401520151606082015290565b61118b90602080825183010191016110f8565b80516020909101516001600160a01b0390911691565b929092818403611236575f91345b8584101561122b5781841015611217578360051b80860135908282116112085784013561013e19853603018112156105c1576111ec908501611c1f565b156111fd57600191039301926111af565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f90611250610f91565b50611259610f91565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611676575b506112c157856301fb6dd160e01b5f5260045260245ffd5b6040516328c44a9960e21b815260048101869052949593945f81602481865afa5f918161165a575b5061130157866301fb6dd160e01b5f5260045260245ffd5b9161130b82611c38565b1561164b576113ea60206101208085019460c0876113fc61132c8951611178565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019d8e60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610c2e565b84810360031901602486015290610c2e565b604483019190915203916001600160a01b03165afa9081156109b2575f91611611575b50156116025760405161143181610c9d565b8581525f60208201526040519061144782610c9d565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156105c15760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af190816115ed575b506114c95763614cf93960e01b85526004849052602485fd5b51815181516001600160a01b039091169695916114ee916020908201810191016110f8565b604081018051606090920180519097919691926001600160a01b0316803b156115e9576040516323b872dd60e01b81523060048201526001600160a01b038b1660248201526044810192909252849081908390606490829084905af191826115d0575b5050611585578551875160405163045b391760e01b81529182916107d2918c9030906001600160a01b031660048601611bb3565b92955092955092507ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0604051946115bd602087610cb8565b848652516001600160a01b03169380a490565b816115da91610cb8565b6115e557835f611551565b8380fd5b8480fd5b6115fa9196505f90610cb8565b5f945f6114b0565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611643575b8161162c60209383610cb8565b810103126105c15761163d90610f4e565b5f61141f565b3d915061161f565b63629cd40b60e11b5f5260045ffd5b61166f9192503d805f833e61048b8183610cb8565b905f6112e9565b61168b9192503d805f833e61048b8183610cb8565b905f6112a9565b6040519061169f82610c52565b5f6060838281528160208201528260408201520152565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611797576116ea81611c38565b156117915761170a61012061171a920151602080825183010191016110f8565b91602080825183010191016110f8565b604082810151908201516001600160a01b03908116911614918261177e575b82611765575b8261174957505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061173f565b9150606082015160608201511491611739565b50505f90565b635f9bd90760e11b5f5260045ffd5b939591909294956117ca6117bb368688610cf4565b602080825183010191016110f8565b96604088019586519560605f9760018060a01b03169a01998a5190803b156105c1576040516323b872dd60e01b81526001600160a01b038c16600482015230602482015260448101929092525f908290606490829084905af19081611a31575b5061185d5787518a5160405163045b391760e01b81529182916107d29130908e906001600160a01b031660048601611bb3565b91949750919497506118729295503691610cf4565b906040519260c084018481106001600160401b03821117611a1d57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a082015260206040516118d181610c9d565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611972608083015160c060e4860152610124850190610c2e565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611a125784916119e0575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611a0a575b816119fb60209383610cb8565b810103126105c157515f6119b8565b3d91506119ee565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b611a3e9198505f90610cb8565b5f965f61182a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611b90575b806d04ee2d6d415b85acef8100000000600a921015611b75575b662386f26fc10000811015611b61575b6305f5e100811015611b50575b612710811015611b41575b6064811015611b33575b1015611b28575b600a60216001840193611acd85610cd9565b94611adb6040519687610cb8565b808652611aea601f1991610cd9565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b2357600a9091611af5565b505090565b600190910190611abb565b606460029104930192611ab4565b61271060049104930192611aaa565b6305f5e10060089104930192611a9f565b662386f26fc1000060109104930192611a92565b6d04ee2d6d415b85acef810000000060209104930192611a82565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611a68565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260800190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c1057565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b0381168091036105c157301490565b6001600160401b036060820151168015159081611c89575b50611c7a57608001516001600160401b0316611c6b57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c5056fea26469706673582212207cd84ecf27a9b0efffefe23f1a02512bc64703e4157abab31655f9a74cae10e164736f6c634300081b0033",
    sourceMap: "437:4905:125:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;1053:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;437:4905:125;790:10:9;;437:4905:125;790:10:9;;;789::77;;809:32;;-1:-1:-1;437:4905:125;;;;;;;;;;;872:48:77;;437:4905:125;872:48:77;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;904:4:77;437:4905:125;;;;1053:4;437:4905;;;;;;-1:-1:-1;;437:4905:125;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;437:4905:125;;;;;;;;759:14:6;437:4905:125;;;;;783:14:6;437:4905:125;;;;;807:14:6;437:4905:125;;;;;790:10:9;437:4905:125;;;;;809:32:77;437:4905:125;;;;;789:10:77;437:4905:125;;;;;;;;;;;;;;;;;;;;851:69:77;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;437:4905:125;872:48:77;;437:4905:125;872:48:77;;;;;;437:4905:125;872:48:77;;;:::i;:::-;;;437:4905:125;;;;;872:48:77;;;437:4905:125;-1:-1:-1;437:4905:125;;872:48:77;;;-1:-1:-1;872:48:77;;;437:4905:125;;;-1:-1:-1;437:4905:125;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;;-1:-1:-1;437:4905:125;;;;;;-1:-1:-1;;437:4905:125;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f5f3560e01c80632c713cd914610b915780633ce55d0214610ae557806354fd4d50146109f75780635bf2f20d146109bd5780636b122fe01461081c5780637d2c2931146106865780638371ef591461062757806388e5b2d9146105d9578063891d9ea8146105f857806391db0b7e146105d9578063a4f0d517146104f3578063b3b902d4146104a7578063c6ec50701461039b578063c93844be146102c4578063ce46e046146102a8578063e49617e11461028d578063e60c35051461028d578063e6c9714d146101665763f0ffa18514610103575061000e565b346101635760a036600319011261016357600435906001600160401b03821161016357602061015b6101383660048601610dc8565b610140610bc4565b610148610bee565b90610151610c04565b92608435946117a6565b604051908152f35b80fd5b503461016357606036600319011261016357600435906001600160401b03821161016357610140600319833603011261016357604051916101a683610c81565b80600401358352602481013560208401526101c360448201610bda565b60408401526101d460648201610bda565b60608401526101e560848201610bda565b608084015260a481013560a084015261020060c48201610c1a565b60c084015261021160e48201610c1a565b60e08401526101048101358015158103610289576101008401526101248101356001600160401b0381116102895761024e91369101600401610d2a565b610120830152602435906001600160401b03821161016357602061027f846102793660048701610d2a565b906116b6565b6040519015158152f35b8280fd5b602061027f61029b36610e3f565b6102a3611bde565b611c1f565b5034610163578060031936011261016357602090604051908152f35b5034610163576020366003190112610163576004356001600160401b038111610397576102f5903690600401610dc8565b610300929192611692565b50820191602081840312610397578035906001600160401b038211610289570191608083820312610397576040519161033883610c52565b61034184610c1a565b83526020840135906001600160401b03821161016357509261036a606092610393958301610d2a565b602084015261037b60408201610c1a565b60408401520135606082015260405191829182610df5565b0390f35b5080fd5b5034610163576020366003190112610163576103b5611692565b506103be610f91565b506040516328c44a9960e21b815260048035908201529080826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561049a578192610476575b5060208201517f0000000000000000000000000000000000000000000000000000000000000000036104675761039361045b610120840151602080825183010191016110f8565b60405191829182610df5565b635527981560e11b8152600490fd5b6104939192503d8084833e61048b8183610cb8565b81019061101d565b905f610414565b50604051903d90823e3d90fd5b503461016357606036600319011261016357600435906001600160401b03821161016357602061015b6104dd3660048601610dc8565b6104e5610bc4565b9160443592339233926117a6565b5034610163576040366003190112610163576004356001600160401b0381116103975760806003198236030112610397579060206105789261054b610559610539610bc4565b92604051928391600401868301610e73565b03601f198101835282610cb8565b60405163f0ffa18560e01b815294859283923391829160048601610f0b565b038184305af19081156105cd5790610596575b602090604051908152f35b506020813d6020116105c5575b816105b060209383610cb8565b810103126105c1576020905161058b565b5f80fd5b3d91506105a3565b604051903d90823e3d90fd5b602061027f6105e736610d78565b926105f3929192611bde565b6111a1565b50346101635761039361061361060d36610bae565b90611245565b604051918291602083526020830190610c2e565b503461016357602036600319011261016357600435906001600160401b0382116101635761066061065b3660048501610d2a565b611178565b604080516001600160a01b03909316835260208301819052829161039391830190610c2e565b346105c15760203660031901126105c1576004356106a2610f91565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610800575b5061070857506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106107f1576107436101208201519160c060018060a01b039101511691602080825183010191016110f8565b6040810180516060909201805190926001600160a01b0316803b156105c1576040516323b872dd60e01b81523060048201526001600160a01b038616602482015260448101929092525f908290606490829084905af190816107e1575b506107d65751905160405163045b391760e01b81529283926107d292919030906001600160a01b031660048601611bb3565b0390fd5b602060405160018152f35b5f6107eb91610cb8565b5f6107a0565b637bf6a16f60e01b5f5260045ffd5b6108159192503d805f833e61048b8183610cb8565b90836106f0565b346105c1575f3660031901126105c15760608060405161083b81610c52565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156109b2575f90610902575b606090610393604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610c2e565b503d805f833e6109128183610cb8565b8101906020818303126105c1578051906001600160401b0382116105c157016080818303126105c1576040519061094882610c52565b8051825260208101516001600160a01b03811681036105c157602083015261097260408201610f4e565b60408301526060810151906001600160401b0382116105c1570182601f820112156105c1576060928160206109a993519101610f5b565b828201526108bc565b6040513d5f823e3d90fd5b346105c1575f3660031901126105c15760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346105c1575f3660031901126105c15761039360206106136001610a3a7f0000000000000000000000000000000000000000000000000000000000000000611a46565b8184610a657f0000000000000000000000000000000000000000000000000000000000000000611a46565b8180610a907f0000000000000000000000000000000000000000000000000000000000000000611a46565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610cb8565b346105c15760803660031901126105c1576004356001600160401b0381116105c157608060031982360301126105c1576020610b1f610bc4565b610b4b610b74610b2d610bee565b94610b59610b39610c04565b91604051948591600401888301610e73565b03601f198101855284610cb8565b60405163f0ffa18560e01b8152958694859460048601610f0b565b03815f305af180156109b2575f9061059657602090604051908152f35b346105c157610ba261060d36610bae565b50602060405160018152f35b60409060031901126105c1576004359060243590565b602435906001600160401b03821682036105c157565b35906001600160401b03821682036105c157565b604435906001600160a01b03821682036105c157565b606435906001600160a01b03821682036105c157565b35906001600160a01b03821682036105c157565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610c6d57604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610c6d57604052565b604081019081106001600160401b03821117610c6d57604052565b90601f801991011681019081106001600160401b03821117610c6d57604052565b6001600160401b038111610c6d57601f01601f191660200190565b929192610d0082610cd9565b91610d0e6040519384610cb8565b8294818452818301116105c1578281602093845f960137010152565b9080601f830112156105c157816020610d4593359101610cf4565b90565b9181601f840112156105c1578235916001600160401b0383116105c1576020808501948460051b0101116105c157565b60406003198201126105c1576004356001600160401b0381116105c15781610da291600401610d48565b92909291602435906001600160401b0382116105c157610dc491600401610d48565b9091565b9181601f840112156105c1578235916001600160401b0383116105c157602083818601950101116105c157565b6020815260018060a01b03825116602082015260806060610e24602085015183604086015260a0850190610c2e565b60408501516001600160a01b03168483015293015191015290565b60206003198201126105c157600435906001600160401b0382116105c1576101409082900360031901126105c15760040190565b602081526001600160a01b03610e8883610c1a565b1660208201526020820135601e19833603018112156105c15782016020813591016001600160401b0382116105c15781360381136105c15760c09382606092608060408701528160a0870152868601375f8484018601526001600160a01b03610ef360408301610c1a565b168483015201356080830152601f01601f1916010190565b90935f936001600160401b03610f2d608095989760a0865260a0860190610c2e565b971660208401526001600160a01b0390811660408401521660608201520152565b519081151582036105c157565b929192610f6782610cd9565b91610f756040519384610cb8565b8294818452818301116105c1578281602093845f96015e010152565b60405190610f9e82610c81565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b03821682036105c157565b51906001600160a01b03821682036105c157565b9080601f830112156105c1578151610d4592602001610f5b565b6020818303126105c1578051906001600160401b0382116105c15701610140818303126105c1576040519161105183610c81565b815183526020820151602084015261106b60408301610fdb565b604084015261107c60608301610fdb565b606084015261108d60808301610fdb565b608084015260a082015160a08401526110a860c08301610fef565b60c08401526110b960e08301610fef565b60e08401526110cb6101008301610f4e565b6101008401526101208201516001600160401b0381116105c1576110ef9201611003565b61012082015290565b6020818303126105c1578051906001600160401b0382116105c15701906080828203126105c1576040519161112c83610c52565b61113581610fef565b835260208101516001600160401b0381116105c157606092611158918301611003565b602084015261116960408201610fef565b60408401520151606082015290565b61118b90602080825183010191016110f8565b80516020909101516001600160a01b0390911691565b929092818403611236575f91345b8584101561122b5781841015611217578360051b80860135908282116112085784013561013e19853603018112156105c1576111ec908501611c1f565b156111fd57600191039301926111af565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f90611250610f91565b50611259610f91565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611676575b506112c157856301fb6dd160e01b5f5260045260245ffd5b6040516328c44a9960e21b815260048101869052949593945f81602481865afa5f918161165a575b5061130157866301fb6dd160e01b5f5260045260245ffd5b9161130b82611c38565b1561164b576113ea60206101208085019460c0876113fc61132c8951611178565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019d8e60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610c2e565b84810360031901602486015290610c2e565b604483019190915203916001600160a01b03165afa9081156109b2575f91611611575b50156116025760405161143181610c9d565b8581525f60208201526040519061144782610c9d565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156105c15760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af190816115ed575b506114c95763614cf93960e01b85526004849052602485fd5b51815181516001600160a01b039091169695916114ee916020908201810191016110f8565b604081018051606090920180519097919691926001600160a01b0316803b156115e9576040516323b872dd60e01b81523060048201526001600160a01b038b1660248201526044810192909252849081908390606490829084905af191826115d0575b5050611585578551875160405163045b391760e01b81529182916107d2918c9030906001600160a01b031660048601611bb3565b92955092955092507ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0604051946115bd602087610cb8565b848652516001600160a01b03169380a490565b816115da91610cb8565b6115e557835f611551565b8380fd5b8480fd5b6115fa9196505f90610cb8565b5f945f6114b0565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611643575b8161162c60209383610cb8565b810103126105c15761163d90610f4e565b5f61141f565b3d915061161f565b63629cd40b60e11b5f5260045ffd5b61166f9192503d805f833e61048b8183610cb8565b905f6112e9565b61168b9192503d805f833e61048b8183610cb8565b905f6112a9565b6040519061169f82610c52565b5f6060838281528160208201528260408201520152565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611797576116ea81611c38565b156117915761170a61012061171a920151602080825183010191016110f8565b91602080825183010191016110f8565b604082810151908201516001600160a01b03908116911614918261177e575b82611765575b8261174957505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061173f565b9150606082015160608201511491611739565b50505f90565b635f9bd90760e11b5f5260045ffd5b939591909294956117ca6117bb368688610cf4565b602080825183010191016110f8565b96604088019586519560605f9760018060a01b03169a01998a5190803b156105c1576040516323b872dd60e01b81526001600160a01b038c16600482015230602482015260448101929092525f908290606490829084905af19081611a31575b5061185d5787518a5160405163045b391760e01b81529182916107d29130908e906001600160a01b031660048601611bb3565b91949750919497506118729295503691610cf4565b906040519260c084018481106001600160401b03821117611a1d57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a082015260206040516118d181610c9d565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611972608083015160c060e4860152610124850190610c2e565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611a125784916119e0575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611a0a575b816119fb60209383610cb8565b810103126105c157515f6119b8565b3d91506119ee565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b611a3e9198505f90610cb8565b5f965f61182a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611b90575b806d04ee2d6d415b85acef8100000000600a921015611b75575b662386f26fc10000811015611b61575b6305f5e100811015611b50575b612710811015611b41575b6064811015611b33575b1015611b28575b600a60216001840193611acd85610cd9565b94611adb6040519687610cb8565b808652611aea601f1991610cd9565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b2357600a9091611af5565b505090565b600190910190611abb565b606460029104930192611ab4565b61271060049104930192611aaa565b6305f5e10060089104930192611a9f565b662386f26fc1000060109104930192611a92565b6d04ee2d6d415b85acef810000000060209104930192611a82565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611a68565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260800190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c1057565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b0381168091036105c157301490565b6001600160401b036060820151168015159081611c89575b50611c7a57608001516001600160401b0316611c6b57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c5056fea26469706673582212207cd84ecf27a9b0efffefe23f1a02512bc64703e4157abab31655f9a74cae10e164736f6c634300081b0033",
    sourceMap: "437:4905:125:-:0;;;;;;;;;-1:-1:-1;437:4905:125;;;;;;;;1183:12:9;;;1054:5;1183:12;437:4905:125;1054:5:9;1183:12;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;3045:39:9;437:4905:125;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;437:4905:125:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;5299:34;;437:4905;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;437:4905:125;;-1:-1:-1;;;2392:23:77;;437:4905:125;;;2392:23:77;;;437:4905:125;;;;2392:23:77;437:4905:125;2392:3:77;-1:-1:-1;;;;;437:4905:125;2392:23:77;;;;;;;;;;;437:4905:125;2429:19:77;437:4905:125;2429:19:77;;437:4905:125;2452:18:77;2429:41;2425:87;;437:4905:125;5114:46;5125:16;;;;437:4905;;;;5114:46;;;;;;:::i;:::-;437:4905;;;;;;;:::i;2425:87:77:-;-1:-1:-1;;;2491:21:77;;437:4905:125;;2491:21:77;2392:23;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;437:4905:125;;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;716:142:80;437:4905:125;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;437:4905:125:-;;;;;;;-1:-1:-1;;437:4905:125;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;4149:187;437:4905;4190:16;;437:4905;;:::i;:::-;;;;;;;;;4190:16;;;;:::i;:::-;;4596;;4190;;;;;;:::i;:::-;437:4905;;-1:-1:-1;;;4149:187:125;;437:4905;;;;;4256:10;;;;437:4905;4149:187;;;:::i;:::-;;:4;;;:187;;;;;;;;;;437:4905;;;;;;;;;4149:187;;437:4905;4149:187;;437:4905;4149:187;;;;;;437:4905;4149:187;;;:::i;:::-;;;437:4905;;;;;;;4149:187;;437:4905;-1:-1:-1;437:4905:125;;4149:187;;;-1:-1:-1;4149:187:125;;;437:4905;;;;;;;;;;;;1442:1461:9;437:4905:125;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;437:4905:125:-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;437:4905:125;;;;;;;;:::i;:::-;-1:-1:-1;437:4905:125;;-1:-1:-1;;;3989:23:78;;437:4905:125;3989:23:78;;437:4905:125;;;-1:-1:-1;437:4905:125;3989:23:78;437:4905:125;3989:3:78;-1:-1:-1;;;;;437:4905:125;3989:23:78;;437:4905:125;;3989:23:78;;;437:4905:125;-1:-1:-1;3985:172:78;;4122:24;;;;437:4905:125;4122:24:78;437:4905:125;;3989:23:78;437:4905:125;4122:24:78;3985:172;-1:-1:-1;;;;;4189:26:78;;;437:4905:125;;4171:15:78;:44;4167:87;;2828:34:125;4334:16:78;;;;437:4905:125;4352:21:78;437:4905:125;;;;;4352:21:78;;437:4905:125;;;;;;;2828:34;;;;;;:::i;:::-;437:4905;2897:13;;437:4905;;4189:26:78;2993:15:125;;;437:4905;;2993:15;;-1:-1:-1;;;;;437:4905:125;2889:133;;;;;437:4905;;-1:-1:-1;;;2889:133:125;;2950:4;437:4905;2889:133;;437:4905;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;-1:-1:-1;;2889:133:125;;;;;;3985:172:78;-1:-1:-1;2873:348:125;;437:4905;;;;;-1:-1:-1;;;3061:149:125;;437:4905;;;3061:149;;437:4905;3061:149;2950:4;;-1:-1:-1;;;;;437:4905:125;;3061:149;;;:::i;:::-;;;;2873:348;437:4905;;;;;;;2889:133;437:4905;2889:133;;;:::i;:::-;437:4905;2889:133;;4167:87:78;4236:18;;;437:4905:125;4236:18:78;437:4905:125;;4236:18:78;3989:23;;;;;;;437:4905:125;3989:23:78;;;;;;:::i;:::-;;;;;437:4905:125;;;;;;-1:-1:-1;;437:4905:125;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;437:4905:125;1497:44:77;;437:4905:125;;;1497:44:77;437:4905:125;;;;;;1497:14:77;437:4905:125;1497:44:77;;;;;;437:4905:125;1497:44:77;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;437:4905:125;1497:44:77;;;;;;:::i;:::-;;;437:4905:125;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;;437:4905:125;;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;542:43:77;437:4905:125;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;1055:104:6;;437:4905:125;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;437:4905:125;;;;;;;;;;;;1055:104:6;;;437:4905:125;;;;-1:-1:-1;;;437:4905:125;;;;;;;;;;;;;;;;;-1:-1:-1;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;1055:104:6;;4596:16:125;;1055:104:6;;;;;;:::i;437:4905:125:-;;;;;;-1:-1:-1;;437:4905:125;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;:::i;:::-;4596:16;4555:181;437:4905;;:::i;:::-;;4596:16;437:4905;;:::i;:::-;;;;;;;;;4596:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;437:4905;;-1:-1:-1;;;4555:181:125;;437:4905;;;;;;4555:181;;;:::i;:::-;;:4;437:4905;4555:4;:181;;;;;;437:4905;4555:181;;;437:4905;;;;;;;;;;;;4865:37;437:4905;;;:::i;4865:37::-;;437:4905;;;4919:4;437:4905;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4905:125;;;;;;;;-1:-1:-1;;437:4905:125;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;:::o;:::-;;;;-1:-1:-1;437:4905:125;;;;;-1:-1:-1;437:4905:125;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;:::o;:::-;;;4596:16;;437:4905;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;:::o;:::-;-1:-1:-1;;;;;437:4905:125;;;;;;-1:-1:-1;;437:4905:125;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4905:125;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;437:4905:125;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;437:4905:125;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4905:125;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;:::o;:::-;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4905:125;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;437:4905:125;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;-1:-1:-1;437:4905:125;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4905:125;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1132:267::-;1308:34;1132:267;1308:34;437:4905;;;1308:34;;;;;;:::i;:::-;437:4905;;1308:34;1377:14;;;;-1:-1:-1;;;;;437:4905:125;;;;1132:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;437:4905:125;;;;;;;;;;;;;4064:22:9;;;;4060:87;;437:4905:125;;;;;;;;;;;;;;4274:33:9;437:4905:125;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;437:4905:125;;3896:19:9;437:4905:125;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;437:4905:125;;;;3881:1:9;437:4905:125;;;;;3881:1:9;437:4905:125;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;2189:25:78;437:4905:125;;:::i;:::-;2224:30:78;437:4905:125;;:::i;:::-;-1:-1:-1;437:4905:125;;-1:-1:-1;;;2317:27:78;;;;;437:4905:125;;;2317:3:78;-1:-1:-1;;;;;437:4905:125;;-1:-1:-1;437:4905:125;2317:27:78;437:4905:125;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;437:4905:125;2317:27:78;-1:-1:-1;2493:28:78;2313:219;437:4905:125;;-1:-1:-1;;;2546:32:78;;2317:27;2546:32;;437:4905:125;;;2428:26:78;;;;-1:-1:-1;437:4905:125;2317:27:78;437:4905:125;2546:32:78;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;437:4905:125;2317:27:78;-1:-1:-1;2732:33:78;2542:234;;2791:24;;;:::i;:::-;2790:25;2786:64;;437:4905:125;;2994:11:78;;;;;437:4905:125;2994:11:78;437:4905:125;2957:58:78;2994:11;;2957:58;:::i;:::-;437:4905:125;;;;;;;;;;;;;;;;;3086:66:78;;437:4905:125;2317:27:78;3086:66;;437:4905:125;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;437:4905:125;2317:27:78;437:4905:125;;;;;:::i;:::-;;;;;;;;3086:66:78;;-1:-1:-1;;;;;437:4905:125;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;437:4905:125;;;;;:::i;:::-;;;;-1:-1:-1;437:4905:125;3372:47:78;;437:4905:125;;;;;;;:::i;:::-;3326:18:78;437:4905:125;;;3278:160:78;;437:4905:125;;;3250:202:78;;;;;437:4905:125;-1:-1:-1;437:4905:125;;;;;;;;;;;;;;3250:202:78;;437:4905:125;2317:27:78;3250:202;;437:4905:125;;;;2317:27:78;437:4905:125;;;;;;;;;3250:202:78;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;437:4905:125;;;2317:27:78;3491:25;;3234:293;3625:11;437:4905:125;;;;-1:-1:-1;;;;;437:4905:125;;;;;3234:293:78;2201:74:125;;437:4905;2201:74;;;;;;;;:::i;:::-;437:4905;2310:13;;437:4905;;;2406:15;;;437:4905;;2406:15;;2310:13;;;;-1:-1:-1;;;;;437:4905:125;2302:133;;;;;437:4905;;-1:-1:-1;;;2302:133:125;;2363:4;2317:27:78;2302:133:125;;437:4905;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;2302:133;;;;;;3234:293:78;-1:-1:-1;;2286:348:125;;437:4905;;;;;;-1:-1:-1;;;2474:149:125;;437:4905;;;2474:149;;437:4905;;2363:4;;-1:-1:-1;;;;;437:4905:125;2317:27:78;2474:149:125;;;:::i;2286:348::-;;;;;;;;;3723:61:78;437:4905:125;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;437:4905:125;;;3723:61:78;2054:1760;:::o;2302:133:125:-;;;;;:::i;:::-;437:4905;;2302:133;;;;437:4905;;;;2302:133;437:4905;;;3250:202:78;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;437:4905:125;3086:66:78;;437:4905:125;3086:66:78;;;;;;437:4905:125;3086:66:78;;;:::i;:::-;;;437:4905:125;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;437:4905:125;;;;;;;:::i;:::-;-1:-1:-1;437:4905:125;;;;;;;;;;;;;;;;;:::o;3259:698::-;3472:18;1016:17:76;;;437:4905:125;1016:27:76;1012:55;;1084:27;;;:::i;:::-;3444:47:125;3440:65;;3548:79;3572:15;3672:36;3572:15;;;1016:17:76;437:4905:125;;;3548:79;;;;;;:::i;:::-;437:4905;1016:17:76;437:4905:125;;;3672:36;;;;;;:::i;:::-;3738:13;;;;437:4905;3755:16;;;437:4905;-1:-1:-1;;;;;437:4905:125;;;;;3738:33;;;:86;;3259:698;3738:139;;;3259:698;3738:212;;;3719:231;;3259:698;:::o;3738:212::-;1016:17:76;3903:14:125;;;;;;437:4905;;;;;3893:25;3932:17;;;1016::76;437:4905:125;;;;3922:28;3893:57;3259:698;:::o;3738:139::-;437:4905;;;;-1:-1:-1;;;;;437:4905:125;;;;;3840:37;;-1:-1:-1;3738:139:125;;:86;3787:15;;;;;437:4905;3787:15;3806:18;;437:4905;3787:37;3738:86;;;3440:65;3493:12;;437:4905;3493:12;:::o;1012:55:76:-;1052:15;;;437:4905:125;1052:15:76;;437:4905:125;1052:15:76;871:377:80;;;;;;;;1553:34:125;437:4905;;;;;:::i;:::-;1553:34;437:4905;;;1553:34;;;;;;:::i;:::-;1622:13;;;;437:4905;;;;1720:15;-1:-1:-1;437:4905:125;;;;;;;1720:15;;437:4905;;;1614:135;;;;;;1622:13;437:4905;-1:-1:-1;;;1614:135:125;;-1:-1:-1;;;;;437:4905:125;;1614:135;;;437:4905;1697:4;437:4905;;;;;;;;;;;-1:-1:-1;;437:4905:125;;;;;;-1:-1:-1;;1614:135:125;;;;;;871:377:80;-1:-1:-1;1598:352:125;;437:4905;;;;1622:13;437:4905;-1:-1:-1;;;1788:151:125;;437:4905;;;1788:151;;1697:4;;437:4905;;-1:-1:-1;;;;;437:4905:125;1614:135;1788:151;;;:::i;1598:352::-;;;;;;;;;437:4905;1598:352;;;437:4905;;;:::i;:::-;;1622:13;437:4905;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;-1:-1:-1;;;;;437:4905:125;1622:13;437:4905;;;;;;;;;;;;1553:34;1914:299:77;;437:4905:125;2076:4:77;1622:13:125;1914:299:77;;437:4905:125;1720:15;1914:299:77;;437:4905:125;1914:299:77;;;437:4905:125;1914:299:77;;;;437:4905:125;1553:34;1622:13;437:4905;;;;:::i;:::-;1868:18:77;437:4905:125;;1819:413:77;;;437:4905:125;;;1622:13;437:4905;;;;;;;;1791:455:77;;;1614:135:125;1791:455:77;;437:4905:125;;;;;;;1622:13;437:4905;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4905:125;;;;;;;;;1622:13;437:4905;;;;;;;;;1720:15;437:4905;;;;;;;1914:299:77;437:4905:125;1914:299:77;437:4905:125;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;437:4905:125;;1791:3:77;-1:-1:-1;;;;;437:4905:125;1791:455:77;;;;;;;;;;;1598:352:125;1134:55:80;4820:26:78;1134:55:80;4820:26:78;;;871:377:80:o;1791:455:77:-;;;1553:34:125;1791:455:77;;1553:34:125;1791:455:77;;;;;;437:4905:125;1791:455:77;;;:::i;:::-;;;437:4905:125;;;;;1791:455:77;;;;;;-1:-1:-1;1791:455:77;;;1622:13:125;437:4905;;;;;;;;;-1:-1:-1;;;437:4905:125;;;1614:135;437:4905;;;;1614:135;;;;;-1:-1:-1;1614:135:125;;:::i;:::-;-1:-1:-1;1614:135:125;;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;437:4905:125;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;4596:16;;437:4905;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;437:4905:125;;-1:-1:-1;;;1033:111:63;;;;437:4905:125;1033:111:63;437:4905:125;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;437:4905:125;;;;26127:66:70;;26014:100;26027:7;26098:1;437:4905:125;;;;26014:100:70;;;25901;25914:7;25985:1;437:4905:125;;;;25901:100:70;;;25788;25801:7;25872:1;437:4905:125;;;;25788:100:70;;;25672:103;25685:8;25758:2;437:4905:125;;;;25672:103:70;;;25556;25569:8;25642:2;437:4905:125;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;437:4905:125;;25440:103:70;;437:4905:125;-1:-1:-1;;;;;437:4905:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6040:128:9:-;6109:4;-1:-1:-1;;;;;437:4905:125;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;437:4905:125;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;437:4905:125;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;437:4905:125;-1:-1:-1;;;;;437:4905:125;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2582,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2625,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2668,
          length: 32
        }
      ],
      "3008": [
        {
          start: 7136,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2189,
          length: 32
        }
      ],
      "54661": [
        {
          start: 988,
          length: 32
        },
        {
          start: 1726,
          length: 32
        },
        {
          start: 4720,
          length: 32
        },
        {
          start: 6528,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1052,
          length: 32
        },
        {
          start: 2139,
          length: 32
        },
        {
          start: 2516,
          length: 32
        },
        {
          start: 5193,
          length: 32
        },
        {
          start: 5816,
          length: 32
        },
        {
          start: 6355,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256),uint64)": "a4f0d517",
    "doObligationFor((address,bytes,address,uint256),uint64,address,address)": "3ce55d02",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC721EscrowObligation.sol":"ERC721EscrowObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC721TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC721EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC721EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC721EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC721EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC721EscrowObligation.sol": "ERC721EscrowObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        keccak256: "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        urls: [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 125
};

// src/contracts/TokenBundleEscrowObligation.ts
var abi40 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "onERC1155BatchReceived",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "onERC1155Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceId",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "ArrayLengthMismatch",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC1155TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ERC20TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "ERC721TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x61016080604052346102a657604081612da1803803809161002082856102e0565b8339810103126102a65780516001600160a01b038116918282036102a65760200151916001600160a01b0383168084036102a65760405161010081016001600160401b038111828210176102cc5760405260cc815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c206184527f6464726573735b5d206572633230546f6b656e732c2075696e743235365b5d2060408301527f6572633230416d6f756e74732c20616464726573735b5d20657263373231546f60608301527f6b656e732c2075696e743235365b5d20657263373231546f6b656e4964732c2060808301527f616464726573735b5d2065726331313535546f6b656e732c2075696e7432353660a08301527f5b5d2065726331313535546f6b656e4964732c2075696e743235365b5d20657260c08301526b6331313535416d6f756e747360a01b60e08301526001608052600360a0525f60c052156102bd576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156102b2575f9161027c575b5061014052604051612a9d9081610304823960805181610bc8015260a05181610bf3015260c05181610c1e015260e0518161245c01526101005181610a4a0152610120518181816106060152818161091501528181611653015261223901526101405181818161064601528181610a1801528181610b860152818161183201528181611cb9015261218c0152f35b90506020813d6020116102aa575b81610297602093836102e0565b810103126102a657515f6101ee565b5f80fd5b3d915061028a565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102cc5760405256fe6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816301ffc9a714610cb4575080632c713cd914610c9757806354fd4d5014610ba95780635bf2f20d14610b6f5780636b122fe0146109d95780637d2c2931146108dd5780638371ef591461087f57806388e5b2d914610832578063891d9ea81461085157806391db0b7e14610832578063b3b902d4146107e7578063bc197c8114610752578063bca73d64146106c2578063c6ec5070146105c7578063c93844be14610417578063cd181c4914610337578063ce46e0461461031d578063e49617e114610302578063e60c350514610302578063e6c9714d146101e0578063f0ffa185146101805763f23a6e6114610127575f61000f565b3461017c5760a036600319011261017c57610140610f2a565b50610149610f40565b506084356001600160401b03811161017c57610169903690600401610e35565b5060405163f23a6e6160e01b8152602090f35b5f80fd5b3461017c5760a036600319011261017c576004356001600160401b03811161017c576101d86101b56020923690600401610ed3565b6101bd610f00565b6101c5610f56565b906101ce610f6c565b9260843594611d80565b604051908152f35b3461017c57606036600319011261017c576004356001600160401b03811161017c57610140600319823603011261017c576040519061021e82610d8c565b806004013582526024810135602083015261023b60448201610f16565b604083015261024c60648201610f16565b606083015261025d60848201610f16565b608083015260a481013560a083015261027860c48201610f82565b60c083015261028960e48201610f82565b60e0830152610104810135801515810361017c57610100830152610124810135906001600160401b03821161017c5760046102c79236920101610e35565b6101208201526024356001600160401b03811161017c576020916102f26102f8923690600401610e35565b90611cb7565b6040519015158152f35b60206102f86103103661115a565b61031861245a565b61249b565b3461017c575f36600319011261017c5760206040515f8152f35b3461017c57604036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206103bb9161038e61039c61037c610f00565b92604051928391600401868301611a58565b03601f198101835282610dc3565b60405163f0ffa18560e01b815293849283923391829160048601611bcc565b03815f305af1801561040c575f906103d9575b602090604051908152f35b506020813d602011610404575b816103f360209383610dc3565b8101031261017c57602090516103ce565b3d91506103e6565b6040513d5f823e3d90fd5b3461017c57602036600319011261017c576004356001600160401b03811161017c57610447903690600401610ed3565b61044f611c0f565b5081019060208183031261017c578035906001600160401b03821161017c57016101208183031261017c576040519061048782610d70565b61049081610f82565b825260208101356001600160401b03811161017c57836104b1918301610e35565b602083015260408101356001600160401b03811161017c57836104d5918301611c52565b604083015260608101356001600160401b03811161017c57836104f9918301610fad565b606083015260808101356001600160401b03811161017c578361051d918301611c52565b608083015260a08101356001600160401b03811161017c5783610541918301610fad565b60a083015260c08101356001600160401b03811161017c5783610565918301611c52565b60c083015260e08101356001600160401b03811161017c5783610589918301610fad565b60e0830152610100810135926001600160401b03841161017c576105c3936105b19201610fad565b61010082015260405191829182611079565b0390f35b3461017c57602036600319011261017c576105e0611c0f565b506105e96111d1565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561040c575f916106a0575b5060208101517f000000000000000000000000000000000000000000000000000000000000000003610691576106856101206105c3920151602080825183010191016113fa565b60405191829182611079565b635527981560e11b5f5260045ffd5b6106bc91503d805f833e6106b48183610dc3565b81019061125d565b8161063e565b3461017c57608036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206106fd610f00565b6107296103bb61070b610f56565b94610737610717610f6c565b91604051948591600401888301611a58565b03601f198101855284610dc3565b60405163f0ffa18560e01b8152958694859460048601611bcc565b3461017c5760a036600319011261017c5761076b610f2a565b50610774610f40565b506044356001600160401b03811161017c57610794903690600401610fad565b506064356001600160401b03811161017c576107b4903690600401610fad565b506084356001600160401b03811161017c576107d4903690600401610e35565b5060405163bc197c8160e01b8152602090f35b3461017c57606036600319011261017c576004356001600160401b03811161017c576101d861081c6020923690600401610ed3565b610824610f00565b916044359233923392611d80565b60206102f861084036610e83565b9261084c92919261245a565b611585565b3461017c576105c361086b61086536610d07565b90611629565b604051918291602083526020830190610d1d565b3461017c57602036600319011261017c576004356001600160401b03811161017c576108b26108b7913690600401610e35565b61155c565b604080516001600160a01b0390931683526020830181905282916105c391830190610d1d565b3461017c57602036600319011261017c576004356108f96111d1565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f91816109bd575b5061095f57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106109ae578061099e6101206109a39301519160c060018060a01b039101511691602080825183010191016113fa565b612737565b602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6109d29192503d805f833e6106b48183610dc3565b9083610947565b3461017c575f36600319011261017c576060806040516109f881610d41565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561040c575f90610abf575b6060906105c3604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610d1d565b503d805f833e610acf8183610dc3565b81019060208183031261017c578051906001600160401b03821161017c570160808183031261017c5760405190610b0582610d41565b8051825260208101516001600160a01b038116810361017c576020830152610b2f6040820161118e565b60408301526060810151906001600160401b03821161017c570182601f8201121561017c57606092816020610b669351910161119b565b82820152610a79565b3461017c575f36600319011261017c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461017c575f36600319011261017c576105c3602061086b6001610bec7f00000000000000000000000000000000000000000000000000000000000000006122ed565b8184610c177f00000000000000000000000000000000000000000000000000000000000000006122ed565b8180610c427f00000000000000000000000000000000000000000000000000000000000000006122ed565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610dc3565b3461017c57610ca861086536610d07565b50602060405160018152f35b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091630271189760e51b8114908115610cf6575b5015158152f35b6301ffc9a760e01b14905083610cef565b604090600319011261017c576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610d5c57604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610d5c57604052565b61014081019081106001600160401b03821117610d5c57604052565b604081019081106001600160401b03821117610d5c57604052565b90601f801991011681019081106001600160401b03821117610d5c57604052565b6001600160401b038111610d5c57601f01601f191660200190565b929192610e0b82610de4565b91610e196040519384610dc3565b82948184528183011161017c578281602093845f960137010152565b9080601f8301121561017c57816020610e5093359101610dff565b90565b9181601f8401121561017c578235916001600160401b03831161017c576020808501948460051b01011161017c57565b604060031982011261017c576004356001600160401b03811161017c5781610ead91600401610e53565b92909291602435906001600160401b03821161017c57610ecf91600401610e53565b9091565b9181601f8401121561017c578235916001600160401b03831161017c576020838186019501011161017c57565b602435906001600160401b038216820361017c57565b35906001600160401b038216820361017c57565b600435906001600160a01b038216820361017c57565b602435906001600160a01b038216820361017c57565b604435906001600160a01b038216820361017c57565b606435906001600160a01b038216820361017c57565b35906001600160a01b038216820361017c57565b6001600160401b038111610d5c5760051b60200190565b9080601f8301121561017c578135610fc481610f96565b92610fd26040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b828210610ffa5750505090565b8135815260209182019101610fed565b90602080835192838152019201905f5b8181106110275750505090565b82516001600160a01b031684526020938401939092019160010161101a565b90602080835192838152019201905f5b8181106110635750505090565b8251845260209384019390920191600101611056565b90610e50916020815260018060a01b03825116602082015261010061114461112f6111196111036110ed6110d76110c160208a015161012060408b01526101408a0190610d1d565b60408a0151898203601f190160608b015261100a565b6060890151888203601f190160808a0152611046565b6080880151878203601f190160a089015261100a565b60a0870151868203601f190160c0880152611046565b60c0860151858203601f190160e087015261100a565b60e0850151848203601f190184860152611046565b92015190610120601f1982850301910152611046565b602060031982011261017c57600435906001600160401b03821161017c5761014090829003600319011261017c5760040190565b5190811515820361017c57565b9291926111a782610de4565b916111b56040519384610dc3565b82948184528183011161017c578281602093845f96015e010152565b604051906111de82610d8c565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361017c57565b51906001600160a01b038216820361017c57565b9080601f8301121561017c578151610e509260200161119b565b60208183031261017c578051906001600160401b03821161017c57016101408183031261017c576040519161129183610d8c565b81518352602082015160208401526112ab6040830161121b565b60408401526112bc6060830161121b565b60608401526112cd6080830161121b565b608084015260a082015160a08401526112e860c0830161122f565b60c08401526112f960e0830161122f565b60e084015261130b610100830161118e565b6101008401526101208201516001600160401b03811161017c5761132f9201611243565b61012082015290565b9080601f8301121561017c57815161134f81610f96565b9261135d6040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b8282106113855750505090565b602080916113928461122f565b815201910190611378565b9080601f8301121561017c5781516113b481610f96565b926113c26040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b8282106113ea5750505090565b81518152602091820191016113dd565b60208183031261017c578051906001600160401b03821161017c57016101208183031261017c576040519161142e83610d70565b6114378261122f565b835260208201516001600160401b03811161017c5781611458918401611243565b602084015260408201516001600160401b03811161017c578161147c918401611338565b604084015260608201516001600160401b03811161017c57816114a091840161139d565b606084015260808201516001600160401b03811161017c57816114c4918401611338565b608084015260a08201516001600160401b03811161017c57816114e891840161139d565b60a084015260c08201516001600160401b03811161017c578161150c918401611338565b60c084015260e08201516001600160401b03811161017c578161153091840161139d565b60e08401526101008201516001600160401b03811161017c57611553920161139d565b61010082015290565b61156f90602080825183010191016113fa565b80516020909101516001600160a01b0390911691565b92909281840361161a575f91345b8584101561160f57818410156115fb578360051b80860135908282116115ec5784013561013e198536030181121561017c576115d090850161249b565b156115e15760019103930192611593565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f6116336111d1565b5061163c6111d1565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f91816119a5575b506116a457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f9181611989575b506116e457866301fb6dd160e01b5f5260045260245ffd5b959192939495926116f4826124b4565b1561197a576117d360206101208085019460c0886117e5611715895161155c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610d1d565b84810360031901602486015290610d1d565b604483019190915203916001600160a01b03165afa90811561040c575f91611940575b50156119315760405161181a81610da8565b8581525f60208201526040519061183082610da8565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b1561017c5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af1908161191c575b506118b25763614cf93960e01b85526004849052602485fd5b6118d99094939192945161099e60018060a01b0387511691602080825183010191016113fa565b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c060405194611909602087610dc3565b848652516001600160a01b03169380a490565b6119299196505f90610dc3565b5f945f611899565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611972575b8161195b60209383610dc3565b8101031261017c5761196c9061118e565b5f611808565b3d915061194e565b63629cd40b60e11b5f5260045ffd5b61199e9192503d805f833e6106b48183610dc3565b905f6116cc565b6119ba9192503d805f833e6106b48183610dc3565b905f61168c565b9035601e198236030181121561017c5701602081359101916001600160401b03821161017c578160051b3603831361017c57565b916020908281520191905f5b818110611a0e5750505090565b909192602080600192838060a01b03611a2688610f82565b168152019401929101611a01565b81835290916001600160fb1b03831161017c5760209260051b809284830137010190565b60208152906001600160a01b03611a6e82610f82565b1660208301526020810135601e198236030181121561017c578101916020833593016001600160401b03841161017c57833603811361017c57611bad611b8d611b6e611b4f611b30611b1189610e509a611bb99861012060408c0152816101408c01526101608b01375f610160828b010152601f80199101168801610160611af960408c018c6119c1565b919092601f19828d8303010160608d015201916119f5565b611b1e60608a018a6119c1565b898303601f190160808b015290611a34565b611b3d60808901896119c1565b888303601f190160a08a0152906119f5565b611b5c60a08801886119c1565b878303601f190160c089015290611a34565b611b7b60c08701876119c1565b868303601f190160e0880152906119f5565b611b9a60e08601866119c1565b858303601f190161010087015290611a34565b926101008101906119c1565b91610120601f1982860301910152611a34565b90935f936001600160401b03611bee608095989760a0865260a0860190610d1d565b971660208401526001600160a01b0390811660408401521660608201520152565b60405190611c1c82610d70565b6060610100835f815282602082015282604082015282808201528260808201528260a08201528260c08201528260e08201520152565b9080601f8301121561017c578135611c6981610f96565b92611c776040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b828210611c9f5750505090565b60208091611cac84610f82565b815201910190611c92565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611d7157611ceb816124b4565b15611d6b57611d0b610120611d1b920151602080825183010191016113fa565b91602080825183010191016113fa565b611d258183612523565b9182611d52575b82611d3657505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611d2c565b50505f90565b635f9bd90760e11b5f5260045ffd5b90959194929394611da4611d95368985610dff565b602080825183010191016113fa565b9160408301948551519860608501998a5151036122cd5760808501928351519560a0810196875151036122cd5760c081018051519360e08301948551518114908115916122dc575b506122cd575f5b8b518051821015611f07578f8e602091611e2585611e6095611e1c8260018060a01b039261250f565b5116925161250f565b516040516323b872dd60e01b81526001600160a01b0390931660048401523060248401526044830152909283919082905f9082906064820190565b03925af15f9181611ecc575b50611ec757505f5b15611e8157600101611df3565b8c8f91611ea7818f611e9e611ec39460018060a01b03925161250f565b5116945161250f565b51604051634a73404560e11b815293849330916004860161270c565b0390fd5b611e74565b9091506020813d8211611eff575b81611ee760209383610dc3565b8101031261017c57611ef89061118e565b905f611e6c565b3d9150611eda565b505092959950929597999a9093969b505f995b895180518c1015611fdb57611f3c8c8f92611e1c8260018060a01b039261250f565b5190803b1561017c576040516323b872dd60e01b81526001600160a01b038f16600482015230602482015260448101929092525f908290606490829084905af19081611fcb575b50611fc0578c8c611ec3611fa48e8e611e9e8260018060a01b03925161250f565b5160405163045b391760e01b815293849330916004860161270c565b6001909a0199611f1a565b5f611fd591610dc3565b5f611f83565b5093985093959850939950946101005f9701975b86518051891015612116576001600160a01b039061200e908a9061250f565b511661201b898d5161250f565b516120278a8c5161250f565b51823b1561017c57604051637921219560e11b81526001600160a01b038e1660048201523060248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081612106575b506120fb578a8a611ec38b6120b88c6120b0818e6120a78260018060a01b03925161250f565b5116975161250f565b51925161250f565b5160405163334a7d1b60e21b81526001600160a01b03958616600482015294909316602485015230604485015260648401526084830191909152819060a4820190565b600190970196611fef565b5f61211091610dc3565b5f612081565b50965096509650965061212b92503691610dff565b906040519460c08601908682106001600160401b03831117610d5c576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a0840152602060405161218a81610da8565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a061222b608083015160c060e4860152610124850190610d1d565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561040c575f93612299575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d6020116122c5575b816122b560209383610dc3565b8101031261017c5751915f612271565b3d91506122a8565b63512509d360e11b5f5260045ffd5b90506101008401515114155f611dec565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015612437575b806d04ee2d6d415b85acef8100000000600a92101561241c575b662386f26fc10000811015612408575b6305f5e1008110156123f7575b6127108110156123e8575b60648110156123da575b10156123cf575b600a6021600184019361237485610de4565b946123826040519687610dc3565b808652612391601f1991610de4565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530480156123ca57600a909161239c565b505090565b600190910190612362565b60646002910493019261235b565b61271060049104930192612351565b6305f5e10060089104930192612346565b662386f26fc1000060109104930192612339565b6d04ee2d6d415b85acef810000000060209104930192612329565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b810461230f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361248c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361017c57301490565b6001600160401b036060820151168015159081612505575b506124f657608001516001600160401b03166124e757600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f6124cc565b80518210156115fb5760209160051b010190565b6040810191825151604082019081515111612704575f5b8151518110156125b35784516001600160a01b039061255a90839061250f565b511660018060a01b0361256e83855161250f565b51161480159061258e575b6125855760010161253a565b50505050505f90565b5061259d81606086015161250f565b516125ac82606086015161250f565b5111612579565b505091506080810191825151608082019081515111612704575f5b81515181101561263f5784516001600160a01b03906125ee90839061250f565b511660018060a01b0361260283855161250f565b511614801590612619575b612585576001016125ce565b506126288160a086015161250f565b516126378260a086015161250f565b51141561260d565b5050915060c08101918251519260c082019384515111612704575f5b8451518110156126fa5781516001600160a01b039061267b90839061250f565b511660018060a01b0361268f83885161250f565b5116148015906126d4575b80156126ad575b6125855760010161265b565b506126bd8161010086015161250f565b516126cd8261010086015161250f565b51116126a1565b506126e38160e086015161250f565b516126f28260e086015161250f565b51141561269a565b5050505050600190565b505050505f90565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260800190565b9190915f5b6040820180518051831015612843576001600160a01b039061275f90849061250f565b5116905f60206060860193604461277787875161250f565b5160405163a9059cbb60e01b81526001600160a01b038c16600482015260248101919091529384928391905af15f9181612808575b5061280357505f5b156127c357505060010161273c565b6127e783611ec3926127de899660018060a01b03925161250f565b5116935161250f565b51604051634a73404560e11b815293849330906004860161270c565b6127b4565b9091506020813d821161283b575b8161282360209383610dc3565b8101031261017c576128349061118e565b905f6127ac565b3d9150612816565b5050505f905b608081019081518051841015612926576001600160a01b039061286d90859061250f565b51169360a082019461288085875161250f565b5190803b1561017c576040516323b872dd60e01b81523060048201526001600160a01b038916602482015260448101929092525f908290606490829084905af19081612916575b5061290757505051611ec3916128eb916001600160a01b03906127de90839061250f565b5160405163045b391760e01b815293849330906004860161270c565b93506001909201919050612849565b5f61292091610dc3565b5f6128c7565b50929150505f5b60c0830180518051831015612a5f576001600160a01b039061295090849061250f565b51169260e085019461296384875161250f565b519461010082019561297686885161250f565b51823b1561017c57604051637921219560e11b81523060048201526001600160a01b038b1660248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081612a4f575b50612a42575050816120b0816129ff936129f6611ec3979660018060a01b03925161250f565b5116965161250f565b5160405163334a7d1b60e21b81526001600160a01b03948516600482015230602482015294909316604485015260648401526084830191909152819060a4820190565b945092505060010161292d565b5f612a5991610dc3565b5f6129d0565b50505091505056fea2646970667358221220dad5ba5509956939580615329f947d1b0553c7edb9f7446e6e1a6393d4f0724f64736f6c634300081b0033",
    sourceMap: "678:10768:128:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;678:10768:128;;;;2018:4;678:10768;759:14:6;688:1:9;678:10768:128;783:14:6;-1:-1:-1;678:10768:128;807:14:6;708:26:9;704:76;;678:10768:128;790:10:9;;678:10768:128;790:10:9;678:10768:128;790:10:9;789::77;;678:10768:128;809:32:77;-1:-1:-1;678:10768:128;;;;;;;;;;;872:48:77;;678:10768:128;872:48:77;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;904:4:77;678:10768:128;;;;2018:4;678:10768;;;;;;-1:-1:-1;;678:10768:128;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:10:77;678:10768:128;;;;;;;;;;;;;;;;;;;;851:69:77;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;678:10768:128;872:48:77;;678:10768:128;872:48:77;;;;;;678:10768:128;872:48:77;;;:::i;:::-;;;678:10768:128;;;;;872:48:77;;;678:10768:128;-1:-1:-1;678:10768:128;;872:48:77;;;-1:-1:-1;872:48:77;;;678:10768:128;;;-1:-1:-1;678:10768:128;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;;-1:-1:-1;678:10768:128;;;;;;-1:-1:-1;;678:10768:128;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816301ffc9a714610cb4575080632c713cd914610c9757806354fd4d5014610ba95780635bf2f20d14610b6f5780636b122fe0146109d95780637d2c2931146108dd5780638371ef591461087f57806388e5b2d914610832578063891d9ea81461085157806391db0b7e14610832578063b3b902d4146107e7578063bc197c8114610752578063bca73d64146106c2578063c6ec5070146105c7578063c93844be14610417578063cd181c4914610337578063ce46e0461461031d578063e49617e114610302578063e60c350514610302578063e6c9714d146101e0578063f0ffa185146101805763f23a6e6114610127575f61000f565b3461017c5760a036600319011261017c57610140610f2a565b50610149610f40565b506084356001600160401b03811161017c57610169903690600401610e35565b5060405163f23a6e6160e01b8152602090f35b5f80fd5b3461017c5760a036600319011261017c576004356001600160401b03811161017c576101d86101b56020923690600401610ed3565b6101bd610f00565b6101c5610f56565b906101ce610f6c565b9260843594611d80565b604051908152f35b3461017c57606036600319011261017c576004356001600160401b03811161017c57610140600319823603011261017c576040519061021e82610d8c565b806004013582526024810135602083015261023b60448201610f16565b604083015261024c60648201610f16565b606083015261025d60848201610f16565b608083015260a481013560a083015261027860c48201610f82565b60c083015261028960e48201610f82565b60e0830152610104810135801515810361017c57610100830152610124810135906001600160401b03821161017c5760046102c79236920101610e35565b6101208201526024356001600160401b03811161017c576020916102f26102f8923690600401610e35565b90611cb7565b6040519015158152f35b60206102f86103103661115a565b61031861245a565b61249b565b3461017c575f36600319011261017c5760206040515f8152f35b3461017c57604036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206103bb9161038e61039c61037c610f00565b92604051928391600401868301611a58565b03601f198101835282610dc3565b60405163f0ffa18560e01b815293849283923391829160048601611bcc565b03815f305af1801561040c575f906103d9575b602090604051908152f35b506020813d602011610404575b816103f360209383610dc3565b8101031261017c57602090516103ce565b3d91506103e6565b6040513d5f823e3d90fd5b3461017c57602036600319011261017c576004356001600160401b03811161017c57610447903690600401610ed3565b61044f611c0f565b5081019060208183031261017c578035906001600160401b03821161017c57016101208183031261017c576040519061048782610d70565b61049081610f82565b825260208101356001600160401b03811161017c57836104b1918301610e35565b602083015260408101356001600160401b03811161017c57836104d5918301611c52565b604083015260608101356001600160401b03811161017c57836104f9918301610fad565b606083015260808101356001600160401b03811161017c578361051d918301611c52565b608083015260a08101356001600160401b03811161017c5783610541918301610fad565b60a083015260c08101356001600160401b03811161017c5783610565918301611c52565b60c083015260e08101356001600160401b03811161017c5783610589918301610fad565b60e0830152610100810135926001600160401b03841161017c576105c3936105b19201610fad565b61010082015260405191829182611079565b0390f35b3461017c57602036600319011261017c576105e0611c0f565b506105e96111d1565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561040c575f916106a0575b5060208101517f000000000000000000000000000000000000000000000000000000000000000003610691576106856101206105c3920151602080825183010191016113fa565b60405191829182611079565b635527981560e11b5f5260045ffd5b6106bc91503d805f833e6106b48183610dc3565b81019061125d565b8161063e565b3461017c57608036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206106fd610f00565b6107296103bb61070b610f56565b94610737610717610f6c565b91604051948591600401888301611a58565b03601f198101855284610dc3565b60405163f0ffa18560e01b8152958694859460048601611bcc565b3461017c5760a036600319011261017c5761076b610f2a565b50610774610f40565b506044356001600160401b03811161017c57610794903690600401610fad565b506064356001600160401b03811161017c576107b4903690600401610fad565b506084356001600160401b03811161017c576107d4903690600401610e35565b5060405163bc197c8160e01b8152602090f35b3461017c57606036600319011261017c576004356001600160401b03811161017c576101d861081c6020923690600401610ed3565b610824610f00565b916044359233923392611d80565b60206102f861084036610e83565b9261084c92919261245a565b611585565b3461017c576105c361086b61086536610d07565b90611629565b604051918291602083526020830190610d1d565b3461017c57602036600319011261017c576004356001600160401b03811161017c576108b26108b7913690600401610e35565b61155c565b604080516001600160a01b0390931683526020830181905282916105c391830190610d1d565b3461017c57602036600319011261017c576004356108f96111d1565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f91816109bd575b5061095f57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106109ae578061099e6101206109a39301519160c060018060a01b039101511691602080825183010191016113fa565b612737565b602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6109d29192503d805f833e6106b48183610dc3565b9083610947565b3461017c575f36600319011261017c576060806040516109f881610d41565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561040c575f90610abf575b6060906105c3604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610d1d565b503d805f833e610acf8183610dc3565b81019060208183031261017c578051906001600160401b03821161017c570160808183031261017c5760405190610b0582610d41565b8051825260208101516001600160a01b038116810361017c576020830152610b2f6040820161118e565b60408301526060810151906001600160401b03821161017c570182601f8201121561017c57606092816020610b669351910161119b565b82820152610a79565b3461017c575f36600319011261017c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461017c575f36600319011261017c576105c3602061086b6001610bec7f00000000000000000000000000000000000000000000000000000000000000006122ed565b8184610c177f00000000000000000000000000000000000000000000000000000000000000006122ed565b8180610c427f00000000000000000000000000000000000000000000000000000000000000006122ed565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610dc3565b3461017c57610ca861086536610d07565b50602060405160018152f35b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091630271189760e51b8114908115610cf6575b5015158152f35b6301ffc9a760e01b14905083610cef565b604090600319011261017c576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610d5c57604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610d5c57604052565b61014081019081106001600160401b03821117610d5c57604052565b604081019081106001600160401b03821117610d5c57604052565b90601f801991011681019081106001600160401b03821117610d5c57604052565b6001600160401b038111610d5c57601f01601f191660200190565b929192610e0b82610de4565b91610e196040519384610dc3565b82948184528183011161017c578281602093845f960137010152565b9080601f8301121561017c57816020610e5093359101610dff565b90565b9181601f8401121561017c578235916001600160401b03831161017c576020808501948460051b01011161017c57565b604060031982011261017c576004356001600160401b03811161017c5781610ead91600401610e53565b92909291602435906001600160401b03821161017c57610ecf91600401610e53565b9091565b9181601f8401121561017c578235916001600160401b03831161017c576020838186019501011161017c57565b602435906001600160401b038216820361017c57565b35906001600160401b038216820361017c57565b600435906001600160a01b038216820361017c57565b602435906001600160a01b038216820361017c57565b604435906001600160a01b038216820361017c57565b606435906001600160a01b038216820361017c57565b35906001600160a01b038216820361017c57565b6001600160401b038111610d5c5760051b60200190565b9080601f8301121561017c578135610fc481610f96565b92610fd26040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b828210610ffa5750505090565b8135815260209182019101610fed565b90602080835192838152019201905f5b8181106110275750505090565b82516001600160a01b031684526020938401939092019160010161101a565b90602080835192838152019201905f5b8181106110635750505090565b8251845260209384019390920191600101611056565b90610e50916020815260018060a01b03825116602082015261010061114461112f6111196111036110ed6110d76110c160208a015161012060408b01526101408a0190610d1d565b60408a0151898203601f190160608b015261100a565b6060890151888203601f190160808a0152611046565b6080880151878203601f190160a089015261100a565b60a0870151868203601f190160c0880152611046565b60c0860151858203601f190160e087015261100a565b60e0850151848203601f190184860152611046565b92015190610120601f1982850301910152611046565b602060031982011261017c57600435906001600160401b03821161017c5761014090829003600319011261017c5760040190565b5190811515820361017c57565b9291926111a782610de4565b916111b56040519384610dc3565b82948184528183011161017c578281602093845f96015e010152565b604051906111de82610d8c565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361017c57565b51906001600160a01b038216820361017c57565b9080601f8301121561017c578151610e509260200161119b565b60208183031261017c578051906001600160401b03821161017c57016101408183031261017c576040519161129183610d8c565b81518352602082015160208401526112ab6040830161121b565b60408401526112bc6060830161121b565b60608401526112cd6080830161121b565b608084015260a082015160a08401526112e860c0830161122f565b60c08401526112f960e0830161122f565b60e084015261130b610100830161118e565b6101008401526101208201516001600160401b03811161017c5761132f9201611243565b61012082015290565b9080601f8301121561017c57815161134f81610f96565b9261135d6040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b8282106113855750505090565b602080916113928461122f565b815201910190611378565b9080601f8301121561017c5781516113b481610f96565b926113c26040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b8282106113ea5750505090565b81518152602091820191016113dd565b60208183031261017c578051906001600160401b03821161017c57016101208183031261017c576040519161142e83610d70565b6114378261122f565b835260208201516001600160401b03811161017c5781611458918401611243565b602084015260408201516001600160401b03811161017c578161147c918401611338565b604084015260608201516001600160401b03811161017c57816114a091840161139d565b606084015260808201516001600160401b03811161017c57816114c4918401611338565b608084015260a08201516001600160401b03811161017c57816114e891840161139d565b60a084015260c08201516001600160401b03811161017c578161150c918401611338565b60c084015260e08201516001600160401b03811161017c578161153091840161139d565b60e08401526101008201516001600160401b03811161017c57611553920161139d565b61010082015290565b61156f90602080825183010191016113fa565b80516020909101516001600160a01b0390911691565b92909281840361161a575f91345b8584101561160f57818410156115fb578360051b80860135908282116115ec5784013561013e198536030181121561017c576115d090850161249b565b156115e15760019103930192611593565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f6116336111d1565b5061163c6111d1565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f91816119a5575b506116a457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f9181611989575b506116e457866301fb6dd160e01b5f5260045260245ffd5b959192939495926116f4826124b4565b1561197a576117d360206101208085019460c0886117e5611715895161155c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610d1d565b84810360031901602486015290610d1d565b604483019190915203916001600160a01b03165afa90811561040c575f91611940575b50156119315760405161181a81610da8565b8581525f60208201526040519061183082610da8565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b1561017c5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af1908161191c575b506118b25763614cf93960e01b85526004849052602485fd5b6118d99094939192945161099e60018060a01b0387511691602080825183010191016113fa565b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c060405194611909602087610dc3565b848652516001600160a01b03169380a490565b6119299196505f90610dc3565b5f945f611899565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611972575b8161195b60209383610dc3565b8101031261017c5761196c9061118e565b5f611808565b3d915061194e565b63629cd40b60e11b5f5260045ffd5b61199e9192503d805f833e6106b48183610dc3565b905f6116cc565b6119ba9192503d805f833e6106b48183610dc3565b905f61168c565b9035601e198236030181121561017c5701602081359101916001600160401b03821161017c578160051b3603831361017c57565b916020908281520191905f5b818110611a0e5750505090565b909192602080600192838060a01b03611a2688610f82565b168152019401929101611a01565b81835290916001600160fb1b03831161017c5760209260051b809284830137010190565b60208152906001600160a01b03611a6e82610f82565b1660208301526020810135601e198236030181121561017c578101916020833593016001600160401b03841161017c57833603811361017c57611bad611b8d611b6e611b4f611b30611b1189610e509a611bb99861012060408c0152816101408c01526101608b01375f610160828b010152601f80199101168801610160611af960408c018c6119c1565b919092601f19828d8303010160608d015201916119f5565b611b1e60608a018a6119c1565b898303601f190160808b015290611a34565b611b3d60808901896119c1565b888303601f190160a08a0152906119f5565b611b5c60a08801886119c1565b878303601f190160c089015290611a34565b611b7b60c08701876119c1565b868303601f190160e0880152906119f5565b611b9a60e08601866119c1565b858303601f190161010087015290611a34565b926101008101906119c1565b91610120601f1982860301910152611a34565b90935f936001600160401b03611bee608095989760a0865260a0860190610d1d565b971660208401526001600160a01b0390811660408401521660608201520152565b60405190611c1c82610d70565b6060610100835f815282602082015282604082015282808201528260808201528260a08201528260c08201528260e08201520152565b9080601f8301121561017c578135611c6981610f96565b92611c776040519485610dc3565b81845260208085019260051b82010192831161017c57602001905b828210611c9f5750505090565b60208091611cac84610f82565b815201910190611c92565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611d7157611ceb816124b4565b15611d6b57611d0b610120611d1b920151602080825183010191016113fa565b91602080825183010191016113fa565b611d258183612523565b9182611d52575b82611d3657505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611d2c565b50505f90565b635f9bd90760e11b5f5260045ffd5b90959194929394611da4611d95368985610dff565b602080825183010191016113fa565b9160408301948551519860608501998a5151036122cd5760808501928351519560a0810196875151036122cd5760c081018051519360e08301948551518114908115916122dc575b506122cd575f5b8b518051821015611f07578f8e602091611e2585611e6095611e1c8260018060a01b039261250f565b5116925161250f565b516040516323b872dd60e01b81526001600160a01b0390931660048401523060248401526044830152909283919082905f9082906064820190565b03925af15f9181611ecc575b50611ec757505f5b15611e8157600101611df3565b8c8f91611ea7818f611e9e611ec39460018060a01b03925161250f565b5116945161250f565b51604051634a73404560e11b815293849330916004860161270c565b0390fd5b611e74565b9091506020813d8211611eff575b81611ee760209383610dc3565b8101031261017c57611ef89061118e565b905f611e6c565b3d9150611eda565b505092959950929597999a9093969b505f995b895180518c1015611fdb57611f3c8c8f92611e1c8260018060a01b039261250f565b5190803b1561017c576040516323b872dd60e01b81526001600160a01b038f16600482015230602482015260448101929092525f908290606490829084905af19081611fcb575b50611fc0578c8c611ec3611fa48e8e611e9e8260018060a01b03925161250f565b5160405163045b391760e01b815293849330916004860161270c565b6001909a0199611f1a565b5f611fd591610dc3565b5f611f83565b5093985093959850939950946101005f9701975b86518051891015612116576001600160a01b039061200e908a9061250f565b511661201b898d5161250f565b516120278a8c5161250f565b51823b1561017c57604051637921219560e11b81526001600160a01b038e1660048201523060248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081612106575b506120fb578a8a611ec38b6120b88c6120b0818e6120a78260018060a01b03925161250f565b5116975161250f565b51925161250f565b5160405163334a7d1b60e21b81526001600160a01b03958616600482015294909316602485015230604485015260648401526084830191909152819060a4820190565b600190970196611fef565b5f61211091610dc3565b5f612081565b50965096509650965061212b92503691610dff565b906040519460c08601908682106001600160401b03831117610d5c576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a0840152602060405161218a81610da8565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a061222b608083015160c060e4860152610124850190610d1d565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561040c575f93612299575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d6020116122c5575b816122b560209383610dc3565b8101031261017c5751915f612271565b3d91506122a8565b63512509d360e11b5f5260045ffd5b90506101008401515114155f611dec565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015612437575b806d04ee2d6d415b85acef8100000000600a92101561241c575b662386f26fc10000811015612408575b6305f5e1008110156123f7575b6127108110156123e8575b60648110156123da575b10156123cf575b600a6021600184019361237485610de4565b946123826040519687610dc3565b808652612391601f1991610de4565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530480156123ca57600a909161239c565b505090565b600190910190612362565b60646002910493019261235b565b61271060049104930192612351565b6305f5e10060089104930192612346565b662386f26fc1000060109104930192612339565b6d04ee2d6d415b85acef810000000060209104930192612329565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b810461230f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361248c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361017c57301490565b6001600160401b036060820151168015159081612505575b506124f657608001516001600160401b03166124e757600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f6124cc565b80518210156115fb5760209160051b010190565b6040810191825151604082019081515111612704575f5b8151518110156125b35784516001600160a01b039061255a90839061250f565b511660018060a01b0361256e83855161250f565b51161480159061258e575b6125855760010161253a565b50505050505f90565b5061259d81606086015161250f565b516125ac82606086015161250f565b5111612579565b505091506080810191825151608082019081515111612704575f5b81515181101561263f5784516001600160a01b03906125ee90839061250f565b511660018060a01b0361260283855161250f565b511614801590612619575b612585576001016125ce565b506126288160a086015161250f565b516126378260a086015161250f565b51141561260d565b5050915060c08101918251519260c082019384515111612704575f5b8451518110156126fa5781516001600160a01b039061267b90839061250f565b511660018060a01b0361268f83885161250f565b5116148015906126d4575b80156126ad575b6125855760010161265b565b506126bd8161010086015161250f565b516126cd8261010086015161250f565b51116126a1565b506126e38160e086015161250f565b516126f28260e086015161250f565b51141561269a565b5050505050600190565b505050505f90565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260800190565b9190915f5b6040820180518051831015612843576001600160a01b039061275f90849061250f565b5116905f60206060860193604461277787875161250f565b5160405163a9059cbb60e01b81526001600160a01b038c16600482015260248101919091529384928391905af15f9181612808575b5061280357505f5b156127c357505060010161273c565b6127e783611ec3926127de899660018060a01b03925161250f565b5116935161250f565b51604051634a73404560e11b815293849330906004860161270c565b6127b4565b9091506020813d821161283b575b8161282360209383610dc3565b8101031261017c576128349061118e565b905f6127ac565b3d9150612816565b5050505f905b608081019081518051841015612926576001600160a01b039061286d90859061250f565b51169360a082019461288085875161250f565b5190803b1561017c576040516323b872dd60e01b81523060048201526001600160a01b038916602482015260448101929092525f908290606490829084905af19081612916575b5061290757505051611ec3916128eb916001600160a01b03906127de90839061250f565b5160405163045b391760e01b815293849330906004860161270c565b93506001909201919050612849565b5f61292091610dc3565b5f6128c7565b50929150505f5b60c0830180518051831015612a5f576001600160a01b039061295090849061250f565b51169260e085019461296384875161250f565b519461010082019561297686885161250f565b51823b1561017c57604051637921219560e11b81523060048201526001600160a01b038b1660248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081612a4f575b50612a42575050816120b0816129ff936129f6611ec3979660018060a01b03925161250f565b5116965161250f565b5160405163334a7d1b60e21b81526001600160a01b03948516600482015230602482015294909316604485015260648401526084830191909152819060a4820190565b945092505060010161292d565b5f612a5991610dc3565b5f6129d0565b50505091505056fea2646970667358221220dad5ba5509956939580615329f947d1b0553c7edb9f7446e6e1a6393d4f0724f64736f6c634300081b0033",
    sourceMap: "678:10768:128:-:0;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;1183:12:9;;;1054:5;1183:12;678:10768:128;1054:5:9;1183:12;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;:::i;:::-;-1:-1:-1;678:10768:128;;-1:-1:-1;;;678:10768:128;;;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;678:10768:128;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;678:10768:128:-;;;;;;-1:-1:-1;;678:10768:128;;;;;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;10253:187;678:10768;10294:16;;678:10768;;:::i;:::-;;;;;;;;;10294:16;;;;:::i;:::-;;1055:104:6;;10294:16:128;;;;;;:::i;:::-;678:10768;;-1:-1:-1;;;10253:187:128;;678:10768;;;;;10360:10;;;;678:10768;10253:187;;;:::i;:::-;;:4;678:10768;10253:4;:187;;;;;;678:10768;10253:187;;;678:10768;;;;;;;;;10253:187;;678:10768;10253:187;;678:10768;10253:187;;;;;;678:10768;10253:187;;;:::i;:::-;;;678:10768;;;;;;;10253:187;;;;;-1:-1:-1;10253:187:128;;;678:10768;;;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;11403:34;;678:10768;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;678:10768:128;;-1:-1:-1;;;2392:23:77;;678:10768:128;;;2392:23:77;;;678:10768:128;-1:-1:-1;678:10768:128;2392:23:77;678:10768:128;2392:3:77;-1:-1:-1;;;;;678:10768:128;2392:23:77;;;;;;;678:10768:128;2392:23:77;;;678:10768:128;2429:19:77;678:10768:128;2429:19:77;;678:10768:128;2452:18:77;2429:41;2425:87;;11218:46:128;11229:16;678:10768;11229:16;;;678:10768;;;;11218:46;;;;;;:::i;:::-;678:10768;;;;;;;:::i;2425:87:77:-;2491:21;;;678:10768:128;2491:21:77;678:10768:128;;2491:21:77;2392:23;;;;;;678:10768:128;2392:23:77;;;;;;:::i;:::-;;;;;:::i;:::-;;;;678:10768:128;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;:::i;:::-;10700:16;10659:181;678:10768;;:::i;:::-;;10700:16;678:10768;;:::i;:::-;;;;;;;;;10700:16;;;;:::i;:::-;;1055:104:6;;10700:16:128;;;;;;:::i;:::-;678:10768;;-1:-1:-1;;;10659:181:128;;678:10768;;;;;;10659:181;;;:::i;678:10768::-;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;:::i;:::-;-1:-1:-1;678:10768:128;;-1:-1:-1;;;678:10768:128;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;716:142:80;678:10768:128;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;678:10768:128:-;;1442:1461:9;678:10768:128;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;678:10768:128:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;678:10768:128;;;;;;;;:::i;:::-;-1:-1:-1;678:10768:128;;-1:-1:-1;;;3989:23:78;;678:10768:128;3989:23:78;;678:10768:128;;;-1:-1:-1;678:10768:128;3989:23:78;678:10768:128;3989:3:78;-1:-1:-1;;;;;678:10768:128;3989:23:78;;678:10768:128;;3989:23:78;;;678:10768:128;-1:-1:-1;3985:172:78;;4122:24;;;;678:10768:128;4122:24:78;678:10768:128;;3989:23:78;678:10768:128;4122:24:78;3985:172;-1:-1:-1;;;;;4189:26:78;;;678:10768:128;;4171:15:78;:44;4167:87;;4334:16;3739:34:128;4334:16:78;3815:2:128;4334:16:78;;;678:10768:128;4352:21:78;678:10768:128;;;;;4352:21:78;;678:10768:128;;;;;;;3739:34;;;;;;:::i;:::-;3815:2;:::i;:::-;678:10768;;;;;;;4167:87:78;4236:18;;;678:10768:128;4236:18:78;678:10768:128;;4236:18:78;3989:23;;;;;;;678:10768:128;3989:23:78;;;;;;:::i;:::-;;;;;678:10768:128;;;;;;-1:-1:-1;;678:10768:128;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;678:10768:128;1497:44:77;;678:10768:128;;;1497:44:77;678:10768:128;;;;;;1497:14:77;678:10768:128;1497:44:77;;;;;;678:10768:128;1497:44:77;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;678:10768:128;1497:44:77;;;;;;:::i;:::-;;;678:10768:128;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;678:10768:128;;;;;;-1:-1:-1;;678:10768:128;;;;;;;542:43:77;678:10768:128;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;;678:10768:128;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;678:10768:128;;;;;;;;;;;;1055:104:6;;;678:10768:128;;;;-1:-1:-1;;;678:10768:128;;;;;;;;;;;;;;;;;-1:-1:-1;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;678:10768:128:-;;;;10969:37;678:10768;;;:::i;10969:37::-;;678:10768;;;11023:4;678:10768;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;775:49:41;;;:89;;;;678:10768:128;;;;;;;775:89:41;-1:-1:-1;;;862:40:68;;-1:-1:-1;775:89:41;;;678:10768:128;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;-1:-1:-1;;678:10768:128;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;:::o;:::-;;;;-1:-1:-1;678:10768:128;;;;;-1:-1:-1;678:10768:128;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;:::o;:::-;;;1055:104:6;;678:10768:128;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;:::o;:::-;-1:-1:-1;;;;;678:10768:128;;;;;;-1:-1:-1;;678:10768:128;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;678:10768:128;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;-1:-1:-1;;;;;678:10768:128;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;:::i;:::-;;;;1055:104:6;678:10768:128;1055:104:6;;678:10768:128;;;;;;;;:::i;:::-;;-1:-1:-1;;678:10768:128;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;678:10768:128;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;-1:-1:-1;678:10768:128;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10768:128;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;:::i;:::-;;;;;;:::o;2592:267::-;2768:34;2592:267;2768:34;678:10768;;;2768:34;;;;;;:::i;:::-;678:10768;;2768:34;2837:14;;;;-1:-1:-1;;;;;678:10768:128;;;;2592:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;678:10768:128;;;;;;;;;;;;;4064:22:9;;;;4060:87;;678:10768:128;;;;;;;;;;;;;;4274:33:9;678:10768:128;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;678:10768:128;;3896:19:9;678:10768:128;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;678:10768:128;;;;3881:1:9;678:10768:128;;;;;3881:1:9;678:10768:128;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;678:10768:128;;:::i;:::-;2224:30:78;678:10768:128;;:::i;:::-;-1:-1:-1;678:10768:128;;-1:-1:-1;;;2317:27:78;;;;;678:10768:128;;;2317:3:78;-1:-1:-1;;;;;678:10768:128;;-1:-1:-1;678:10768:128;2317:27:78;678:10768:128;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;678:10768:128;2317:27:78;-1:-1:-1;2493:28:78;2313:219;2428:26;;;;;678:10768:128;;;;;2546:32:78;;;2317:27;2546:32;;678:10768:128;-1:-1:-1;2546:32:78;2317:27;2546:32;;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;678:10768:128;2317:27:78;-1:-1:-1;2732:33:78;2542:234;2662:31;;;;;;2542:234;2791:24;;;:::i;:::-;2790:25;2786:64;;678:10768:128;;2994:11:78;;;;;678:10768:128;2994:11:78;678:10768:128;2957:58:78;2994:11;;2957:58;:::i;:::-;678:10768:128;;;;;;;;;;;;;;;;;3086:66:78;;678:10768:128;2317:27:78;3086:66;;678:10768:128;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;2317:27:78;678:10768:128;;;;;:::i;:::-;;;;;;;;3086:66:78;;-1:-1:-1;;;;;678:10768:128;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;678:10768:128;;;;;:::i;:::-;;;;-1:-1:-1;678:10768:128;3372:47:78;;678:10768:128;;;;;;;:::i;:::-;3326:18:78;678:10768:128;;;3278:160:78;;678:10768:128;;;3250:202:78;;;;;678:10768:128;-1:-1:-1;678:10768:128;;;;;;;;;;;;;;3250:202:78;;678:10768:128;2317:27:78;3250:202;;678:10768:128;;;;2317:27:78;678:10768:128;;;;;;;;;3250:202:78;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;678:10768:128;;;2317:27:78;3491:25;;3234:293;3502:2:128;3234:293:78;;;;;;3625:11;3386:74:128;678:10768;;;;;;;;;;;;;3386:74;;;;;;:::i;3502:2::-;3723:61:78;678:10768:128;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;678:10768:128;;;3723:61:78;2054:1760;:::o;3250:202::-;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;678:10768:128;3086:66:78;;678:10768:128;3086:66:78;;;;;;678:10768:128;3086:66:78;;;:::i;:::-;;;678:10768:128;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;678:10768:128;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1055:104:6;;678:10768:128;;;;;;;;;;;;:::i;:::-;1055:104:6;;;;;678:10768:128;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;678:10768:128;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;678:10768:128;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;678:10768:128;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;678:10768:128;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10768:128;;;;;1055:104:6;678:10768:128;:::i;:::-;;;;;;;:::i;:::-;1055:104:6;678:10768:128;1055:104:6;;678:10768:128;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;8029:650;8242:18;1016:17:76;;;678:10768:128;1016:27:76;1012:55;;1084:27;;;:::i;:::-;8214:47:128;8210:65;;8318:79;8342:15;8442:36;8342:15;;;1016:17:76;678:10768:128;;;8318:79;;;;;;:::i;:::-;678:10768;1016:17:76;678:10768:128;;;8442:36;;;;;;:::i;:::-;8508:38;;;;:::i;:::-;:91;;;;8029:650;8508:164;;;8489:183;;8029:650;:::o;8508:164::-;1016:17:76;8625:14:128;;;;;;678:10768;;;;;8615:25;8654:17;;;1016::76;678:10768:128;;;;8644:28;8615:57;8029:650;:::o;8508:91::-;678:10768;;;;-1:-1:-1;;;;;678:10768:128;;;;;8562:37;;-1:-1:-1;8508:91:128;;8210:65;8263:12;;678:10768;8263:12;:::o;1012:55:76:-;1052:15;;;678:10768:128;1052:15:76;;678:10768:128;1052:15:76;871:377:80;;;;;;;;3014:34:128;678:10768;;;;;:::i;:::-;3014:34;678:10768;;;3014:34;;;;;;:::i;:::-;2131:16;;;;;;;678:10768;2158:17;;;;;;;678:10768;2131:51;2127:97;;2238:17;;;;;;678:10768;2266:19;;;;;;;678:10768;2238:54;2234:100;;2361:18;;;;;678:10768;2390:20;;;;;;;678:10768;2361:56;;;;;:127;;;871:377:80;2344:183:128;;;-1:-1:-1;4018:3:128;3993:16;;678:10768;;3989:27;;;;;4037:12;;3014:34;4037:12;4206:20;4037:12;4083:161;4037:12;4090:19;678:10768;;;;;;4090:19;;:::i;:::-;678:10768;;4206:17;;:20;:::i;:::-;678:10768;2131:16;678:10768;-1:-1:-1;;;4083:161:128;;-1:-1:-1;;;;;678:10768:128;;;4083:161;;;678:10768;4179:4;678:10768;;;;;;;;;;;;-1:-1:-1;678:10768:128;;-1:-1:-1;;678:10768:128;;;;;;;4083:161;;;;;-1:-1:-1;;4083:161:128;;;4018:3;-1:-1:-1;4063:320:128;;4353:15;-1:-1:-1;4063:320:128;4401:8;4397:235;;678:10768;;3977:10;;4397:235;678:10768;;;4579:20;678:10768;;4477:19;4436:181;678:10768;;;;;;4477:16;;:19;:::i;:::-;678:10768;;4579:17;;:20;:::i;:::-;678:10768;2131:16;678:10768;-1:-1:-1;;;4436:181:128;;678:10768;;;4179:4;;4083:161;4436:181;;;:::i;:::-;;;;4063:320;;;4083:161;;;;3014:34;4083:161;;;;;;;;;3014:34;4083:161;;;:::i;:::-;;;678:10768;;;;;;;:::i;:::-;4083:161;;;;;;;-1:-1:-1;4083:161:128;;3989:27;;;;;;;;;;;;;;;;;-1:-1:-1;4680:559:128;4727:3;4701:17;;678:10768;;4697:28;;;;;4891:22;678:10768;;;4774:20;678:10768;;;;;;4774:20;;:::i;4891:22::-;678:10768;4766:165;;;;;;2131:16;678:10768;-1:-1:-1;;;4766:165:128;;-1:-1:-1;;;;;678:10768:128;;4083:161;4766:165;;678:10768;4179:4;678:10768;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;4766:165:128;;;;;;4727:3;-1:-1:-1;4746:483:128;;678:10768;;5029:185;5174:22;678:10768;;5071:20;678:10768;;;;;;5071:17;;:20;:::i;5174:22::-;678:10768;2131:16;678:10768;-1:-1:-1;;;5029:185:128;;678:10768;;;4179:4;;4083:161;5029:185;;;:::i;4746:483::-;678:10768;;;;;4685:10;;4766:165;-1:-1:-1;4766:165:128;;;:::i;:::-;;;;4697:28;;;;;;;;;;;;;5541:19;-1:-1:-1;5541:19:128;;5278:682;5326:3;5299:18;;678:10768;;5295:29;;;;;-1:-1:-1;;;;;678:10768:128;5374:21;;678:10768;;5374:21;:::i;:::-;678:10768;;5496:23;:20;;;:23;:::i;:::-;678:10768;5541:22;:19;;;:22;:::i;:::-;678:10768;5365:240;;;;;2131:16;678:10768;-1:-1:-1;;;5365:240:128;;-1:-1:-1;;;;;678:10768:128;;4083:161;5365:240;;678:10768;4179:4;678:10768;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;;;;;;-1:-1:-1;;5365:240:128;;;;;;5326:3;-1:-1:-1;5345:605:128;;678:10768;;5703:232;678:10768;5895:22;678:10768;5850:23;678:10768;;5746:21;678:10768;;;;;;5746:18;;:21;:::i;:::-;678:10768;;5850:20;;:23;:::i;:::-;678:10768;5895:19;;:22;:::i;:::-;678:10768;2131:16;678:10768;-1:-1:-1;;;5703:232:128;;-1:-1:-1;;;;;678:10768:128;;;4083:161;5703:232;;678:10768;;;;;;;;;4179:4;678:10768;;;;;;;;;;;;;;;;;;;;;;5345:605;678:10768;;;;;5283:10;;5365:240;-1:-1:-1;5365:240:128;;;:::i;:::-;;;;5295:29;;;;;;;;;;678:10768;5295:29;;678:10768;;;:::i;:::-;;2131:16;678:10768;;2361:18;678:10768;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;-1:-1:-1;;;;;678:10768:128;2131:16;678:10768;;;;;;;;;;;;3014:34;1914:299:77;;678:10768:128;;2131:16;1914:299:77;;678:10768:128;2158:17;1914:299:77;;678:10768:128;2238:17;1914:299:77;;678:10768:128;-1:-1:-1;2266:19:128;1914:299:77;;678:10768:128;3014:34;2131:16;678:10768;;;;:::i;:::-;1868:18:77;678:10768:128;;1819:413:77;;;678:10768:128;;;2131:16;678:10768;;;;;;;;1791:455:77;;;4083:161:128;1791:455:77;;678:10768:128;;;;;;;2131:16;678:10768;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10768:128;;;;;;;;;2131:16;678:10768;;;;;;;;;2158:17;678:10768;;;;;;;2266:19;678:10768;2238:17;678:10768;;;2361:18;678:10768;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;678:10768:128;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;678:10768:128;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;5278:682:128;1134:55:80;;4820:26:78;-1:-1:-1;4820:26:78;;871:377:80:o;1791:455:77:-;;;;3014:34:128;1791:455:77;;3014:34:128;1791:455:77;;;;;;678:10768:128;1791:455:77;;;:::i;:::-;;;678:10768:128;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;2344:183:128;2203:21;;;-1:-1:-1;2506:21:128;;-1:-1:-1;2506:21:128;2361:127;2462:19;;;;;;678:10768;2433:55;;2361:127;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;678:10768:128;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;678:10768:128;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;678:10768:128;;-1:-1:-1;;;1033:111:63;;;;678:10768:128;1033:111:63;678:10768:128;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;678:10768:128;;;;26127:66:70;;26014:100;26027:7;26098:1;678:10768:128;;;;26014:100:70;;;25901;25914:7;25985:1;678:10768:128;;;;25901:100:70;;;25788;25801:7;25872:1;678:10768:128;;;;25788:100:70;;;25672:103;25685:8;25758:2;678:10768:128;;;;25672:103:70;;;25556;25569:8;25642:2;678:10768:128;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;678:10768:128;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;678:10768:128;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;678:10768:128;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;678:10768:128;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;678:10768:128;-1:-1:-1;;;;;678:10768:128;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;678:10768:128;;;;;;;;;;;;;;;:::o;8685:1376::-;8862:19;;;;;;678:10768;8862:19;8891:18;;;;;678:10768;-1:-1:-1;8858:84:128;;678:10768;9000:3;8973:18;;678:10768;8969:29;;;;;9040:19;;-1:-1:-1;;;;;678:10768:128;9040:22;;:19;;:22;:::i;:::-;678:10768;;;;;;;9066:21;:18;;;:21;:::i;:::-;678:10768;;9040:47;;;:115;;;9000:3;9019:163;;678:10768;;8957:10;;9019:163;9170:12;;;;;678:10768;9170:12;:::o;9040:115::-;9107:20;:23;:20;;;;;:23;:::i;:::-;678:10768;9133:22;:19;9107:20;9133:19;;;:22;:::i;:::-;678:10768;-1:-1:-1;9040:115:128;;8969:29;;;;;9232:20;;;;;;678:10768;9232:20;9262:19;;;;;678:10768;-1:-1:-1;9228:86:128;;678:10768;9373:3;9345:19;;678:10768;9341:30;;;;;9413:20;;-1:-1:-1;;;;;678:10768:128;9413:23;;:20;;:23;:::i;:::-;678:10768;;;;;;;9440:22;:19;;;:22;:::i;:::-;678:10768;;9413:49;;;:122;;;9373:3;9392:170;;678:10768;;9329:10;;9413:122;9482:22;:25;:22;;;;;:25;:::i;:::-;678:10768;9511:24;:21;9482:22;9511:21;;;:24;:::i;:::-;678:10768;9482:53;;9413:122;;9341:30;;;;;9613:21;;;;;;678:10768;9644:20;9613:21;9644:20;;;;;678:10768;-1:-1:-1;9609:88:128;;678:10768;9757:3;9728:20;;678:10768;9724:31;;;;;9797:21;;-1:-1:-1;;;;;678:10768:128;9797:24;;:21;;:24;:::i;:::-;678:10768;;;;;;;9825:23;:20;;;:23;:::i;:::-;678:10768;;9797:51;;;:126;;;9757:3;9797:198;;;;9757:3;9776:246;;678:10768;;9712:10;;9797:198;9943:22;:25;:22;;;;;:25;:::i;:::-;678:10768;9971:24;:21;9943:22;9971:21;;;:24;:::i;:::-;678:10768;-1:-1:-1;9797:198:128;;:126;9868:23;:26;:23;;;;;:26;:::i;:::-;678:10768;9898:25;:22;9868:23;9898:22;;;:25;:::i;:::-;678:10768;9868:55;;9797:126;;9724:31;;;;;;678:10768;8685:1376;:::o;9609:88::-;9685:12;;;;678:10768;9685:12;:::o;678:10768::-;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5972:2025::-;;;;6126:1;6158:3;6133:16;;;;;678:10768;;6129:27;;;;;-1:-1:-1;;;;;678:10768:128;6230:19;;678:10768;;6230:19;:::i;:::-;678:10768;;6264:17;6126:1;6223:62;6264:17;;;;6223:62;6264:20;:17;;;:20;:::i;:::-;678:10768;6133:16;678:10768;-1:-1:-1;;;6223:62:128;;-1:-1:-1;;;;;678:10768:128;;6223:62;;;678:10768;;;;;;;;;;;;;;6223:62;;6126:1;;6223:62;;;6158:3;-1:-1:-1;6203:221:128;;6394:15;6126:1;6203:221;6442:8;6438:233;;6158:3;;678:10768;;6117:10;;6438:233;6618:20;678:10768;6477:179;678:10768;6518:19;678:10768;;;;;;;6518:16;;:19;:::i;:::-;678:10768;;6618:17;;:20;:::i;:::-;678:10768;6133:16;678:10768;-1:-1:-1;;;6477:179:128;;678:10768;;;6567:4;;6223:62;6477:179;;;:::i;6203:221::-;;;6223:62;;;;;;;;;;;;;;;;;;:::i;:::-;;;678:10768;;;;;;;:::i;:::-;6223:62;;;;;;;-1:-1:-1;6223:62:128;;6129:27;;;;6126:1;6719:555;6766:3;6740:17;;;;;;678:10768;;6736:28;;;;;-1:-1:-1;;;;;678:10768:128;6813:20;;678:10768;;6813:20;:::i;:::-;678:10768;;6928:19;;;;;:22;:19;;;:22;:::i;:::-;678:10768;6805:163;;;;;;6133:16;678:10768;-1:-1:-1;;;6805:163:128;;6877:4;6223:62;6805:163;;678:10768;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;-1:-1:-1;;678:10768:128;;;;;;-1:-1:-1;;6805:163:128;;;;;;6766:3;-1:-1:-1;6785:479:128;;-1:-1:-1;;7108:17:128;7066:183;;7209:22;;-1:-1:-1;;;;;678:10768:128;7108:20;;678:10768;;7108:20;:::i;7209:22::-;678:10768;6133:16;678:10768;-1:-1:-1;;;7066:183:128;;678:10768;;;6877:4;;6223:62;7066:183;;;:::i;6785:479::-;;-1:-1:-1;678:10768:128;;;;;6785:479;-1:-1:-1;6724:10:128;;6805:163;6126:1;6805:163;;;:::i;:::-;;;;6736:28;;;;;;6126:1;7361:3;7334:18;;;;;678:10768;;7330:29;;;;;-1:-1:-1;;;;;678:10768:128;7409:21;;678:10768;;7409:21;:::i;:::-;678:10768;;7529:20;678:10768;7529:20;;;:23;:20;;;:23;:::i;:::-;678:10768;7574:19;;;;;:22;:19;;;:22;:::i;:::-;678:10768;7400:238;;;;;6133:16;678:10768;-1:-1:-1;;;7400:238:128;;6877:4;6223:62;7400:238;;678:10768;-1:-1:-1;;;;;678:10768:128;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10768:128;;;;;;;;;;;;;;-1:-1:-1;;7400:238:128;;;;;;7361:3;-1:-1:-1;7380:601:128;;678:10768;;;7881:23;678:10768;7926:22;678:10768;7779:21;7736:230;678:10768;;;;;;;7779:18;;:21;:::i;:::-;678:10768;;7881:20;;:23;:::i;7926:22::-;678:10768;6133:16;678:10768;-1:-1:-1;;;7736:230:128;;-1:-1:-1;;;;;678:10768:128;;;6223:62;7736:230;;678:10768;6877:4;678:10768;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7380:601;;-1:-1:-1;7380:601:128;-1:-1:-1;;678:10768:128;;7318:10;;7400:238;6126:1;7400:238;;;:::i;:::-;;;;7330:29;;;;;;;5972:2025::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 3016,
          length: 32
        }
      ],
      "2534": [
        {
          start: 3059,
          length: 32
        }
      ],
      "2536": [
        {
          start: 3102,
          length: 32
        }
      ],
      "3008": [
        {
          start: 9308,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2634,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1542,
          length: 32
        },
        {
          start: 2325,
          length: 32
        },
        {
          start: 5715,
          length: 32
        },
        {
          start: 8761,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1606,
          length: 32
        },
        {
          start: 2584,
          length: 32
        },
        {
          start: 2950,
          length: 32
        },
        {
          start: 6194,
          length: 32
        },
        {
          start: 7353,
          length: 32
        },
        {
          start: 8588,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64)": "cd181c49",
    "doObligationFor((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64,address,address)": "bca73d64",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "supportsInterface(bytes4)": "01ffc9a7",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/TokenBundleEscrowObligation.sol":"TokenBundleEscrowObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "ArrayLengthMismatch"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC1155TransferFailed"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC20TransferFailed"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC721TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "supportsInterface(bytes4)": {
            details: "See {IERC165-supportsInterface}."
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/TokenBundleEscrowObligation.sol": "TokenBundleEscrowObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        keccak256: "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        urls: [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 128
};

// src/contracts/TokenBundlePaymentObligation.ts
var abi41 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "BundleTransferred",
      inputs: [
        {
          name: "payment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "ArrayLengthMismatch",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "620:6299:129:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1602:4;620:6299;759:14:6;688:1:9;620:6299:129;783:14:6;-1:-1:-1;620:6299:129;807:14:6;708:26:9;704:76;;620:6299:129;790:10:9;;620:6299:129;790:10:9;620:6299:129;790:10:9;789::77;;809:32;;-1:-1:-1;620:6299:129;;;;;;;;;;;872:48:77;;620:6299:129;872:48:77;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;904:4:77;620:6299:129;;;;1602:4;620:6299;;;;;;-1:-1:-1;;620:6299:129;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:32:77;620:6299:129;;;;;789:10:77;620:6299:129;;;;;;;;;;851:69:77;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;620:6299:129;872:48:77;;620:6299:129;872:48:77;;;;;;620:6299:129;872:48:77;;;:::i;:::-;;;620:6299:129;;;;;872:48:77;;;620:6299:129;-1:-1:-1;620:6299:129;;872:48:77;;;-1:-1:-1;872:48:77;;;620:6299:129;;;-1:-1:-1;620:6299:129;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;620:6299:129;;;;-1:-1:-1;620:6299:129;;;;;-1:-1:-1;620:6299:129;;;;;;-1:-1:-1;;620:6299:129;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d501461097a5780635bf2f20d146109405780635fc86150146108d457806368c0553a146107f05780636b122fe01461065a57806388e5b2d91461063b57806391db0b7e1461063b578063b3b902d4146105f0578063c6ec5070146103d7578063c93844be14610380578063ce46e04614610366578063e49617e114610341578063e60c350514610341578063e6c9714d146101415763f0ffa1850361000e573461013d5760a036600319011261013d576004356001600160401b03811161013d57610100903690600401610b46565b610108610b73565b91610111610a9c565b606435906001600160a01b038216820361013d57602094610135946084359461152a565b604051908152f35b5f80fd5b3461013d57606036600319011261013d576004356001600160401b03811161013d57610140600319823603011261013d576040519061017f82610d37565b8060040135825260208201906024810135825261019e60448201610b89565b60408401526101af60648201610b89565b606084019081526101c260848301610b89565b916080850192835260a481013560a08601526101e060c48201610ab2565b60c08601526101f160e48201610ab2565b60e0860152610104810135801515810361013d576101008601526101248101356001600160401b03811161013d576101209160046102329236920101610de1565b94019384526024356001600160401b03811161013d57610256903690600401610de1565b927f000000000000000000000000000000000000000000000000000000000000000090510361033257516001600160401b03168015159081610328575b5061031957516001600160401b031661030a576102cd6102be602093518480825183010191016111f4565b918380825183010191016111f4565b6102d78183611c21565b91826102ea575b50506040519015158152f35b60e0908101519101516001600160a01b03908116911614905082806102de565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610293565b635f9bd90760e11b5f5260045ffd5b602061035c61034f36610cd4565b610357611b9f565b611be0565b6040519015158152f35b3461013d575f36600319011261013d5760206040515f8152f35b3461013d57602036600319011261013d576004356001600160401b03811161013d576103c76103b66103d3923690600401610b46565b6103be6110c5565b508101906113f4565b60405191829182610c0c565b0390f35b3461013d57602036600319011261013d576103f06110c5565b50606061012060405161040281610d37565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156105e5575f916104e0575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036104d1576103c76101206103d3920151602080825183010191016111f4565b635527981560e11b5f5260045ffd5b90503d805f833e6104f18183610d6f565b81019060208183031261013d578051906001600160401b03821161013d5701906101408282031261013d576040519161052983610d37565b805183526020810151602084015261054360408201611bf9565b604084015261055460608201611bf9565b606084015261056560808201611bf9565b608084015260a081015160a084015261058060c0820161111e565b60c084015261059160e0820161111e565b60e08401526105a36101008201610fde565b610100840152610120810151906001600160401b03821161013d57019080601f8301121561013d5781516105d992602001610feb565b6101208201528161048a565b6040513d5f823e3d90fd5b3461013d57606036600319011261013d576004356001600160401b03811161013d576101356106256020923690600401610b46565b61062d610b73565b91604435923392339261152a565b602061035c61064936610af6565b92610655929192611b9f565b611021565b3461013d575f36600319011261013d5760608060405161067981610d08565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156105e5575f90610740575b6060906103d3604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a78565b503d805f833e6107508183610d6f565b81019060208183031261013d578051906001600160401b03821161013d570160808183031261013d576040519061078682610d08565b8051825260208101516001600160a01b038116810361013d5760208301526107b060408201610fde565b60408301526060810151906001600160401b03821161013d570182601f8201121561013d576060928160206107e793519101610feb565b828201526106fa565b3461013d57606036600319011261013d576004356001600160401b03811161013d57610100600319823603011261013d576024356001600160a01b038116810361013d57602090610857610865610845610a9c565b94604051928391600401868301610e96565b03601f198101835282610d6f565b610883604051948593849363f0ffa18560e01b855260048501610fa4565b03815f305af180156105e5575f906108a1575b602090604051908152f35b506020813d6020116108cc575b816108bb60209383610d6f565b8101031261013d5760209051610896565b3d91506108ae565b3461013d57602036600319011261013d576004356001600160401b03811161013d57610100600319823603011261013d57602061085761092261088393604051928391600401858301610e96565b6040518093819263f0ffa18560e01b83523390339060048501610fa4565b3461013d575f36600319011261013d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461013d575f36600319011261013d576103d36020610a6860016109bd7f0000000000000000000000000000000000000000000000000000000000000000611a32565b81846109e87f0000000000000000000000000000000000000000000000000000000000000000611a32565b8180610a137f0000000000000000000000000000000000000000000000000000000000000000611a32565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610d6f565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604435906001600160a01b038216820361013d57565b35906001600160a01b038216820361013d57565b9181601f8401121561013d578235916001600160401b03831161013d576020808501948460051b01011161013d57565b604060031982011261013d576004356001600160401b03811161013d5781610b2091600401610ac6565b92909291602435906001600160401b03821161013d57610b4291600401610ac6565b9091565b9181601f8401121561013d578235916001600160401b03831161013d576020838186019501011161013d57565b602435906001600160401b038216820361013d57565b35906001600160401b038216820361013d57565b90602080835192838152019201905f5b818110610bba5750505090565b82516001600160a01b0316845260209384019390920191600101610bad565b90602080835192838152019201905f5b818110610bf65750505090565b8251845260209384019390920191600101610be9565b60208152610100610cbf610ca9610c93610c7d610c67610c51610c3b89518860208b01526101208a0190610b9d565b60208a0151898203601f190160408b0152610bd9565b6040890151888203601f190160608a0152610b9d565b6060880151878203601f19016080890152610bd9565b6080870151868203601f190160a0880152610b9d565b60a0860151858203601f190160c0870152610bd9565b60c0850151848203601f190160e0860152610bd9565b60e0909301516001600160a01b031691015290565b602060031982011261013d57600435906001600160401b03821161013d5761014090829003600319011261013d5760040190565b608081019081106001600160401b03821117610d2357604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610d2357604052565b61010081019081106001600160401b03821117610d2357604052565b90601f801991011681019081106001600160401b03821117610d2357604052565b6001600160401b038111610d2357601f01601f191660200190565b929192610db782610d90565b91610dc56040519384610d6f565b82948184528183011161013d578281602093845f960137010152565b9080601f8301121561013d57816020610dfc93359101610dab565b90565b9035601e198236030181121561013d5701602081359101916001600160401b03821161013d578160051b3603831361013d57565b916020908281520191905f5b818110610e4c5750505090565b909192602080600192838060a01b03610e6488610ab2565b168152019401929101610e3f565b81835290916001600160fb1b03831161013d5760209260051b809284830137010190565b60208152610100610f87610f68610f49610f2a610f0b610eec610ecd610ebc8a80610dff565b8960208c01526101208b0191610e33565b610eda60208b018b610dff565b8a8303601f190160408c015290610e72565b610ef960408a018a610dff565b898303601f190160608b015290610e33565b610f186060890189610dff565b888303601f190160808a015290610e72565b610f376080880188610dff565b878303601f190160a089015290610e33565b610f5660a0870187610dff565b868303601f190160c088015290610e72565b610f7560c0860186610dff565b858303601f190160e087015290610e72565b926001600160a01b0390610f9d9060e001610ab2565b1691015290565b5f929493610fbc60809360a0845260a0840190610a78565b602083018590526001600160a01b039687166040840152951660608201520152565b5190811515820361013d57565b929192610ff782610d90565b916110056040519384610d6f565b82948184528183011161013d578281602093845f96015e010152565b9290928184036110b6575f91345b858410156110ab5781841015611097578360051b80860135908282116110885784013561013e198536030181121561013d5761106c908501611be0565b1561107d576001910393019261102f565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b604051906110d282610d53565b5f60e08360608152606060208201526060604082015260608082015260606080820152606060a0820152606060c08201520152565b6001600160401b038111610d235760051b60200190565b51906001600160a01b038216820361013d57565b9080601f8301121561013d57815161114981611107565b926111576040519485610d6f565b81845260208085019260051b82010192831161013d57602001905b82821061117f5750505090565b6020809161118c8461111e565b815201910190611172565b9080601f8301121561013d5781516111ae81611107565b926111bc6040519485610d6f565b81845260208085019260051b82010192831161013d57602001905b8282106111e45750505090565b81518152602091820191016111d7565b60208183031261013d578051906001600160401b03821161013d57016101008183031261013d576040519161122883610d53565b81516001600160401b03811161013d5781611244918401611132565b835260208201516001600160401b03811161013d5781611265918401611197565b602084015260408201516001600160401b03811161013d5781611289918401611132565b604084015260608201516001600160401b03811161013d57816112ad918401611197565b606084015260808201516001600160401b03811161013d57816112d1918401611132565b608084015260a08201516001600160401b03811161013d57816112f5918401611197565b60a084015260c0820151916001600160401b03831161013d5761131f60e09261132a948301611197565b60c08501520161111e565b60e082015290565b9080601f8301121561013d57813561134981611107565b926113576040519485610d6f565b81845260208085019260051b82010192831161013d57602001905b82821061137f5750505090565b6020809161138c84610ab2565b815201910190611372565b9080601f8301121561013d5781356113ae81611107565b926113bc6040519485610d6f565b81845260208085019260051b82010192831161013d57602001905b8282106113e45750505090565b81358152602091820191016113d7565b60208183031261013d578035906001600160401b03821161013d57016101008183031261013d576040519161142883610d53565b81356001600160401b03811161013d5781611444918401611332565b835260208201356001600160401b03811161013d5781611465918401611397565b602084015260408201356001600160401b03811161013d5781611489918401611332565b604084015260608201356001600160401b03811161013d57816114ad918401611397565b606084015260808201356001600160401b03811161013d57816114d1918401611332565b608084015260a08201356001600160401b03811161013d57816114f5918401611397565b60a084015260c0820135916001600160401b03831161013d5761151f60e09261132a948301611397565b60c085015201610ab2565b949293959091958286019361153f85886113f4565b9485515160208701515103611a1357604086019384515195606088019687515103611a135760808801928351519260a08a0193845151811490811591611a22575b50611a13575f5b8a51805182101561169c5760208d8d611606936115ab8660018060a01b0392611c0d565b5116905f6115c9878660018060a01b0360e086015116940151611c0d565b516040516323b872dd60e01b81526001600160a01b0395861660048201529290941660248301526044820193909352938492839182906064820190565b03925af19081156105e5575f91611663575b501561162657600101611587565b60405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b90506020813d8211611694575b8161167d60209383610d6f565b8101031261013d5761168e90610fde565b5f611618565b3d9150611670565b5050919395979b909294969a5f5b8c51805182101561175e57908e6116e5828e946116ce8260018060a01b0392611c0d565b51169460e060018060a01b03910151169251611c0d565b51833b1561013d57611734938f925f8094604051978895869485936323b872dd60e01b855260048501604091949392606082019560018060a01b0316825260018060a01b031660208201520152565b03925af19182156105e55760019261174e575b50016116aa565b5f61175891610d6f565b5f611747565b505092959a509295989a509296955f9860c088019b60018060a01b0316995b8b5180518210156118305790898b8f93836117be816117c6936117a78260018060a01b0392611c0d565b51169560e060018060a01b03910151169451611c0d565b519551611c0d565b51823b1561013d578e5f809460c4936040519889968795637921219560e11b8752600487015260248601526044850152606484015260a060848401528160a48401525af19182156105e557600192611820575b500161177d565b5f61182a91610d6f565b5f611819565b5050949a509491979650945061184a919750369085610dab565b916040519560c08701918783106001600160401b03841117610d23576001600160401b039260405260018060a01b0316875216602086015260016040860152606085015260808401525f60a084015260405160408101908082106001600160401b03831117610d23576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a061195a608083015160c060e4860152610124850190610a78565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156105e5575f936119df575b5060e06119b5849660018060a01b03936113f4565b015116917ff499ed54dafb173ee5c0ac81d260b37d4ceba55eb489caab761ba8a1bc663a345f80a4565b9092506020813d602011611a0b575b816119fb60209383610d6f565b8101031261013d5751915f6119a0565b3d91506119ee565b63512509d360e11b5f5260045ffd5b905060c08b01515114155f611580565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611b7c575b806d04ee2d6d415b85acef8100000000600a921015611b61575b662386f26fc10000811015611b4d575b6305f5e100811015611b3c575b612710811015611b2d575b6064811015611b1f575b1015611b14575b600a60216001840193611ab985610d90565b94611ac76040519687610d6f565b808652611ad6601f1991610d90565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b0f57600a9091611ae1565b505090565b600190910190611aa7565b606460029104930192611aa0565b61271060049104930192611a96565b6305f5e10060089104930192611a8b565b662386f26fc1000060109104930192611a7e565b6d04ee2d6d415b85acef810000000060209104930192611a6e565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611a54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611bd157565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361013d57301490565b51906001600160401b038216820361013d57565b80518210156110975760209160051b010190565b80515182515111611e02575f5b825151811015611ca55781516001600160a01b0390611c4e908390611c0d565b511660018060a01b03611c62838651611c0d565b511614801590611c80575b611c7957600101611c2e565b5050505f90565b50611c8f816020840151611c0d565b51611c9e826020860151611c0d565b5111611c6d565b506040810191825151604082019081515111611dfa575f5b815151811015611d375784516001600160a01b0390611cdd908390611c0d565b511660018060a01b03611cf1838551611c0d565b511614801590611d11575b611d0857600101611cbd565b50505050505f90565b50611d20816060860151611c0d565b51611d2f826060860151611c0d565b511415611cfc565b50509150608081019182515192608082019384515111611dfa575f5b845151811015611df05781516001600160a01b0390611d73908390611c0d565b511660018060a01b03611d87838851611c0d565b511614801590611dca575b8015611da5575b611d0857600101611d53565b50611db48160c0860151611c0d565b51611dc38260c0860151611c0d565b5111611d99565b50611dd98160a0860151611c0d565b51611de88260a0860151611c0d565b511415611d92565b5050505050600190565b505050505f90565b50505f9056fea264697066735822122048f7dfd682e98638677ca1b9b25456361bc02f6f5833f29725ea400d761447cd64736f6c634300081b0033",
    sourceMap: "620:6299:129:-:0;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;;;1183:12:9;;;1054:5;1183:12;620:6299:129;1054:5:9;1183:12;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;:::i;:::-;4552:573;4765:18;620:6299;;1016:27:76;1012:55;;620:6299:129;-1:-1:-1;;;;;620:6299:129;353:30:76;;;;;:89;;620:6299:129;721:55:76;;;620:6299:129;-1:-1:-1;;;;;620:6299:129;786:58:76;;4965:36:129;4841:79;620:6299;4865:15;;620:6299;;;;4841:79;;;;;;:::i;:::-;620:6299;;;;;4965:36;;;;;;:::i;:::-;5031:38;;;;:::i;:::-;:87;;;;620:6299;5012:106;;620:6299;;;;;;;;5031:87;620:6299;5085:13;;;620:6299;5102:16;;620:6299;-1:-1:-1;;;;;620:6299:129;;;;;5085:33;;-1:-1:-1;5031:87:129;;;;786:58:76;824:20;;;620:6299:129;824:20:76;620:6299:129;;824:20:76;721:55;759:17;;;620:6299:129;759:17:76;620:6299:129;;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;1012:55;1052:15;;;620:6299:129;1052:15:76;620:6299:129;;1052:15:76;620:6299:129;;3045:39:9;620:6299:129;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;620:6299:129;;;;;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;;;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;6876:34;620:6299;;;;;;;;:::i;:::-;;;:::i;:::-;;6876:34;;;;:::i;:::-;620:6299;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:77;;620:6299:129;;;2392:23:77;;620:6299:129;;;2392:23:77;620:6299:129;;;;;;2392:3:77;620:6299:129;2392:23:77;;;;;;;620:6299:129;2392:23:77;;;620:6299:129;2429:19:77;620:6299:129;2429:19:77;;620:6299:129;2452:18:77;2429:41;2425:87;;6691:46:129;620:6299;;6702:16;;;620:6299;;;;6691:46;;;;;;:::i;2425:87:77:-;2491:21;;;620:6299:129;2491:21:77;620:6299:129;;2491:21:77;2392:23;;;;;620:6299:129;2392:23:77;;;;;;:::i;:::-;;;620:6299:129;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:77;;;;620:6299:129;;;;;;;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;716:142:80;620:6299:129;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;620:6299:129:-;;1442:1461:9;620:6299:129;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;620:6299:129:-;;;;;;-1:-1:-1;;620:6299:129;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;620:6299:129;1497:44:77;;620:6299:129;;;1497:44:77;620:6299:129;;;;;;1497:14:77;620:6299:129;1497:44:77;;;;;;620:6299:129;1497:44:77;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;620:6299:129;1497:44:77;;;;;;:::i;:::-;;;620:6299:129;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;620:6299:129;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;2139:16;;620:6299;;:::i;:::-;;;;;;;;;2139:16;;;;:::i;:::-;;1055:104:6;;2139:16:129;;;;;;:::i;:::-;2172:139;620:6299;;;;;;;;;;2172:139;;620:6299;2172:139;;;:::i;:::-;;:4;620:6299;2172:4;:139;;;;;;620:6299;2172:139;;;620:6299;;;;;;;;;2172:139;;620:6299;2172:139;;620:6299;2172:139;;;;;;620:6299;2172:139;;;:::i;:::-;;;620:6299;;;;;;;2172:139;;;;;-1:-1:-1;2172:139:129;;620:6299;;;;;;-1:-1:-1;;620:6299:129;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;1762:16;;1795:145;620:6299;;;;;;;;1762:16;;;;:::i;:::-;620:6299;;;;;;;;;1795:145;;1872:10;;;1795:145;620:6299;1795:145;;;:::i;620:6299::-;;;;;;-1:-1:-1;;620:6299:129;;;;;;;542:43:77;620:6299:129;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;;620:6299:129;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;620:6299:129;;;;;;;;;;;;1055:104:6;;;620:6299:129;;;;-1:-1:-1;;;620:6299:129;;;;;;;;;;;;;;;;;-1:-1:-1;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;620:6299:129;;;;;1055:104:6;620:6299:129;;1055:104:6;620:6299:129;;;;;;;;;;;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;;;-1:-1:-1;;620:6299:129;;;;:::o;:::-;;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;620:6299:129;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;:::o;:::-;;-1:-1:-1;;620:6299:129;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;-1:-1:-1;;620:6299:129;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;:::o;:::-;;;;-1:-1:-1;620:6299:129;;;;;-1:-1:-1;620:6299:129;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;:::o;:::-;;;1055:104:6;;620:6299:129;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;:::o;:::-;-1:-1:-1;;;;;620:6299:129;;;;;;-1:-1:-1;;620:6299:129;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;620:6299:129;;;;;1055:104:6;620:6299:129;:::i;:::-;;-1:-1:-1;;;;;620:6299:129;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;620:6299:129;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;620:6299:129;;;;;;;;;;;;;4064:22:9;;;;4060:87;;620:6299:129;;;;;;;;;;;;;;4274:33:9;620:6299:129;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;620:6299:129;;3896:19:9;620:6299:129;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;620:6299:129;;;;3881:1:9;620:6299:129;;;;;3881:1:9;620:6299:129;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;620:6299:129;;;;;;;:::i;:::-;-1:-1:-1;620:6299:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;620:6299:129;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;871:377:80:-;;;;;;;;2505:68:129;;;;;;;;:::i;:::-;3114:16;;;620:6299;3141:17;;;;620:6299;3114:51;3110:97;;3221:17;;;;;;620:6299;3249:19;;;;;;;620:6299;3221:54;3217:100;;3344:18;;;;;;620:6299;3373:20;;;;;;;620:6299;3344:56;;;;;:127;;;871:377:80;3327:183:129;;;-1:-1:-1;3681:3:129;3656:16;;620:6299;;3652:27;;;;;3141:17;620:6299;;3725:158;620:6299;3732:19;620:6299;;;;;;3732:19;;:::i;:::-;620:6299;;;-1:-1:-1;3845:20:129;620:6299;;;;;;;;3813:10;;620:6299;;3141:17;;3845;:20;:::i;:::-;620:6299;3221:17;620:6299;-1:-1:-1;;;3725:158:129;;-1:-1:-1;;;;;620:6299:129;;;3725:158;;;620:6299;;;;;;;;;;;;;;;;;;;;;;;;;;;;3725:158;;;;;;;;;;-1:-1:-1;3725:158:129;;;3681:3;620:6299;;;;;;3640:10;;620:6299;3221:17;620:6299;-1:-1:-1;;;620:6299:129;;3141:17;3725:158;620:6299;;;;;;;;-1:-1:-1;;;620:6299:129;;;;;;;3725:158;;;3141:17;3725:158;;;;;;;;;3141:17;3725:158;;;:::i;:::-;;;620:6299;;;;;;;:::i;:::-;3725:158;;;;;;-1:-1:-1;3725:158:129;;3652:27;;;;;;;;;;;;;-1:-1:-1;4034:3:129;4008:17;;620:6299;;4004:28;;;;;620:6299;;4163:22;620:6299;;;4061:20;620:6299;;;;;;4061:20;;:::i;:::-;620:6299;;;;;;;;;3813:10;;620:6299;;4163:19;;:22;:::i;:::-;620:6299;4053:146;;;;;;620:6299;;;-1:-1:-1;620:6299:129;;3221:17;620:6299;;;;;;;;;;;4053:146;;3725:158;4053:146;;620:6299;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4053:146;;;;;;;;;;620:6299;4053:146;;;4034:3;;620:6299;3992:10;;4053:146;-1:-1:-1;4053:146:129;;;:::i;:::-;;;;4004:28;;;;;;;;;;;;;;;-1:-1:-1;4473:19:129;;;;620:6299;;;;;;;4249:291;4297:3;4270:18;;620:6299;;4266:29;;;;;620:6299;;;;;;4432:23;620:6299;4473:22;620:6299;4325:21;620:6299;;;;;;4325:21;;:::i;:::-;620:6299;;;;;;;;;3813:10;;620:6299;;4432:20;;:23;:::i;:::-;620:6299;4473:19;;:22;:::i;:::-;620:6299;4316:213;;;;;620:6299;-1:-1:-1;620:6299:129;;4316:213;620:6299;3221:17;620:6299;;;;;;;;;4316:213;;3725:158;4316:213;;620:6299;;;;;;;;;;;;;3373:20;620:6299;;;;;;;;;4316:213;;;;;;;620:6299;4316:213;;;4297:3;;620:6299;4254:10;;4316:213;-1:-1:-1;4316:213:129;;;:::i;:::-;;;;4266:29;;;;;;;;;;;;;620:6299;4266:29;;;620:6299;;;;:::i;:::-;;3221:17;620:6299;;4473:19;620:6299;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;-1:-1:-1;;;;;620:6299:129;3221:17;620:6299;;;;;;;;;;3141:17;1914:299:77;;620:6299:129;;3221:17;1914:299:77;;620:6299:129;3249:19;1914:299:77;;620:6299:129;3344:18;1914:299:77;;620:6299:129;-1:-1:-1;3373:20:129;1914:299:77;;620:6299:129;3221:17;620:6299;3221:17;620:6299;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;3141:17;620:6299;3221:17;620:6299;1868:18:77;620:6299:129;;1819:413:77;;;620:6299:129;;;3221:17;620:6299;;;;;;;;1791:455:77;;;3725:158:129;1791:455:77;;620:6299:129;;;;;;;3221:17;620:6299;;;;;;;;;;;;;;;;-1:-1:-1;;;;;620:6299:129;;;;;;;;;3221:17;620:6299;;;;;;;;;3249:19;620:6299;;;4316:213;620:6299;;;3373:20;620:6299;3344:18;620:6299;;;4473:19;620:6299;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;620:6299:129;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;620:6299:129;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;4249:291:129;1134:55:80;620:6299:129;2881:68;1134:55:80;620:6299:129;;;;;;2881:68;;:::i;:::-;2994:20;620:6299;;2964:51;;-1:-1:-1;2964:51:129;;871:377:80:o;1791:455:77:-;;;;3141:17:129;1791:455:77;;3141:17:129;1791:455:77;;;;;;620:6299:129;1791:455:77;;;:::i;:::-;;;620:6299:129;;;;;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;3327:183:129;3186:21;;;-1:-1:-1;3489:21:129;;-1:-1:-1;3489:21:129;3344:127;3445:19;;;;;;620:6299;3416:55;;3344:127;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;620:6299:129;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;620:6299:129;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;620:6299:129;;-1:-1:-1;;;1033:111:63;;;;620:6299:129;1033:111:63;620:6299:129;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;620:6299:129;;;;26127:66:70;;26014:100;26027:7;26098:1;620:6299:129;;;;26014:100:70;;;25901;25914:7;25985:1;620:6299:129;;;;25901:100:70;;;25788;25801:7;25872:1;620:6299:129;;;;25788:100:70;;;25672:103;25685:8;25758:2;620:6299:129;;;;25672:103:70;;;25556;25569:8;25642:2;620:6299:129;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;620:6299:129;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;620:6299:129;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;620:6299:129;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;620:6299:129:-;;;-1:-1:-1;;;;;620:6299:129;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;5131:1376::-;5308:19;;620:6299;5337:18;;620:6299;-1:-1:-1;5304:84:129;;620:6299;5446:3;5419:18;;620:6299;5415:29;;;;;5486:19;;-1:-1:-1;;;;;620:6299:129;5486:22;;:19;;:22;:::i;:::-;620:6299;;;;;;;5512:21;:18;;;:21;:::i;:::-;620:6299;;5486:47;;;:115;;;5446:3;5465:163;;620:6299;;5403:10;;5465:163;5616:12;;;620:6299;5616:12;:::o;5486:115::-;5553:20;:23;:20;;;;;:23;:::i;:::-;620:6299;5579:22;:19;5553:20;5579:19;;;:22;:::i;:::-;620:6299;-1:-1:-1;5486:115:129;;5415:29;;5678:20;;;;;;620:6299;5678:20;5708:19;;;;;620:6299;-1:-1:-1;5674:86:129;;620:6299;5819:3;5791:19;;620:6299;5787:30;;;;;5859:20;;-1:-1:-1;;;;;620:6299:129;5859:23;;:20;;:23;:::i;:::-;620:6299;;;;;;;5886:22;:19;;;:22;:::i;:::-;620:6299;;5859:49;;;:122;;;5819:3;5838:170;;620:6299;;5775:10;;5838:170;5996:12;;;;;620:6299;5996:12;:::o;5859:122::-;5928:22;:25;:22;;;;;:25;:::i;:::-;620:6299;5957:24;:21;5928:22;5957:21;;;:24;:::i;:::-;620:6299;5928:53;;5859:122;;5787:30;;;;;6059:21;;;;;;620:6299;6090:20;6059:21;6090:20;;;;;620:6299;-1:-1:-1;6055:88:129;;620:6299;6203:3;6174:20;;620:6299;6170:31;;;;;6243:21;;-1:-1:-1;;;;;620:6299:129;6243:24;;:21;;:24;:::i;:::-;620:6299;;;;;;;6271:23;:20;;;:23;:::i;:::-;620:6299;;6243:51;;;:126;;;6203:3;6243:198;;;;6203:3;6222:246;;620:6299;;6158:10;;6243:198;6389:22;:25;:22;;;;;:25;:::i;:::-;620:6299;6417:24;:21;6389:22;6417:21;;;:24;:::i;:::-;620:6299;-1:-1:-1;6243:198:129;;:126;6314:23;:26;:23;;;;;:26;:::i;:::-;620:6299;6344:25;:22;6314:23;6344:22;;;:25;:::i;:::-;620:6299;6314:55;;6243:126;;6170:31;;;;;;620:6299;5131:1376;:::o;6055:88::-;6131:12;;;;620:6299;6131:12;:::o;5304:84::-;5376:12;;620:6299;5376:12;:::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2457,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2500,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2543,
          length: 32
        }
      ],
      "3008": [
        {
          start: 7073,
          length: 32
        }
      ],
      "54658": [
        {
          start: 1739,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1114,
          length: 32
        },
        {
          start: 6504,
          length: 32
        }
      ],
      "54663": [
        {
          start: 601,
          length: 32
        },
        {
          start: 1170,
          length: 32
        },
        {
          start: 1689,
          length: 32
        },
        {
          start: 2391,
          length: 32
        },
        {
          start: 6331,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address))": "5fc86150",
    "doObligationFor((address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),address,address)": "68c0553a",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"BundleTransferred","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/TokenBundlePaymentObligation.sol":"TokenBundlePaymentObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4","license":"UNLICENSED","urls":["bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258","dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "ArrayLengthMismatch"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "payment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "from",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "BundleTransferred",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/TokenBundlePaymentObligation.sol": "TokenBundlePaymentObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        keccak256: "0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4",
        urls: [
          "bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258",
          "dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 129
};

// src/clients/erc20.ts
var erc20EscrowDoObligationFunction = getAbiItem5({
  abi: abi36.abi,
  name: "doObligation"
});
var erc20PaymentDoObligationFunction = getAbiItem5({
  abi: abi37.abi,
  name: "doObligation"
});
var erc721EscrowDoObligationFunction = getAbiItem5({
  abi: abi39.abi,
  name: "doObligation"
});
var tokenBundleEscrowDecodeFunction = getAbiItem5({
  abi: abi40.abi,
  name: "decodeObligationData"
});
var tokenBundlePaymentDecodeFunction = getAbiItem5({
  abi: abi41.abi,
  name: "decodeObligationData"
});
var erc20EscrowObligationDataType = erc20EscrowDoObligationFunction.inputs[0];
var erc20PaymentObligationDataType = erc20PaymentDoObligationFunction.inputs[0];
var erc721EscrowObligationDataType = erc721EscrowDoObligationFunction.inputs[0];
var tokenBundleEscrowObligationDataType = tokenBundleEscrowDecodeFunction.outputs[0];
var tokenBundlePaymentObligationDataType = tokenBundlePaymentDecodeFunction.outputs[0];
var makeErc20Client = (viemClient, addresses) => {
  const getEscrowSchema = async () => await viemClient.readContract({
    address: addresses.erc20EscrowObligation,
    abi: abi36.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const getPaymentSchema = async () => await viemClient.readContract({
    address: addresses.erc20PaymentObligation,
    abi: abi37.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const signPermit = async (props) => {
    const types = {
      Permit: parseAbiParameter("(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)").components
    };
    const domainData = {
      name: props.erc20Name,
      /** We assume 1 if permit version is not specified */
      version: props.permitVersion ?? "1",
      chainId: props.chainId,
      verifyingContract: props.contractAddress
    };
    const message = {
      owner: props.ownerAddress,
      spender: props.spenderAddress,
      value: props.value,
      nonce: props.nonce,
      deadline: props.deadline
    };
    const signature = await viemClient.account.signTypedData({
      message,
      domain: domainData,
      primaryType: "Permit",
      types
    });
    const [r, s, v] = [slice(signature, 0, 32), slice(signature, 32, 64), slice(signature, 64, 65)];
    return { r, s, v: hexToNumber(v) };
  };
  const encodeEscrowObligationRaw = (data) => {
    return encodeAbiParameters5([erc20EscrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return encodeAbiParameters5([erc20PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC20EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC20 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        arbiter: demand.arbiter,
        demand: demand.demand,
        token: token.address,
        amount: token.value
      });
    },
    /**
     * Encodes ERC20PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC20 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        amount: token.value,
        payee
      });
    },
    /**
     * Decodes ERC20EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return decodeAbiParameters5([erc20EscrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes ERC20PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return decodeAbiParameters5([erc20PaymentObligationDataType], obligationData)[0];
    },
    getEscrowSchema,
    getPaymentSchema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getEscrowObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrowSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters5([erc20EscrowObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getPaymentObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getPaymentSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters5([erc20PaymentObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    /**
     * Approves the spender to use tokens
     * @param token - Token details including address and amount
     * @param spender - Address to approve
     * @returns Transaction hash
     */
    approve: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc20EscrowObligation : addresses.erc20PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token.address,
        abi: abi38.abi,
        functionName: "approve",
        args: [to, token.value]
      });
      return hash;
    },
    /**
     * Approves spender if current allowance is less than required amount
     * @param token - Token details including address and amount
     * @param spender - Address to approve
     * @returns Transaction hash or null if approval not needed
     */
    approveIfLess: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const currentAllowance = await viemClient.readContract({
        address: token.address,
        abi: abi38.abi,
        functionName: "allowance",
        args: [viemClient.account.address, to]
      });
      if (currentAllowance < token.value) {
        return viemClient.writeContract({
          address: token.address,
          abi: abi38.abi,
          functionName: "approve",
          args: [to, token.value]
        });
      }
      return null;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      let hash;
      try {
        const { request } = await viemClient.simulateContract({
          address: addresses.erc20EscrowObligation,
          abi: abi36.abi,
          functionName: "collectEscrow",
          args: [buyAttestation, fulfillment]
        });
        hash = await viemClient.writeContract(request);
      } catch (error) {
        throw new Error(`Failed to collect payment for ${buyAttestation} with fulfillment ${fulfillment}: ${error}`);
      }
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20EscrowObligation,
        abi: abi36.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC20 tokens for a custom demand
     * @param price - ERC20 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyWithErc20(
     *   { address: usdc, value: 10n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc20: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20EscrowObligation,
        abi: abi36.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            amount: price.value,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.permitAndBuyWithErc20(
     *   { address: usdc, value: 10n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    permitAndBuyWithErc20: async (price, item, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: price.value,
        nonce: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: price.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyWithErc20",
        args: [
          price.address,
          price.value,
          item.arbiter,
          item.demand,
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.payWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc20: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20PaymentObligation,
        abi: abi37.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            amount: price.value,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.permitAndPayWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    permitAndPayWithErc20: async (price, payee) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20PaymentObligation,
        value: price.value,
        nonce: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: price.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayWithErc20",
        args: [price.address, price.value, payee, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC20 tokens
     * @param bid - ERC20 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc20ForErc20(
     *   { address: usdc, value: 10n },
     *   { address: eurc, value: 10n },
     *   0n,
     * );
     * ```
     */
    buyErc20ForErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc20ForErc20",
        args: [bid.address, bid.value, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC20 tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.permitAndBuyErc20ForErc20(
     *   { address: usdc, value: 10n },
     *   { address: eurc, value: 10n },
     *   0n,
     * );
     * ```
     */
    permitAndBuyErc20ForErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc20ForErc20",
        args: [bid.address, bid.value, ask.address, ask.value, expiration, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.payErc20ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc20ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.permitAndPayWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    permitAndPayErc20ForErc20: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = decodeAbiParameters5(
        [erc20EscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = decodeAbiParameters5([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20PaymentObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc20",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for an ERC721 token
     * @param bid - ERC20 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc721WithErc20(
     *   { address: usdc, value: 10n },
     *   { address: nft, id: 1n },
     *   0n,
     * );
     * ```
     */
    buyErc721WithErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc721WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for an ERC721 token using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyErc721WithErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc721WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, expiration, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC721 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc721",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC721 trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForErc721: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = decodeAbiParameters5(
        [erc721EscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = decodeAbiParameters5([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc721",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC1155 tokens
     * @param bid - ERC20 token offered
     * @param ask - ERC1155 token requested including token ID and amount
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc1155WithErc20(
     *   { address: usdc, value: 10n },
     *   { address: token, id: 1n, value: 5n },
     *   0n,
     * );
     * ```
     */
    buyErc1155WithErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc1155WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC1155 tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC1155 token requested including token ID and amount
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyErc1155WithErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc1155WithErc20",
        args: [
          bid.address,
          bid.value,
          ask.address,
          ask.id,
          ask.value,
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc1155",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC1155 trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForErc1155: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = decodeAbiParameters5(
        [
          {
            type: "tuple",
            components: [
              { name: "token", type: "address" },
              { name: "tokenId", type: "uint256" },
              { name: "amount", type: "uint256" },
              { name: "arbiter", type: "address" },
              { name: "demand", type: "bytes" }
            ]
          }
        ],
        buyAttestationData.data
      )[0];
      const demandData = decodeAbiParameters5([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc1155",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for a bundle of tokens
     * @param bid - ERC20 token offered
     * @param bundle - Bundle of tokens requested (ERC20, ERC721, ERC1155)
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyBundleWithErc20(
     *   { address: usdc, value: 10n },
     *   {
     *     erc20: [{ address: dai, value: 5n }],
     *     erc721: [{ address: nft, id: 1n }],
     *     erc1155: [{ address: token, id: 1n, value: 3n }],
     *   },
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc20: async (bid, bundle, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyBundleWithErc20",
        args: [bid.address, bid.value, { ...flattenTokenBundle(bundle), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for a bundle of tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param bundle - Bundle of tokens requested (ERC20, ERC721, ERC1155)
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyBundleWithErc20: async (bid, bundle, payee, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyBundleWithErc20",
        args: [
          bid.address,
          bid.value,
          { ...flattenTokenBundle(bundle), payee },
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-bundle trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForBundle: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = decodeAbiParameters5(
        [tokenBundleEscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = decodeAbiParameters5([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForBundle",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc721.ts
import { decodeAbiParameters as decodeAbiParameters6, encodeAbiParameters as encodeAbiParameters6, getAbiItem as getAbiItem6 } from "viem";

// src/contracts/ERC721BarterCrossToken.ts
var abi42 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_erc20Escrow",
          type: "address",
          internalType: "contract ERC20EscrowObligation"
        },
        {
          name: "_erc20Payment",
          type: "address",
          internalType: "contract ERC20PaymentObligation"
        },
        {
          name: "_erc721Escrow",
          type: "address",
          internalType: "contract ERC721EscrowObligation"
        },
        {
          name: "_erc721Payment",
          type: "address",
          internalType: "contract ERC721PaymentObligation"
        },
        {
          name: "_erc1155Escrow",
          type: "address",
          internalType: "contract ERC1155EscrowObligation"
        },
        {
          name: "_erc1155Payment",
          type: "address",
          internalType: "contract ERC1155PaymentObligation"
        },
        {
          name: "_bundleEscrow",
          type: "address",
          internalType: "contract TokenBundleEscrowObligation"
        },
        {
          name: "_bundlePayment",
          type: "address",
          internalType: "contract TokenBundlePaymentObligation"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyBundleWithErc721",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askData",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc1155WithErc721",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc20WithErc721",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc721ForErc721",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc721ForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc721ForErc1155",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc721ForErc20",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc721ForErc721",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "error",
      name: "CouldntCollectEscrow",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x6080346101b057601f61135138819003918201601f19168301916001600160401b038311848410176101b457808492610120946040528339810103126101b05780516001600160a01b03811691908290036101b05760208101516001600160a01b038116908190036101b05760408201516001600160a01b03811691908290036101b05760608301516001600160a01b03811692908390036101b05760808401516001600160a01b03811692908390036101b05760a08501516001600160a01b03811693908490036101b05760c08601516001600160a01b03811695908690036101b05760e08701516001600160a01b03811697908890036101b05761010001516001600160a01b03811698908990036101b05760018060a01b03195f5416175f5560018060a01b0319600154161760015560018060a01b0319600254161760025560018060a01b0319600454161760045560018060a01b0319600354161760035560018060a01b0319600554161760055560018060a01b0319600654161760065560018060a01b0319600754161760075560018060a01b0319600854161760085560405161118890816101c98239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816341b81d5814610a8a575080635f19ead1146109cf5780636590e21b146108b5578063793d455d146105aa578063cb9d3a57146103c6578063e32aa46314610389578063ebb48d901461025f5763eff69b5e14610074575f80fd5b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd576101486100ee60206100de61012082955f98899161023d575b500151828082518301019101610f62565b0151838082518301019101610e94565b6002546040805163446c5bf160e11b815283516001600160a01b03908116600483015260208501516024830152939091015183166044820152336064820181905260848201529586939290911691839190829060a4820190565b03925af19182156101fd575f92610208575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916101bf575b50156101b057602090604051908152f35b63a97a981d60e01b5f5260045ffd5b90506020813d6020116101f5575b816101da60209383610cfd565b810103126101f1576101eb90610d46565b5f61019f565b5f80fd5b3d91506101cd565b6040513d5f823e3d90fd5b9091506020813d602011610235575b8161022460209383610cfd565b810103126101f1575190602061015a565b3d9150610217565b61025991503d808b833e6102518183610cfd565b810190610da8565b5f6100cd565b346101f15761033a602061027236610c75565b60015460025460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b60018060a01b03168252878201523360408201526102e5604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b606081526102f4608082610cfd565b6040519361030185610cc7565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b03925af180156101fd575f90610356575b602090604051908152f35b506020813d602011610381575b8161037060209383610cfd565b810103126101f1576020905161034b565b3d9150610363565b346101f15761033a602061039c36610c75565b60015460035460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b346101f15760803660031901126101f1576103df610c4b565b604435906001600160401b0382116101f1578160040161010060031984360301126101f157606435906001600160401b03821682036101f15761033a9360209361053661056160018060a01b03600154169460018060a01b0360085416946040519384928a808501526105236105186104f96104da6104bb61049c61047d8a604061010061046d8b806110bb565b92909301526101408d01916110ef565b61048a60248b01896110bb565b8c8303603f190160608e01529061112e565b6104a960448a01886110bb565b8b8303603f190160808d0152906110ef565b6104c860648901876110bb565b8a8303603f190160a08c01529061112e565b6104e760848801866110bb565b898303603f190160c08b0152906110ef565b61050660a48701856110bb565b888303603f190160e08a01529061112e565b9160c48501906110bb565b858303603f19016101008701529061112e565b906001600160a01b039061054c9060e401610c61565b1661012083015203601f198101835282610cfd565b6040519261056e84610cc7565b83528583015260018060a01b0316604082015260243560608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b346101f15760203660031901126101f15760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa80156101fd57610120915f9161089b575b500151908151820160208101926020818303126101f1576020810151906001600160401b0382116101f157019061012090829003126101f1576040519261012084018481106001600160401b038211176108875760405261065860208301610d32565b845260408201516001600160401b0381116101f15781602061067c92850101610d53565b906020850191825260608301516001600160401b0381116101f1578160206106a692860101610ff9565b604086015260808301516001600160401b0381116101f1578160206106cd9286010161105e565b606086015260a08301516001600160401b0381116101f1578160206106f492860101610ff9565b608086015260c08301516001600160401b0381116101f15781602061071b9286010161105e565b60a086015260e08301516001600160401b0381116101f15781602061074292860101610ff9565b60c08601526101008301516001600160401b0381116101f15781602061076a9286010161105e565b60e0860152610120830151916001600160401b0383116101f1575f9561010061079f6100ee9460206107b1978199010161105e565b91015251838082518301019101610e94565b03925af19182156101fd575f92610852575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b90506020813d60201161084a575b8161083360209383610cfd565b810103126101f15761084490610d46565b8261019f565b3d9150610826565b9091506020813d60201161087f575b8161086e60209383610cfd565b810103126101f157519060206107c3565b3d9150610861565b634e487b7160e01b5f52604160045260245ffd5b6108af91503d805f833e6102518183610cfd565b836105f5565b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd5761091e6100ee60206100de61012082955f9889916109b557500151828082518301019101610f62565b03925af19182156101fd575f92610980575b5060205f91604460018060a01b0360045416916040519485938492632c713cd960e01b845260048401528760248401525af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d6020116109ad575b8161099c60209383610cfd565b810103126101f15751906020610930565b3d915061098f565b6109c991503d808b833e6102518183610cfd565b896100cd565b346101f15760c03660031901126101f1576109e8610c4b565b6044356001600160a01b038116908190036101f15760a4356001600160401b03811681036101f15760015460065460405161033a956020956001600160a01b0394851694909316929091610a3b81610cc7565b8181528681019060643582526060604082019160843583520191338352604051938985015251604084015251606083015260018060a01b0390511660808201526080815261056160a082610cfd565b346101f15760203660031901126101f157600435905f8160248160018060a01b038454166328c44a9960e21b82528660048301525afa80156101fd57610120915f91610c31575b5001519081518201916020818403126101f1576020810151906001600160401b0382116101f157019160a0838203126101f1576040519060a082018281106001600160401b0382111761088757604052610b2d60208501610d32565b825260408401516001600160401b0381116101f1575f94602093608060a0610b626100ee958880610b95990191870101610d53565b938488850152610b7460608201610d32565b60408501528281015160608501520151910152838082518301019101610e94565b03925af19182156101fd575f92610bfc575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d602011610c29575b81610c1860209383610cfd565b810103126101f15751906020610ba7565b3d9150610c0b565b610c4591503d805f833e6102518183610cfd565b83610ad1565b600435906001600160a01b03821682036101f157565b35906001600160a01b03821682036101f157565b60a09060031901126101f1576004356001600160a01b03811681036101f15790602435906044356001600160a01b03811681036101f15790606435906084356001600160401b03811681036101f15790565b608081019081106001600160401b0382111761088757604052565b606081019081106001600160401b0382111761088757604052565b90601f801991011681019081106001600160401b0382111761088757604052565b51906001600160401b03821682036101f157565b51906001600160a01b03821682036101f157565b519081151582036101f157565b81601f820112156101f1578051906001600160401b0382116108875760405192610d87601f8401601f191660200185610cfd565b828452602083830101116101f157815f9260208093018386015e8301015290565b6020818303126101f1578051906001600160401b0382116101f15701610140818303126101f1576040519161014083018381106001600160401b03821117610887576040528151835260208201516020840152610e0760408301610d1e565b6040840152610e1860608301610d1e565b6060840152610e2960808301610d1e565b608084015260a082015160a0840152610e4460c08301610d32565b60c0840152610e5560e08301610d32565b60e0840152610e676101008301610d46565b6101008401526101208201516001600160401b0381116101f157610e8b9201610d53565b61012082015290565b908160609103126101f157610ecb6040805192610eb084610ce2565b610eb981610d32565b84526020810151602085015201610d32565b604082015290565b926001600160401b036101206020606080969998956080895260018060a01b0381511660808a015282810151608060a08b01528051938491826101008d015201858b015e5f84848b01015260018060a01b0360408201511660c08a0152015160e0880152601f80199101168601019616602085015260018060a01b0316604084015260018060a01b0316910152565b6020818303126101f1578051906001600160401b0382116101f15701906080828203126101f15760405191610f9683610cc7565b610f9f81610d32565b835260208101516001600160401b0381116101f157606092610fc2918301610d53565b6020840152610fd360408201610d32565b60408401520151606082015290565b6001600160401b0381116108875760051b60200190565b9080601f830112156101f157815161101081610fe2565b9261101e6040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110465750505090565b6020809161105384610d32565b815201910190611039565b9080601f830112156101f157815161107581610fe2565b926110836040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110ab5750505090565b815181526020918201910161109e565b9035601e19823603018112156101f15701602081359101916001600160401b0382116101f1578160051b360383136101f157565b916020908281520191905f5b8181106111085750505090565b909192602080600192838060a01b0361112088610c61565b1681520194019291016110fb565b81835290916001600160fb1b0383116101f15760209260051b80928483013701019056fea2646970667358221220bd4a5515b4ca04c12e937ca0ac3a643f5907254213dba14e47cb23cd007f328a64736f6c634300081b0033",
    sourceMap: "890:6100:137:-:0;;;;;;;;;;;;;-1:-1:-1;;890:6100:137;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;-1:-1:-1;890:6100:137;;;-1:-1:-1;890:6100:137;;;;;;;742:28:138;890:6100:137;;;742:28:138;890:6100:137;;;;;;;780:30:138;890:6100:137;;;780:30:138;890:6100:137;;;;;;;1754:26;890:6100;;;1754:26;890:6100;;;;;;;1790:28;890:6100;;;1790:28;890:6100;;;;;;;1828:30;890:6100;;;1828:30;890:6100;;;;;;;1868:32;890:6100;;;1868:32;890:6100;;;;;;;1910:28;890:6100;;;1910:28;890:6100;;;;;;;1948:30;890:6100;;;1948:30;890:6100;;;;;;;;;;;-1:-1:-1;890:6100:137;;;;;;-1:-1:-1;890:6100:137;;;;;-1:-1:-1;890:6100:137",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610012575f80fd5b5f3560e01c90816341b81d5814610a8a575080635f19ead1146109cf5780636590e21b146108b5578063793d455d146105aa578063cb9d3a57146103c6578063e32aa46314610389578063ebb48d901461025f5763eff69b5e14610074575f80fd5b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd576101486100ee60206100de61012082955f98899161023d575b500151828082518301019101610f62565b0151838082518301019101610e94565b6002546040805163446c5bf160e11b815283516001600160a01b03908116600483015260208501516024830152939091015183166044820152336064820181905260848201529586939290911691839190829060a4820190565b03925af19182156101fd575f92610208575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916101bf575b50156101b057602090604051908152f35b63a97a981d60e01b5f5260045ffd5b90506020813d6020116101f5575b816101da60209383610cfd565b810103126101f1576101eb90610d46565b5f61019f565b5f80fd5b3d91506101cd565b6040513d5f823e3d90fd5b9091506020813d602011610235575b8161022460209383610cfd565b810103126101f1575190602061015a565b3d9150610217565b61025991503d808b833e6102518183610cfd565b810190610da8565b5f6100cd565b346101f15761033a602061027236610c75565b60015460025460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b60018060a01b03168252878201523360408201526102e5604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b606081526102f4608082610cfd565b6040519361030185610cc7565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b03925af180156101fd575f90610356575b602090604051908152f35b506020813d602011610381575b8161037060209383610cfd565b810103126101f1576020905161034b565b3d9150610363565b346101f15761033a602061039c36610c75565b60015460035460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b346101f15760803660031901126101f1576103df610c4b565b604435906001600160401b0382116101f1578160040161010060031984360301126101f157606435906001600160401b03821682036101f15761033a9360209361053661056160018060a01b03600154169460018060a01b0360085416946040519384928a808501526105236105186104f96104da6104bb61049c61047d8a604061010061046d8b806110bb565b92909301526101408d01916110ef565b61048a60248b01896110bb565b8c8303603f190160608e01529061112e565b6104a960448a01886110bb565b8b8303603f190160808d0152906110ef565b6104c860648901876110bb565b8a8303603f190160a08c01529061112e565b6104e760848801866110bb565b898303603f190160c08b0152906110ef565b61050660a48701856110bb565b888303603f190160e08a01529061112e565b9160c48501906110bb565b858303603f19016101008701529061112e565b906001600160a01b039061054c9060e401610c61565b1661012083015203601f198101835282610cfd565b6040519261056e84610cc7565b83528583015260018060a01b0316604082015260243560608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b346101f15760203660031901126101f15760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa80156101fd57610120915f9161089b575b500151908151820160208101926020818303126101f1576020810151906001600160401b0382116101f157019061012090829003126101f1576040519261012084018481106001600160401b038211176108875760405261065860208301610d32565b845260408201516001600160401b0381116101f15781602061067c92850101610d53565b906020850191825260608301516001600160401b0381116101f1578160206106a692860101610ff9565b604086015260808301516001600160401b0381116101f1578160206106cd9286010161105e565b606086015260a08301516001600160401b0381116101f1578160206106f492860101610ff9565b608086015260c08301516001600160401b0381116101f15781602061071b9286010161105e565b60a086015260e08301516001600160401b0381116101f15781602061074292860101610ff9565b60c08601526101008301516001600160401b0381116101f15781602061076a9286010161105e565b60e0860152610120830151916001600160401b0383116101f1575f9561010061079f6100ee9460206107b1978199010161105e565b91015251838082518301019101610e94565b03925af19182156101fd575f92610852575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b90506020813d60201161084a575b8161083360209383610cfd565b810103126101f15761084490610d46565b8261019f565b3d9150610826565b9091506020813d60201161087f575b8161086e60209383610cfd565b810103126101f157519060206107c3565b3d9150610861565b634e487b7160e01b5f52604160045260245ffd5b6108af91503d805f833e6102518183610cfd565b836105f5565b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd5761091e6100ee60206100de61012082955f9889916109b557500151828082518301019101610f62565b03925af19182156101fd575f92610980575b5060205f91604460018060a01b0360045416916040519485938492632c713cd960e01b845260048401528760248401525af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d6020116109ad575b8161099c60209383610cfd565b810103126101f15751906020610930565b3d915061098f565b6109c991503d808b833e6102518183610cfd565b896100cd565b346101f15760c03660031901126101f1576109e8610c4b565b6044356001600160a01b038116908190036101f15760a4356001600160401b03811681036101f15760015460065460405161033a956020956001600160a01b0394851694909316929091610a3b81610cc7565b8181528681019060643582526060604082019160843583520191338352604051938985015251604084015251606083015260018060a01b0390511660808201526080815261056160a082610cfd565b346101f15760203660031901126101f157600435905f8160248160018060a01b038454166328c44a9960e21b82528660048301525afa80156101fd57610120915f91610c31575b5001519081518201916020818403126101f1576020810151906001600160401b0382116101f157019160a0838203126101f1576040519060a082018281106001600160401b0382111761088757604052610b2d60208501610d32565b825260408401516001600160401b0381116101f1575f94602093608060a0610b626100ee958880610b95990191870101610d53565b938488850152610b7460608201610d32565b60408501528281015160608501520151910152838082518301019101610e94565b03925af19182156101fd575f92610bfc575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d602011610c29575b81610c1860209383610cfd565b810103126101f15751906020610ba7565b3d9150610c0b565b610c4591503d805f833e6102518183610cfd565b83610ad1565b600435906001600160a01b03821682036101f157565b35906001600160a01b03821682036101f157565b60a09060031901126101f1576004356001600160a01b03811681036101f15790602435906044356001600160a01b03811681036101f15790606435906084356001600160401b03811681036101f15790565b608081019081106001600160401b0382111761088757604052565b606081019081106001600160401b0382111761088757604052565b90601f801991011681019081106001600160401b0382111761088757604052565b51906001600160401b03821682036101f157565b51906001600160a01b03821682036101f157565b519081151582036101f157565b81601f820112156101f1578051906001600160401b0382116108875760405192610d87601f8401601f191660200185610cfd565b828452602083830101116101f157815f9260208093018386015e8301015290565b6020818303126101f1578051906001600160401b0382116101f15701610140818303126101f1576040519161014083018381106001600160401b03821117610887576040528151835260208201516020840152610e0760408301610d1e565b6040840152610e1860608301610d1e565b6060840152610e2960808301610d1e565b608084015260a082015160a0840152610e4460c08301610d32565b60c0840152610e5560e08301610d32565b60e0840152610e676101008301610d46565b6101008401526101208201516001600160401b0381116101f157610e8b9201610d53565b61012082015290565b908160609103126101f157610ecb6040805192610eb084610ce2565b610eb981610d32565b84526020810151602085015201610d32565b604082015290565b926001600160401b036101206020606080969998956080895260018060a01b0381511660808a015282810151608060a08b01528051938491826101008d015201858b015e5f84848b01015260018060a01b0360408201511660c08a0152015160e0880152601f80199101168601019616602085015260018060a01b0316604084015260018060a01b0316910152565b6020818303126101f1578051906001600160401b0382116101f15701906080828203126101f15760405191610f9683610cc7565b610f9f81610d32565b835260208101516001600160401b0381116101f157606092610fc2918301610d53565b6020840152610fd360408201610d32565b60408401520151606082015290565b6001600160401b0381116108875760051b60200190565b9080601f830112156101f157815161101081610fe2565b9261101e6040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110465750505090565b6020809161105384610d32565b815201910190611039565b9080601f830112156101f157815161107581610fe2565b926110836040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110ab5750505090565b815181526020918201910161109e565b9035601e19823603018112156101f15701602081359101916001600160401b0382116101f1578160051b360383136101f157565b916020908281520191905f5b8181106111085750505090565b909192602080600192838060a01b0361112088610c61565b1681520194019291016110fb565b81835290916001600160fb1b0383116101f15760209260051b80928483013701019056fea2646970667358221220bd4a5515b4ca04c12e937ca0ac3a643f5907254213dba14e47cb23cd007f328a64736f6c634300081b0033",
    sourceMap: "890:6100:137:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:204;890:6100;2495:204;;;890:6100;1330:207:138;;;890:6100:137;;;;;;;;;-1:-1:-1;;890:6100:137;;;;2699:34:138;890:6100:137;;;;;;;;;;;;;;;;;;;;2699:34:138;;;890:6100:137;2699:34:138;;890:6100:137;2699:34:138;;;;;;1881:107;2961:105;890:6100:137;2801:95:138;2825:8;2699:34;;890:6100:137;2699:34:138;;;;;890:6100:137;2825:8:138;;;890:6100:137;;;;2801:95:138;;;;;;:::i;:::-;2985:17;;890:6100:137;;;;2961:105:138;;;;;;:::i;:::-;1881:13;890:6100:137;;;;-1:-1:-1;;;1881:107:138;;890:6100:137;;-1:-1:-1;;;;;890:6100:137;;;;1881:107:138;;890:6100:137;;;;;;;;;;;;;;;;;;;;1944:10:138;890:6100:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;1881:107:138;;;;;;;;;;890:6100:137;1881:107:138;;;890:6100:137;-1:-1:-1;890:6100:137;;;;-1:-1:-1;;;2004:59:138;;890:6100:137;2004:59:138;;890:6100:137;;;;2699:34:138;890:6100:137;;;;;;;;;2004:59:138;;890:6100:137;;;;-1:-1:-1;;;;;890:6100:137;2004:59:138;;;;;;;890:6100:137;2004:59:138;;;890:6100:137;2003:60:138;;1999:120;;890:6100:137;;;;;;;;1999:120:138;5982:22:137;;;890:6100;2086:22:138;890:6100:137;;2086:22:138;2004:59;;;890:6100:137;2004:59:138;;890:6100:137;2004:59:138;;;;;;890:6100:137;2004:59:138;;;:::i;:::-;;;890:6100:137;;;;;;;:::i;:::-;2004:59:138;;;890:6100:137;;;;2004:59:138;;;-1:-1:-1;2004:59:138;;;890:6100:137;;;;;;;;;1881:107:138;;;;890:6100:137;1881:107:138;;890:6100:137;1881:107:138;;;;;;890:6100:137;1881:107:138;;;:::i;:::-;;;890:6100:137;;;;;;;1881:107:138;;;;;-1:-1:-1;1881:107:138;;2699:34;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;890:6100:137;;;;1049:627:138;1330:207;890:6100:137;;;:::i;:::-;;;1250:13:138;890:6100:137;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1330:207:138;;;890:6100:137;1500:10:138;890:6100:137;1330:207:138;;890:6100:137;;;;1294:265:138;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1294:265:138;;;;;;:::i;:::-;890:6100:137;;;;;;:::i;:::-;;;1095:483:138;;;890:6100:137;;;;;;;;1095:483:138;;890:6100:137;;1095:483:138;;890:6100:137;;;;;;;;;;;;;1049:627:138;;1500:10;;;1049:627;890:6100:137;1049:627:138;;;:::i;:::-;;;;;;;;;890:6100:137;1049:627:138;;;890:6100:137;1330:207:138;890:6100:137;;;;;;;1049:627:138;;1330:207;1049:627;;1330:207;1049:627;;;;;;890:6100:137;1049:627:138;;;:::i;:::-;;;890:6100:137;;;;1330:207:138;890:6100:137;;1049:627:138;;;;;-1:-1:-1;1049:627:138;;890:6100:137;;;;2215:623;2495:204;890:6100;;;:::i;:::-;;;2416:12;890:6100;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;890:6100:137;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;4036:381;890:6100;;;;4281:19;890:6100;;;;;;;;;;;;;;4237:13;890:6100;;;;;4281:19;;;;;;;890:6100;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:137;;;;;;;:::i;:::-;;-1:-1:-1;;;;;890:6100:137;;;;;;:::i;:::-;;;;;;4281:19;890:6100;;4281:19;;;;;;:::i;:::-;890:6100;;;;;;:::i;:::-;;;4082:237;;;890:6100;;;;;;;;4082:237;;890:6100;;;;4082:237;;890:6100;;;;;;;;;;;;;4036:381;;4365:10;;;4036:381;890:6100;4036:381;;;:::i;890:6100::-;;;;;;-1:-1:-1;;890:6100:137;;;;;;6188:34;890:6100;;;;;;;;;;;;;;;;;;6188:34;;;890:6100;6188:34;;890:6100;6188:34;;;;;;6319:8;6188:34;890:6100;6188:34;;;890:6100;6319:8;;;890:6100;;;6295:79;;890:6100;6295:79;;890:6100;;;;;;;;;6295:79;;890:6100;;-1:-1:-1;;;;;890:6100:137;;;;;;6319:8;890:6100;;;;;;;;;;6319:8;890:6100;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;6319:8;890:6100;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;6439:105;890:6100;;6581:107;890:6100;;;;;;:::i;:::-;;;;6463:17;890:6100;;;;6439:105;;;;;;:::i;6581:107::-;;;;;;;;;;890:6100;6581:107;;;890:6100;-1:-1:-1;6834:12:137;890:6100;;;-1:-1:-1;;;6834:59:137;;890:6100;6834:59;;890:6100;;;;6188:34;890:6100;;;;;;;;;6834:59;;890:6100;;;;-1:-1:-1;;;;;890:6100:137;6834:59;;;;;;;890:6100;6834:59;;;6833:60;;6829:120;;890:6100;;;;;;;;6834:59;;;890:6100;6834:59;;890:6100;6834:59;;;;;;890:6100;6834:59;;;:::i;:::-;;;890:6100;;;;;;;:::i;:::-;6834:59;;;;;;-1:-1:-1;6834:59:137;;6581:107;;;;890:6100;6581:107;;890:6100;6581:107;;;;;;890:6100;6581:107;;;:::i;:::-;;;890:6100;;;;;;;6581:107;;;;;-1:-1:-1;6581:107:137;;890:6100;;;;;;;;;6188:34;890:6100;;6188:34;;;;;;890:6100;6188:34;;;;;;:::i;:::-;;;;890:6100;;;;;;-1:-1:-1;;890:6100:137;;;;4557:34;890:6100;;;;;;;;;;;;;;;;;;;;4557:34;;;890:6100;4557:34;;890:6100;4557:34;;;;;;4959:107;4817:105;890:6100;4658:94;4682:8;4557:34;;890:6100;4557:34;;;;;4682:8;;;890:6100;;;;4658:94;;;;;;:::i;4959:107::-;;;;;;;;;;890:6100;4959:107;;;890:6100;;;;;5082:58;890:6100;;;;;;;;;;;;;;;;;;;5082:58;;890:6100;5082:58;;890:6100;;4557:34;890:6100;;;5082:58;;;;;;;890:6100;5082:58;;;5081:59;;5077:119;;890:6100;;;;;;;;4959:107;;;;890:6100;4959:107;;890:6100;4959:107;;;;;;890:6100;4959:107;;;:::i;:::-;;;890:6100;;;;;;;4959:107;;;;;-1:-1:-1;4959:107:137;;4557:34;;;;;;;;;;;;;:::i;:::-;;;;890:6100;;;;;;-1:-1:-1;;890:6100:137;;;;;;:::i;:::-;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;3306:14;890:6100;;;3105:676;;890:6100;;-1:-1:-1;;;;;890:6100:137;;;;;;;;3105:676;;890:6100;;;:::i;:::-;;;;3387:255;;;890:6100;;;;;;;3387:255;;890:6100;;;;;3387:255;3605:10;;890:6100;;;;3351:313;;;;890:6100;;;;;;;;;;;;;;;;;;;;;;;;3351:313;;;890:6100;3351:313;;:::i;890:6100::-;;;;;;-1:-1:-1;;890:6100:137;;;;;;;;;5370:34;890:6100;;;;;;;;;;;;5370:34;;;890:6100;5370:34;;890:6100;5370:34;;;;;;5497:8;5370:34;890:6100;5370:34;;;890:6100;5497:8;;;890:6100;;;5473:96;;890:6100;;;;;;;;;5473:96;;890:6100;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;5473:96;890:6100;5473:96;890:6100;;;5634:105;5473:96;;;5776:107;5473:96;;890:6100;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;5634:105;;;;;;:::i;5776:107::-;;;;;;;;;;890:6100;5776:107;;;890:6100;-1:-1:-1;5899:13:137;890:6100;;;-1:-1:-1;;;5899:60:137;;890:6100;5899:60;;890:6100;;;;5370:34;890:6100;;;;;;;;;5899:60;;890:6100;;;;-1:-1:-1;;;;;890:6100:137;5899:60;;;;;;;890:6100;5899:60;;;5898:61;;5894:121;;890:6100;;;;;;;;5776:107;;;;890:6100;5776:107;;890:6100;5776:107;;;;;;890:6100;5776:107;;;:::i;:::-;;;890:6100;;;;;;;5776:107;;;;;-1:-1:-1;5776:107:137;;5370:34;;;;;;890:6100;5370:34;;;;;;:::i;:::-;;;;890:6100;;;;-1:-1:-1;;;;;890:6100:137;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:137;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:137;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:137;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;-1:-1:-1;;890:6100:137;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;890:6100:137;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;890:6100:137;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;890:6100:137;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:137;;;;;;;;;;;;;;;;;:::o",
    linkReferences: {}
  },
  methodIdentifiers: {
    "buyBundleWithErc721(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "cb9d3a57",
    "buyErc1155WithErc721(address,uint256,address,uint256,uint256,uint64)": "5f19ead1",
    "buyErc20WithErc721(address,uint256,address,uint256,uint64)": "e32aa463",
    "buyErc721ForErc721(address,uint256,address,uint256,uint64)": "ebb48d90",
    "payErc721ForBundle(bytes32)": "793d455d",
    "payErc721ForErc1155(bytes32)": "41b81d58",
    "payErc721ForErc20(bytes32)": "6590e21b",
    "payErc721ForErc721(bytes32)": "eff69b5e"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155WithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20WithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC721BarterCrossToken.sol":"ERC721BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3","license":"UNLICENSED","urls":["bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10","dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f","license":"UNLICENSED","urls":["bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a","dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a","license":"UNLICENSED","urls":["bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7","dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4","license":"UNLICENSED","urls":["bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258","dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"]},"src/utils/ERC721BarterCrossToken.sol":{"keccak256":"0x51a68dd4171b10ef1f8534bbfbf2d4eece50dcab9fa46b90f42db67338ca60a6","license":"UNLICENSED","urls":["bzz-raw://4d457fe050c936a744b4ebe6478df4e91a065b78905332d3e65511bf50536bbf","dweb:/ipfs/Qmb1qVJibEau7yXL6XedSjoL5gyjNcppr2uheXHpEQy4qf"]},"src/utils/ERC721BarterUtils.sol":{"keccak256":"0x8becdb37d17cde0d5685fe7c135465371575bc2a60ce2cc676782b049d8831cd","license":"UNLICENSED","urls":["bzz-raw://0687d4639ba541092f43d79cbdbfdef276c43a5158a586954f03e9555b0399a8","dweb:/ipfs/Qma1MjADJGGtd5NfFyNVv9UNs1ozxQNz1nbyjwZvjngpyg"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ERC20EscrowObligation",
              name: "_erc20Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC20PaymentObligation",
              name: "_erc20Payment",
              type: "address"
            },
            {
              internalType: "contract ERC721EscrowObligation",
              name: "_erc721Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC721PaymentObligation",
              name: "_erc721Payment",
              type: "address"
            },
            {
              internalType: "contract ERC1155EscrowObligation",
              name: "_erc1155Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC1155PaymentObligation",
              name: "_erc1155Payment",
              type: "address"
            },
            {
              internalType: "contract TokenBundleEscrowObligation",
              name: "_bundleEscrow",
              type: "address"
            },
            {
              internalType: "contract TokenBundlePaymentObligation",
              name: "_bundlePayment",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "CouldntCollectEscrow"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askData",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyBundleWithErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askTokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc1155WithErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc20WithErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askTokenId",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc721ForErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc721ForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc721ForErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc721ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc721ForErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/utils/ERC721BarterCrossToken.sol": "ERC721BarterCrossToken"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        keccak256: "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        urls: [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        keccak256: "0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3",
        urls: [
          "bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10",
          "dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        keccak256: "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        urls: [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        keccak256: "0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f",
        urls: [
          "bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a",
          "dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        keccak256: "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        urls: [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        keccak256: "0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a",
        urls: [
          "bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7",
          "dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        keccak256: "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        urls: [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        keccak256: "0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4",
        urls: [
          "bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258",
          "dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC721BarterCrossToken.sol": {
        keccak256: "0x51a68dd4171b10ef1f8534bbfbf2d4eece50dcab9fa46b90f42db67338ca60a6",
        urls: [
          "bzz-raw://4d457fe050c936a744b4ebe6478df4e91a065b78905332d3e65511bf50536bbf",
          "dweb:/ipfs/Qmb1qVJibEau7yXL6XedSjoL5gyjNcppr2uheXHpEQy4qf"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC721BarterUtils.sol": {
        keccak256: "0x8becdb37d17cde0d5685fe7c135465371575bc2a60ce2cc676782b049d8831cd",
        urls: [
          "bzz-raw://0687d4639ba541092f43d79cbdbfdef276c43a5158a586954f03e9555b0399a8",
          "dweb:/ipfs/Qma1MjADJGGtd5NfFyNVv9UNs1ozxQNz1nbyjwZvjngpyg"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 137
};

// src/contracts/ERC721PaymentObligation.ts
var abi43 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC721PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC721PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC721PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC721PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "PaymentMade",
      inputs: [
        {
          name: "payment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC721TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x61016080604052346101d3576040816115e68038038091610020828561020d565b8339810103126101d35780516001600160a01b038116918282036101d35760200151916001600160a01b0383168084036101d357604051606081016001600160401b038111828210176101f957604052602d815260208101927f6164647265737320746f6b656e2c2075696e7432353620746f6b656e49642c2084526c6164647265737320706179656560981b60408301526001608052600360a0525f60c052156101ea576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101df575f916101a9575b50610140526040516113b5908161023182396080518161099e015260a051816109c9015260c051816109f4015260e05181611313015261010051816108200152610120518181816104a201526110ca01526101405181818161025d015281816104da015281816107ee0152818161095c015261101d0152f35b90506020813d6020116101d7575b816101c46020938361020d565b810103126101d357515f610130565b5f80fd5b3d91506101b7565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176101f95760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d501461097f5780635bf2f20d146109455780636b122fe0146107af57806388d8b7e21461074757806388e5b2d91461072857806391db0b7e146107285780639b28978c14610683578063b3b902d414610638578063c6ec50701461041f578063c93844be146103a2578063ce46e04614610388578063e49617e114610363578063e60c350514610363578063e6c9714d146101455763f0ffa1850361000e57346101415760a0366003190112610141576004356001600160401b03811161014157610100903690600401610b4b565b90610109610b78565b604435929091906001600160a01b0384168403610141576020936101399361012f610aa1565b9260843594610ed6565b604051908152f35b5f80fd5b34610141576060366003190112610141576004356001600160401b038111610141576101406003198236030112610141576040519061018382610c05565b806004013582526020820190602481013582526101a260448201610b8e565b60408401526101b360648201610b8e565b606084019081526101c660848301610b8e565b916080850192835260a481013560a08601526101e460c48201610ab7565b60c08601526101f560e48201610ab7565b60e08601526101048101358015158103610141576101008601526101248101356001600160401b038111610141576101209160046102369236920101610cae565b94019384526024356001600160401b0381116101415761025a903690600401610cae565b927f000000000000000000000000000000000000000000000000000000000000000090510361035457516001600160401b0316801515908161034a575b5061033b57516001600160401b031661032c576102d16102c260209351848082518301019101610e60565b91838082518301019101610e60565b815181516001600160a01b03908116911614918261031c575b826102fc575b50506040519015158152f35b6040908101519101516001600160a01b03908116911614905082806102f0565b83810151828501511492506102ea565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610297565b635f9bd90760e11b5f5260045ffd5b602061037e61037136610ba2565b610379611311565b611352565b6040519015158152f35b34610141575f3660031901126101415760206040515f8152f35b34610141576020366003190112610141576004356001600160401b038111610141576103e96103d861041b923690600401610b4b565b6103e0610e2e565b50810190610e9f565b6040805182516001600160a01b0390811682526020808501519083015292820151909216908201529081906060820190565b0390f35b3461014157602036600319011261014157610438610e2e565b50606061012060405161044a81610c05565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561062d575f91610528575b5060208101517f000000000000000000000000000000000000000000000000000000000000000003610519576103e961012061041b92015160208082518301019101610e60565b635527981560e11b5f5260045ffd5b90503d805f833e6105398183610c3c565b810190602081830312610141578051906001600160401b03821161014157019061014082820312610141576040519161057183610c05565b805183526020810151602084015261058b6040820161136b565b604084015261059c6060820161136b565b60608401526105ad6080820161136b565b608084015260a081015160a08401526105c860c08201610e4c565b60c08401526105d960e08201610e4c565b60e08401526105eb6101008201610ccc565b610100840152610120810151906001600160401b03821161014157019080601f8301121561014157815161062192602001610cd9565b610120820152816104d2565b6040513d5f823e3d90fd5b34610141576060366003190112610141576004356001600160401b0381116101415761013961066d6020923690600401610b4b565b610675610b78565b916044359233923392610ed6565b34610141576060366003190112610141576106d760206040516106b9816106ab848201610d0f565b03601f198101835282610c3c565b6040518093819263f0ffa18560e01b83523390339060048501610d50565b03815f305af1801561062d575f906106f5575b602090604051908152f35b506020813d602011610720575b8161070f60209383610c3c565b8101031261014157602090516106ea565b3d9150610702565b602061037e61073636610afb565b92610742929192611311565b610d8a565b3461014157366003190160a081126101415760601361014157610768610aa1565b608435906001600160a01b038216820361014157602090604051610791816106ab858201610d0f565b6106d7604051948593849363f0ffa18560e01b855260048501610d50565b34610141575f366003190112610141576060806040516107ce81610bd6565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561062d575f90610895575b60609061041b604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a7d565b503d805f833e6108a58183610c3c565b810190602081830312610141578051906001600160401b038211610141570160808183031261014157604051906108db82610bd6565b8051825260208101516001600160a01b038116810361014157602083015261090560408201610ccc565b60408301526060810151906001600160401b038211610141570182601f820112156101415760609281602061093c93519101610cd9565b8282015261084f565b34610141575f3660031901126101415760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610141575f3660031901126101415761041b6020610a6d60016109c27f00000000000000000000000000000000000000000000000000000000000000006111a4565b81846109ed7f00000000000000000000000000000000000000000000000000000000000000006111a4565b8180610a187f00000000000000000000000000000000000000000000000000000000000000006111a4565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c3c565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b6040600319820112610141576004356001600160401b0381116101415781610b2591600401610acb565b92909291602435906001600160401b03821161014157610b4791600401610acb565b9091565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b602435906001600160401b038216820361014157565b35906001600160401b038216820361014157565b602060031982011261014157600435906001600160401b038211610141576101409082900360031901126101415760040190565b608081019081106001600160401b03821117610bf157604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610bf157604052565b606081019081106001600160401b03821117610bf157604052565b90601f801991011681019081106001600160401b03821117610bf157604052565b6001600160401b038111610bf157601f01601f191660200190565b929192610c8482610c5d565b91610c926040519384610c3c565b829481845281830111610141578281602093845f960137010152565b9080601f8301121561014157816020610cc993359101610c78565b90565b5190811515820361014157565b929192610ce582610c5d565b91610cf36040519384610c3c565b829481845281830111610141578281602093845f96015e010152565b6060810191906004356001600160a01b0381169081900361014157815260243560208201526044356001600160a01b03811691908290036101415760400152565b5f929493610d6860809360a0845260a0840190610a7d565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e1f575f91345b85841015610e145781841015610e00578360051b8086013590828211610df15784013561013e198536030181121561014157610dd5908501611352565b15610de65760019103930192610d98565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e3b82610c21565b5f6040838281528260208201520152565b51906001600160a01b038216820361014157565b9081606091031261014157610e976040805192610e7c84610c21565b610e8581610e4c565b84526020810151602085015201610e4c565b604082015290565b9081606091031261014157610e976040805192610ebb84610c21565b610ec481610ab7565b84526020810135602085015201610ab7565b939195909495610ee886860186610e9f565b928351975f9860018060a01b031696604086019860018060a01b038a5116986020880198895190823b156101415760405192839283926323b872dd60e01b8452600160a01b60019003169d8e6004850152602484015260448301525a925f6064928195f1908161118f575b50610f955786518a51895160405163045b391760e01b81526001600160a01b039384166004820152602481018d90529290911660448301526064820152608490fd5b9296509296509350610faa9296503691610c78565b906040519260c084018481106001600160401b0382111761117b57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a0820152604051604081018181106001600160401b0382111761116757906020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a06110bc608083015160c060e4860152610124850190610a7d565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561115c57849161112a575b507f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad05819480a3565b90506020813d602011611154575b8161114560209383610c3c565b8101031261014157515f611102565b3d9150611138565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526041600452602488fd5b61119c919c505f90610c3c565b5f9a5f610f53565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156112ee575b806d04ee2d6d415b85acef8100000000600a9210156112d3575b662386f26fc100008110156112bf575b6305f5e1008110156112ae575b61271081101561129f575b6064811015611291575b1015611286575b600a6021600184019361122b85610c5d565b946112396040519687610c3c565b808652611248601f1991610c5d565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561128157600a9091611253565b505090565b600190910190611219565b606460029104930192611212565b61271060049104930192611208565b6305f5e100600891049301926111fd565b662386f26fc10000601091049301926111f0565b6d04ee2d6d415b85acef8100000000602091049301926111e0565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046111c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361134357565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361014157301490565b51906001600160401b03821682036101415756fea2646970667358221220382f7999b3c15b5aee8d1fe3da973a5fcbd97e2ec2f6e45cc3070e13876ae42964736f6c634300081b0033",
    sourceMap: "514:3366:126:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;514:3366:126;;;;1151:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;514:3366:126;790:10:9;;514:3366:126;790:10:9;;;789::77;;809:32;;-1:-1:-1;514:3366:126;;;;;;;;;;;872:48:77;;514:3366:126;872:48:77;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;904:4:77;514:3366:126;;;;1151:4;514:3366;;;;;;-1:-1:-1;;514:3366:126;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;514:3366:126;;;;;;;;759:14:6;514:3366:126;;;;;783:14:6;514:3366:126;;;;;807:14:6;514:3366:126;;;;;790:10:9;514:3366:126;;;;;809:32:77;514:3366:126;;;;;789:10:77;514:3366:126;;;;;;;;;;851:69:77;514:3366:126;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;514:3366:126;872:48:77;;514:3366:126;872:48:77;;;;;;514:3366:126;872:48:77;;;:::i;:::-;;;514:3366:126;;;;;872:48:77;;;514:3366:126;-1:-1:-1;514:3366:126;;872:48:77;;;-1:-1:-1;872:48:77;;;514:3366:126;;;-1:-1:-1;514:3366:126;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;514:3366:126;;;;-1:-1:-1;514:3366:126;;;;;-1:-1:-1;514:3366:126;;;;;;-1:-1:-1;;514:3366:126;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d501461097f5780635bf2f20d146109455780636b122fe0146107af57806388d8b7e21461074757806388e5b2d91461072857806391db0b7e146107285780639b28978c14610683578063b3b902d414610638578063c6ec50701461041f578063c93844be146103a2578063ce46e04614610388578063e49617e114610363578063e60c350514610363578063e6c9714d146101455763f0ffa1850361000e57346101415760a0366003190112610141576004356001600160401b03811161014157610100903690600401610b4b565b90610109610b78565b604435929091906001600160a01b0384168403610141576020936101399361012f610aa1565b9260843594610ed6565b604051908152f35b5f80fd5b34610141576060366003190112610141576004356001600160401b038111610141576101406003198236030112610141576040519061018382610c05565b806004013582526020820190602481013582526101a260448201610b8e565b60408401526101b360648201610b8e565b606084019081526101c660848301610b8e565b916080850192835260a481013560a08601526101e460c48201610ab7565b60c08601526101f560e48201610ab7565b60e08601526101048101358015158103610141576101008601526101248101356001600160401b038111610141576101209160046102369236920101610cae565b94019384526024356001600160401b0381116101415761025a903690600401610cae565b927f000000000000000000000000000000000000000000000000000000000000000090510361035457516001600160401b0316801515908161034a575b5061033b57516001600160401b031661032c576102d16102c260209351848082518301019101610e60565b91838082518301019101610e60565b815181516001600160a01b03908116911614918261031c575b826102fc575b50506040519015158152f35b6040908101519101516001600160a01b03908116911614905082806102f0565b83810151828501511492506102ea565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610297565b635f9bd90760e11b5f5260045ffd5b602061037e61037136610ba2565b610379611311565b611352565b6040519015158152f35b34610141575f3660031901126101415760206040515f8152f35b34610141576020366003190112610141576004356001600160401b038111610141576103e96103d861041b923690600401610b4b565b6103e0610e2e565b50810190610e9f565b6040805182516001600160a01b0390811682526020808501519083015292820151909216908201529081906060820190565b0390f35b3461014157602036600319011261014157610438610e2e565b50606061012060405161044a81610c05565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561062d575f91610528575b5060208101517f000000000000000000000000000000000000000000000000000000000000000003610519576103e961012061041b92015160208082518301019101610e60565b635527981560e11b5f5260045ffd5b90503d805f833e6105398183610c3c565b810190602081830312610141578051906001600160401b03821161014157019061014082820312610141576040519161057183610c05565b805183526020810151602084015261058b6040820161136b565b604084015261059c6060820161136b565b60608401526105ad6080820161136b565b608084015260a081015160a08401526105c860c08201610e4c565b60c08401526105d960e08201610e4c565b60e08401526105eb6101008201610ccc565b610100840152610120810151906001600160401b03821161014157019080601f8301121561014157815161062192602001610cd9565b610120820152816104d2565b6040513d5f823e3d90fd5b34610141576060366003190112610141576004356001600160401b0381116101415761013961066d6020923690600401610b4b565b610675610b78565b916044359233923392610ed6565b34610141576060366003190112610141576106d760206040516106b9816106ab848201610d0f565b03601f198101835282610c3c565b6040518093819263f0ffa18560e01b83523390339060048501610d50565b03815f305af1801561062d575f906106f5575b602090604051908152f35b506020813d602011610720575b8161070f60209383610c3c565b8101031261014157602090516106ea565b3d9150610702565b602061037e61073636610afb565b92610742929192611311565b610d8a565b3461014157366003190160a081126101415760601361014157610768610aa1565b608435906001600160a01b038216820361014157602090604051610791816106ab858201610d0f565b6106d7604051948593849363f0ffa18560e01b855260048501610d50565b34610141575f366003190112610141576060806040516107ce81610bd6565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561062d575f90610895575b60609061041b604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a7d565b503d805f833e6108a58183610c3c565b810190602081830312610141578051906001600160401b038211610141570160808183031261014157604051906108db82610bd6565b8051825260208101516001600160a01b038116810361014157602083015261090560408201610ccc565b60408301526060810151906001600160401b038211610141570182601f820112156101415760609281602061093c93519101610cd9565b8282015261084f565b34610141575f3660031901126101415760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610141575f3660031901126101415761041b6020610a6d60016109c27f00000000000000000000000000000000000000000000000000000000000000006111a4565b81846109ed7f00000000000000000000000000000000000000000000000000000000000000006111a4565b8180610a187f00000000000000000000000000000000000000000000000000000000000000006111a4565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c3c565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b6040600319820112610141576004356001600160401b0381116101415781610b2591600401610acb565b92909291602435906001600160401b03821161014157610b4791600401610acb565b9091565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b602435906001600160401b038216820361014157565b35906001600160401b038216820361014157565b602060031982011261014157600435906001600160401b038211610141576101409082900360031901126101415760040190565b608081019081106001600160401b03821117610bf157604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610bf157604052565b606081019081106001600160401b03821117610bf157604052565b90601f801991011681019081106001600160401b03821117610bf157604052565b6001600160401b038111610bf157601f01601f191660200190565b929192610c8482610c5d565b91610c926040519384610c3c565b829481845281830111610141578281602093845f960137010152565b9080601f8301121561014157816020610cc993359101610c78565b90565b5190811515820361014157565b929192610ce582610c5d565b91610cf36040519384610c3c565b829481845281830111610141578281602093845f96015e010152565b6060810191906004356001600160a01b0381169081900361014157815260243560208201526044356001600160a01b03811691908290036101415760400152565b5f929493610d6860809360a0845260a0840190610a7d565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e1f575f91345b85841015610e145781841015610e00578360051b8086013590828211610df15784013561013e198536030181121561014157610dd5908501611352565b15610de65760019103930192610d98565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e3b82610c21565b5f6040838281528260208201520152565b51906001600160a01b038216820361014157565b9081606091031261014157610e976040805192610e7c84610c21565b610e8581610e4c565b84526020810151602085015201610e4c565b604082015290565b9081606091031261014157610e976040805192610ebb84610c21565b610ec481610ab7565b84526020810135602085015201610ab7565b939195909495610ee886860186610e9f565b928351975f9860018060a01b031696604086019860018060a01b038a5116986020880198895190823b156101415760405192839283926323b872dd60e01b8452600160a01b60019003169d8e6004850152602484015260448301525a925f6064928195f1908161118f575b50610f955786518a51895160405163045b391760e01b81526001600160a01b039384166004820152602481018d90529290911660448301526064820152608490fd5b9296509296509350610faa9296503691610c78565b906040519260c084018481106001600160401b0382111761117b57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a0820152604051604081018181106001600160401b0382111761116757906020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a06110bc608083015160c060e4860152610124850190610a7d565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561115c57849161112a575b507f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad05819480a3565b90506020813d602011611154575b8161114560209383610c3c565b8101031261014157515f611102565b3d9150611138565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526041600452602488fd5b61119c919c505f90610c3c565b5f9a5f610f53565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156112ee575b806d04ee2d6d415b85acef8100000000600a9210156112d3575b662386f26fc100008110156112bf575b6305f5e1008110156112ae575b61271081101561129f575b6064811015611291575b1015611286575b600a6021600184019361122b85610c5d565b946112396040519687610c3c565b808652611248601f1991610c5d565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561128157600a9091611253565b505090565b600190910190611219565b606460029104930192611212565b61271060049104930192611208565b6305f5e100600891049301926111fd565b662386f26fc10000601091049301926111f0565b6d04ee2d6d415b85acef8100000000602091049301926111e0565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046111c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361134357565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361014157301490565b51906001600160401b03821682036101415756fea2646970667358221220382f7999b3c15b5aee8d1fe3da973a5fcbd97e2ec2f6e45cc3070e13876ae42964736f6c634300081b0033",
    sourceMap: "514:3366:126:-:0;;;;;;;;;-1:-1:-1;514:3366:126;;;;;;;;1183:12:9;;;1054:5;1183:12;514:3366:126;1054:5:9;1183:12;514:3366:126;;;;;;;;;;;;;;;;;;;;;;;;;1688:16;514:3366;1688:16;;;514:3366;;;;;;;;;;1311:16;514:3366;1311:16;;;514:3366;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;:::i;:::-;2847:621;3060:18;514:3366;;1016:27:76;1012:55;;514:3366:126;-1:-1:-1;;;;;514:3366:126;353:30:76;;;;;:89;;514:3366:126;721:55:76;;;514:3366:126;-1:-1:-1;;;;;514:3366:126;786:58:76;;3260:36:126;3136:79;514:3366;3160:15;;514:3366;;;;3136:79;;;;;;:::i;:::-;514:3366;;;;;3260:36;;;;;;:::i;:::-;514:3366;;;;-1:-1:-1;;;;;514:3366:126;;;;;3326:33;;;:86;;514:3366;3326:135;;;514:3366;3307:154;;514:3366;;;;;;;;3326:135;514:3366;3428:13;;;514:3366;3445:16;;514:3366;-1:-1:-1;;;;;514:3366:126;;;;;3428:33;;-1:-1:-1;3326:135:126;;;;:86;3375:15;;;514:3366;3394:18;;;514:3366;3375:37;;-1:-1:-1;3326:86:126;;786:58:76;824:20;;;514:3366:126;824:20:76;514:3366:126;;824:20:76;721:55;759:17;;;514:3366:126;759:17:76;514:3366:126;;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;1012:55;1052:15;;;514:3366:126;1052:15:76;514:3366:126;;1052:15:76;514:3366:126;;3045:39:9;514:3366:126;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;514:3366:126;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;-1:-1:-1;;;;;514:3366:126;;;;3837:34;514:3366;;;;;;;;:::i;:::-;;;:::i;:::-;;3837:34;;;;:::i;:::-;514:3366;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:77;;514:3366:126;;;2392:23:77;;514:3366:126;;;2392:23:77;514:3366:126;;;;;;2392:3:77;514:3366:126;2392:23:77;;;;;;;514:3366:126;2392:23:77;;;514:3366:126;2429:19:77;514:3366:126;2429:19:77;;514:3366:126;2452:18:77;2429:41;2425:87;;3652:46:126;514:3366;;3663:16;;;514:3366;;;;3652:46;;;;;;:::i;2425:87:77:-;2491:21;;;514:3366:126;2491:21:77;514:3366:126;;2491:21:77;2392:23;;;;;514:3366:126;2392:23:77;;;;;;:::i;:::-;;;514:3366:126;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:77;;;;514:3366:126;;;;;;;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;-1:-1:-1;;;;;514:3366:126;;;;716:142:80;514:3366:126;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;514:3366:126:-;;;;;;-1:-1:-1;;514:3366:126;;;;1344:145;1311:16;514:3366;;1311:16;;;;;;;:::i;:::-;;1055:104:6;;1311:16:126;;;;;;:::i;:::-;514:3366;;;;;;;;;1344:145;;1421:10;;;1344:145;514:3366;1344:145;;;:::i;:::-;;:4;514:3366;1344:4;:145;;;;;;514:3366;1344:145;;;514:3366;1311:16;514:3366;;;;;;;1344:145;;1311:16;1344:145;;1311:16;1344:145;;;;;;514:3366;1344:145;;;:::i;:::-;;;514:3366;;;;1311:16;514:3366;;1344:145;;;;;-1:-1:-1;1344:145:126;;514:3366;;1442:1461:9;514:3366:126;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;514:3366:126:-;;;;;-1:-1:-1;;514:3366:126;;;;;;;-1:-1:-1;514:3366:126;;;;:::i;:::-;;;;-1:-1:-1;;;;;514:3366:126;;;;;;1688:16;514:3366;;;1688:16;;;;;;;:::i;:::-;1721:139;514:3366;;;;;;;;;;1721:139;;514:3366;1721:139;;;:::i;514:3366::-;;;;;;-1:-1:-1;;514:3366:126;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;514:3366:126;1497:44:77;;514:3366:126;;;1497:44:77;514:3366:126;;;;;;1497:14:77;514:3366:126;1497:44:77;;;;;;514:3366:126;1497:44:77;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;514:3366:126;1497:44:77;;;;;;:::i;:::-;;;514:3366:126;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;514:3366:126;;;;;;-1:-1:-1;;514:3366:126;;;;;;;542:43:77;514:3366:126;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;1055:104:6;;514:3366:126;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;514:3366:126;;;;;;;;;;;;1055:104:6;;;514:3366:126;;;;-1:-1:-1;;;514:3366:126;;;;;;;;;;;;;;;;;-1:-1:-1;;;514:3366:126;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;514:3366:126;;;;;1055:104:6;514:3366:126;;1055:104:6;514:3366:126;;;;;;;;;;;;;;;;;;;;-1:-1:-1;514:3366:126;;;;;;;;-1:-1:-1;;514:3366:126;;;;:::o;:::-;;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;514:3366:126;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o;:::-;;-1:-1:-1;;514:3366:126;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;-1:-1:-1;;514:3366:126;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;:::o;:::-;;;;-1:-1:-1;514:3366:126;;;;;-1:-1:-1;514:3366:126;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;:::o;:::-;;;1055:104:6;;514:3366:126;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;:::o;:::-;-1:-1:-1;;;;;514:3366:126;;;;;;-1:-1:-1;;514:3366:126;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;514:3366:126;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;514:3366:126;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;514:3366:126;;;;;;;;;;;;;4064:22:9;;;;4060:87;;514:3366:126;;;;;;;;;;;;;;4274:33:9;514:3366:126;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;514:3366:126;;3896:19:9;514:3366:126;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;514:3366:126;;;;3881:1:9;514:3366:126;;;;;3881:1:9;514:3366:126;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;514:3366:126;;;;;;;:::i;:::-;-1:-1:-1;514:3366:126;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;871:377:80:-;;;;;;;2054:68:126;;;;;;:::i;:::-;514:3366;;;;-1:-1:-1;514:3366:126;;;;;;;2282:20;;;;514:3366;;;;;;;;;2320:22;;;;514:3366;;;2199:157;;;;;;2282:20;514:3366;;;;;;;;;2199:157;;514:3366;;;;;;;2199:157;;;;;514:3366;;;;;;;;;2199:157;;-1:-1:-1;2199:157:126;;;;;;;;;871:377:80;-1:-1:-1;2183:439:126;;514:3366;;;;;;2282:20;514:3366;-1:-1:-1;;;2438:173:126;;-1:-1:-1;;;;;514:3366:126;;;2199:157;2438:173;;514:3366;;;;;;;;;;;;;;;2199:157;514:3366;;;2438:173;;;2183:439;;;;;;;;;514:3366;2183:439;;;514:3366;;;:::i;:::-;;2282:20;514:3366;;;;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;-1:-1:-1;;;;;514:3366:126;2282:20;514:3366;;;;;;;;;;;;2320:22;1914:299:77;;514:3366:126;2076:4:77;2282:20:126;1914:299:77;;514:3366:126;;1914:299:77;;514:3366:126;1914:299:77;;;514:3366:126;1914:299:77;;;;514:3366:126;2282:20;514:3366;2282:20;514:3366;;;;;-1:-1:-1;;;;;514:3366:126;;;;;;2320:22;514:3366;2282:20;514:3366;1868:18:77;514:3366:126;;1819:413:77;;;514:3366:126;;;2282:20;514:3366;;;;;;;;1791:455:77;;;2199:157:126;1791:455:77;;514:3366:126;;;;;;;2282:20;514:3366;;;;;;;;;;;;2199:157;514:3366;;;-1:-1:-1;;;;;514:3366:126;;;;;;;;;2282:20;514:3366;;;;;;;;;;;;;;;;;1914:299:77;514:3366:126;1914:299:77;514:3366:126;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;514:3366:126;;1791:3:77;-1:-1:-1;;;;;514:3366:126;1791:455:77;;;;;;;;;;;2183:439:126;1134:55:80;2807:27:126;1134:55:80;2807:27:126;;;871:377:80:o;1791:455:77:-;;;2320:22:126;1791:455:77;;2320:22:126;1791:455:77;;;;;;514:3366:126;1791:455:77;;;:::i;:::-;;;514:3366:126;;;;;1791:455:77;;;;;;-1:-1:-1;1791:455:77;;;2282:20:126;514:3366;;;;;;;;;-1:-1:-1;;;514:3366:126;;;2199:157;514:3366;;;;;-1:-1:-1;;;514:3366:126;;;2199:157;514:3366;;;;2199:157;;;;;-1:-1:-1;2199:157:126;;:::i;:::-;-1:-1:-1;2199:157:126;;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;514:3366:126;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;514:3366:126;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;514:3366:126;;-1:-1:-1;;;1033:111:63;;;;514:3366:126;1033:111:63;514:3366:126;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;514:3366:126;;;;26127:66:70;;26014:100;26027:7;26098:1;514:3366:126;;;;26014:100:70;;;25901;25914:7;25985:1;514:3366:126;;;;25901:100:70;;;25788;25801:7;25872:1;514:3366:126;;;;25788:100:70;;;25672:103;25685:8;25758:2;514:3366:126;;;;25672:103:70;;;25556;25569:8;25642:2;514:3366:126;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;514:3366:126;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;514:3366:126;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;514:3366:126;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;514:3366:126:-;;;-1:-1:-1;;;;;514:3366:126;;;;;;:::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2462,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2505,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2548,
          length: 32
        }
      ],
      "3008": [
        {
          start: 4883,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2080,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1186,
          length: 32
        },
        {
          start: 4298,
          length: 32
        }
      ],
      "54663": [
        {
          start: 605,
          length: 32
        },
        {
          start: 1242,
          length: 32
        },
        {
          start: 2030,
          length: 32
        },
        {
          start: 2396,
          length: 32
        },
        {
          start: 4125,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,address))": "9b28978c",
    "doObligationFor((address,uint256,address),address,address)": "88d8b7e2",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC721PaymentObligation.sol":"ERC721PaymentObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a","license":"UNLICENSED","urls":["bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7","dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC721TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "payment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "PaymentMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC721PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC721PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC721PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC721PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC721PaymentObligation.sol": "ERC721PaymentObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        keccak256: "0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a",
        urls: [
          "bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7",
          "dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 126
};

// src/contracts/IERC721.ts
var abi44 = {
  abi: [
    {
      type: "function",
      name: "approve",
      inputs: [
        {
          name: "_approved",
          type: "address",
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "balanceOf",
      inputs: [
        {
          name: "_owner",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getApproved",
      inputs: [
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isApprovedForAll",
      inputs: [
        {
          name: "_owner",
          type: "address",
          internalType: "address"
        },
        {
          name: "_operator",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "ownerOf",
      inputs: [
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "safeTransferFrom",
      inputs: [
        {
          name: "_from",
          type: "address",
          internalType: "address"
        },
        {
          name: "_to",
          type: "address",
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "safeTransferFrom",
      inputs: [
        {
          name: "_from",
          type: "address",
          internalType: "address"
        },
        {
          name: "_to",
          type: "address",
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "setApprovalForAll",
      inputs: [
        {
          name: "_operator",
          type: "address",
          internalType: "address"
        },
        {
          name: "_approved",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceID",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "transferFrom",
      inputs: [
        {
          name: "_from",
          type: "address",
          internalType: "address"
        },
        {
          name: "_to",
          type: "address",
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "event",
      name: "Approval",
      inputs: [
        {
          name: "_owner",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_approved",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ApprovalForAll",
      inputs: [
        {
          name: "_owner",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_operator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_approved",
          type: "bool",
          indexed: false,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Transfer",
      inputs: [
        {
          name: "_from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "_tokenId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    }
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  methodIdentifiers: {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "getApproved(uint256)": "081812fc",
    "isApprovedForAll(address,address)": "e985e9c5",
    "ownerOf(uint256)": "6352211e",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721 Note: the ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"details":"This emits when the approved address for an NFT is changed or reaffirmed. The zero address indicates there is no approved address. When a Transfer event emits, this also indicates that the approved address for that NFT (if any) is reset to none."},"ApprovalForAll(address,address,bool)":{"details":"This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner."},"Transfer(address,address,uint256)":{"details":"This emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any number of NFTs may be created and assigned without emitting Transfer. At the time of any transfer, the approved address for that NFT (if any) is reset to none."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.","params":{"_approved":"The new approved NFT controller","_tokenId":"The NFT to approve"}},"balanceOf(address)":{"details":"NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","params":{"_owner":"An address for whom to query the balance"},"returns":{"_0":"The number of NFTs owned by `_owner`, possibly zero"}},"getApproved(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"The NFT to find the approved address for"},"returns":{"_0":"The approved address for this NFT, or the zero address if there is none"}},"isApprovedForAll(address,address)":{"params":{"_operator":"The address that acts on behalf of the owner","_owner":"The address that owns the NFTs"},"returns":{"_0":"True if `_operator` is an approved operator for `_owner`, false otherwise"}},"ownerOf(uint256)":{"details":"NFTs assigned to zero address are considered invalid, and queries about them do throw.","params":{"_tokenId":"The identifier for an NFT"},"returns":{"_0":"The address of the owner of the NFT"}},"safeTransferFrom(address,address,uint256)":{"details":"This works identically to the other function with an extra data parameter, except this function just sets data to \\"\\".","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\\"onERC721Received(address,address,uint256,bytes)\\"))`.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer","data":"Additional data with no specified format, sent in call to `_to`"}},"setApprovalForAll(address,bool)":{"details":"Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.","params":{"interfaceID":"The interface identifier, as specified in ERC-165"},"returns":{"_0":"`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise"}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}}},"title":"ERC-721 Non-Fungible Token Standard","version":1},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Change or reaffirm the approved address for an NFT"},"balanceOf(address)":{"notice":"Count all NFTs assigned to an owner"},"getApproved(uint256)":{"notice":"Get the approved address for a single NFT"},"isApprovedForAll(address,address)":{"notice":"Query if an address is an authorized operator for another address"},"ownerOf(uint256)":{"notice":"Find the owner of an NFT"},"safeTransferFrom(address,address,uint256)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\\"operator\\") to manage all of `msg.sender`\'s assets"},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"},"transferFrom(address,address,uint256)":{"notice":"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST"}},"version":1}},"settings":{"compilationTarget":{"lib/forge-std/src/interfaces/IERC721.sol":"IERC721"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/forge-std/src/interfaces/IERC165.sol":{"keccak256":"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600","license":"MIT","urls":["bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc","dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT"]},"lib/forge-std/src/interfaces/IERC721.sol":{"keccak256":"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15","license":"MIT","urls":["bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f","dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "_approved",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256",
              indexed: true
            }
          ],
          type: "event",
          name: "Approval",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "_operator",
              type: "address",
              indexed: true
            },
            {
              internalType: "bool",
              name: "_approved",
              type: "bool",
              indexed: false
            }
          ],
          type: "event",
          name: "ApprovalForAll",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_from",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "_to",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256",
              indexed: true
            }
          ],
          type: "event",
          name: "Transfer",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_approved",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "approve"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getApproved",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address"
            },
            {
              internalType: "address",
              name: "_operator",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "isApprovedForAll",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "ownerOf",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_from",
              type: "address"
            },
            {
              internalType: "address",
              name: "_to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "safeTransferFrom"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_from",
              type: "address"
            },
            {
              internalType: "address",
              name: "_to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "safeTransferFrom"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_operator",
              type: "address"
            },
            {
              internalType: "bool",
              name: "_approved",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "setApprovalForAll"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceID",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_from",
              type: "address"
            },
            {
              internalType: "address",
              name: "_to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "_tokenId",
              type: "uint256"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "transferFrom"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "approve(address,uint256)": {
            details: "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.",
            params: {
              _approved: "The new approved NFT controller",
              _tokenId: "The NFT to approve"
            }
          },
          "balanceOf(address)": {
            details: "NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
            params: {
              _owner: "An address for whom to query the balance"
            },
            returns: {
              _0: "The number of NFTs owned by `_owner`, possibly zero"
            }
          },
          "getApproved(uint256)": {
            details: "Throws if `_tokenId` is not a valid NFT.",
            params: {
              _tokenId: "The NFT to find the approved address for"
            },
            returns: {
              _0: "The approved address for this NFT, or the zero address if there is none"
            }
          },
          "isApprovedForAll(address,address)": {
            params: {
              _operator: "The address that acts on behalf of the owner",
              _owner: "The address that owns the NFTs"
            },
            returns: {
              _0: "True if `_operator` is an approved operator for `_owner`, false otherwise"
            }
          },
          "ownerOf(uint256)": {
            details: "NFTs assigned to zero address are considered invalid, and queries about them do throw.",
            params: {
              _tokenId: "The identifier for an NFT"
            },
            returns: {
              _0: "The address of the owner of the NFT"
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            details: 'This works identically to the other function with an extra data parameter, except this function just sets data to "".',
            params: {
              _from: "The current owner of the NFT",
              _to: "The new owner",
              _tokenId: "The NFT to transfer"
            }
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            details: 'Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.',
            params: {
              _from: "The current owner of the NFT",
              _to: "The new owner",
              _tokenId: "The NFT to transfer",
              data: "Additional data with no specified format, sent in call to `_to`"
            }
          },
          "setApprovalForAll(address,bool)": {
            details: "Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.",
            params: {
              _approved: "True if the operator is approved, false to revoke approval",
              _operator: "Address to add to the set of authorized operators"
            }
          },
          "supportsInterface(bytes4)": {
            details: "Interface identification is specified in ERC-165. This function uses less than 30,000 gas.",
            params: {
              interfaceID: "The interface identifier, as specified in ERC-165"
            },
            returns: {
              _0: "`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise"
            }
          },
          "transferFrom(address,address,uint256)": {
            details: "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.",
            params: {
              _from: "The current owner of the NFT",
              _to: "The new owner",
              _tokenId: "The NFT to transfer"
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "approve(address,uint256)": {
            notice: "Change or reaffirm the approved address for an NFT"
          },
          "balanceOf(address)": {
            notice: "Count all NFTs assigned to an owner"
          },
          "getApproved(uint256)": {
            notice: "Get the approved address for a single NFT"
          },
          "isApprovedForAll(address,address)": {
            notice: "Query if an address is an authorized operator for another address"
          },
          "ownerOf(uint256)": {
            notice: "Find the owner of an NFT"
          },
          "safeTransferFrom(address,address,uint256)": {
            notice: "Transfers the ownership of an NFT from one address to another address"
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            notice: "Transfers the ownership of an NFT from one address to another address"
          },
          "setApprovalForAll(address,bool)": {
            notice: 'Enable or disable approval for a third party ("operator") to manage all of `msg.sender`\'s assets'
          },
          "supportsInterface(bytes4)": {
            notice: "Query if a contract implements an interface"
          },
          "transferFrom(address,address,uint256)": {
            notice: "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST"
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "lib/forge-std/src/interfaces/IERC721.sol": "IERC721"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/forge-std/src/interfaces/IERC165.sol": {
        keccak256: "0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600",
        urls: [
          "bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc",
          "dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT"
        ],
        license: "MIT"
      },
      "lib/forge-std/src/interfaces/IERC721.sol": {
        keccak256: "0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15",
        urls: [
          "bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f",
          "dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm"
        ],
        license: "MIT"
      }
    },
    version: 1
  },
  id: 29
};

// src/clients/erc721.ts
var erc721EscrowDecodeFunction = getAbiItem6({
  abi: abi39.abi,
  name: "decodeObligationData"
});
var erc721PaymentDecodeFunction = getAbiItem6({
  abi: abi43.abi,
  name: "decodeObligationData"
});
var erc721EscrowObligationDataType2 = erc721EscrowDecodeFunction.outputs[0];
var erc721PaymentObligationDataType = erc721PaymentDecodeFunction.outputs[0];
var makeErc721Client = (viemClient, addresses) => {
  const encodeEscrowObligationRaw = (data) => {
    return encodeAbiParameters6([erc721EscrowObligationDataType2], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return encodeAbiParameters6([erc721PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC721EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC721 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        token: token.address,
        tokenId: token.id,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes ERC721PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC721 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        tokenId: token.id,
        payee
      });
    },
    /**
     * Decodes ERC721EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return decodeAbiParameters6([erc721EscrowObligationDataType2], obligationData)[0];
    },
    /**
     * Decodes ERC721PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return decodeAbiParameters6([erc721PaymentObligationDataType], obligationData)[0];
    },
    /**
     * Approves a specific token for trading
     * @param token - Token details including address and id
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approve: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token.address,
        abi: abi44.abi,
        functionName: "approve",
        args: [to, token.id]
      });
      return hash;
    },
    /**
     * Approves all tokens from a contract for trading
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approveAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi44.abi,
        functionName: "setApprovalForAll",
        args: [to, true]
      });
      return hash;
    },
    /**
     * Revokes approval for all tokens from a contract
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval to revoke (escrow or payment)
     * @returns Transaction hash
     */
    revokeAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi44.abi,
        functionName: "setApprovalForAll",
        args: [to, false]
      });
      return hash;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC721 tokens for a custom demand
     * @param price - ERC721 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyWithErc721(
     *   { address: nft, id: 1n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc721: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC721 tokens
     * @param price - ERC721 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payWithErc721(
     *   { address: nft, id: 1n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc721: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721PaymentObligation,
        abi: abi43.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC721 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc721ForErc721(
     *   { address: myNft, id: 1n },
     *   { address: theirNft, id: 2n },
     *   0n,
     * );
     * ```
     */
    buyErc721ForErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc721ForErc721",
        args: [bid.address, bid.id, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC721 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc721(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc721",
        args: [buyAttestation]
      });
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      return { hash };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC20 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc20WithErc721(
     *   { address: nft, id: 1n },
     *   { address: usdc, value: 1000n },
     *   0n,
     * );
     * ```
     */
    buyErc20WithErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc20WithErc721",
        args: [bid.address, bid.id, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC1155 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC1155 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc1155WithErc721(
     *   { address: nft, id: 1n },
     *   { address: multiToken, id: 2n, value: 5n },
     *   0n,
     * );
     * ```
     */
    buyErc1155WithErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc1155WithErc721",
        args: [bid.address, bid.id, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc1155(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc1155",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for a bundle of tokens
     * @param bid - ERC721 token offered
     * @param ask - Bundle of tokens requested
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyBundleWithErc721(
     *   { address: nft, id: 1n },
     *   tokenBundle,
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc721: async (bid, ask, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyBundleWithErc721",
        args: [bid.address, bid.id, { ...flattenTokenBundle(ask), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-Bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc1155.ts
import { decodeAbiParameters as decodeAbiParameters7, encodeAbiParameters as encodeAbiParameters7, getAbiItem as getAbiItem7 } from "viem";

// src/contracts/ERC1155BarterCrossToken.ts
var abi45 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_erc20Escrow",
          type: "address",
          internalType: "contract ERC20EscrowObligation"
        },
        {
          name: "_erc20Payment",
          type: "address",
          internalType: "contract ERC20PaymentObligation"
        },
        {
          name: "_erc721Escrow",
          type: "address",
          internalType: "contract ERC721EscrowObligation"
        },
        {
          name: "_erc721Payment",
          type: "address",
          internalType: "contract ERC721PaymentObligation"
        },
        {
          name: "_erc1155Escrow",
          type: "address",
          internalType: "contract ERC1155EscrowObligation"
        },
        {
          name: "_erc1155Payment",
          type: "address",
          internalType: "contract ERC1155PaymentObligation"
        },
        {
          name: "_bundleEscrow",
          type: "address",
          internalType: "contract TokenBundleEscrowObligation"
        },
        {
          name: "_bundlePayment",
          type: "address",
          internalType: "contract TokenBundlePaymentObligation"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyBundleWithErc1155",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askData",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc1155ForErc1155",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc20WithErc1155",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyErc721WithErc1155",
      inputs: [
        {
          name: "bidToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "bidTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "bidAmount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "askToken",
          type: "address",
          internalType: "address"
        },
        {
          name: "askTokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc1155ForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc1155ForErc1155",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc1155ForErc20",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payErc1155ForErc721",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "error",
      name: "CouldntCollectEscrow",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "892:6105:133:-:0;;;;;;;;;;;;;-1:-1:-1;;892:6105:133;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;-1:-1:-1;892:6105:133;;;-1:-1:-1;892:6105:133;;;;;;;758:30:134;892:6105:133;;;758:30:134;892:6105:133;;;;;;;798:32:134;892:6105:133;;;798:32:134;892:6105:133;;;;;;;1757:26;892:6105;;;1757:26;892:6105;;;;;;;1793:28;892:6105;;;1793:28;892:6105;;;;;;;1831:28;892:6105;;;1831:28;892:6105;;;;;;;1869:30;892:6105;;;1869:30;892:6105;;;;;;;1909:28;892:6105;;;1909:28;892:6105;;;;;;;1947:30;892:6105;;;1947:30;892:6105;;;;;;;;;;;-1:-1:-1;892:6105:133;;;;;;-1:-1:-1;892:6105:133;;;;;-1:-1:-1;892:6105:133",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "",
    sourceMap: "892:6105:133:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3495:207;892:6105;3495:207;;;892:6105;;;;;;;;;;2563:204;892:6105;2563:204;;;892:6105;;;;;;;;;;;;;;;;;;-1:-1:-1;;892:6105:133;;;;;;6322:34;892:6105;;;;;;;;;;;;;;;;;;6322:34;;;892:6105;6322:34;;892:6105;6322:34;;;;;;6453:8;6322:34;892:6105;6322:34;;;892:6105;6453:8;;;892:6105;;;6429:79;;892:6105;6429:79;;892:6105;;;;;;;;;6429:79;;892:6105;;-1:-1:-1;;;;;892:6105:133;;;;;;6453:8;892:6105;;;;;;;;;;6453:8;892:6105;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;:::i;:::-;;;;;6453:8;892:6105;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;6574:106;892:6105;;6717:108;892:6105;;;;;;:::i;:::-;;;;6598:17;892:6105;;;;6574:106;;;;;;:::i;:::-;6717:14;892:6105;;;;-1:-1:-1;;;6717:108:133;;892:6105;;-1:-1:-1;;;;;892:6105:133;;;;6717:108;;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;6781:10;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6717:108;;;;;;;;;;892:6105;6717:108;;;892:6105;-1:-1:-1;6841:12:133;892:6105;;;-1:-1:-1;;;6841:59:133;;892:6105;6841:59;;892:6105;;;;6322:34;892:6105;;;;;;;;;6841:59;;892:6105;;;;-1:-1:-1;;;;;892:6105:133;6841:59;;;;;;;892:6105;6841:59;;;892:6105;6840:60;;6836:120;;892:6105;;;;;;;;6836:120;6115:22;;;892:6105;6923:22;892:6105;;6923:22;6841:59;;;892:6105;6841:59;;892:6105;6841:59;;;;;;892:6105;6841:59;;;:::i;:::-;;;892:6105;;;;;;;:::i;:::-;6841:59;;;892:6105;;;;6841:59;;;-1:-1:-1;6841:59:133;;;892:6105;;;;;;;;;6717:108;;;;892:6105;6717:108;;892:6105;6717:108;;;;;;892:6105;6717:108;;;:::i;:::-;;;892:6105;;;;;;;6717:108;;;;;-1:-1:-1;6717:108:133;;892:6105;;;;;;;;;6322:34;892:6105;;6322:34;;;;;;892:6105;6322:34;;;;;;:::i;:::-;;;;;:::i;:::-;;;;892:6105;;;;;;-1:-1:-1;;892:6105:133;;;;4687:34;892:6105;;;;;;;;;;;;;;;;;;;;4687:34;;;892:6105;4687:34;;892:6105;4687:34;;;;;;5091:108;4948:106;892:6105;4788:94;4812:8;4687:34;;892:6105;4687:34;;;;;892:6105;4812:8;;;892:6105;;;;4788:94;;;;;;:::i;:::-;4972:17;;892:6105;;;;4948:106;;;;;;:::i;5091:108::-;;;;;;;;;;892:6105;5091:108;;;892:6105;;;;;5215:58;892:6105;;;;;;;;;;;;;;;;;;;5215:58;;892:6105;5215:58;;892:6105;;4687:34;892:6105;;;5215:58;;;;;;;892:6105;5215:58;;;5214:59;;5210:119;;892:6105;;;;;;;;5215:58;;;892:6105;5215:58;;892:6105;5215:58;;;;;;892:6105;5215:58;;;:::i;:::-;;;892:6105;;;;;;;:::i;:::-;5215:58;;;;;;-1:-1:-1;5215:58:133;;5091:108;;;;892:6105;5091:108;;892:6105;5091:108;;;;;;892:6105;5091:108;;;:::i;:::-;;;892:6105;;;;;;;5091:108;;;;;-1:-1:-1;5091:108:133;;4687:34;;;;;;;;;;;;;:::i;:::-;;;;892:6105;;;;;;-1:-1:-1;;892:6105:133;;;;;;:::i;:::-;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;1362:14:134;892:6105:133;;;1120:712:134;;892:6105:133;;-1:-1:-1;;;;;892:6105:133;;;;;;;;1120:712:134;;892:6105:133;;;;:::i;:::-;;;;;1443:250:134;;;892:6105:133;;;;1443:250:134;;892:6105:133;1656:10:134;892:6105:133;1443:250:134;;892:6105:133;;;;1407:308:134;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1407:308:134;;;892:6105:133;1407:308:134;;:::i;:::-;892:6105:133;;;;;;:::i;:::-;;;1167:567:134;;;892:6105:133;;;;;;;;1167:567:134;;892:6105:133;;;;1167:567:134;;892:6105:133;;;;1167:567:134;;892:6105:133;;;;;;;;;;;;;1120:712:134;;1656:10;;;1120:712;892:6105:133;1120:712:134;;;:::i;:::-;;;;;;;;;892:6105:133;1120:712:134;;;892:6105:133;;;;;;;;;1120:712:134;;892:6105:133;1120:712:134;;892:6105:133;1120:712:134;;;;;;892:6105:133;1120:712:134;;;:::i;:::-;;;892:6105:133;;;;;;;1120:712:134;;;;;-1:-1:-1;1120:712:134;;892:6105:133;;;;2242:664;2563:204;892:6105;;;:::i;:::-;;;2484:12;892:6105;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2563:204;;;892:6105;2730:10;892:6105;2563:204;;892:6105;;;;2527:262;;;;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2527:262;;;;;;:::i;:::-;892:6105;;;;;;:::i;:::-;;;2289:519;;;892:6105;;;;;;;;2289:519;;892:6105;;2289:519;;892:6105;2527:262;2289:519;;892:6105;;;;;;;;;;;;;2242:664;;2730:10;;;2242:664;892:6105;2242:664;;;:::i;892:6105::-;;;;;;-1:-1:-1;;892:6105:133;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;4124:422;892:6105;;;;4410:19;892:6105;;;;;;;;;;;;;;4366:13;892:6105;;;;;4410:19;;;;;;;892:6105;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:133;;;;;;;:::i;:::-;;-1:-1:-1;;;;;892:6105:133;;;;;;:::i;:::-;;;;;;4410:19;892:6105;;4410:19;;;;;;:::i;892:6105::-;;;;;;-1:-1:-1;;892:6105:133;;;;;;2964:34:134;892:6105:133;;;;;;;;;;;;;;;;;;2964:34:134;;;892:6105:133;2964:34:134;;892:6105:133;2964:34:134;;;;;;3091:8;2964:34;892:6105:133;2964:34:134;;;892:6105:133;3091:8:134;;;892:6105:133;;;3067:96:134;;892:6105:133;;;;;;;;;3067:96:134;;892:6105:133;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;3067:96:134;892:6105:133;3067:96:134;892:6105:133;;;3229:106:134;3067:96;;;2040:108;3067:96;;892:6105:133;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;3229:106:134;;;;;;:::i;2040:108::-;;;;;;;;;;892:6105:133;2040:108:134;;;892:6105:133;-1:-1:-1;892:6105:133;;;;-1:-1:-1;;;2164:60:134;;892:6105:133;2164:60:134;;892:6105:133;;;;2964:34:134;892:6105:133;;;;;;;;;2164:60:134;;892:6105:133;;;;-1:-1:-1;;;;;892:6105:133;2164:60:134;;;;;;;892:6105:133;2164:60:134;;;2163:61;;2159:121;;892:6105:133;;;;;;;;2040:108:134;;;;892:6105:133;2040:108:134;;892:6105:133;2040:108:134;;;;;;892:6105:133;2040:108:134;;;:::i;:::-;;;892:6105:133;;;;;;;2040:108:134;;;;;-1:-1:-1;2040:108:134;;2964:34;;;;;;892:6105:133;2964:34:134;;;;;;:::i;:::-;;;;892:6105:133;;;;3173:668;3495:207;892:6105;;;:::i;:::-;;;3415:13;892:6105;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;892:6105:133;;;;;;;;5503:34;892:6105;;;;;;;;;;;;5503:34;;;892:6105;5503:34;;892:6105;5503:34;;;;;;5909:108;5766:106;892:6105;5605:95;5629:8;5503:34;;892:6105;5503:34;;;;;5629:8;;;892:6105;;;;5605:95;;;;;;:::i;5909:108::-;;;;;;;;;;892:6105;5909:108;;;892:6105;-1:-1:-1;6033:12:133;892:6105;;;-1:-1:-1;;;6033:59:133;;892:6105;6033:59;;892:6105;;;;5503:34;892:6105;;;;;;;;;6033:59;;892:6105;;;;-1:-1:-1;;;;;892:6105:133;6033:59;;;;;;;892:6105;6033:59;;;6032:60;;6028:120;;892:6105;;;;;;;;5909:108;;;;892:6105;5909:108;;892:6105;5909:108;;;;;;892:6105;5909:108;;;:::i;:::-;;;892:6105;;;;;;;5909:108;;;;;-1:-1:-1;5909:108:133;;892:6105;;;;-1:-1:-1;;;;;892:6105:133;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:133;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:133;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:133;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;-1:-1:-1;;892:6105:133;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;892:6105:133;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;892:6105:133;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:133;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;892:6105:133;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;",
    linkReferences: {}
  },
  methodIdentifiers: {
    "buyBundleWithErc1155(address,uint256,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "36bdb00c",
    "buyErc1155ForErc1155(address,uint256,uint256,address,uint256,uint256,uint64)": "78a56f8f",
    "buyErc20WithErc1155(address,uint256,uint256,address,uint256,uint64)": "6d1d261f",
    "buyErc721WithErc1155(address,uint256,uint256,address,uint256,uint64)": "1fa56b20",
    "payErc1155ForBundle(bytes32)": "d7452d90",
    "payErc1155ForErc1155(bytes32)": "33666e5f",
    "payErc1155ForErc20(bytes32)": "af808a2a",
    "payErc1155ForErc721(bytes32)": "01d71c0f"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20WithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721WithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC1155BarterCrossToken.sol":"ERC1155BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3","license":"UNLICENSED","urls":["bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10","dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f","license":"UNLICENSED","urls":["bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a","dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a","license":"UNLICENSED","urls":["bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7","dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4","license":"UNLICENSED","urls":["bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258","dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"]},"src/utils/ERC1155BarterCrossToken.sol":{"keccak256":"0x8e0125f089e8459bd2155aa55e5ceb0fa9df2f53ca09e66443f820db52e3d69b","license":"UNLICENSED","urls":["bzz-raw://995b09ed7bae244b7134bf57d8094fb572b5c646159b4f0fa7089414eb64fc19","dweb:/ipfs/QmZdTrMi7cihuJZyE3Kxag9Zm5UM52A7nToG8Z2q3SexnL"]},"src/utils/ERC1155BarterUtils.sol":{"keccak256":"0xd754c5fadfa23b6a1d7493a9cae0429f520727315118032ef654bc86421dba15","license":"UNLICENSED","urls":["bzz-raw://05c653e4c6c6dc0a789937a1b66f7850c4b1d095ae69304ef3267ee383f82117","dweb:/ipfs/QmXT9z3Xyq6ba27aN6JcZPnqgJf1QKCevVKAjccmTFTFzF"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ERC20EscrowObligation",
              name: "_erc20Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC20PaymentObligation",
              name: "_erc20Payment",
              type: "address"
            },
            {
              internalType: "contract ERC721EscrowObligation",
              name: "_erc721Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC721PaymentObligation",
              name: "_erc721Payment",
              type: "address"
            },
            {
              internalType: "contract ERC1155EscrowObligation",
              name: "_erc1155Escrow",
              type: "address"
            },
            {
              internalType: "contract ERC1155PaymentObligation",
              name: "_erc1155Payment",
              type: "address"
            },
            {
              internalType: "contract TokenBundleEscrowObligation",
              name: "_bundleEscrow",
              type: "address"
            },
            {
              internalType: "contract TokenBundlePaymentObligation",
              name: "_bundlePayment",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "CouldntCollectEscrow"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askData",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyBundleWithErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc1155ForErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askAmount",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc20WithErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "bidToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "bidTokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "bidAmount",
              type: "uint256"
            },
            {
              internalType: "address",
              name: "askToken",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "askTokenId",
              type: "uint256"
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyErc721WithErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc1155ForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc1155ForErc1155",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc1155ForErc20",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payErc1155ForErc721",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/utils/ERC1155BarterCrossToken.sol": "ERC1155BarterCrossToken"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        keccak256: "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        urls: [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        keccak256: "0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3",
        urls: [
          "bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10",
          "dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        keccak256: "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        urls: [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        keccak256: "0xc5294e6bb04029c22d3941c4e7dc984eef00c3f1c70bf7e9a7bc409fb537bb4f",
        urls: [
          "bzz-raw://06bd7fe53fde25a52264e60a91cd5027229ba630659de45b00c2f5a86783471a",
          "dweb:/ipfs/QmW3dP3pqAe5pBWcKBbRehvqEXJdXPRAsa7ZeexDqVEbo2"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        keccak256: "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        urls: [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        keccak256: "0x4f620d7446fb34dc86c83e52fa2907a91695094d5a61d29cf4ba948b4ac6909a",
        urls: [
          "bzz-raw://0854e4c812bf5f97451f99eab5482634593a4daf66a3f0848e7a596c0f6c93f7",
          "dweb:/ipfs/QmVSd5X35zih7Hznnh9WKnPnA17vkWUAsP6evhP2mxNssB"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        keccak256: "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        urls: [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        keccak256: "0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4",
        urls: [
          "bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258",
          "dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC1155BarterCrossToken.sol": {
        keccak256: "0x8e0125f089e8459bd2155aa55e5ceb0fa9df2f53ca09e66443f820db52e3d69b",
        urls: [
          "bzz-raw://995b09ed7bae244b7134bf57d8094fb572b5c646159b4f0fa7089414eb64fc19",
          "dweb:/ipfs/QmZdTrMi7cihuJZyE3Kxag9Zm5UM52A7nToG8Z2q3SexnL"
        ],
        license: "UNLICENSED"
      },
      "src/utils/ERC1155BarterUtils.sol": {
        keccak256: "0xd754c5fadfa23b6a1d7493a9cae0429f520727315118032ef654bc86421dba15",
        urls: [
          "bzz-raw://05c653e4c6c6dc0a789937a1b66f7850c4b1d095ae69304ef3267ee383f82117",
          "dweb:/ipfs/QmXT9z3Xyq6ba27aN6JcZPnqgJf1QKCevVKAjccmTFTFzF"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 133
};

// src/contracts/ERC1155EscrowObligation.ts
var abi46 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "collectEscrow",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "collectEscrowRaw",
      inputs: [
        {
          name: "_escrow",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "_fulfillment",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC1155EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC1155EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC1155EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "extractArbiterAndDemand",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "arbiter",
          type: "address",
          internalType: "address"
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC1155EscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "onERC1155BatchReceived",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "onERC1155Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "address",
          internalType: "address"
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "reclaimExpired",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceId",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "EscrowCollected",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfillment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "fulfiller",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "EscrowMade",
      inputs: [
        {
          name: "escrow",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationNotFound",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC1155TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEscrowAttestation",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidFulfillment",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    },
    {
      type: "error",
      name: "RevocationFailed",
      inputs: [
        {
          name: "attestationId",
          type: "bytes32",
          internalType: "bytes32"
        }
      ]
    },
    {
      type: "error",
      name: "UnauthorizedCall",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x610160806040523461020e576040816121b780380380916100208285610248565b83398101031261020e5780516001600160a01b0381169182820361020e5760200151916001600160a01b03831680840361020e57604051608081016001600160401b0381118282101761023457604052604d815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c206184527f64647265737320746f6b656e2c2075696e7432353620746f6b656e49642c207560408301526c1a5b9d0c8d4d88185b5bdd5b9d609a1b60608301526001608052600360a0525f60c05215610225576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af190811561021a575f916101e4575b5061014052604051611f4b908161026c823960805181610b28015260a05181610b53015260c05181610b7e015260e05181611e620152610100518161099f015261012051818181610540015281816107d20152818161149e0152611bc20152610140518181816105800152818161096d01528181610ae601528181611676015281816118e10152611b150152f35b90506020813d602011610212575b816101ff60209383610248565b8101031261020e57515f610156565b5f80fd5b3d91506101f2565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102345760405256fe6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f905f3560e01c90816301ffc9a714610cc0575080632c713cd914610ca35780633dc9f35014610bf757806354fd4d5014610b095780635bf2f20d14610acf5780636b122fe01461092e5780637d2c29311461079a5780638371ef591461073b57806388e5b2d9146106ed578063891d9ea81461070c57806391db0b7e146106ed578063b3b902d4146106a1578063bc197c811461060b578063c6ec5070146104ff578063c93844be14610422578063ce46e04614610406578063cecf1aff14610320578063e49617e114610305578063e60c350514610305578063e6c9714d146101de578063f0ffa1851461017d5763f23a6e610361000f573461017a5760a036600319011261017a5761013c610d7f565b50610145610d95565b506084356001600160401b03811161017857610165903690600401610ed6565b5060405163f23a6e6160e01b8152602090f35b505b80fd5b503461017a5760a036600319011261017a57600435906001600160401b03821161017a5760206101d66101b33660048601610f74565b6101bb610d29565b6101c3610d53565b906101cc610d69565b92608435946119e9565b604051908152f35b503461017a57606036600319011261017a57600435906001600160401b03821161017a57610140600319833603011261017a576040519161021e83610e2d565b806004013583526024810135602084015261023b60448201610d3f565b604084015261024c60648201610d3f565b606084015261025d60848201610d3f565b608084015260a481013560a084015261027860c48201610dab565b60c084015261028960e48201610dab565b60e08401526101048101358015158103610301576101008401526101248101356001600160401b038111610301576102c691369101600401610ed6565b610120830152602435906001600160401b03821161017a5760206102f7846102f13660048701610ed6565b906118df565b6040519015158152f35b8280fd5b60206102f76103133661105a565b61031b611e60565b611ea1565b503461017a57604036600319011261017a576004356001600160401b0381116101785760a06003198236030112610178579060206103a592610378610386610366610d29565b9260405192839160040186830161108e565b03601f198101835282610e64565b60405163f0ffa18560e01b815294859283923391829160048601611130565b038184305af19081156103fa57906103c3575b602090604051908152f35b506020813d6020116103f2575b816103dd60209383610e64565b810103126103ee57602090516103b8565b5f80fd5b3d91506103d0565b604051903d90823e3d90fd5b503461017a578060031936011261017a57602090604051908152f35b503461017a57602036600319011261017a576004356001600160401b03811161017857610453903690600401610f74565b61045e9291926118b4565b50820191602081840312610178578035906001600160401b03821161030157019160a083820312610178576040519161049683610e12565b61049f84610dab565b83526020840135906001600160401b03821161017a5750926104c86080926104fb958301610ed6565b60208401526104d960408201610dab565b6040840152606081013560608401520135608082015260405191829182611008565b0390f35b503461017a57602036600319011261017a576105196118b4565b506105226111b6565b506040516328c44a9960e21b815260048035908201529080826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156105fe5781926105da575b5060208201517f0000000000000000000000000000000000000000000000000000000000000000036105cb576104fb6105bf6101208401516020808251830101910161131d565b60405191829182611008565b635527981560e11b8152600490fd5b6105f79192503d8084833e6105ef8183610e64565b810190611242565b905f610578565b50604051903d90823e3d90fd5b503461017a5760a036600319011261017a57610625610d7f565b5061062e610d95565b506044356001600160401b0381116101785761064e903690600401610fa1565b506064356001600160401b0381116101785761066e903690600401610fa1565b506084356001600160401b0381116101785761068e903690600401610ed6565b5060405163bc197c8160e01b8152602090f35b503461017a57606036600319011261017a57600435906001600160401b03821161017a5760206101d66106d73660048601610f74565b6106df610d29565b9160443592339233926119e9565b60206102f76106fb36610f24565b92610707929192611e60565b6113d0565b503461017a576104fb61072761072136610d13565b90611474565b604051918291602083526020830190610dbf565b503461017a57602036600319011261017a57600435906001600160401b03821161017a5761077461076f3660048501610ed6565b6113a7565b604080516001600160a01b0390931683526020830181905282916104fb91830190610dbf565b346103ee5760203660031901126103ee576004356107b66111b6565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610912575b5061081c57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b036060820151164210610903576108576101208201519160c060018060a01b0391015116916020808251830101910161131d565b60408101805160608301805160809094018051919490926001600160a01b031691823b156103ee576108a4925f9283604051809681958294637921219560e11b84528d3060048601611df5565b03925af190816108f3575b506108e85790519151905160405163334a7d1b60e21b81529384936108e493919030906001600160a01b031660048701611e2d565b0390fd5b602060405160018152f35b5f6108fd91610e64565b5f6108af565b637bf6a16f60e01b5f5260045ffd5b6109279192503d805f833e6105ef8183610e64565b9083610804565b346103ee575f3660031901126103ee5760608060405161094d81610de3565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610ac4575f90610a14575b6060906104fb604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610dbf565b503d805f833e610a248183610e64565b8101906020818303126103ee578051906001600160401b0382116103ee57016080818303126103ee5760405190610a5a82610de3565b8051825260208101516001600160a01b03811681036103ee576020830152610a8460408201611173565b60408301526060810151906001600160401b0382116103ee570182601f820112156103ee57606092816020610abb93519101611180565b828201526109ce565b6040513d5f823e3d90fd5b346103ee575f3660031901126103ee5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346103ee575f3660031901126103ee576104fb60206107276001610b4c7f0000000000000000000000000000000000000000000000000000000000000000611c88565b8184610b777f0000000000000000000000000000000000000000000000000000000000000000611c88565b8180610ba27f0000000000000000000000000000000000000000000000000000000000000000611c88565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610e64565b346103ee5760803660031901126103ee576004356001600160401b0381116103ee5760a060031982360301126103ee576020610c31610d29565b610c5d610c86610c3f610d53565b94610c6b610c4b610d69565b9160405194859160040188830161108e565b03601f198101855284610e64565b60405163f0ffa18560e01b8152958694859460048601611130565b03815f305af18015610ac4575f906103c357602090604051908152f35b346103ee57610cb461072136610d13565b50602060405160018152f35b346103ee5760203660031901126103ee576004359063ffffffff60e01b82168092036103ee57602091630271189760e51b8114908115610d02575b5015158152f35b6301ffc9a760e01b14905083610cfb565b60409060031901126103ee576004359060243590565b602435906001600160401b03821682036103ee57565b35906001600160401b03821682036103ee57565b604435906001600160a01b03821682036103ee57565b606435906001600160a01b03821682036103ee57565b600435906001600160a01b03821682036103ee57565b602435906001600160a01b03821682036103ee57565b35906001600160a01b03821682036103ee57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610dfe57604052565b634e487b7160e01b5f52604160045260245ffd5b60a081019081106001600160401b03821117610dfe57604052565b61014081019081106001600160401b03821117610dfe57604052565b604081019081106001600160401b03821117610dfe57604052565b90601f801991011681019081106001600160401b03821117610dfe57604052565b6001600160401b038111610dfe57601f01601f191660200190565b929192610eac82610e85565b91610eba6040519384610e64565b8294818452818301116103ee578281602093845f960137010152565b9080601f830112156103ee57816020610ef193359101610ea0565b90565b9181601f840112156103ee578235916001600160401b0383116103ee576020808501948460051b0101116103ee57565b60406003198201126103ee576004356001600160401b0381116103ee5781610f4e91600401610ef4565b92909291602435906001600160401b0382116103ee57610f7091600401610ef4565b9091565b9181601f840112156103ee578235916001600160401b0383116103ee57602083818601950101116103ee57565b9080601f830112156103ee578135916001600160401b038311610dfe578260051b9060405193610fd46020840186610e64565b84526020808501928201019283116103ee57602001905b828210610ff85750505090565b8135815260209182019101610feb565b6020815260018060a01b03825116602082015260a06080611037602085015183604086015260c0850190610dbf565b93600180841b036040820151166060850152606081015182850152015191015290565b60206003198201126103ee57600435906001600160401b0382116103ee576101409082900360031901126103ee5760040190565b602081526001600160a01b036110a383610dab565b1660208201526020820135601e19833603018112156103ee5782016020813591016001600160401b0382116103ee5781360381136103ee5760e0938260809260a060408701528160c0870152868601375f8484018601526001600160a01b0361110e60408301610dab565b166060850152606081013582850152013560a0830152601f8019910116010190565b90935f936001600160401b03611152608095989760a0865260a0860190610dbf565b971660208401526001600160a01b0390811660408401521660608201520152565b519081151582036103ee57565b92919261118c82610e85565b9161119a6040519384610e64565b8294818452818301116103ee578281602093845f96015e010152565b604051906111c382610e2d565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b03821682036103ee57565b51906001600160a01b03821682036103ee57565b9080601f830112156103ee578151610ef192602001611180565b6020818303126103ee578051906001600160401b0382116103ee5701610140818303126103ee576040519161127683610e2d565b815183526020820151602084015261129060408301611200565b60408401526112a160608301611200565b60608401526112b260808301611200565b608084015260a082015160a08401526112cd60c08301611214565b60c08401526112de60e08301611214565b60e08401526112f06101008301611173565b6101008401526101208201516001600160401b0381116103ee576113149201611228565b61012082015290565b6020818303126103ee578051906001600160401b0382116103ee57019060a0828203126103ee576040519161135183610e12565b61135a81611214565b835260208101516001600160401b0381116103ee5760809261137d918301611228565b602084015261138e60408201611214565b6040840152606081015160608401520151608082015290565b6113ba906020808251830101910161131d565b80516020909101516001600160a01b0390911691565b929092818403611465575f91345b8584101561145a5781841015611446578360051b80860135908282116114375784013561013e19853603018112156103ee5761141b908501611ea1565b1561142c57600191039301926113de565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f61147e6111b6565b506114876111b6565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692905f81602481875afa5f9181611898575b506114f057856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481895afa5f918161187c575b5061153057866301fb6dd160e01b5f5260045260245ffd5b9592939461153d82611eba565b1561186d576101208201918251611553906113a7565b91516040805163e6c9714d60e01b81526060600482018190528c51606483015260208d01516084830152918c01516001600160401b0390811660a4830152918c0151821660c482015260808c015190911660e482015260a08b015161010482015260c08b0180516001600160a01b0390811661012484015260e08d0151166101448301526101008c01511515610164830152610120909b015161014061018483015290938492839290919061160d906101a4850190610dbf565b83810360031901602485015261162291610dbf565b60448301919091526001600160a01b039093169203815a93602094fa908115610ac4575f91611833575b50156118245760405161165e81610e49565b8581525f60208201526040519061167482610e49565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156103ee5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af1908161180f575b506116f65763614cf93960e01b85526004849052602485fd5b519461171560018060a01b03825116966020808251830101910161131d565b94604086019360018060a01b0385511695606088019760808951910197885191813b1561180b576117649286928392838f60405197889586948593637921219560e11b85523060048601611df5565b03925af191826117f2575b50506117a65785518851885160405163334a7d1b60e21b81529283926108e492918e9030906001600160a01b031660048701611e2d565b9397509350935093507ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0604051946117df602087610e64565b848652516001600160a01b03169380a490565b816117fc91610e64565b61180757835f61176f565b8380fd5b8580fd5b61181c9196505f90610e64565b5f945f6116dd565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611865575b8161184e60209383610e64565b810103126103ee5761185f90611173565b5f61164c565b3d9150611841565b63629cd40b60e11b5f5260045ffd5b6118919192503d805f833e6105ef8183610e64565b905f611518565b6118ad9192503d805f833e6105ef8183610e64565b905f6114d8565b604051906118c182610e12565b5f608083828152606060208201528260408201528260608201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119da5761191381611eba565b156119d4576119336101206119439201516020808251830101910161131d565b916020808251830101910161131d565b604082810151908201516001600160a01b0390811691161491826119c1575b826119ad575b82611994575b8261197857505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061196e565b915060808201516080820151111591611968565b9150606082015160608201511491611962565b50505f90565b635f9bd90760e11b5f5260045ffd5b91959095949294611a0d6119fe368986610ea0565b6020808251830101910161131d565b9460408601948551945f9560018060a01b031699606089019a60808c519a01998a51823b156103ee57611a5d925f92838f60405196879586948593637921219560e11b8552309060048601611df5565b03925af19081611c73575b50611a9e578a8a6108e48b8b60018060a01b03905116935190519060405194859463334a7d1b60e21b8652309160048701611e2d565b929650929650939750611ab49296503691610ea0565b906040519260c084018481106001600160401b03821117611c5f57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a08201526020604051611b1381610e49565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611bb4608083015160c060e4860152610124850190610dbf565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611c54578491611c22575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611c4c575b81611c3d60209383610e64565b810103126103ee57515f611bfa565b3d9150611c30565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b611c809198505f90610e64565b5f965f611a68565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611dd2575b806d04ee2d6d415b85acef8100000000600a921015611db7575b662386f26fc10000811015611da3575b6305f5e100811015611d92575b612710811015611d83575b6064811015611d75575b1015611d6a575b600a60216001840193611d0f85610e85565b94611d1d6040519687610e64565b808652611d2c601f1991610e85565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611d6557600a9091611d37565b505090565b600190910190611cfd565b606460029104930192611cf6565b61271060049104930192611cec565b6305f5e10060089104930192611ce1565b662386f26fc1000060109104930192611cd4565b6d04ee2d6d415b85acef810000000060209104930192611cc4565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611caa565b6001600160a01b039182168152911660208201526040810191909152606081019190915260a0608082018190525f9082015260c00190565b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611e9257565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b0381168091036103ee57301490565b6001600160401b036060820151168015159081611f0b575b50611efc57608001516001600160401b0316611eed57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611ed256fea264697066735822122089bbea21e8a61b0b0825590f99e098be95d20a8703cb78454fe538e9ca0edb5664736f6c634300081b0033",
    sourceMap: "533:5490:121:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;533:5490:121;;;;1242:4;533:5490;759:14:6;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;533:5490:121;790:10:9;;533:5490:121;790:10:9;;;789::77;;809:32;;-1:-1:-1;533:5490:121;;;;;;;;;;;872:48:77;;533:5490:121;872:48:77;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;904:4:77;533:5490:121;;;;1242:4;533:5490;;;;;;-1:-1:-1;;533:5490:121;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;533:5490:121;;;;;;;;;;;;;;783:14:6;533:5490:121;;;;;807:14:6;533:5490:121;;;;;790:10:9;533:5490:121;;;;;809:32:77;533:5490:121;;;;;789:10:77;533:5490:121;;;;;;;;;;;;;;;;;;;;851:69:77;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;533:5490:121;872:48:77;;533:5490:121;872:48:77;;;;;;533:5490:121;872:48:77;;;:::i;:::-;;;533:5490:121;;;;;872:48:77;;;533:5490:121;-1:-1:-1;533:5490:121;;872:48:77;;;-1:-1:-1;872:48:77;;;533:5490:121;;;-1:-1:-1;533:5490:121;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;;-1:-1:-1;533:5490:121;;;;;;-1:-1:-1;;533:5490:121;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f905f3560e01c90816301ffc9a714610cc0575080632c713cd914610ca35780633dc9f35014610bf757806354fd4d5014610b095780635bf2f20d14610acf5780636b122fe01461092e5780637d2c29311461079a5780638371ef591461073b57806388e5b2d9146106ed578063891d9ea81461070c57806391db0b7e146106ed578063b3b902d4146106a1578063bc197c811461060b578063c6ec5070146104ff578063c93844be14610422578063ce46e04614610406578063cecf1aff14610320578063e49617e114610305578063e60c350514610305578063e6c9714d146101de578063f0ffa1851461017d5763f23a6e610361000f573461017a5760a036600319011261017a5761013c610d7f565b50610145610d95565b506084356001600160401b03811161017857610165903690600401610ed6565b5060405163f23a6e6160e01b8152602090f35b505b80fd5b503461017a5760a036600319011261017a57600435906001600160401b03821161017a5760206101d66101b33660048601610f74565b6101bb610d29565b6101c3610d53565b906101cc610d69565b92608435946119e9565b604051908152f35b503461017a57606036600319011261017a57600435906001600160401b03821161017a57610140600319833603011261017a576040519161021e83610e2d565b806004013583526024810135602084015261023b60448201610d3f565b604084015261024c60648201610d3f565b606084015261025d60848201610d3f565b608084015260a481013560a084015261027860c48201610dab565b60c084015261028960e48201610dab565b60e08401526101048101358015158103610301576101008401526101248101356001600160401b038111610301576102c691369101600401610ed6565b610120830152602435906001600160401b03821161017a5760206102f7846102f13660048701610ed6565b906118df565b6040519015158152f35b8280fd5b60206102f76103133661105a565b61031b611e60565b611ea1565b503461017a57604036600319011261017a576004356001600160401b0381116101785760a06003198236030112610178579060206103a592610378610386610366610d29565b9260405192839160040186830161108e565b03601f198101835282610e64565b60405163f0ffa18560e01b815294859283923391829160048601611130565b038184305af19081156103fa57906103c3575b602090604051908152f35b506020813d6020116103f2575b816103dd60209383610e64565b810103126103ee57602090516103b8565b5f80fd5b3d91506103d0565b604051903d90823e3d90fd5b503461017a578060031936011261017a57602090604051908152f35b503461017a57602036600319011261017a576004356001600160401b03811161017857610453903690600401610f74565b61045e9291926118b4565b50820191602081840312610178578035906001600160401b03821161030157019160a083820312610178576040519161049683610e12565b61049f84610dab565b83526020840135906001600160401b03821161017a5750926104c86080926104fb958301610ed6565b60208401526104d960408201610dab565b6040840152606081013560608401520135608082015260405191829182611008565b0390f35b503461017a57602036600319011261017a576105196118b4565b506105226111b6565b506040516328c44a9960e21b815260048035908201529080826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156105fe5781926105da575b5060208201517f0000000000000000000000000000000000000000000000000000000000000000036105cb576104fb6105bf6101208401516020808251830101910161131d565b60405191829182611008565b635527981560e11b8152600490fd5b6105f79192503d8084833e6105ef8183610e64565b810190611242565b905f610578565b50604051903d90823e3d90fd5b503461017a5760a036600319011261017a57610625610d7f565b5061062e610d95565b506044356001600160401b0381116101785761064e903690600401610fa1565b506064356001600160401b0381116101785761066e903690600401610fa1565b506084356001600160401b0381116101785761068e903690600401610ed6565b5060405163bc197c8160e01b8152602090f35b503461017a57606036600319011261017a57600435906001600160401b03821161017a5760206101d66106d73660048601610f74565b6106df610d29565b9160443592339233926119e9565b60206102f76106fb36610f24565b92610707929192611e60565b6113d0565b503461017a576104fb61072761072136610d13565b90611474565b604051918291602083526020830190610dbf565b503461017a57602036600319011261017a57600435906001600160401b03821161017a5761077461076f3660048501610ed6565b6113a7565b604080516001600160a01b0390931683526020830181905282916104fb91830190610dbf565b346103ee5760203660031901126103ee576004356107b66111b6565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f9181610912575b5061081c57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b036060820151164210610903576108576101208201519160c060018060a01b0391015116916020808251830101910161131d565b60408101805160608301805160809094018051919490926001600160a01b031691823b156103ee576108a4925f9283604051809681958294637921219560e11b84528d3060048601611df5565b03925af190816108f3575b506108e85790519151905160405163334a7d1b60e21b81529384936108e493919030906001600160a01b031660048701611e2d565b0390fd5b602060405160018152f35b5f6108fd91610e64565b5f6108af565b637bf6a16f60e01b5f5260045ffd5b6109279192503d805f833e6105ef8183610e64565b9083610804565b346103ee575f3660031901126103ee5760608060405161094d81610de3565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610ac4575f90610a14575b6060906104fb604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610dbf565b503d805f833e610a248183610e64565b8101906020818303126103ee578051906001600160401b0382116103ee57016080818303126103ee5760405190610a5a82610de3565b8051825260208101516001600160a01b03811681036103ee576020830152610a8460408201611173565b60408301526060810151906001600160401b0382116103ee570182601f820112156103ee57606092816020610abb93519101611180565b828201526109ce565b6040513d5f823e3d90fd5b346103ee575f3660031901126103ee5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346103ee575f3660031901126103ee576104fb60206107276001610b4c7f0000000000000000000000000000000000000000000000000000000000000000611c88565b8184610b777f0000000000000000000000000000000000000000000000000000000000000000611c88565b8180610ba27f0000000000000000000000000000000000000000000000000000000000000000611c88565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610e64565b346103ee5760803660031901126103ee576004356001600160401b0381116103ee5760a060031982360301126103ee576020610c31610d29565b610c5d610c86610c3f610d53565b94610c6b610c4b610d69565b9160405194859160040188830161108e565b03601f198101855284610e64565b60405163f0ffa18560e01b8152958694859460048601611130565b03815f305af18015610ac4575f906103c357602090604051908152f35b346103ee57610cb461072136610d13565b50602060405160018152f35b346103ee5760203660031901126103ee576004359063ffffffff60e01b82168092036103ee57602091630271189760e51b8114908115610d02575b5015158152f35b6301ffc9a760e01b14905083610cfb565b60409060031901126103ee576004359060243590565b602435906001600160401b03821682036103ee57565b35906001600160401b03821682036103ee57565b604435906001600160a01b03821682036103ee57565b606435906001600160a01b03821682036103ee57565b600435906001600160a01b03821682036103ee57565b602435906001600160a01b03821682036103ee57565b35906001600160a01b03821682036103ee57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610dfe57604052565b634e487b7160e01b5f52604160045260245ffd5b60a081019081106001600160401b03821117610dfe57604052565b61014081019081106001600160401b03821117610dfe57604052565b604081019081106001600160401b03821117610dfe57604052565b90601f801991011681019081106001600160401b03821117610dfe57604052565b6001600160401b038111610dfe57601f01601f191660200190565b929192610eac82610e85565b91610eba6040519384610e64565b8294818452818301116103ee578281602093845f960137010152565b9080601f830112156103ee57816020610ef193359101610ea0565b90565b9181601f840112156103ee578235916001600160401b0383116103ee576020808501948460051b0101116103ee57565b60406003198201126103ee576004356001600160401b0381116103ee5781610f4e91600401610ef4565b92909291602435906001600160401b0382116103ee57610f7091600401610ef4565b9091565b9181601f840112156103ee578235916001600160401b0383116103ee57602083818601950101116103ee57565b9080601f830112156103ee578135916001600160401b038311610dfe578260051b9060405193610fd46020840186610e64565b84526020808501928201019283116103ee57602001905b828210610ff85750505090565b8135815260209182019101610feb565b6020815260018060a01b03825116602082015260a06080611037602085015183604086015260c0850190610dbf565b93600180841b036040820151166060850152606081015182850152015191015290565b60206003198201126103ee57600435906001600160401b0382116103ee576101409082900360031901126103ee5760040190565b602081526001600160a01b036110a383610dab565b1660208201526020820135601e19833603018112156103ee5782016020813591016001600160401b0382116103ee5781360381136103ee5760e0938260809260a060408701528160c0870152868601375f8484018601526001600160a01b0361110e60408301610dab565b166060850152606081013582850152013560a0830152601f8019910116010190565b90935f936001600160401b03611152608095989760a0865260a0860190610dbf565b971660208401526001600160a01b0390811660408401521660608201520152565b519081151582036103ee57565b92919261118c82610e85565b9161119a6040519384610e64565b8294818452818301116103ee578281602093845f96015e010152565b604051906111c382610e2d565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b03821682036103ee57565b51906001600160a01b03821682036103ee57565b9080601f830112156103ee578151610ef192602001611180565b6020818303126103ee578051906001600160401b0382116103ee5701610140818303126103ee576040519161127683610e2d565b815183526020820151602084015261129060408301611200565b60408401526112a160608301611200565b60608401526112b260808301611200565b608084015260a082015160a08401526112cd60c08301611214565b60c08401526112de60e08301611214565b60e08401526112f06101008301611173565b6101008401526101208201516001600160401b0381116103ee576113149201611228565b61012082015290565b6020818303126103ee578051906001600160401b0382116103ee57019060a0828203126103ee576040519161135183610e12565b61135a81611214565b835260208101516001600160401b0381116103ee5760809261137d918301611228565b602084015261138e60408201611214565b6040840152606081015160608401520151608082015290565b6113ba906020808251830101910161131d565b80516020909101516001600160a01b0390911691565b929092818403611465575f91345b8584101561145a5781841015611446578360051b80860135908282116114375784013561013e19853603018112156103ee5761141b908501611ea1565b1561142c57600191039301926113de565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f61147e6111b6565b506114876111b6565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692905f81602481875afa5f9181611898575b506114f057856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481895afa5f918161187c575b5061153057866301fb6dd160e01b5f5260045260245ffd5b9592939461153d82611eba565b1561186d576101208201918251611553906113a7565b91516040805163e6c9714d60e01b81526060600482018190528c51606483015260208d01516084830152918c01516001600160401b0390811660a4830152918c0151821660c482015260808c015190911660e482015260a08b015161010482015260c08b0180516001600160a01b0390811661012484015260e08d0151166101448301526101008c01511515610164830152610120909b015161014061018483015290938492839290919061160d906101a4850190610dbf565b83810360031901602485015261162291610dbf565b60448301919091526001600160a01b039093169203815a93602094fa908115610ac4575f91611833575b50156118245760405161165e81610e49565b8581525f60208201526040519061167482610e49565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156103ee5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af1908161180f575b506116f65763614cf93960e01b85526004849052602485fd5b519461171560018060a01b03825116966020808251830101910161131d565b94604086019360018060a01b0385511695606088019760808951910197885191813b1561180b576117649286928392838f60405197889586948593637921219560e11b85523060048601611df5565b03925af191826117f2575b50506117a65785518851885160405163334a7d1b60e21b81529283926108e492918e9030906001600160a01b031660048701611e2d565b9397509350935093507ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0604051946117df602087610e64565b848652516001600160a01b03169380a490565b816117fc91610e64565b61180757835f61176f565b8380fd5b8580fd5b61181c9196505f90610e64565b5f945f6116dd565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611865575b8161184e60209383610e64565b810103126103ee5761185f90611173565b5f61164c565b3d9150611841565b63629cd40b60e11b5f5260045ffd5b6118919192503d805f833e6105ef8183610e64565b905f611518565b6118ad9192503d805f833e6105ef8183610e64565b905f6114d8565b604051906118c182610e12565b5f608083828152606060208201528260408201528260608201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119da5761191381611eba565b156119d4576119336101206119439201516020808251830101910161131d565b916020808251830101910161131d565b604082810151908201516001600160a01b0390811691161491826119c1575b826119ad575b82611994575b8261197857505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061196e565b915060808201516080820151111591611968565b9150606082015160608201511491611962565b50505f90565b635f9bd90760e11b5f5260045ffd5b91959095949294611a0d6119fe368986610ea0565b6020808251830101910161131d565b9460408601948551945f9560018060a01b031699606089019a60808c519a01998a51823b156103ee57611a5d925f92838f60405196879586948593637921219560e11b8552309060048601611df5565b03925af19081611c73575b50611a9e578a8a6108e48b8b60018060a01b03905116935190519060405194859463334a7d1b60e21b8652309160048701611e2d565b929650929650939750611ab49296503691610ea0565b906040519260c084018481106001600160401b03821117611c5f57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a08201526020604051611b1381610e49565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611bb4608083015160c060e4860152610124850190610dbf565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611c54578491611c22575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611c4c575b81611c3d60209383610e64565b810103126103ee57515f611bfa565b3d9150611c30565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b611c809198505f90610e64565b5f965f611a68565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611dd2575b806d04ee2d6d415b85acef8100000000600a921015611db7575b662386f26fc10000811015611da3575b6305f5e100811015611d92575b612710811015611d83575b6064811015611d75575b1015611d6a575b600a60216001840193611d0f85610e85565b94611d1d6040519687610e64565b808652611d2c601f1991610e85565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611d6557600a9091611d37565b505090565b600190910190611cfd565b606460029104930192611cf6565b61271060049104930192611cec565b6305f5e10060089104930192611ce1565b662386f26fc1000060109104930192611cd4565b6d04ee2d6d415b85acef810000000060209104930192611cc4565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611caa565b6001600160a01b039182168152911660208201526040810191909152606081019190915260a0608082018190525f9082015260c00190565b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611e9257565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b0381168091036103ee57301490565b6001600160401b036060820151168015159081611f0b575b50611efc57608001516001600160401b0316611eed57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611ed256fea264697066735822122089bbea21e8a61b0b0825590f99e098be95d20a8703cb78454fe538e9ca0edb5664736f6c634300081b0033",
    sourceMap: "533:5490:121:-:0;;;;;;;;;;-1:-1:-1;533:5490:121;;;;;;;;;1183:12:9;;;1054:5;1183:12;533:5490:121;1054:5:9;1183:12;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;-1:-1:-1;533:5490:121;;-1:-1:-1;;;533:5490:121;;;;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;3045:39:9;533:5490:121;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;533:5490:121:-;;;;;;;-1:-1:-1;;533:5490:121;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;4830:187;533:5490;4871:16;;533:5490;;:::i;:::-;;;;;;;;;4871:16;;;;:::i;:::-;;5277;;4871;;;;;;:::i;:::-;533:5490;;-1:-1:-1;;;4830:187:121;;533:5490;;;;;4937:10;;;;533:5490;4830:187;;;:::i;:::-;;:4;;;:187;;;;;;;;;;533:5490;;;;;;;;;4830:187;;533:5490;4830:187;;533:5490;4830:187;;;;;;533:5490;4830:187;;;:::i;:::-;;;533:5490;;;;;;;4830:187;;533:5490;-1:-1:-1;533:5490:121;;4830:187;;;-1:-1:-1;4830:187:121;;;533:5490;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;5980:34;;533:5490;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;533:5490:121;;-1:-1:-1;;;2392:23:77;;533:5490:121;;;2392:23:77;;;533:5490:121;;;;2392:23:77;533:5490:121;2392:3:77;-1:-1:-1;;;;;533:5490:121;2392:23:77;;;;;;;;;;;533:5490:121;2429:19:77;533:5490:121;2429:19:77;;533:5490:121;2452:18:77;2429:41;2425:87;;533:5490:121;5795:46;5806:16;;;;533:5490;;;;5795:46;;;;;;:::i;:::-;533:5490;;;;;;;:::i;2425:87:77:-;-1:-1:-1;;;2491:21:77;;533:5490:121;;2491:21:77;2392:23;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;533:5490:121;;;;;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;-1:-1:-1;533:5490:121;;-1:-1:-1;;;533:5490:121;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;716:142:80;533:5490:121;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;533:5490:121:-;;1442:1461:9;533:5490:121;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;533:5490:121:-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;533:5490:121;;;;;;;;:::i;:::-;-1:-1:-1;533:5490:121;;-1:-1:-1;;;3989:23:78;;533:5490:121;3989:23:78;;533:5490:121;;;-1:-1:-1;533:5490:121;3989:23:78;533:5490:121;3989:3:78;-1:-1:-1;;;;;533:5490:121;3989:23:78;;533:5490:121;;3989:23:78;;;533:5490:121;-1:-1:-1;3985:172:78;;4122:24;;;;533:5490:121;4122:24:78;533:5490:121;;3989:23:78;533:5490:121;4122:24:78;3985:172;-1:-1:-1;;;;;4189:26:78;;;533:5490:121;;4171:15:78;:44;4167:87;;3325:34:121;4334:16:78;;;;533:5490:121;4352:21:78;533:5490:121;;;;;4352:21:78;;533:5490:121;;;;;;;3325:34;;;;;;:::i;:::-;533:5490;3395:13;;533:5490;;4189:26:78;3495:15:121;;533:5490;;3528:14;;;;533:5490;;3495:15;;3528:14;;-1:-1:-1;;;;;533:5490:121;;3386:190;;;;;;533:5490;;;;;;;;;;;;;;;3386:190;;3452:4;;533:5490;3386:190;;;:::i;:::-;;;;;;;;;3985:172:78;-1:-1:-1;3370:481:121;;533:5490;;;;;;;;-1:-1:-1;;;3658:182:121;;533:5490;;;3658:182;;533:5490;3658:182;3452:4;;-1:-1:-1;;;;;533:5490:121;;3658:182;;;:::i;:::-;;;;3370:481;533:5490;;;;;;;3386:190;533:5490;3386:190;;;:::i;:::-;533:5490;3386:190;;4167:87:78;4236:18;;;533:5490:121;4236:18:78;533:5490:121;;4236:18:78;3989:23;;;;;;;533:5490:121;3989:23:78;;;;;;:::i;:::-;;;;;533:5490:121;;;;;;-1:-1:-1;;533:5490:121;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;533:5490:121;1497:44:77;;533:5490:121;;;1497:44:77;533:5490:121;;;;;;1497:14:77;533:5490:121;1497:44:77;;;;;;533:5490:121;1497:44:77;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;533:5490:121;1497:44:77;;;;;;:::i;:::-;;;533:5490:121;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;;533:5490:121;;;;;;;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;542:43:77;533:5490:121;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;1055:104:6;;533:5490:121;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;533:5490:121;;;;;;;;;;;;1055:104:6;;;533:5490:121;;;;-1:-1:-1;;;533:5490:121;;;;;;;;;;;;;;;;;-1:-1:-1;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;1055:104:6;;5277:16:121;;1055:104:6;;;;;;:::i;533:5490:121:-;;;;;;-1:-1:-1;;533:5490:121;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;:::i;:::-;5277:16;5236:181;533:5490;;:::i;:::-;;5277:16;533:5490;;:::i;:::-;;;;;;;;;5277:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;533:5490;;-1:-1:-1;;;5236:181:121;;533:5490;;;;;;5236:181;;;:::i;:::-;;:4;533:5490;5236:4;:181;;;;;;533:5490;5236:181;;;533:5490;;;;;;;;;;;;5546:37;533:5490;;;:::i;5546:37::-;;533:5490;;;5600:4;533:5490;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;775:49:41;;;:89;;;;533:5490:121;;;;;;;775:89:41;-1:-1:-1;;;862:40:68;;-1:-1:-1;775:89:41;;;533:5490:121;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:5490:121;;;;;;;;-1:-1:-1;;533:5490:121;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;:::o;:::-;;;;-1:-1:-1;533:5490:121;;;;;-1:-1:-1;533:5490:121;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;:::o;:::-;;;5277:16;;533:5490;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;:::o;:::-;-1:-1:-1;;;;;533:5490:121;;;;;;-1:-1:-1;;533:5490:121;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:5490:121;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;533:5490:121;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;533:5490:121;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;-1:-1:-1;;533:5490:121;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:5490:121;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5277:16;;533:5490;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:5490:121;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;533:5490:121;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;-1:-1:-1;533:5490:121;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:5490:121;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;1321:267::-;1497:34;1321:267;1497:34;533:5490;;;1497:34;;;;;;:::i;:::-;533:5490;;1497:34;1566:14;;;;-1:-1:-1;;;;;533:5490:121;;;;1321:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;533:5490:121;;;;;;;;;;;;;4064:22:9;;;;4060:87;;533:5490:121;;;;;;;;;;;;;;4274:33:9;533:5490:121;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;533:5490:121;;3896:19:9;533:5490:121;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;533:5490:121;;;;3881:1:9;533:5490:121;;;;;3881:1:9;533:5490:121;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2054:1760:78;;-1:-1:-1;533:5490:121;;:::i;:::-;2224:30:78;533:5490:121;;:::i;:::-;-1:-1:-1;533:5490:121;;-1:-1:-1;;;2317:27:78;;;;;533:5490:121;;;2317:3:78;-1:-1:-1;;;;;533:5490:121;;;-1:-1:-1;533:5490:121;2317:27:78;533:5490:121;;2317:27:78;;-1:-1:-1;;2317:27:78;;;2054:1760;-1:-1:-1;2313:219:78;;4122:24;;;;-1:-1:-1;2493:28:78;2317:27;533:5490:121;2317:27:78;-1:-1:-1;2493:28:78;2313:219;2428:26;;;;;533:5490:121;;;;;2546:32:78;;;2317:27;2546:32;;533:5490:121;-1:-1:-1;2546:32:78;2317:27;2546:32;;;;-1:-1:-1;;2546:32:78;;;2313:219;-1:-1:-1;2542:234:78;;4122:24;;;;-1:-1:-1;2732:33:78;2317:27;533:5490:121;2317:27:78;-1:-1:-1;2732:33:78;2542:234;2662:31;;;;2791:24;;;:::i;:::-;2790:25;2786:64;;2994:11;;;;;;2957:58;;;:::i;:::-;533:5490:121;;;;;-1:-1:-1;;;3086:66:78;;533:5490:121;2317:27:78;3086:66;;533:5490:121;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;2994:11:78;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;533:5490:121;2317:27:78;533:5490:121;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;3086:66:78;;;;533:5490:121;3086:66:78;;;;;;;-1:-1:-1;3086:66:78;;;2542:234;3085:67;;3081:112;;533:5490:121;;;;;:::i;:::-;;;;-1:-1:-1;533:5490:121;3372:47:78;;533:5490:121;;;;;;;:::i;:::-;3326:18:78;533:5490:121;;;3278:160:78;;533:5490:121;;;3250:202:78;;;;;533:5490:121;-1:-1:-1;533:5490:121;;;;;;;;;;;;;;3250:202:78;;533:5490:121;2317:27:78;3250:202;;533:5490:121;;;;2317:27:78;533:5490:121;;;;;;;;;3250:202:78;;;;;;2542:234;-1:-1:-1;3234:293:78;;-1:-1:-1;;;3491:25:78;;2317:27;533:5490:121;;;2317:27:78;3491:25;;3234:293;3625:11;533:5490:121;2525:74;533:5490;;;;;;;;;;;;;2525:74;;;;;;:::i;:::-;2635:13;533:5490;2635:13;;533:5490;;;;;;;;;2735:15;533:5490;2735:15;;533:5490;;;;2768:14;;533:5490;;;2626:190;;;;;;;533:5490;;;;;;;;;;;;;;;;;;;2626:190;;2692:4;2317:27:78;2626:190:121;;;:::i;:::-;;;;;;;;;3234:293:78;-1:-1:-1;;2610:481:121;;533:5490;;;;;;;;-1:-1:-1;;;2898:182:121;;533:5490;;;2898:182;;533:5490;;;2692:4;;-1:-1:-1;;;;;533:5490:121;2317:27:78;2898:182:121;;;:::i;2610:481::-;;;;;;;;;;3723:61:78;533:5490:121;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;533:5490:121;;;3723:61:78;2054:1760;:::o;2626:190:121:-;;;;;:::i;:::-;533:5490;;2626:190;;;;533:5490;;;;2626:190;533:5490;;;3250:202:78;;;;;-1:-1:-1;3250:202:78;;:::i;:::-;-1:-1:-1;3250:202:78;;;;3081:112;3173:20;;;-1:-1:-1;3173:20:78;2317:27;-1:-1:-1;3173:20:78;3086:66;;;533:5490:121;3086:66:78;;533:5490:121;3086:66:78;;;;;;533:5490:121;3086:66:78;;;:::i;:::-;;;533:5490:121;;;;;;;:::i;:::-;3086:66:78;;;;;;-1:-1:-1;3086:66:78;;2786:64;2824:26;;;-1:-1:-1;2824:26:78;2317:27;-1:-1:-1;2824:26:78;2546:32;;;;;;;-1:-1:-1;2546:32:78;;;;;;:::i;:::-;;;;;2317:27;;;;;;;-1:-1:-1;2317:27:78;;;;;;:::i;:::-;;;;;533:5490:121;;;;;;;:::i;:::-;-1:-1:-1;533:5490:121;;;;;;;;;;;;;;;;;;;;;;:::o;3889:749::-;4102:18;1016:17:76;;;533:5490:121;1016:27:76;1012:55;;1084:27;;;:::i;:::-;4074:47:121;4070:65;;4178:79;4202:15;4302:36;4202:15;;;1016:17:76;533:5490:121;;;4178:79;;;;;;:::i;:::-;533:5490;1016:17:76;533:5490:121;;;4302:36;;;;;;:::i;:::-;4368:13;;;;533:5490;4385:16;;;533:5490;-1:-1:-1;;;;;533:5490:121;;;;;4368:33;;;:86;;3889:749;4368:137;;;3889:749;4368:190;;;3889:749;4368:263;;;4349:282;;3889:749;:::o;4368:263::-;1016:17:76;4584:14:121;;;;;;533:5490;;;;;4574:25;4613:17;;;1016::76;533:5490:121;;;;4603:28;4574:57;3889:749;:::o;4368:190::-;533:5490;;;;-1:-1:-1;;;;;533:5490:121;;;;;4521:37;;-1:-1:-1;4368:190:121;;:137;4470:14;;;;;533:5490;4470:14;4488:17;;533:5490;-1:-1:-1;4470:35:121;4368:137;;;:86;4417:15;;;;;533:5490;4417:15;4436:18;;533:5490;4417:37;4368:86;;;4070:65;4123:12;;533:5490;4123:12;:::o;1012:55:76:-;1052:15;;;533:5490:121;1052:15:76;;533:5490:121;1052:15:76;871:377:80;;;;;;;;1743:34:121;533:5490;;;;;:::i;:::-;1743:34;533:5490;;;1743:34;;;;;;:::i;:::-;1813:13;;;;533:5490;;;;-1:-1:-1;533:5490:121;;;;;;;1915:15;;;;533:5490;1948:14;533:5490;;1948:14;;533:5490;;;1804:192;;;;;;533:5490;-1:-1:-1;533:5490:121;;;1813:13;533:5490;;;;;;;;;;;1804:192;;1892:4;1804:192;;;;;:::i;:::-;;;;;;;;;871:377:80;-1:-1:-1;1788:485:121;;533:5490;;2078:184;533:5490;;;;;;;;;;;;;;;1813:13;533:5490;3658:182;;;;;;2078:184;;1892:4;2078:184;1804:192;2078:184;;;:::i;1788:485::-;;;;;;;;;;533:5490;1788:485;;;533:5490;;;:::i;:::-;;1813:13;533:5490;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;-1:-1:-1;;;;;533:5490:121;1813:13;533:5490;;;;;;;;;;;;1743:34;1914:299:77;;533:5490:121;2076:4:77;1813:13:121;1914:299:77;;533:5490:121;1915:15;1914:299:77;;533:5490:121;1948:14;1914:299:77;;533:5490:121;1914:299:77;;;;533:5490:121;1743:34;1813:13;533:5490;;;;:::i;:::-;1868:18:77;533:5490:121;;1819:413:77;;;533:5490:121;;;1813:13;533:5490;;;;;;;;1791:455:77;;;1804:192:121;1791:455:77;;533:5490:121;;;;;;;1813:13;533:5490;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:5490:121;;;;;;;;;1813:13;533:5490;;;;;;;;;1915:15;533:5490;;;;;;;1914:299:77;533:5490:121;1948:14;533:5490;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;533:5490:121;;1791:3:77;-1:-1:-1;;;;;533:5490:121;1791:455:77;;;;;;;;;;;1788:485:121;1134:55:80;4820:26:78;1134:55:80;4820:26:78;;;871:377:80:o;1791:455:77:-;;;1743:34:121;1791:455:77;;1743:34:121;1791:455:77;;;;;;533:5490:121;1791:455:77;;;:::i;:::-;;;533:5490:121;;;;;1791:455:77;;;;;;-1:-1:-1;1791:455:77;;;1813:13:121;533:5490;;;;;;;;;-1:-1:-1;;;533:5490:121;;;1804:192;533:5490;;;;1804:192;;;;;-1:-1:-1;1804:192:121;;:::i;:::-;-1:-1:-1;1804:192:121;;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;533:5490:121;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;5277:16;;533:5490;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;533:5490:121;;-1:-1:-1;;;1033:111:63;;;;533:5490:121;1033:111:63;533:5490:121;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;533:5490:121;;;;26127:66:70;;26014:100;26027:7;26098:1;533:5490:121;;;;26014:100:70;;;25901;25914:7;25985:1;533:5490:121;;;;25901:100:70;;;25788;25801:7;25872:1;533:5490:121;;;;25788:100:70;;;25672:103;25685:8;25758:2;533:5490:121;;;;25672:103:70;;;25556;25569:8;25642:2;533:5490:121;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;533:5490:121;;25440:103:70;;533:5490:121;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;533:5490:121;;;;;;;:::o;:::-;-1:-1:-1;;;;;533:5490:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6040:128:9:-;6109:4;-1:-1:-1;;;;;533:5490:121;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;533:5490:121;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;612:261:76:-;-1:-1:-1;;;;;353:25:76;;;533:5490:121;;353:30:76;;;:89;;;;612:261;721:55;;;569:25;;533:5490:121;-1:-1:-1;;;;;533:5490:121;786:58:76;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:76;;-1:-1:-1;824:20:76;721:55;759:17;;;-1:-1:-1;759:17:76;;-1:-1:-1;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2856,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2899,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2942,
          length: 32
        }
      ],
      "3008": [
        {
          start: 7778,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2463,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1344,
          length: 32
        },
        {
          start: 2002,
          length: 32
        },
        {
          start: 5278,
          length: 32
        },
        {
          start: 7106,
          length: 32
        }
      ],
      "54663": [
        {
          start: 1408,
          length: 32
        },
        {
          start: 2413,
          length: 32
        },
        {
          start: 2790,
          length: 32
        },
        {
          start: 5750,
          length: 32
        },
        {
          start: 6369,
          length: 32
        },
        {
          start: 6933,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256,uint256),uint64)": "cecf1aff",
    "doObligationFor((address,bytes,address,uint256,uint256),uint64,address,address)": "3dc9f350",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "supportsInterface(bytes4)": "01ffc9a7",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC1155EscrowObligation.sol":"ERC1155EscrowObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "AttestationNotFound"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC1155TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEscrowAttestation"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidFulfillment"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "attestationId",
              type: "bytes32"
            }
          ],
          type: "error",
          name: "RevocationFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "UnauthorizedCall"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "fulfiller",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowCollected",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "EscrowMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrow",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_escrow",
              type: "bytes32"
            },
            {
              internalType: "bytes32",
              name: "_fulfillment",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "collectEscrowRaw",
          outputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC1155EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC1155EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC1155EscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "extractArbiterAndDemand",
          outputs: [
            {
              internalType: "address",
              name: "arbiter",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC1155EscrowObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "address",
              name: "",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "reclaimExpired",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "supportsInterface(bytes4)": {
            details: "See {IERC165-supportsInterface}."
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC1155EscrowObligation.sol": "ERC1155EscrowObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        keccak256: "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        urls: [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 121
};

// src/contracts/ERC1155PaymentObligation.ts
var abi47 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "checkObligation",
      inputs: [
        {
          name: "obligation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "demand",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC1155PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC1155PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationFor",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct ERC1155PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct ERC1155PaymentObligation.ObligationData",
          components: [
            {
              name: "token",
              type: "address",
              internalType: "address"
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "PaymentMade",
      inputs: [
        {
          name: "payment",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "buyer",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "AttestationRevoked",
      inputs: []
    },
    {
      type: "error",
      name: "DeadlineExpired",
      inputs: []
    },
    {
      type: "error",
      name: "ERC1155TransferFailed",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "tokenId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ]
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSchema",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "517:3587:122:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;;;1220:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;517:3587:122;790:10:9;;517:3587:122;790:10:9;;;789::77;;809:32;;-1:-1:-1;517:3587:122;;;;;;;;;;;872:48:77;;517:3587:122;872:48:77;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;904:4:77;517:3587:122;;;;1220:4;517:3587;;;;;;-1:-1:-1;;517:3587:122;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;517:3587:122;;;;;;;;759:14:6;517:3587:122;;;;;783:14:6;517:3587:122;;;;;807:14:6;517:3587:122;;;;;790:10:9;517:3587:122;;;;;809:32:77;517:3587:122;;;;;789:10:77;517:3587:122;;;;;;;;;;851:69:77;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:77;;;517:3587:122;872:48:77;;517:3587:122;872:48:77;;;;;;517:3587:122;872:48:77;;;:::i;:::-;;;517:3587:122;;;;;872:48:77;;;517:3587:122;-1:-1:-1;517:3587:122;;872:48:77;;;-1:-1:-1;872:48:77;;;517:3587:122;;;-1:-1:-1;517:3587:122;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;517:3587:122;;;;-1:-1:-1;517:3587:122;;;;;-1:-1:-1;517:3587:122;;;;;;-1:-1:-1;;517:3587:122;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "",
    sourceMap: "517:3587:122:-:0;;;;;;;;;-1:-1:-1;517:3587:122;;;;;;;;1183:12:9;;;1054:5;1183:12;517:3587:122;1054:5:9;1183:12;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;;;1757:16;517:3587;1757:16;;;517:3587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1380:16;517:3587;1380:16;;;517:3587;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;:::i;:::-;3020:672;3233:18;517:3587;;1016:27:76;1012:55;;517:3587:122;-1:-1:-1;;;;;517:3587:122;353:30:76;;;;;:89;;517:3587:122;721:55:76;;;517:3587:122;-1:-1:-1;;;;;517:3587:122;786:58:76;;3433:36:122;3309:79;517:3587;3333:15;;517:3587;;;;3309:79;;;;;;:::i;:::-;517:3587;;;;;3433:36;;;;;;:::i;:::-;517:3587;;;;-1:-1:-1;;;;;517:3587:122;;;;;3499:33;;;:86;;517:3587;3499:137;;;517:3587;3499:186;;;517:3587;3480:205;;517:3587;;;;;;;;3499:186;517:3587;3652:13;;;517:3587;3669:16;;517:3587;-1:-1:-1;;;;;517:3587:122;;;;;3652:33;;-1:-1:-1;3499:186:122;;;;:137;3601:14;;517:3587;3601:14;;517:3587;;3619:17;;517:3587;-1:-1:-1;3601:35:122;3499:137;;;:86;3548:15;;;517:3587;3567:18;;;517:3587;3548:37;;-1:-1:-1;3499:86:122;;786:58:76;824:20;;;517:3587:122;824:20:76;517:3587:122;;824:20:76;721:55;759:17;;;517:3587:122;759:17:76;517:3587:122;;759:17:76;353:89;427:15;;;-1:-1:-1;353:89:76;;;1012:55;1052:15;;;517:3587:122;1052:15:76;517:3587:122;;1052:15:76;517:3587:122;;;;;;-1:-1:-1;;517:3587:122;;;;1413:145;1380:16;517:3587;;1380:16;;;;;;;:::i;:::-;;1055:104:6;;1380:16:122;;;;;;:::i;:::-;517:3587;;;;;;;;;1413:145;;1490:10;;;1413:145;517:3587;1413:145;;;:::i;:::-;;:4;517:3587;1413:4;:145;;;;;;517:3587;1413:145;;;517:3587;1380:16;517:3587;;;;;;;1413:145;;1380:16;1413:145;;1380:16;1413:145;;;;;;517:3587;1413:145;;;:::i;:::-;;;517:3587;;;;1380:16;517:3587;;1413:145;;;;;-1:-1:-1;1413:145:122;;;517:3587;;;;;;;;;;;3045:39:9;517:3587:122;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;517:3587:122;;;;;;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;;;;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;-1:-1:-1;;;;;517:3587:122;;;;4061:34;517:3587;;;;;;;;:::i;:::-;;;:::i;:::-;;4061:34;;;;:::i;:::-;517:3587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:77;;517:3587:122;;;2392:23:77;;517:3587:122;;;2392:23:77;517:3587:122;;;;;;2392:3:77;517:3587:122;2392:23:77;;;;;;;517:3587:122;2392:23:77;;;517:3587:122;2429:19:77;517:3587:122;2429:19:77;;517:3587:122;2452:18:77;2429:41;2425:87;;3876:46:122;517:3587;;3887:16;;;517:3587;;;;3876:46;;;;;;:::i;2425:87:77:-;2491:21;;;517:3587:122;2491:21:77;517:3587:122;;2491:21:77;2392:23;;;;;517:3587:122;2392:23:77;;;;;;:::i;:::-;;;517:3587:122;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:77;;;517:3587:122;;;;;;-1:-1:-1;;517:3587:122;;;;;;-1:-1:-1;;;;;517:3587:122;;;;716:142:80;517:3587:122;;;;;;;;:::i;:::-;;;:::i;:::-;;;;794:10:80;;;;716:142;;:::i;517:3587:122:-;;1442:1461:9;517:3587:122;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;517:3587:122:-;;;;;-1:-1:-1;;517:3587:122;;;;;;;-1:-1:-1;517:3587:122;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;1757:16;517:3587;;;1757:16;;;;;;;:::i;:::-;1790:139;517:3587;;;;;;;;;;1790:139;;517:3587;1790:139;;;:::i;517:3587::-;;;;;;-1:-1:-1;;517:3587:122;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;517:3587:122;1497:44:77;;517:3587:122;;;1497:44:77;517:3587:122;;;;;;1497:14:77;517:3587:122;1497:44:77;;;;;;517:3587:122;1497:44:77;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;517:3587:122;1497:44:77;;;;;;:::i;:::-;;;517:3587:122;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;517:3587:122;;;;;;-1:-1:-1;;517:3587:122;;;;;;;542:43:77;517:3587:122;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;1055:104:6;;517:3587:122;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;517:3587:122;;;;;;;;;;;;1055:104:6;;;517:3587:122;;;;-1:-1:-1;;;517:3587:122;;;;;;;;;;;;;;;;;-1:-1:-1;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;517:3587:122;;;;;1055:104:6;517:3587:122;;1055:104:6;517:3587:122;;;;;;;;;;;;;;;;;;;;-1:-1:-1;517:3587:122;;;;;;;;-1:-1:-1;;517:3587:122;;;;:::o;:::-;;;-1:-1:-1;;;;;517:3587:122;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;517:3587:122;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;517:3587:122;;;;;;:::o;:::-;;;-1:-1:-1;;;;;517:3587:122;;;;;;:::o;:::-;;-1:-1:-1;;517:3587:122;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;-1:-1:-1;;517:3587:122;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;:::o;:::-;;;;-1:-1:-1;517:3587:122;;;;;-1:-1:-1;517:3587:122;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;:::o;:::-;;;1055:104:6;;517:3587:122;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;:::o;:::-;-1:-1:-1;;;;;517:3587:122;;;;;;-1:-1:-1;;517:3587:122;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;517:3587:122;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;517:3587:122;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;517:3587:122;;;;;;;;;;;;;4064:22:9;;;;4060:87;;517:3587:122;;;;;;;;;;;;;;4274:33:9;517:3587:122;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;517:3587:122;;3896:19:9;517:3587:122;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;517:3587:122;;;;3881:1:9;517:3587:122;;;;;3881:1:9;517:3587:122;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;517:3587:122;;;;;;;:::i;:::-;-1:-1:-1;517:3587:122;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;517:3587:122;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;871:377:80:-;;;;;;;;2123:68:122;;;;;;:::i;:::-;517:3587;;;;-1:-1:-1;2356:20:122;;;;517:3587;;;;;;;;;2394:22;;;517:3587;;;2434:21;;;;517:3587;;;;;;;;2268:221;;;;2434:21;517:3587;-1:-1:-1;;;2268:221:122;;-1:-1:-1;;;;;517:3587:122;;;2268:221;;;517:3587;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;517:3587:122;;;;;;-1:-1:-1;517:3587:122;;2268:221;;517:3587;;-1:-1:-1;;517:3587:122;2268:221;;;;;;871:377:80;-1:-1:-1;2252:543:122;;517:3587;;;;;;2434:21;;;;517:3587;;;-1:-1:-1;;;2571:213:122;;-1:-1:-1;;;;;517:3587:122;;;2268:221;2571:213;;517:3587;;;;;;;;;;;;;;;;;;;;;;;;;;2571:213;2252:543;;;;;;;;;517:3587;2252:543;;;517:3587;;;:::i;:::-;;2434:21;517:3587;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;-1:-1:-1;;;;;517:3587:122;2434:21;517:3587;;;;;;;;;;;;2394:22;1914:299:77;;517:3587:122;2076:4:77;2434:21:122;1914:299:77;;517:3587:122;2356:20;1914:299:77;;517:3587:122;;1914:299:77;;517:3587:122;1914:299:77;517:3587:122;1914:299:77;;517:3587:122;2434:21;517:3587;2434:21;517:3587;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;2394:22;517:3587;2434:21;517:3587;1868:18:77;517:3587:122;;1819:413:77;;;517:3587:122;;;2434:21;517:3587;;;;;;;;1791:455:77;;;2268:221:122;1791:455:77;;517:3587:122;;;;;;;2434:21;517:3587;;;;;;;;;;;;;;;;-1:-1:-1;;;;;517:3587:122;;;;;;;;;2434:21;517:3587;;;;;;;;;2356:20;517:3587;;;2268:221;517:3587;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;517:3587:122;;1791:3:77;-1:-1:-1;;;;;517:3587:122;1791:455:77;;;;;;;;;;;2252:543:122;1134:55:80;2980:27:122;1134:55:80;2980:27:122;;;871:377:80:o;1791:455:77:-;;;2394:22:122;1791:455:77;;2394:22:122;1791:455:77;;;;;;517:3587:122;1791:455:77;;;:::i;:::-;;;517:3587:122;;;;;1791:455:77;;;;;;-1:-1:-1;1791:455:77;;;2434:21:122;517:3587;;;;;;;;;-1:-1:-1;;;517:3587:122;;;2268:221;517:3587;;;;;-1:-1:-1;;;517:3587:122;;;2268:221;517:3587;;;;2268:221;;;;;-1:-1:-1;2268:221:122;;:::i;:::-;-1:-1:-1;2268:221:122;;;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;517:3587:122;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;517:3587:122;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;517:3587:122;;-1:-1:-1;;;1033:111:63;;;;517:3587:122;1033:111:63;517:3587:122;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;517:3587:122;;;;26127:66:70;;26014:100;26027:7;26098:1;517:3587:122;;;;26014:100:70;;;25901;25914:7;25985:1;517:3587:122;;;;25901:100:70;;;25788;25801:7;25872:1;517:3587:122;;;;25788:100:70;;;25672:103;25685:8;25758:2;517:3587:122;;;;25672:103:70;;;25556;25569:8;25642:2;517:3587:122;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;517:3587:122;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;517:3587:122;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;517:3587:122;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;517:3587:122:-;;;-1:-1:-1;;;;;517:3587:122;;;;;;:::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2522,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2565,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2608,
          length: 32
        }
      ],
      "3008": [
        {
          start: 4969,
          length: 32
        }
      ],
      "54658": [
        {
          start: 2140,
          length: 32
        }
      ],
      "54661": [
        {
          start: 1411,
          length: 32
        },
        {
          start: 4384,
          length: 32
        }
      ],
      "54663": [
        {
          start: 612,
          length: 32
        },
        {
          start: 1467,
          length: 32
        },
        {
          start: 2090,
          length: 32
        },
        {
          start: 2456,
          length: 32
        },
        {
          start: 4211,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,uint256,address))": "e665ba15",
    "doObligationFor((address,uint256,uint256,address),address,address)": "6f0aa0de",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC1155PaymentObligation.sol":"ERC1155PaymentObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3","license":"UNLICENSED","urls":["bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10","dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "AttestationRevoked"
        },
        {
          inputs: [],
          type: "error",
          name: "DeadlineExpired"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address"
            },
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256"
            }
          ],
          type: "error",
          name: "ERC1155TransferFailed"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSchema"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "payment",
              type: "bytes32",
              indexed: true
            },
            {
              internalType: "address",
              name: "buyer",
              type: "address",
              indexed: true
            }
          ],
          type: "event",
          name: "PaymentMade",
          anonymous: false
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "obligation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "bytes",
              name: "demand",
              type: "bytes"
            },
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "checkObligation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct ERC1155PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC1155PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct ERC1155PaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationFor",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct ERC1155PaymentObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "token",
                  type: "address"
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256"
                },
                {
                  internalType: "uint256",
                  name: "amount",
                  type: "uint256"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/ERC1155PaymentObligation.sol": "ERC1155PaymentObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        keccak256: "0x1640f97d08fd4729295b4a5b0379202e2d7029af9fadad512d7771ea978ed1c3",
        urls: [
          "bzz-raw://a56a04e2a31e8633fe9d5f4c93ea080c474398341a24f7fcf06e2015268b4d10",
          "dweb:/ipfs/QmXMxmP1LquPzgnAoB1vcUTzmoRsk3Kkh4Yz7mxaNGafET"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 122
};

// src/contracts/IERC1155.ts
var abi48 = {
  abi: [
    {
      type: "function",
      name: "balanceOf",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address"
        },
        {
          name: "id",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "balanceOfBatch",
      inputs: [
        {
          name: "accounts",
          type: "address[]",
          internalType: "address[]"
        },
        {
          name: "ids",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isApprovedForAll",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address"
        },
        {
          name: "operator",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "safeBatchTransferFrom",
      inputs: [
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "ids",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "safeTransferFrom",
      inputs: [
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "id",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setApprovalForAll",
      inputs: [
        {
          name: "operator",
          type: "address",
          internalType: "address"
        },
        {
          name: "approved",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceId",
          type: "bytes4",
          internalType: "bytes4"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "event",
      name: "ApprovalForAll",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "operator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "approved",
          type: "bool",
          indexed: false,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "TransferBatch",
      inputs: [
        {
          name: "operator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "ids",
          type: "uint256[]",
          indexed: false,
          internalType: "uint256[]"
        },
        {
          name: "values",
          type: "uint256[]",
          indexed: false,
          internalType: "uint256[]"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "TransferSingle",
      inputs: [
        {
          name: "operator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "id",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "value",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "URI",
      inputs: [
        {
          name: "value",
          type: "string",
          indexed: false,
          internalType: "string"
        },
        {
          name: "id",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    }
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {}
  },
  methodIdentifiers: {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "isApprovedForAll(address,address)": "e985e9c5",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC-1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[ERC].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``\'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``\'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the zero address."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":"IERC1155"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "operator",
              type: "address",
              indexed: true
            },
            {
              internalType: "bool",
              name: "approved",
              type: "bool",
              indexed: false
            }
          ],
          type: "event",
          name: "ApprovalForAll",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "from",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]",
              indexed: false
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]",
              indexed: false
            }
          ],
          type: "event",
          name: "TransferBatch",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "from",
              type: "address",
              indexed: true
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
              indexed: true
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
              indexed: false
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
              indexed: false
            }
          ],
          type: "event",
          name: "TransferSingle",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "value",
              type: "string",
              indexed: false
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
              indexed: true
            }
          ],
          type: "event",
          name: "URI",
          anonymous: false
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "accounts",
              type: "address[]"
            },
            {
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "balanceOfBatch",
          outputs: [
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address"
            },
            {
              internalType: "address",
              name: "operator",
              type: "address"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "isApprovedForAll",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256[]",
              name: "ids",
              type: "uint256[]"
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "safeBatchTransferFrom"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address"
            },
            {
              internalType: "address",
              name: "to",
              type: "address"
            },
            {
              internalType: "uint256",
              name: "id",
              type: "uint256"
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256"
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "safeTransferFrom"
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address"
            },
            {
              internalType: "bool",
              name: "approved",
              type: "bool"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "setApprovalForAll"
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "balanceOf(address,uint256)": {
            details: "Returns the value of tokens of token type `id` owned by `account`."
          },
          "balanceOfBatch(address[],uint256[])": {
            details: "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
          },
          "isApprovedForAll(address,address)": {
            details: "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
          },
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            details: "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
          },
          "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            details: "Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
          },
          "setApprovalForAll(address,bool)": {
            details: "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the zero address."
          },
          "supportsInterface(bytes4)": {
            details: "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": "IERC1155"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      }
    },
    version: 1
  },
  id: 38
};

// src/clients/erc1155.ts
var erc1155EscrowDecodeFunction = getAbiItem7({
  abi: abi46.abi,
  name: "decodeObligationData"
});
var erc1155PaymentDecodeFunction = getAbiItem7({
  abi: abi47.abi,
  name: "decodeObligationData"
});
var erc1155EscrowObligationDataType = erc1155EscrowDecodeFunction.outputs[0];
var erc1155PaymentObligationDataType = erc1155PaymentDecodeFunction.outputs[0];
var makeErc1155Client = (viemClient, addresses) => {
  const encodeEscrowObligationRaw = (data) => {
    return encodeAbiParameters7([erc1155EscrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return encodeAbiParameters7([erc1155PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC1155EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC1155 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        token: token.address,
        tokenId: token.id,
        amount: token.value,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes ERC1155PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC1155 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        tokenId: token.id,
        amount: token.value,
        payee
      });
    },
    /**
     * Decodes ERC1155EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return decodeAbiParameters7([erc1155EscrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes ERC1155PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return decodeAbiParameters7([erc1155PaymentObligationDataType], obligationData)[0];
    },
    /**
     * Approves all tokens from a contract for trading
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approveAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc1155EscrowObligation : addresses.erc1155PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi48.abi,
        functionName: "setApprovalForAll",
        args: [to, true]
      });
      return hash;
    },
    /**
     * Revokes approval for all tokens from a contract
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval to revoke (escrow or payment)
     * @returns Transaction hash
     */
    revokeAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc1155EscrowObligation : addresses.erc1155PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi48.abi,
        functionName: "setApprovalForAll",
        args: [to, false]
      });
      return hash;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC1155 tokens for a custom demand
     * @param price - ERC1155 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc1155: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            amount: price.value,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC1155 tokens
     * @param price - ERC1155 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc1155: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155PaymentObligation,
        abi: abi47.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            amount: price.value,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC1155 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC1155 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc1155ForErc1155(
     *   { address: myMultiToken, id: 1n, value: 5n },
     *   { address: theirMultiToken, id: 2n, value: 10n },
     *   0n,
     * );
     * ```
     */
    buyErc1155ForErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc1155ForErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc1155(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc1155",
        args: [buyAttestation]
      });
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      return { hash };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC20 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc20WithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   { address: usdc, value: 1000n },
     *   0n,
     * );
     * ```
     */
    buyErc20WithErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc20WithErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC721 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc721WithErc1155(
     */
    buyErc721WithErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc721WithErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc721(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc721",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for a bundle of tokens
     * @param bid - ERC1155 token offered
     * @param ask - Bundle of tokens requested
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyBundleWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   tokenBundle,
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc1155: async (bid, ask, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyBundleWithErc1155",
        args: [bid.address, bid.id, bid.value, { ...flattenTokenBundle(ask), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-Bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/stringObligation.ts
import { decodeAbiParameters as decodeAbiParameters8, encodeAbiParameters as encodeAbiParameters8, getAbiItem as getAbiItem8 } from "viem";

// src/contracts/StringObligation.ts
var abi49 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_schemaRegistry",
          type: "address",
          internalType: "contract ISchemaRegistry"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "receive",
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "ATTESTATION_SCHEMA",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "attest",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "decodeObligationData",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct StringObligation.ObligationData",
          components: [
            {
              name: "item",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "doObligation",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct StringObligation.ObligationData",
          components: [
            {
              name: "item",
              type: "string",
              internalType: "string"
            }
          ]
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationForRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "payer",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "doObligationRaw",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "expirationTime",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "refUID",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "uid_",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getObligationData",
      inputs: [
        {
          name: "uid",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct StringObligation.ObligationData",
          components: [
            {
              name: "item",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSchema",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct SchemaRecord",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "resolver",
              type: "address",
              internalType: "contract ISchemaResolver"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "schema",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isPayable",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "pure"
    },
    {
      type: "function",
      name: "multiAttest",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "multiRevoke",
      inputs: [
        {
          name: "attestations",
          type: "tuple[]",
          internalType: "struct Attestation[]",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "values",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "revoke",
      inputs: [
        {
          name: "attestation",
          type: "tuple",
          internalType: "struct Attestation",
          components: [
            {
              name: "uid",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "schema",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "time",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "expirationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "revocationTime",
              type: "uint64",
              internalType: "uint64"
            },
            {
              name: "refUID",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address"
            },
            {
              name: "attester",
              type: "address",
              internalType: "address"
            },
            {
              name: "revocable",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "version",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "error",
      name: "AccessDenied",
      inputs: []
    },
    {
      type: "error",
      name: "InsufficientValue",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidEAS",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidLength",
      inputs: []
    },
    {
      type: "error",
      name: "NotFromThisAttester",
      inputs: []
    },
    {
      type: "error",
      name: "NotPayable",
      inputs: []
    }
  ],
  bytecode: {
    object: "0x61016080604052346101a4576040816111ce803803809161002082856101de565b8339810103126101a45780516001600160a01b038116918282036101a45760200151916001600160a01b0383168084036101a457604080519081016001600160401b038111828210176101ca57604052600b815260208101926a737472696e67206974656d60a81b84526001608052600360a0525f60c052156101bb576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101b0575f9161017a575b5061014052604051610fcc908161020282396080518161080c015260a05181610837015260c05181610862015260e05181610f160152610100518161069f0152610120518181816102aa0152610d3d0152610140518181816102e20152818161066d015281816107ca0152610c900152f35b90506020813d6020116101a8575b81610195602093836101de565b810103126101a457515f610108565b5f80fd5b3d9150610188565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176101ca5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146107ed5780635bf2f20d146107b35780636b122fe01461062e5780637e431351146104f557806388e5b2d9146104d657806391db0b7e146104d6578063b3b902d41461048d578063c6ec507014610221578063c93844be1461016a578063ce46e04614610150578063e49617e11461012b578063e60c35051461012b5763f0ffa1850361000e57346101275760a0366003190112610127576004356001600160401b038111610127576100ea90369060040161098f565b6100f26109bc565b916100fb610a22565b506064356001600160a01b03811681036101275760209361011f9360843593610c11565b604051908152f35b5f80fd5b6020610146610139366109ee565b610141610f14565b610f55565b6040519015158152f35b34610127575f3660031901126101275760206040515f8152f35b34610127576020366003190112610127576004356001600160401b0381116101275761019a90369060040161098f565b60606040516101a881610a67565b52810190602081830312610127578035906001600160401b038211610127570160208183031261012757604051906101df82610a67565b8035906001600160401b038211610127570182601f820112156101275761021d9281602061020f93359101610bdb565b8152604051918291826109d2565b0390f35b3461012757602036600319011261012757606060405161024081610a67565b52606061012060405161025281610a82565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610482575f9161037d575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361036e5761012001518051810190602081830312610127576020810151906001600160401b0382116101275701602081830312610127576040519061034682610a67565b6020810151906001600160401b03821161012757602061020f928161021d9601920101610b1d565b635527981560e11b5f5260045ffd5b90503d805f833e61038e8183610a9e565b810190602081830312610127578051906001600160401b0382116101275701906101408282031261012757604051916103c683610a82565b80518352602081015160208401526103e060408201610f6e565b60408401526103f160608201610f6e565b606084015261040260808201610f6e565b608084015260a081015160a084015261041d60c08201610f82565b60c084015261042e60e08201610f82565b60e08401526104406101008201610abf565b610100840152610120810151906001600160401b03821161012757019080601f8301121561012757815161047692602001610ae7565b610120820152816102da565b6040513d5f823e3d90fd5b34610127576060366003190112610127576004356001600160401b0381116101275761011f6104c2602092369060040161098f565b906104cb6109bc565b604435923392610c11565b60206101466104e43661093f565b926104f0929192610f14565b610b37565b34610127576040366003190112610127576004356001600160401b038111610127578036039060206003198301126101275760405160208082015291600482013590602219018112156101275701602460048201359101916001600160401b038211610127578136038313610127576105a1608082846020956105c397876040850152816060850152848401375f838284010152601f801991011681010301601f198101835282610a9e565b6040518093819263f0ffa18560e01b835260a0600484015260a48301906108eb565b5f6024830152336044830152336064830152602435608483015203815f305af18015610482575f906105fb575b602090604051908152f35b506020813d602011610626575b8161061560209383610a9e565b8101031261012757602090516105f0565b3d9150610608565b34610127575f3660031901126101275760608060405161064d81610a38565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610482575f90610714575b60609061021d604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a08301906108eb565b503d805f833e6107248183610a9e565b810190602081830312610127578051906001600160401b0382116101275701608081830312610127576040519061075a82610a38565b8051825260208101516001600160a01b038116810361012757602083015261078460408201610abf565b60408301526060810151926001600160401b038411610127576060936107aa9201610b1d565b828201526106ce565b34610127575f3660031901126101275760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610127575f3660031901126101275761021d60206108db60016108307f0000000000000000000000000000000000000000000000000000000000000000610da7565b818461085b7f0000000000000000000000000000000000000000000000000000000000000000610da7565b81806108867f0000000000000000000000000000000000000000000000000000000000000000610da7565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610a9e565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610127578235916001600160401b038311610127576020808501948460051b01011161012757565b6040600319820112610127576004356001600160401b03811161012757816109699160040161090f565b92909291602435906001600160401b0382116101275761098b9160040161090f565b9091565b9181601f84011215610127578235916001600160401b038311610127576020838186019501011161012757565b602435906001600160401b038216820361012757565b60406109eb9260208352519160208082015201906108eb565b90565b602060031982011261012757600435906001600160401b038211610127576101409082900360031901126101275760040190565b604435906001600160a01b038216820361012757565b608081019081106001600160401b03821117610a5357604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b03821117610a5357604052565b61014081019081106001600160401b03821117610a5357604052565b90601f801991011681019081106001600160401b03821117610a5357604052565b5190811515820361012757565b6001600160401b038111610a5357601f01601f191660200190565b929192610af382610acc565b91610b016040519384610a9e565b829481845281830111610127578281602093845f96015e010152565b9080601f830112156101275781516109eb92602001610ae7565b929092818403610bcc575f91345b85841015610bc15781841015610bad578360051b8086013590828211610b9e5784013561013e198536030181121561012757610b82908501610f55565b15610b935760019103930192610b45565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b929192610be782610acc565b91610bf56040519384610a9e565b829481845281830111610127578281602093845f960137010152565b610c1f919492943691610bdb565b916040519360c08501918583106001600160401b03841117610a53576001600160401b039260405260018060a01b0316855216602084015260016040840152606083015260808201525f60a082015260405160408101908082106001600160401b03831117610a53576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610d2f608083015160c060e48601526101248501906108eb565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115610482575f91610d78575090565b90506020813d602011610d9f575b81610d9360209383610a9e565b81010312610127575190565b3d9150610d86565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ef1575b806d04ee2d6d415b85acef8100000000600a921015610ed6575b662386f26fc10000811015610ec2575b6305f5e100811015610eb1575b612710811015610ea2575b6064811015610e94575b1015610e89575b600a60216001840193610e2e85610acc565b94610e3c6040519687610a9e565b808652610e4b601f1991610acc565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e8457600a9091610e56565b505090565b600190910190610e1c565b606460029104930192610e15565b61271060049104930192610e0b565b6305f5e10060089104930192610e00565b662386f26fc1000060109104930192610df3565b6d04ee2d6d415b85acef810000000060209104930192610de3565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610dc9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f4657565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361012757301490565b51906001600160401b038216820361012757565b51906001600160a01b03821682036101275756fea2646970667358221220b98279f3c82acbae1be53361658098d6cff8a80f8db67349ebf5ed68b66fb2fa64736f6c634300081b0033",
    sourceMap: "306:1001:127:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;-1:-1:-1;;;306:1001:127;;543:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;306:1001:127;790:10:9;;306:1001:127;790:10:9;;;789::77;;809:32;;-1:-1:-1;306:1001:127;;;;;;;;;;;872:48:77;;306:1001:127;872:48:77;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;904:4:77;306:1001:127;;;;543:4;306:1001;;;;;;-1:-1:-1;;306:1001:127;;;872:48:77;;;;;;;;;;-1:-1:-1;872:48:77;;;-1:-1:-1;851:69:77;;;306:1001:127;;;;;;;;759:14:6;306:1001:127;;;;;783:14:6;306:1001:127;;;;;807:14:6;306:1001:127;;;;;790:10:9;306:1001:127;;;;;809:32:77;306:1001:127;;;;;789:10:77;306:1001:127;;;;;;;;;;851:69:77;306:1001:127;;;;;;;;;;;;;;;;;;;;;872:48:77;;;306:1001:127;872:48:77;;306:1001:127;872:48:77;;;;;;306:1001:127;872:48:77;;;:::i;:::-;;;306:1001:127;;;;;872:48:77;;;306:1001:127;-1:-1:-1;306:1001:127;;872:48:77;;;-1:-1:-1;872:48:77;;;306:1001:127;;;-1:-1:-1;306:1001:127;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;306:1001:127;;;;-1:-1:-1;306:1001:127;;;;;-1:-1:-1;306:1001:127;;;;;;-1:-1:-1;;306:1001:127;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;:::o",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146107ed5780635bf2f20d146107b35780636b122fe01461062e5780637e431351146104f557806388e5b2d9146104d657806391db0b7e146104d6578063b3b902d41461048d578063c6ec507014610221578063c93844be1461016a578063ce46e04614610150578063e49617e11461012b578063e60c35051461012b5763f0ffa1850361000e57346101275760a0366003190112610127576004356001600160401b038111610127576100ea90369060040161098f565b6100f26109bc565b916100fb610a22565b506064356001600160a01b03811681036101275760209361011f9360843593610c11565b604051908152f35b5f80fd5b6020610146610139366109ee565b610141610f14565b610f55565b6040519015158152f35b34610127575f3660031901126101275760206040515f8152f35b34610127576020366003190112610127576004356001600160401b0381116101275761019a90369060040161098f565b60606040516101a881610a67565b52810190602081830312610127578035906001600160401b038211610127570160208183031261012757604051906101df82610a67565b8035906001600160401b038211610127570182601f820112156101275761021d9281602061020f93359101610bdb565b8152604051918291826109d2565b0390f35b3461012757602036600319011261012757606060405161024081610a67565b52606061012060405161025281610a82565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610482575f9161037d575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361036e5761012001518051810190602081830312610127576020810151906001600160401b0382116101275701602081830312610127576040519061034682610a67565b6020810151906001600160401b03821161012757602061020f928161021d9601920101610b1d565b635527981560e11b5f5260045ffd5b90503d805f833e61038e8183610a9e565b810190602081830312610127578051906001600160401b0382116101275701906101408282031261012757604051916103c683610a82565b80518352602081015160208401526103e060408201610f6e565b60408401526103f160608201610f6e565b606084015261040260808201610f6e565b608084015260a081015160a084015261041d60c08201610f82565b60c084015261042e60e08201610f82565b60e08401526104406101008201610abf565b610100840152610120810151906001600160401b03821161012757019080601f8301121561012757815161047692602001610ae7565b610120820152816102da565b6040513d5f823e3d90fd5b34610127576060366003190112610127576004356001600160401b0381116101275761011f6104c2602092369060040161098f565b906104cb6109bc565b604435923392610c11565b60206101466104e43661093f565b926104f0929192610f14565b610b37565b34610127576040366003190112610127576004356001600160401b038111610127578036039060206003198301126101275760405160208082015291600482013590602219018112156101275701602460048201359101916001600160401b038211610127578136038313610127576105a1608082846020956105c397876040850152816060850152848401375f838284010152601f801991011681010301601f198101835282610a9e565b6040518093819263f0ffa18560e01b835260a0600484015260a48301906108eb565b5f6024830152336044830152336064830152602435608483015203815f305af18015610482575f906105fb575b602090604051908152f35b506020813d602011610626575b8161061560209383610a9e565b8101031261012757602090516105f0565b3d9150610608565b34610127575f3660031901126101275760608060405161064d81610a38565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610482575f90610714575b60609061021d604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a08301906108eb565b503d805f833e6107248183610a9e565b810190602081830312610127578051906001600160401b0382116101275701608081830312610127576040519061075a82610a38565b8051825260208101516001600160a01b038116810361012757602083015261078460408201610abf565b60408301526060810151926001600160401b038411610127576060936107aa9201610b1d565b828201526106ce565b34610127575f3660031901126101275760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610127575f3660031901126101275761021d60206108db60016108307f0000000000000000000000000000000000000000000000000000000000000000610da7565b818461085b7f0000000000000000000000000000000000000000000000000000000000000000610da7565b81806108867f0000000000000000000000000000000000000000000000000000000000000000610da7565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610a9e565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610127578235916001600160401b038311610127576020808501948460051b01011161012757565b6040600319820112610127576004356001600160401b03811161012757816109699160040161090f565b92909291602435906001600160401b0382116101275761098b9160040161090f565b9091565b9181601f84011215610127578235916001600160401b038311610127576020838186019501011161012757565b602435906001600160401b038216820361012757565b60406109eb9260208352519160208082015201906108eb565b90565b602060031982011261012757600435906001600160401b038211610127576101409082900360031901126101275760040190565b604435906001600160a01b038216820361012757565b608081019081106001600160401b03821117610a5357604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b03821117610a5357604052565b61014081019081106001600160401b03821117610a5357604052565b90601f801991011681019081106001600160401b03821117610a5357604052565b5190811515820361012757565b6001600160401b038111610a5357601f01601f191660200190565b929192610af382610acc565b91610b016040519384610a9e565b829481845281830111610127578281602093845f96015e010152565b9080601f830112156101275781516109eb92602001610ae7565b929092818403610bcc575f91345b85841015610bc15781841015610bad578360051b8086013590828211610b9e5784013561013e198536030181121561012757610b82908501610f55565b15610b935760019103930192610b45565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b929192610be782610acc565b91610bf56040519384610a9e565b829481845281830111610127578281602093845f960137010152565b610c1f919492943691610bdb565b916040519360c08501918583106001600160401b03841117610a53576001600160401b039260405260018060a01b0316855216602084015260016040840152606083015260808201525f60a082015260405160408101908082106001600160401b03831117610a53576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610d2f608083015160c060e48601526101248501906108eb565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115610482575f91610d78575090565b90506020813d602011610d9f575b81610d9360209383610a9e565b81010312610127575190565b3d9150610d86565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ef1575b806d04ee2d6d415b85acef8100000000600a921015610ed6575b662386f26fc10000811015610ec2575b6305f5e100811015610eb1575b612710811015610ea2575b6064811015610e94575b1015610e89575b600a60216001840193610e2e85610acc565b94610e3c6040519687610a9e565b808652610e4b601f1991610acc565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e8457600a9091610e56565b505090565b600190910190610e1c565b606460029104930192610e15565b61271060049104930192610e0b565b6305f5e10060089104930192610e00565b662386f26fc1000060109104930192610df3565b6d04ee2d6d415b85acef810000000060209104930192610de3565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610dc9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f4657565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361012757301490565b51906001600160401b038216820361012757565b51906001600160a01b03821682036101275756fea2646970667358221220b98279f3c82acbae1be53361658098d6cff8a80f8db67349ebf5ed68b66fb2fa64736f6c634300081b0033",
    sourceMap: "306:1001:127:-:0;;;;;;;;;-1:-1:-1;306:1001:127;;;;;;;;1183:12:9;;;1054:5;1183:12;306:1001:127;1054:5:9;1183:12;306:1001:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;306:1001:127;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3045:39:9;306:1001:127;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;306:1001:127;;;;;;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;;;;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;1264:34;;306:1001;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:77;;306:1001:127;;;2392:23:77;;306:1001:127;;;2392:23:77;306:1001:127;;;;;;2392:3:77;306:1001:127;2392:23:77;;;;;;;306:1001:127;2392:23:77;;;306:1001:127;2429:19:77;306:1001:127;2429:19:77;;306:1001:127;2452:18:77;2429:41;2425:87;;306:1001:127;1090:16;;306:1001;;1079:46;;306:1001;;;;;;;;;1079:46;;306:1001;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;1079:46;;306:1001;1079:46;;306:1001;;;;:::i;2425:87:77:-;2491:21;;;306:1001:127;2491:21:77;306:1001:127;;2491:21:77;2392:23;;;;;306:1001:127;2392:23:77;;;;;;:::i;:::-;;;306:1001:127;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:77;;;;306:1001:127;;;;;;;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;-1:-1:-1;;;;;306:1001:127;;;;709:149:80;306:1001:127;;;;;;;;:::i;:::-;;;;:::i;:::-;;;794:10:80;;709:149;;:::i;306:1001:127:-;;1442:1461:9;306:1001:127;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;306:1001:127:-;;;;;;-1:-1:-1;;306:1001:127;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;714:16;;;306:1001;;;;;;;-1:-1:-1;;306:1001:127;;;;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;714:16;306:1001;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1055:104:6;;306:1001:127;;;;;714:16;;1055:104:6;;714:16:127;;;;;;:::i;:::-;306:1001;;;;;;;;;747:141;;306:1001;;747:141;;306:1001;;;;;;:::i;:::-;;;;;;824:10;306:1001;;;;824:10;306:1001;;;;;;;;;;747:141;:4;306:1001;747:4;:141;;;;;;306:1001;747:141;;;306:1001;;;;;;;;;747:141;;306:1001;747:141;;306:1001;747:141;;;;;;306:1001;747:141;;;:::i;:::-;;;306:1001;;;;;;;747:141;;;;;-1:-1:-1;747:141:127;;306:1001;;;;;;-1:-1:-1;;306:1001:127;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:77;;1522:18;306:1001:127;1497:44:77;;306:1001:127;;;1497:44:77;306:1001:127;;;;;;1497:14:77;306:1001:127;1497:44:77;;;;;;306:1001:127;1497:44:77;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:77:-;;;;306:1001:127;1497:44:77;;;;;;:::i;:::-;;;306:1001:127;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;:::i;:::-;;;;;1497:44:77;;306:1001:127;;;;;;-1:-1:-1;;306:1001:127;;;;;;;542:43:77;306:1001:127;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;1055:104:6;;306:1001:127;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;306:1001:127;;;;;;;;;;;;1055:104:6;;;306:1001:127;;;;-1:-1:-1;;;306:1001:127;;;;;;;;;;;;;;;;;-1:-1:-1;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;306:1001:127;;;;;1055:104:6;306:1001:127;;1055:104:6;306:1001:127;;;;;;;;;;;;;;;;;;;;-1:-1:-1;306:1001:127;;;;;;;;-1:-1:-1;;306:1001:127;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;306:1001:127;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;306:1001:127;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;-1:-1:-1;;306:1001:127;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;-1:-1:-1;;306:1001:127;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;306:1001:127;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;:::o;:::-;;;;-1:-1:-1;306:1001:127;;;;;-1:-1:-1;306:1001:127;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;:::o;:::-;;;1055:104:6;;306:1001:127;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;306:1001:127;;;;;;-1:-1:-1;;306:1001:127;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;306:1001:127;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;306:1001:127;;;;;;;;;;;;;4064:22:9;;;;4060:87;;306:1001:127;;;;;;;;;;;;;;4274:33:9;306:1001:127;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;306:1001:127;;3896:19:9;306:1001:127;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;306:1001:127;;;;3881:1:9;306:1001:127;;;;;3881:1:9;306:1001:127;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;306:1001:127;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;306:1001:127;;;;;;:::o;871:377:80:-;306:1001:127;871:377:80;;;;306:1001:127;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;1914:299:77;;;306:1001:127;2076:4:77;306:1001:127;1914:299:77;;306:1001:127;1914:299:77;;;306:1001:127;1914:299:77;;;306:1001:127;-1:-1:-1;1914:299:77;;;306:1001:127;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;1914:299:77;306:1001:127;;;1868:18:77;306:1001:127;;1819:413:77;;;306:1001:127;;;;;;;;;;;;1791:455:77;;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;306:1001:127;;;;;;;;;;;;;;;;;;;1914:299:77;306:1001:127;;;;;;;1914:299:77;306:1001:127;1914:299:77;306:1001:127;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:77;306:1001:127;-1:-1:-1;1791:3:77;-1:-1:-1;;;;;306:1001:127;1791:455:77;;;;;;;-1:-1:-1;1791:455:77;;;1134:55:80;871:377;:::o;1791:455:77:-;;;1914:299;1791:455;;1914:299;1791:455;;;;;;306:1001:127;1791:455:77;;;:::i;:::-;;;306:1001:127;;;;;871:377:80;:::o;1791:455:77:-;;;-1:-1:-1;1791:455:77;;637:632:63;759:17;-1:-1:-1;25444:17:70;-1:-1:-1;;;25444:17:70;;;25440:103;;637:632:63;25560:17:70;25569:8;26140:7;25560:17;;;25556:103;;637:632:63;25685:8:70;25676:17;;;25672:103;;637:632:63;25801:7:70;25792:16;;;25788:100;;637:632:63;25914:7:70;25905:16;;;25901:100;;637:632:63;26027:7:70;26018:16;;;26014:100;;637:632:63;26131:16:70;;26127:66;;637:632:63;26140:7:70;874:92:63;779:1;306:1001:127;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;306:1001:127;;:::i;:::-;;;;;;;874:92:63;;;979:247;-1:-1:-1;;306:1001:127;;-1:-1:-1;;;1033:111:63;;;;306:1001:127;1033:111:63;306:1001:127;1194:10:63;;1190:21;;26140:7:70;979:247:63;;;;1190:21;1206:5;;637:632;:::o;26127:66:70:-;26177:1;306:1001:127;;;;26127:66:70;;26014:100;26027:7;26098:1;306:1001:127;;;;26014:100:70;;;25901;25914:7;25985:1;306:1001:127;;;;25901:100:70;;;25788;25801:7;25872:1;306:1001:127;;;;25788:100:70;;;25672:103;25685:8;25758:2;306:1001:127;;;;25672:103:70;;;25556;25569:8;25642:2;306:1001:127;;;;25556:103:70;;;25440;-1:-1:-1;25526:2:70;;-1:-1:-1;;;;306:1001:127;;25440:103:70;;6040:128:9;6109:4;-1:-1:-1;;;;;306:1001:127;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:77;1365:20;;306:1001:127;;;;;;;;;;;;;1397:4:77;1365:37;1174:235;:::o;306:1001:127:-;;;-1:-1:-1;;;;;306:1001:127;;;;;;:::o;:::-;;;-1:-1:-1;;;;;306:1001:127;;;;;;:::o",
    linkReferences: {},
    immutableReferences: {
      "2532": [
        {
          start: 2060,
          length: 32
        }
      ],
      "2534": [
        {
          start: 2103,
          length: 32
        }
      ],
      "2536": [
        {
          start: 2146,
          length: 32
        }
      ],
      "3008": [
        {
          start: 3862,
          length: 32
        }
      ],
      "54658": [
        {
          start: 1695,
          length: 32
        }
      ],
      "54661": [
        {
          start: 682,
          length: 32
        },
        {
          start: 3389,
          length: 32
        }
      ],
      "54663": [
        {
          start: 738,
          length: 32
        },
        {
          start: 1645,
          length: 32
        },
        {
          start: 1994,
          length: 32
        },
        {
          start: 3216,
          length: 32
        }
      ]
    }
  },
  methodIdentifiers: {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((string),bytes32)": "7e431351",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  rawMetadata: `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/StringObligation.sol":"StringObligation"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/StringObligation.sol":{"keccak256":"0x1a1fbcbc2867a7d7e8770e6dda1b9942fc964ddf63f86881f4e92338738ea31a","license":"UNLICENSED","urls":["bzz-raw://4ee9c5da6bc56afa11b25bc51c1003d8ecc25a905c3f10b123b25b6e784fcad5","dweb:/ipfs/QmUFQ15aPefjg25x6vMwPfTRNHnehEm5GrYxpnAwpa7Un7"]}},"version":1}`,
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract ISchemaRegistry",
              name: "_schemaRegistry",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "AccessDenied"
        },
        {
          inputs: [],
          type: "error",
          name: "InsufficientValue"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidEAS"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidLength"
        },
        {
          inputs: [],
          type: "error",
          name: "NotFromThisAttester"
        },
        {
          inputs: [],
          type: "error",
          name: "NotPayable"
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ATTESTATION_SCHEMA",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "attest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            }
          ],
          stateMutability: "pure",
          type: "function",
          name: "decodeObligationData",
          outputs: [
            {
              internalType: "struct StringObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "string",
                  name: "item",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct StringObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "string",
                  name: "item",
                  type: "string"
                }
              ]
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligation",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "address",
              name: "payer",
              type: "address"
            },
            {
              internalType: "address",
              name: "recipient",
              type: "address"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationForRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes"
            },
            {
              internalType: "uint64",
              name: "expirationTime",
              type: "uint64"
            },
            {
              internalType: "bytes32",
              name: "refUID",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "doObligationRaw",
          outputs: [
            {
              internalType: "bytes32",
              name: "uid_",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "uid",
              type: "bytes32"
            }
          ],
          stateMutability: "view",
          type: "function",
          name: "getObligationData",
          outputs: [
            {
              internalType: "struct StringObligation.ObligationData",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "string",
                  name: "item",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getSchema",
          outputs: [
            {
              internalType: "struct SchemaRecord",
              name: "",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "contract ISchemaResolver",
                  name: "resolver",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "string",
                  name: "schema",
                  type: "string"
                }
              ]
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "pure",
          type: "function",
          name: "isPayable",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiAttest",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation[]",
              name: "attestations",
              type: "tuple[]",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            },
            {
              internalType: "uint256[]",
              name: "values",
              type: "uint256[]"
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "multiRevoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct Attestation",
              name: "attestation",
              type: "tuple",
              components: [
                {
                  internalType: "bytes32",
                  name: "uid",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "schema",
                  type: "bytes32"
                },
                {
                  internalType: "uint64",
                  name: "time",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "expirationTime",
                  type: "uint64"
                },
                {
                  internalType: "uint64",
                  name: "revocationTime",
                  type: "uint64"
                },
                {
                  internalType: "bytes32",
                  name: "refUID",
                  type: "bytes32"
                },
                {
                  internalType: "address",
                  name: "recipient",
                  type: "address"
                },
                {
                  internalType: "address",
                  name: "attester",
                  type: "address"
                },
                {
                  internalType: "bool",
                  name: "revocable",
                  type: "bool"
                },
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes"
                }
              ]
            }
          ],
          stateMutability: "payable",
          type: "function",
          name: "revoke",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "version",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string"
            }
          ]
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive"
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The new attestation."
            },
            returns: {
              _0: "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            returns: {
              _0: "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The new attestations.",
              values: "Explicit ETH amounts which were sent with each attestation."
            },
            returns: {
              _0: "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            params: {
              attestations: "The existing attestations to be revoked.",
              values: "Explicit ETH amounts which were sent with each revocation."
            },
            returns: {
              _0: "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            params: {
              attestation: "The existing attestation to be revoked."
            },
            returns: {
              _0: "Whether the attestation can be revoked."
            }
          },
          "version()": {
            returns: {
              _0: "Semver contract version as a string."
            }
          }
        },
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            notice: "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            notice: "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            notice: "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            notice: "Returns the full semver contract version."
          }
        },
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/obligations/StringObligation.sol": "StringObligation"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/StringObligation.sol": {
        keccak256: "0x1a1fbcbc2867a7d7e8770e6dda1b9942fc964ddf63f86881f4e92338738ea31a",
        urls: [
          "bzz-raw://4ee9c5da6bc56afa11b25bc51c1003d8ecc25a905c3f10b123b25b6e784fcad5",
          "dweb:/ipfs/QmUFQ15aPefjg25x6vMwPfTRNHnehEm5GrYxpnAwpa7Un7"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 127
};

// src/clients/stringObligation.ts
var stringObligationDecodeFunction = getAbiItem8({
  abi: abi49.abi,
  name: "decodeObligationData"
});
var stringObligationDataType = stringObligationDecodeFunction.outputs[0];
var makeStringObligationClient = (viemClient, addresses) => {
  const decode = (obligationData) => {
    return decodeAbiParameters8([stringObligationDataType], obligationData)[0];
  };
  const doObligation = async (item, refUID = "0x0000000000000000000000000000000000000000000000000000000000000000") => {
    const { request } = await viemClient.simulateContract({
      address: addresses.stringObligation,
      abi: abi49.abi,
      functionName: "doObligation",
      args: [{ item }, refUID]
    });
    const hash = await viemClient.writeContract(request);
    const attested = await getAttestedEventFromTxHash(viemClient, hash);
    return { hash, attested };
  };
  const getZodParseFunc = (opts) => {
    let command = opts.safe ? "safeParse" : "parse";
    if (opts.async) {
      command += "Async";
    }
    return command;
  };
  const getSchema = async () => await viemClient.readContract({
    address: addresses.stringObligation,
    abi: abi49.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  return {
    encode: (data) => {
      return encodeAbiParameters8([stringObligationDataType], [data]);
    },
    decode,
    decodeJson: (obligationData) => {
      const decoded = decode(obligationData);
      return JSON.parse(decoded.item);
    },
    decodeZod: (obligationData, schema, schemaOptions, parseOptions = { async: false, safe: false }) => {
      const parseFunc = getZodParseFunc(parseOptions);
      const decoded = decode(obligationData);
      return schema[parseFunc](JSON.parse(decoded.item), schemaOptions);
    },
    decodeArkType: (obligationData, schema) => {
      const decoded = decode(obligationData);
      return schema(JSON.parse(decoded.item));
    },
    doObligation,
    doObligationJson: async (item, refUid) => {
      return await doObligation(JSON.stringify(item), refUid);
    },
    getSchema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid, addresses), getSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters8([stringObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getJsonObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid, addresses), getSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = decodeAbiParameters8([stringObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data: {
          item: JSON.parse(data.item)
        }
      };
    }
  };
};

// src/clients/tokenBundle.ts
import { decodeAbiParameters as decodeAbiParameters9, encodeAbiParameters as encodeAbiParameters9, getAbiItem as getAbiItem9 } from "viem";

// src/contracts/TokenBundleBarterUtils.ts
var abi50 = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "_eas",
          type: "address",
          internalType: "contract IEAS"
        },
        {
          name: "_bundleEscrow",
          type: "address",
          internalType: "contract TokenBundleEscrowObligation"
        },
        {
          name: "_bundlePayment",
          type: "address",
          internalType: "contract TokenBundlePaymentObligation"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "buyBundleForBundle",
      inputs: [
        {
          name: "bidBundle",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        },
        {
          name: "askBundle",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "payBundleForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndEscrowBundle",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "permits",
          type: "tuple[]",
          internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          components: [
            {
              name: "v",
              type: "uint8",
              internalType: "uint8"
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndEscrowBundleForBundle",
      inputs: [
        {
          name: "bidBundle",
          type: "tuple",
          internalType: "struct TokenBundleEscrowObligation.ObligationData",
          components: [
            {
              name: "arbiter",
              type: "address",
              internalType: "address"
            },
            {
              name: "demand",
              type: "bytes",
              internalType: "bytes"
            },
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            }
          ]
        },
        {
          name: "askBundle",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "expiration",
          type: "uint64",
          internalType: "uint64"
        },
        {
          name: "permits",
          type: "tuple[]",
          internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          components: [
            {
              name: "v",
              type: "uint8",
              internalType: "uint8"
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayBundle",
      inputs: [
        {
          name: "data",
          type: "tuple",
          internalType: "struct TokenBundlePaymentObligation.ObligationData",
          components: [
            {
              name: "erc20Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc20Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc721Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc721TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Tokens",
              type: "address[]",
              internalType: "address[]"
            },
            {
              name: "erc1155TokenIds",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "erc1155Amounts",
              type: "uint256[]",
              internalType: "uint256[]"
            },
            {
              name: "payee",
              type: "address",
              internalType: "address"
            }
          ]
        },
        {
          name: "permits",
          type: "tuple[]",
          internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          components: [
            {
              name: "v",
              type: "uint8",
              internalType: "uint8"
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "permitAndPayBundleForBundle",
      inputs: [
        {
          name: "buyAttestation",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "permits",
          type: "tuple[]",
          internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          components: [
            {
              name: "v",
              type: "uint8",
              internalType: "uint8"
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "error",
      name: "CouldntCollectEscrow",
      inputs: []
    },
    {
      type: "error",
      name: "InvalidSignatureLength",
      inputs: []
    }
  ],
  bytecode: {
    object: "",
    sourceMap: "427:6690:139:-:0;;;;;;;;;;;;;-1:-1:-1;;427:6690:139;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;-1:-1:-1;427:6690:139;;;-1:-1:-1;427:6690:139;;;;;;;965:28;427:6690;;;965:28;427:6690;;;;;;;1003:30;427:6690;;;1003:30;427:6690;;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;-1:-1:-1;427:6690:139;;;;;-1:-1:-1;427:6690:139",
    linkReferences: {}
  },
  deployedBytecode: {
    object: "",
    sourceMap: "427:6690:139:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;427:6690:139;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;:::i;:::-;2156:16;;;;;:::i;:::-;2138:41;;;;2134:90;;427:6690;2458:17;;427:6690;2313:3;2288:16;;;;:::i;:::-;2284:27;;;;;;;2345:16;;;;:::i;:::-;-1:-1:-1;;;;;427:6690:139;2345:19;;427:6690;;2345:19;:::i;:::-;;;;:::i;:::-;2426:13;427:6690;;;;;-1:-1:-1;;;;;427:6690:139;;2458:17;;;;:::i;:::-;:20;;;;:::i;:::-;427:6690;2496:10;;;;;;:::i;:::-;:19;;427:6690;2533:10;;;;;;:::i;:::-;:12;;;:::i;:::-;2563:10;;;;;;:::i;:::-;427:6690;2563:12;427:6690;2593:10;;;;;;:::i;:::-;427:6690;2593:12;427:6690;2332:287;;;;;;;427:6690;;;;;;;;;;;;;;;;;2332:287;;2390:10;427:6690;2332:287;;;:::i;:::-;;;;;;;;;;427:6690;2332:287;;;2313:3;;427:6690;2272:10;;2332:287;427:6690;2332:287;;;:::i;:::-;;;;;427:6690;;;;;;;;;2332:287;427:6690;;;2284:27;427:6690;;;2284:27;427:6690;;2284:27;;427:6690;;;;;;2426:13;427:6690;;;;;;;;;;;;;;;;;;2647:59;;2496:19;427:6690;2647:59;;427:6690;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;-1:-1:-1;;;;;427:6690:139;;;;;;:::i;:::-;;;;;;2390:10;427:6690;;;;2390:10;427:6690;;;;2647:59;;;;;;;;427:6690;2647:59;;;2267:363;427:6690;;;;;;;;2647:59;;427:6690;2647:59;;427:6690;2647:59;;;;;;427:6690;2647:59;;;:::i;:::-;;;427:6690;;;;;;;2647:59;;;;;-1:-1:-1;2647:59:139;;2134:90;5730:24;;;427:6690;2200:24;427:6690;;2200:24;427:6690;;;;;;-1:-1:-1;;427:6690:139;;;;;;6681:34;427:6690;;;;;;;;;;;;;;;;;;6681:34;;;427:6690;6681:34;;427:6690;6681:34;;;;;;;6937:110;427:6690;6788:79;6812:8;6681:34;;7065:43;6681:34;427:6690;6681:34;;;427:6690;6812:8;;;427:6690;;;;6788:79;;;;;;:::i;:::-;6961:17;;427:6690;;;;6937:110;;;;;;:::i;:::-;7065:43;;:::i;:::-;427:6690;;;;;;6681:34;;;;;;427:6690;6681:34;;;;;;:::i;:::-;;;;;:::i;:::-;;;;427:6690;;;;;;-1:-1:-1;;427:6690:139;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;:::i;:::-;1284:16;;;427:6690;1284:16;;;;;;;:::i;:::-;1266:41;;;;1262:90;;1400:10;;1585:17;;;;-1:-1:-1;427:6690:139;1441:3;1416:16;;;;:::i;:::-;1412:27;;;;;;;1473:16;;;;:19;;:16;;;;:::i;:::-;-1:-1:-1;;;;;427:6690:139;;1473:19;:::i;:::-;;:::i;:::-;427:6690;;-1:-1:-1;;;;;427:6690:139;;;1585:20;:17;;;;;:::i;:::-;:20;;:::i;:::-;427:6690;;1623:10;;;;;:::i;:::-;:19;427:6690;1660:10;427:6690;1720:10;1660;:12;:10;;;;;:::i;:::-;:12;:::i;:::-;1690:10;427:6690;1690:10;;;;;:::i;:::-;:12;427:6690;1720:10;;:::i;:::-;:12;427:6690;1460:286;;;;;;;427:6690;;;;;;;;;;;;;;;;;1460:286;;1518:10;427:6690;1460:286;;;:::i;:::-;;;;;;;;;;427:6690;1460:286;;;1441:3;;427:6690;1400:10;;1460:286;427:6690;1460:286;;;:::i;:::-;;;;1412:27;-1:-1:-1;427:6690:139;;;;-1:-1:-1;;;1786:148:139;;427:6690;;1786:148;;427:6690;;1412:27;;-1:-1:-1;;;;;427:6690:139;;;;1412:27;;427:6690;1412:27;427:6690;:::i;:::-;;;;;;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;427:6690:139;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;-1:-1:-1;;427:6690:139;;;;;;;:::i;:::-;;;;;;1518:10;427:6690;;;;1518:10;1585:17;427:6690;;;1786:148;;;;;;;;427:6690;1786:148;;;427:6690;;;;;;;;;;;;;;-1:-1:-1;;427:6690:139;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;6487:53;427:6690;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;6487:53;;:::i;427:6690::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;:::i;:::-;4523:21;;;427:6690;4523:21;;;;;;;:::i;:::-;4505:46;;;;4501:95;;4644:10;;427:6690;4839:22;;427:6690;4690:3;4660:21;;;;:::i;:::-;4656:32;;;;;;;4722:21;;;;:24;;:21;;;;:::i;:24::-;427:6690;;-1:-1:-1;;;;;427:6690:139;;;4839:25;:22;;;;;:::i;:25::-;427:6690;;4882:10;;;;;:::i;:::-;:19;427:6690;4919:10;427:6690;4979:10;4919;:12;:10;;;;;:::i;4979:::-;:12;427:6690;4709:296;;;;;;;427:6690;;;;;;;;;;;;;;;;;4709:296;;4772:10;427:6690;4709:296;;;:::i;:::-;;;;;;;;;;427:6690;4709:296;;;4690:3;;427:6690;4644:10;;4709:296;427:6690;4709:296;;;:::i;:::-;;;;4656:32;427:6690;5033:53;4656:32;;427:6690;;;4656:32;427:6690;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5285:34;;;427:6690;5285:34;;427:6690;5285:34;;;;;;;5392:79;5416:8;5541:110;5285:34;427:6690;5285:34;427:6690;5285:34;;;5416:8;;;427:6690;;;;5392:79;;;;;;:::i;:::-;5565:17;;427:6690;;;;5541:110;;;;;;:::i;:::-;5684:18;;427:6690;5666:43;;5662:92;;5802:10;427:6690;5992:19;;;427:6690;5845:3;5818:18;;427:6690;;5814:29;;;;;-1:-1:-1;;;;;427:6690:139;5877:21;;427:6690;;5877:21;:::i;:::-;427:6690;;;;;;;;;5960:13;427:6690;;5992:19;;;:22;;;;:::i;:::-;427:6690;6032:10;;;;;;:::i;:::-;:19;;427:6690;6069:10;;;;;;:::i;:::-;:12;;;:::i;:::-;6099:10;;;;;;:::i;:::-;427:6690;6099:12;427:6690;6129:10;;;;;;:::i;:::-;427:6690;6129:12;427:6690;5864:291;;;;;;;427:6690;;;;;;;;;;;;;;;;;5864:291;;5924:10;427:6690;5864:291;;;:::i;:::-;;;;;;;;;;427:6690;5864:291;;;5845:3;;427:6690;5802:10;;5864:291;427:6690;5864:291;;;:::i;:::-;;;;5814:29;427:6690;6183:43;5814:29;;6183:43;:::i;427:6690::-;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;427:6690:139;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;:::o;:::-;;;;-1:-1:-1;427:6690:139;;;;;-1:-1:-1;427:6690:139;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;427:6690:139;;;;;;:::o;:::-;;;-1:-1:-1;;;;;427:6690:139;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;427:6690:139;;;;;;-1:-1:-1;;427:6690:139;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;:::i;:::-;;;;;;:::o;:::-;-1:-1:-1;;;;;427:6690:139;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;427:6690:139;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;427:6690:139;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;427:6690:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;427:6690:139;;;;;:::o;3719:474::-;427:6690;;-1:-1:-1;3719:474:139;427:6690;;;;;3916:13;427:6690;;;;;;;;;;;;;;3916:107;;427:6690;3916:107;;;427:6690;;;;;;:::i;:::-;3979:10;427:6690;;;;3979:10;427:6690;;;;3916:107;;;;;;;;;-1:-1:-1;3916:107:139;;;3719:474;-1:-1:-1;427:6690:139;;;;-1:-1:-1;;;4039:59:139;;3916:107;4039:59;;427:6690;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;427:6690:139;4039:59;;;;;;;-1:-1:-1;4039:59:139;;;3719:474;4038:60;;4034:120;;3719:474;:::o;4034:120::-;4121:22;;;-1:-1:-1;4121:22:139;3916:107;-1:-1:-1;4121:22:139;4039:59;;;427:6690;4039:59;;427:6690;4039:59;;;;;;427:6690;4039:59;;;:::i;:::-;;;427:6690;;;;;;;:::i;:::-;4039:59;;;;;;-1:-1:-1;4039:59:139;;3916:107;;;;427:6690;3916:107;;427:6690;3916:107;;;;;;427:6690;3916:107;;;:::i;:::-;;;427:6690;;;;;;;3916:107;;;;;-1:-1:-1;3916:107:139;;2719:994;;427:6690;;;;;;2976:12;427:6690;;3100:21;;;;;3157:22;;;;;3215;;;;;3275:24;;;;;3336:23;;;;3398:25;;;;;3461:24;;;;427:6690;;;;;;;3524:13;427:6690;;;3100:21;427:6690;3568:21;;;;;;427:6690;;3100:21;427:6690;;;;;:::i;:::-;3568:21;427:6690;;3568:21;;;;;;;;:::i;:::-;3100;427:6690;;;;;:::i;:::-;;;3568:21;3022:586;;427:6690;;;3100:21;3022:586;;427:6690;;;3157:22;3022:586;;427:6690;;;3215:22;3022:586;;427:6690;;;3275:24;3022:586;;427:6690;;;3336:23;3022:586;;427:6690;;;3398:25;3022:586;;427:6690;;;3461:24;3022:586;;427:6690;;;3100:21;427:6690;;;;;;;;;2976:730;;;;;3215:22;427:6690;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3568:21;427:6690;;;;;;;;;;-1:-1:-1;427:6690:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;427:6690:139;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;427:6690:139;;;;;3654:10;427:6690;;;;3654:10;427:6690;;;;2976:730;;;3568:21;2976:730;-1:-1:-1;2976:730:139;;;;;;;-1:-1:-1;2976:730:139;;;2957:749;2719:994;:::o;2976:730::-;;;3568:21;2976:730;;3568:21;2976:730;;;;;;427:6690;2976:730;;;:::i;:::-;;;427:6690;;;;;2719:994;:::o;2976:730::-;;;-1:-1:-1;2976:730:139;",
    linkReferences: {}
  },
  methodIdentifiers: {
    "buyBundleForBundle((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "c34eca79",
    "payBundleForBundle(bytes32)": "e8be0b83",
    "permitAndEscrowBundle((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64,(uint8,bytes32,bytes32,uint256)[])": "dd7cd485",
    "permitAndEscrowBundleForBundle((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64,(uint8,bytes32,bytes32,uint256)[])": "4046f027",
    "permitAndPayBundle((address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),(uint8,bytes32,bytes32,uint256)[])": "eb71177f",
    "permitAndPayBundleForBundle(bytes32,(uint8,bytes32,bytes32,uint256)[])": "1f5c0228"
  },
  rawMetadata: '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[],"name":"InvalidSignatureLength","type":"error"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"bidBundle","type":"tuple"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askBundle","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndEscrowBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"bidBundle","type":"tuple"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askBundle","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndEscrowBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndPayBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndPayBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/TokenBundleBarterUtils.sol":"TokenBundleBarterUtils"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c","license":"UNLICENSED","urls":["bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724","dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"]},"src/BaseObligationNew.sol":{"keccak256":"0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be","license":"UNLICENSED","urls":["bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc","dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4","license":"UNLICENSED","urls":["bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258","dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"]},"src/utils/TokenBundleBarterUtils.sol":{"keccak256":"0xef1b5d85a49bd5df603c7df26b1f7e5a0ae498914a07699381e77f3bd188401e","license":"UNLICENSED","urls":["bzz-raw://4f5605aeb763a29fa8cbb682d4650f9e0961f6659f376f85bc385dc8450b3299","dweb:/ipfs/QmddaxhsKrQnNguo9N77VmMFXrtVcpSsqyDcWTPvh3jDFf"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.27+commit.40a35a09"
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEAS",
              name: "_eas",
              type: "address"
            },
            {
              internalType: "contract TokenBundleEscrowObligation",
              name: "_bundleEscrow",
              type: "address"
            },
            {
              internalType: "contract TokenBundlePaymentObligation",
              name: "_bundlePayment",
              type: "address"
            }
          ],
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          inputs: [],
          type: "error",
          name: "CouldntCollectEscrow"
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSignatureLength"
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "bidBundle",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askBundle",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "buyBundleForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "payBundleForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              name: "permits",
              type: "tuple[]",
              components: [
                {
                  internalType: "uint8",
                  name: "v",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "r",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "s",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "deadline",
                  type: "uint256"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndEscrowBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundleEscrowObligation.ObligationData",
              name: "bidBundle",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "arbiter",
                  type: "address"
                },
                {
                  internalType: "bytes",
                  name: "demand",
                  type: "bytes"
                },
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                }
              ]
            },
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "askBundle",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "uint64",
              name: "expiration",
              type: "uint64"
            },
            {
              internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              name: "permits",
              type: "tuple[]",
              components: [
                {
                  internalType: "uint8",
                  name: "v",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "r",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "s",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "deadline",
                  type: "uint256"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndEscrowBundleForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "struct TokenBundlePaymentObligation.ObligationData",
              name: "data",
              type: "tuple",
              components: [
                {
                  internalType: "address[]",
                  name: "erc20Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc20Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc721Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc721TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "address[]",
                  name: "erc1155Tokens",
                  type: "address[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155TokenIds",
                  type: "uint256[]"
                },
                {
                  internalType: "uint256[]",
                  name: "erc1155Amounts",
                  type: "uint256[]"
                },
                {
                  internalType: "address",
                  name: "payee",
                  type: "address"
                }
              ]
            },
            {
              internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              name: "permits",
              type: "tuple[]",
              components: [
                {
                  internalType: "uint8",
                  name: "v",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "r",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "s",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "deadline",
                  type: "uint256"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "buyAttestation",
              type: "bytes32"
            },
            {
              internalType: "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              name: "permits",
              type: "tuple[]",
              components: [
                {
                  internalType: "uint8",
                  name: "v",
                  type: "uint8"
                },
                {
                  internalType: "bytes32",
                  name: "r",
                  type: "bytes32"
                },
                {
                  internalType: "bytes32",
                  name: "s",
                  type: "bytes32"
                },
                {
                  internalType: "uint256",
                  name: "deadline",
                  type: "uint256"
                }
              ]
            }
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permitAndPayBundleForBundle",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32"
            }
          ]
        }
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1
      }
    },
    settings: {
      remappings: [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: "ipfs"
      },
      compilationTarget: {
        "src/utils/TokenBundleBarterUtils.sol": "TokenBundleBarterUtils"
      },
      evmVersion: "cancun",
      libraries: {},
      viaIR: true
    },
    sources: {
      "lib/eas-contracts/contracts/Common.sol": {
        keccak256: "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        urls: [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        keccak256: "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        urls: [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        keccak256: "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        urls: [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        keccak256: "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        urls: [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        keccak256: "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        urls: [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        keccak256: "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        urls: [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        license: "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        keccak256: "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        urls: [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        keccak256: "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        urls: [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        keccak256: "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        urls: [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        keccak256: "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        urls: [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256: "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        urls: [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        keccak256: "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        urls: [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        keccak256: "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        urls: [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256: "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        urls: [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256: "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        urls: [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256: "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        urls: [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256: "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        urls: [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256: "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        urls: [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256: "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        urls: [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        license: "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256: "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        urls: [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        license: "MIT"
      },
      "src/ArbiterUtils.sol": {
        keccak256: "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        urls: [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        license: "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        keccak256: "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        urls: [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        license: "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        keccak256: "0x79f2b634467f60d2599566052d187ab570b5a5abb7d9ad4fb9608b10f1feb09c",
        urls: [
          "bzz-raw://c95fd69af07d9a26edf7c59fa8269bdd8958a41f2dd9de7e5ad2985198a69724",
          "dweb:/ipfs/QmSWC22iabz1xHqsqqfm6exuk5VghGGrco4A1wGTSnsdBb"
        ],
        license: "UNLICENSED"
      },
      "src/BaseObligationNew.sol": {
        keccak256: "0xb6f62aaa01bbb8c7d87a4437b466e5e95e9d6086626b780f367d3071ee20e8be",
        urls: [
          "bzz-raw://9216c00ddf06a890e591fc21969211be2b7a98aba8615021dd26352af5f472bc",
          "dweb:/ipfs/Qmbc2MAT1DaT2e5Ue3PzjJmQRKb2CMNcB7YCPdjHS2Fjtc"
        ],
        license: "UNLICENSED"
      },
      "src/IArbiter.sol": {
        keccak256: "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        urls: [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        keccak256: "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        urls: [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        license: "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        keccak256: "0xe1b3b3fe28d357ed0b80818f69c28dd9ab3002783559208aea13f8f3667ecde4",
        urls: [
          "bzz-raw://8e6cca29c7a742cbf94d92b8ce9f01a3f8d2ee07816997bb6417f1987fff5258",
          "dweb:/ipfs/QmbEaXmYwPZ1esj6hLdHSr4Evrx7kxynetm63yMpRKi3Gd"
        ],
        license: "UNLICENSED"
      },
      "src/utils/TokenBundleBarterUtils.sol": {
        keccak256: "0xef1b5d85a49bd5df603c7df26b1f7e5a0ae498914a07699381e77f3bd188401e",
        urls: [
          "bzz-raw://4f5605aeb763a29fa8cbb682d4650f9e0961f6659f376f85bc385dc8450b3299",
          "dweb:/ipfs/QmddaxhsKrQnNguo9N77VmMFXrtVcpSsqyDcWTPvh3jDFf"
        ],
        license: "UNLICENSED"
      }
    },
    version: 1
  },
  id: 139
};

// src/clients/tokenBundle.ts
var makeTokenBundleClient = (viemClient, addresses) => {
  const escrowObligationDataType = getAbiItem9({
    abi: abi40.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const paymentObligationDataType = getAbiItem9({
    abi: abi41.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const encodeEscrowObligationRaw = (data) => {
    return encodeAbiParameters9([escrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return encodeAbiParameters9([paymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes TokenBundleEscrowObligation.ObligationData to bytes using type-based parameters.
     * @param bundle - Bundle of tokens for payment
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (bundle, demand) => {
      const flatBundle = flattenTokenBundle(bundle);
      return encodeEscrowObligationRaw({
        ...flatBundle,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes TokenBundlePaymentObligation.ObligationData to bytes using type-based parameters.
     * @param bundle - Bundle of tokens for payment
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (bundle, payee) => {
      const flatBundle = flattenTokenBundle(bundle);
      return encodePaymentObligationRaw({
        ...flatBundle,
        payee
      });
    },
    /**
     * Decodes TokenBundleEscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return decodeAbiParameters9([escrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes TokenBundlePaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return decodeAbiParameters9([paymentObligationDataType], obligationData)[0];
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with a bundle of tokens for a custom demand
     * @param price - Bundle of tokens for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.tokenBundle.buyWithBundle(
     *   tokenBundle,
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithBundle: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "doObligation",
        args: [
          {
            ...flattenTokenBundle(price),
            ...item
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with a bundle of tokens
     * @param price - Bundle of tokens for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.tokenBundle.payWithBundle(
     *   tokenBundle,
     *   receiverAddress,
     * );
     * ```
     */
    payWithBundle: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundlePaymentObligation,
        abi: abi41.abi,
        functionName: "doObligation",
        args: [
          {
            ...flattenTokenBundle(price),
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading one bundle of tokens for another
     * @param bid - Bundle of tokens offered
     * @param ask - Bundle of tokens requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.tokenBundle.buyBundleForBundle(
     *   myTokenBundle,
     *   theirTokenBundle,
     *   0n,
     * );
     * ```
     */
    buyBundleForBundle: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleBarterUtils,
        abi: abi50.abi,
        functionName: "buyBundleForBundle",
        args: [
          {
            ...flattenTokenBundle(bid),
            arbiter: "0x0000000000000000000000000000000000000000",
            demand: "0x"
          },
          { ...flattenTokenBundle(ask), payee: viemClient.account.address },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills a bundle-bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.tokenBundle.payBundleForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payBundleForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleBarterUtils,
        abi: abi50.abi,
        functionName: "payBundleForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Approves all tokens in a bundle for trading
     * @param bundle - Bundle of tokens to approve
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Array of transaction hashes
     *
     * @example
     * ```ts
     * const approvals = await client.tokenBundle.approve(
     *   tokenBundle,
     *   "escrow"
     * );
     * ```
     */
    approve: async (bundle, purpose) => {
      const target = purpose === "escrow" ? addresses.tokenBundleEscrowObligation : addresses.tokenBundlePaymentObligation;
      const approvalPromises = [];
      bundle.erc20s.forEach((token) => {
        approvalPromises.push(
          viemClient.writeContract({
            address: token.address,
            abi: abi38.abi,
            functionName: "approve",
            args: [target, token.value]
          })
        );
      });
      const erc721AddressesSet = new Set(bundle.erc721s.map((token) => token.address));
      erc721AddressesSet.forEach((address) => {
        approvalPromises.push(
          viemClient.writeContract({
            address,
            abi: abi44.abi,
            functionName: "setApprovalForAll",
            args: [target, true]
          })
        );
      });
      const erc1155AddressesSet = new Set(bundle.erc1155s.map((token) => token.address));
      erc1155AddressesSet.forEach((address) => {
        approvalPromises.push(
          viemClient.writeContract({
            address,
            abi: abi48.abi,
            functionName: "setApprovalForAll",
            args: [target, true]
          })
        );
      });
      const results = await Promise.all(approvalPromises);
      return results;
    }
  };
};

// src/oracle/oracle.ts
import { parseAbiItem as parseAbiItem2 } from "viem";
var makeOracleClient = (viemClient, addresses) => {
  const arbitrationRequestedEvent = parseAbiItem2(
    "event ArbitrationRequested(bytes32 indexed obligation, address indexed oracle)"
  );
  const arbitrationMadeEvent = parseAbiItem2(
    "event ArbitrationMade(bytes32 indexed obligation, address indexed oracle, bool decision)"
  );
  const arbitrateOnchain = async (obligationUid, decision) => await viemClient.writeContract({
    address: addresses.trustedOracleArbiter,
    abi: abi27.abi,
    functionName: "arbitrate",
    args: [obligationUid, decision],
    account: viemClient.account,
    chain: viemClient.chain
  });
  const requestArbitration = async (obligationUid, oracle) => {
    return await viemClient.writeContract({
      address: addresses.trustedOracleArbiter,
      abi: abi27.abi,
      functionName: "requestArbitration",
      args: [obligationUid, oracle],
      account: viemClient.account,
      chain: viemClient.chain
    });
  };
  const getArbitrationRequests = async (options = {}) => {
    const logs = await viemClient.getLogs({
      address: addresses.trustedOracleArbiter,
      event: arbitrationRequestedEvent,
      args: {
        oracle: viemClient.account.address
      },
      fromBlock: options.fromBlock || "earliest",
      toBlock: options.toBlock || "latest"
    });
    const attestations = await Promise.all(
      logs.map(async (log) => await getAttestation(viemClient, log.args.obligation, addresses))
    );
    const now = BigInt(Math.floor(Date.now() / 1e3));
    const validAttestations = attestations.filter(
      (attestation) => (attestation.expirationTime === BigInt(0) || attestation.expirationTime >= now) && (attestation.revocationTime === BigInt(0) || attestation.revocationTime >= now)
    );
    if (options.skipAlreadyArbitrated) {
      const filteredAttestations = await Promise.all(
        validAttestations.map(async (attestation) => {
          const existingLogs = await viemClient.getLogs({
            address: addresses.trustedOracleArbiter,
            event: arbitrationMadeEvent,
            args: {
              obligation: attestation.uid,
              oracle: viemClient.account.address
            },
            fromBlock: "earliest",
            toBlock: "latest"
          });
          return existingLogs.length === 0 ? attestation : null;
        })
      );
      return filteredAttestations.filter((a) => a !== null);
    }
    return validAttestations;
  };
  const arbitratePast = async (arbitrate, options = {}) => {
    const attestations = await getArbitrationRequests(options);
    const decisions = await Promise.all(
      attestations.map(async (attestation) => {
        const decision = await arbitrate(attestation);
        if (decision === null) return null;
        const hash = await arbitrateOnchain(attestation.uid, decision);
        return { hash, attestation, decision };
      })
    );
    return decisions.filter((d) => d !== null);
  };
  const listenAndArbitrate = async (arbitrate, options = {}) => {
    const decisions = options.onlyNew ? [] : await arbitratePast(arbitrate, options);
    const optimalInterval = getOptimalPollingInterval(viemClient, options.pollingInterval);
    const unwatch = viemClient.watchEvent({
      address: addresses.trustedOracleArbiter,
      event: arbitrationRequestedEvent,
      args: {
        oracle: viemClient.account.address
      },
      onLogs: async (logs) => {
        await Promise.all(
          logs.map(async (log) => {
            const attestation = await getAttestation(viemClient, log.args.obligation, addresses);
            if (options.skipAlreadyArbitrated) {
              const existingLogs = await viemClient.getLogs({
                address: addresses.trustedOracleArbiter,
                event: arbitrationMadeEvent,
                args: {
                  obligation: attestation.uid,
                  oracle: viemClient.account.address
                },
                fromBlock: "earliest",
                toBlock: "latest"
              });
              if (existingLogs.length > 0) {
                return;
              }
            }
            const _decision = await arbitrate(attestation);
            if (_decision === null) return;
            const hash = await arbitrateOnchain(attestation.uid, _decision);
            const decision = {
              hash,
              attestation,
              decision: _decision
            };
            if (options.onAfterArbitrate) {
              await options.onAfterArbitrate(decision);
            }
          })
        );
      },
      pollingInterval: optimalInterval
    });
    return { decisions, unwatch };
  };
  return {
    requestArbitration,
    getArbitrationRequests,
    arbitratePast,
    listenAndArbitrate
  };
};

// src/extensions.ts
var makeDefaultExtension = (client) => ({
  /** Unified client for all arbiter functionality */
  arbiters: makeArbitersClient(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC20 tokens */
  erc20: makeErc20Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC721 tokens */
  erc721: makeErc721Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC1155 tokens */
  erc1155: makeErc1155Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with token bundles */
  bundle: makeTokenBundleClient(client.viemClient, client.contractAddresses),
  /** Methods for interacting with attestations */
  attestation: makeAttestationClient(client.viemClient, client.contractAddresses),
  /** Utilities for StringObligation */
  stringObligation: makeStringObligationClient(client.viemClient, client.contractAddresses),
  oracle: makeOracleClient(client.viemClient, client.contractAddresses)
});

// src/index.ts
function makeExtendableClient(base) {
  function extend(current) {
    return (extendFn) => {
      const extensions = extendFn(current);
      for (const key in base) delete extensions[key];
      const combined = { ...current, ...extensions };
      return Object.assign(combined, { extend: extend(combined) });
    };
  }
  return Object.assign(base, { extend: extend(base) });
}
var makeClient = (walletClient, contractAddresses2) => {
  const client = makeMinimalClient(walletClient, contractAddresses2);
  return client.extend(makeDefaultExtension);
};
var makeMinimalClient = (walletClient, contractAddresses2) => {
  const viemClient = walletClient.extend(publicActions);
  let baseAddresses;
  if (supportedChains.includes(viemClient.chain.name)) {
    baseAddresses = contractAddresses[viemClient.chain.name];
  }
  if (!baseAddresses && !contractAddresses2) {
    throw new Error(
      `Chain "${viemClient.chain.name}" is not supported and no custom contract addresses were provided.`
    );
  }
  const zeroAddress = "0x0000000000000000000000000000000000000000";
  const addresses = {
    eas: contractAddresses2?.eas || baseAddresses?.eas || zeroAddress,
    easSchemaRegistry: contractAddresses2?.easSchemaRegistry || baseAddresses?.easSchemaRegistry || zeroAddress,
    erc20EscrowObligation: contractAddresses2?.erc20EscrowObligation || baseAddresses?.erc20EscrowObligation || zeroAddress,
    erc20PaymentObligation: contractAddresses2?.erc20PaymentObligation || baseAddresses?.erc20PaymentObligation || zeroAddress,
    erc20BarterUtils: contractAddresses2?.erc20BarterUtils || baseAddresses?.erc20BarterUtils || zeroAddress,
    erc721EscrowObligation: contractAddresses2?.erc721EscrowObligation || baseAddresses?.erc721EscrowObligation || zeroAddress,
    erc721PaymentObligation: contractAddresses2?.erc721PaymentObligation || baseAddresses?.erc721PaymentObligation || zeroAddress,
    erc721BarterUtils: contractAddresses2?.erc721BarterUtils || baseAddresses?.erc721BarterUtils || zeroAddress,
    erc1155EscrowObligation: contractAddresses2?.erc1155EscrowObligation || baseAddresses?.erc1155EscrowObligation || zeroAddress,
    erc1155PaymentObligation: contractAddresses2?.erc1155PaymentObligation || baseAddresses?.erc1155PaymentObligation || zeroAddress,
    erc1155BarterUtils: contractAddresses2?.erc1155BarterUtils || baseAddresses?.erc1155BarterUtils || zeroAddress,
    tokenBundleEscrowObligation: contractAddresses2?.tokenBundleEscrowObligation || baseAddresses?.tokenBundleEscrowObligation || zeroAddress,
    tokenBundlePaymentObligation: contractAddresses2?.tokenBundlePaymentObligation || baseAddresses?.tokenBundlePaymentObligation || zeroAddress,
    tokenBundleBarterUtils: contractAddresses2?.tokenBundleBarterUtils || baseAddresses?.tokenBundleBarterUtils || zeroAddress,
    attestationEscrowObligation: contractAddresses2?.attestationEscrowObligation || baseAddresses?.attestationEscrowObligation || zeroAddress,
    attestationEscrowObligation2: contractAddresses2?.attestationEscrowObligation2 || baseAddresses?.attestationEscrowObligation2 || zeroAddress,
    attestationBarterUtils: contractAddresses2?.attestationBarterUtils || baseAddresses?.attestationBarterUtils || zeroAddress,
    stringObligation: contractAddresses2?.stringObligation || baseAddresses?.stringObligation || zeroAddress,
    trustedPartyArbiter: contractAddresses2?.trustedPartyArbiter || baseAddresses?.trustedPartyArbiter || zeroAddress,
    trivialArbiter: contractAddresses2?.trivialArbiter || baseAddresses?.trivialArbiter || zeroAddress,
    specificAttestationArbiter: contractAddresses2?.specificAttestationArbiter || baseAddresses?.specificAttestationArbiter || zeroAddress,
    trustedOracleArbiter: contractAddresses2?.trustedOracleArbiter || baseAddresses?.trustedOracleArbiter || zeroAddress,
    intrinsicsArbiter: contractAddresses2?.intrinsicsArbiter || baseAddresses?.intrinsicsArbiter || zeroAddress,
    intrinsicsArbiter2: contractAddresses2?.intrinsicsArbiter2 || baseAddresses?.intrinsicsArbiter2 || zeroAddress,
    anyArbiter: contractAddresses2?.anyArbiter || baseAddresses?.anyArbiter || zeroAddress,
    allArbiter: contractAddresses2?.allArbiter || baseAddresses?.allArbiter || zeroAddress,
    notArbiter: contractAddresses2?.notArbiter || baseAddresses?.notArbiter || zeroAddress,
    erc8004Arbiter: contractAddresses2?.erc8004Arbiter || baseAddresses?.erc8004Arbiter || zeroAddress,
    confirmationArbiter: contractAddresses2?.confirmationArbiter || baseAddresses?.confirmationArbiter || zeroAddress,
    confirmationArbiterComposing: contractAddresses2?.confirmationArbiterComposing || baseAddresses?.confirmationArbiterComposing || zeroAddress,
    revocableConfirmationArbiter: contractAddresses2?.revocableConfirmationArbiter || baseAddresses?.revocableConfirmationArbiter || zeroAddress,
    revocableConfirmationArbiterComposing: contractAddresses2?.revocableConfirmationArbiterComposing || baseAddresses?.revocableConfirmationArbiterComposing || zeroAddress,
    unrevocableConfirmationArbiter: contractAddresses2?.unrevocableConfirmationArbiter || baseAddresses?.unrevocableConfirmationArbiter || zeroAddress,
    unrevocableArbiterComposing: contractAddresses2?.unrevocableArbiterComposing || baseAddresses?.unrevocableArbiterComposing || zeroAddress,
    nativeTokenEscrowObligation: contractAddresses2?.nativeTokenEscrowObligation || baseAddresses?.nativeTokenEscrowObligation || zeroAddress,
    nativeTokenPaymentObligation: contractAddresses2?.nativeTokenPaymentObligation || baseAddresses?.nativeTokenPaymentObligation || zeroAddress,
    nativeTokenBarterUtils: contractAddresses2?.nativeTokenBarterUtils || baseAddresses?.nativeTokenBarterUtils || zeroAddress,
    // Attestation Properties Arbiters - Composing
    attesterArbiterComposing: contractAddresses2?.attesterArbiterComposing || baseAddresses?.attesterArbiterComposing || zeroAddress,
    expirationTimeArbiterComposing: contractAddresses2?.expirationTimeArbiterComposing || baseAddresses?.expirationTimeArbiterComposing || zeroAddress,
    recipientArbiterComposing: contractAddresses2?.recipientArbiterComposing || baseAddresses?.recipientArbiterComposing || zeroAddress,
    refUidArbiterComposing: contractAddresses2?.refUidArbiterComposing || baseAddresses?.refUidArbiterComposing || zeroAddress,
    revocableArbiterComposing: contractAddresses2?.revocableArbiterComposing || baseAddresses?.revocableArbiterComposing || zeroAddress,
    revocationTimeArbiterComposing: contractAddresses2?.revocationTimeArbiterComposing || baseAddresses?.revocationTimeArbiterComposing || zeroAddress,
    schemaArbiterComposing: contractAddresses2?.schemaArbiterComposing || baseAddresses?.schemaArbiterComposing || zeroAddress,
    timestampArbiterComposing: contractAddresses2?.timestampArbiterComposing || baseAddresses?.timestampArbiterComposing || zeroAddress,
    uidArbiterComposing: contractAddresses2?.uidArbiterComposing || baseAddresses?.uidArbiterComposing || zeroAddress,
    valueArbiterComposing: contractAddresses2?.valueArbiterComposing || baseAddresses?.valueArbiterComposing || zeroAddress,
    // Attestation Properties Arbiters - Non-Composing
    attesterArbiterNonComposing: contractAddresses2?.attesterArbiterNonComposing || baseAddresses?.attesterArbiterNonComposing || zeroAddress,
    expirationTimeArbiterNonComposing: contractAddresses2?.expirationTimeArbiterNonComposing || baseAddresses?.expirationTimeArbiterNonComposing || zeroAddress,
    recipientArbiterNonComposing: contractAddresses2?.recipientArbiterNonComposing || baseAddresses?.recipientArbiterNonComposing || zeroAddress,
    refUidArbiterNonComposing: contractAddresses2?.refUidArbiterNonComposing || baseAddresses?.refUidArbiterNonComposing || zeroAddress,
    revocableArbiterNonComposing: contractAddresses2?.revocableArbiterNonComposing || baseAddresses?.revocableArbiterNonComposing || zeroAddress,
    revocationTimeArbiterNonComposing: contractAddresses2?.revocationTimeArbiterNonComposing || baseAddresses?.revocationTimeArbiterNonComposing || zeroAddress,
    schemaArbiterNonComposing: contractAddresses2?.schemaArbiterNonComposing || baseAddresses?.schemaArbiterNonComposing || zeroAddress,
    timestampArbiterNonComposing: contractAddresses2?.timestampArbiterNonComposing || baseAddresses?.timestampArbiterNonComposing || zeroAddress,
    uidArbiterNonComposing: contractAddresses2?.uidArbiterNonComposing || baseAddresses?.uidArbiterNonComposing || zeroAddress,
    valueArbiterNonComposing: contractAddresses2?.valueArbiterNonComposing || baseAddresses?.valueArbiterNonComposing || zeroAddress
  };
  const client = {
    /** The underlying Viem client */
    viemClient,
    makeExtendableClient,
    /** Address of the account used to create this client */
    address: viemClient.account.address,
    /** Contract addresses being used */
    contractAddresses: addresses,
    /**
     * Retrieves an attestation by its UID
     * @param uid - The unique identifier of the attestation
     * @returns The attestation data
     */
    getAttestation: async (uid) => {
      return await getAttestation(viemClient, uid, addresses);
    },
    /**
     * Gets an attestation from a transaction hash
     * @param hash - The transaction hash
     * @returns The attestation event args
     */
    getAttestedEventFromTxHash: async (hash) => {
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      const events = parseEventLogs2({
        abi: abi29.abi,
        eventName: "Attested",
        logs: tx.logs
      });
      if (!events[0]) throw new Error("No Attested event found in transaction");
      return events[0].args;
    },
    /**
     * Waits for an escrow to be fulfilled
     * @param contractAddress - The address of the escrow contract
     * @param buyAttestation - The UID of the buy attestation
     * @returns Object containing payment, fulfillment and fulfiller details
     *
     * @example
     * ```ts
     * // Wait for fulfillment of an escrow
     * const fulfillment = await client.waitForFulfillment(
     *   contractAddresses.erc20EscrowObligation,
     *   escrow.attested.uid,
     * );
     * ```
     */
    waitForFulfillment: async (contractAddress, buyAttestation, pollingInterval) => {
      const fulfillmentEvent = parseAbiItem3(
        "event EscrowCollected(bytes32 indexed escrow, bytes32 indexed fulfillment, address indexed fulfiller)"
      );
      const logs = await viemClient.getLogs({
        address: contractAddress,
        event: fulfillmentEvent,
        args: { escrow: buyAttestation },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0])
        return {
          payment: logs[0].args.escrow,
          fulfillment: logs[0].args.fulfillment,
          fulfiller: logs[0].args.fulfiller
        };
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: contractAddress,
          event: fulfillmentEvent,
          args: { escrow: buyAttestation },
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve({
              payment: logs2[0].args.escrow,
              fulfillment: logs2[0].args.fulfillment,
              fulfiller: logs2[0].args.fulfiller
            });
            unwatch();
          },
          pollingInterval: optimalInterval
        });
      });
    },
    /**
     * Extract obligation data from a fulfillment attestation
     * @param obligationAbi - ABI parameters for the obligation data
     * @param attestation - The attestation containing the obligation data
     * @returns Decoded obligation data
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const obligationAbi = parseAbiParameters("(string item)");
     * const obligation = client.extractObligationData(obligationAbi, attestation);
     * ```
     */
    extractObligationData: (obligationAbi, attestation) => {
      return decodeAbiParameters10(obligationAbi, attestation.data);
    },
    /**
     * Get the escrow attestation that this fulfillment references via refUID
     * @param fulfillment - The fulfillment attestation
     * @returns The escrow attestation
     *
     * @example
     * ```ts
     * const escrowAttestation = await client.getEscrowAttestation(fulfillmentAttestation);
     * ```
     */
    getEscrowAttestation: async (fulfillment) => {
      return await getAttestation(viemClient, fulfillment.refUID, addresses);
    },
    /**
     * Extract demand data from an escrow attestation
     * @param demandAbi - ABI parameters for the demand data
     * @param escrowAttestation - The escrow attestation
     * @returns Decoded demand data
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const demandAbi = parseAbiParameters("(address oracle, bytes data)");
     * const demand = client.extractDemandData(demandAbi, escrowAttestation);
     * ```
     */
    extractDemandData: (demandAbi, escrowAttestation) => {
      const arbiterDemandAbi = parseAbiParameters("(address arbiter, bytes demand)");
      const arbiterDemand = decodeAbiParameters10(arbiterDemandAbi, escrowAttestation.data)[0];
      const trustedOracleDemandAbi = parseAbiParameters("(address oracle, bytes data)");
      const trustedOracleDemand = decodeAbiParameters10(trustedOracleDemandAbi, arbiterDemand.demand)[0];
      return decodeAbiParameters10(demandAbi, trustedOracleDemand.data);
    },
    /**
     * Get escrow attestation and extract demand data in one call
     * @param demandAbi - ABI parameters for the demand data
     * @param fulfillment - The fulfillment attestation
     * @returns Tuple of [escrow attestation, decoded demand data]
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const demandAbi = parseAbiParameters("(address oracle, bytes data)");
     * const [escrow, demand] = await client.getEscrowAndDemand(demandAbi, fulfillment);
     * ```
     */
    getEscrowAndDemand: async (demandAbi, fulfillment) => {
      const escrow = await getAttestation(viemClient, fulfillment.refUID, addresses);
      const arbiterDemandAbi = parseAbiParameters("(address arbiter, bytes demand)");
      const arbiterDemand = decodeAbiParameters10(arbiterDemandAbi, escrow.data)[0];
      const trustedOracleDemandAbi = parseAbiParameters("(address oracle, bytes data)");
      const trustedOracleDemand = decodeAbiParameters10(trustedOracleDemandAbi, arbiterDemand.demand)[0];
      const demand = decodeAbiParameters10(demandAbi, trustedOracleDemand.data);
      return [escrow, demand];
    }
  };
  return makeExtendableClient(client);
};
export {
  contractAddresses,
  flattenTokenBundle,
  getAttestation,
  getAttestedEventFromTxHash,
  getOptimalPollingInterval,
  isWebSocketTransport,
  makeArbitersClient,
  makeAttestationPropertiesArbitersClient,
  makeClient,
  makeDefaultExtension,
  makeGeneralArbitersClient,
  makeLogicalArbitersClient,
  makeMinimalClient,
  supportedChains
};
