"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  contractAddresses: () => contractAddresses,
  flattenTokenBundle: () => flattenTokenBundle,
  getAttestation: () => getAttestation,
  getAttestedEventFromTxHash: () => getAttestedEventFromTxHash,
  getOptimalPollingInterval: () => getOptimalPollingInterval,
  isWebSocketTransport: () => isWebSocketTransport,
  makeArbitersClient: () => makeArbitersClient,
  makeAttestationPropertiesArbitersClient: () => makeAttestationPropertiesArbitersClient,
  makeClient: () => makeClient,
  makeDefaultExtension: () => makeDefaultExtension,
  makeGeneralArbitersClient: () => makeGeneralArbitersClient,
  makeLogicalArbitersClient: () => makeLogicalArbitersClient,
  makeMinimalClient: () => makeMinimalClient,
  supportedChains: () => supportedChains
});
module.exports = __toCommonJS(index_exports);
var import_viem12 = require("viem");

// src/clients/attestationPropertiesArbiters.ts
var import_viem = require("viem");

// src/contracts/AttesterArbiterComposing.ts
var abi = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttesterArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "AttesterMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610610908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a8575063e6c9714d14610032575f80fd5b3461036e57606036600319011261036e576004356001600160401b03811161036e57610140600319823603011261036e576040519061014082018281106001600160401b0382111761039457604052806004013582526024810135602083015261009e6044820161053d565b604083019081526100b16064830161053d565b90606084019182526100c56084840161053d565b936080810194855260a081019060a485013582526100e560c48601610551565b9460c082019586526100f960e48201610551565b60e0830152610104810135801515810361036e57610100830152610124810135906001600160401b03821161036e5760046101379236920101610580565b6101208201526024356001600160401b03811161036e5761015c903690600401610580565b9485518601602081019660208183031261036e576020810151916001600160401b03831161036e5760608284019091031261036e576040519161019e83610501565b6101ac6020828401016105c6565b835260408183010151906001600160401b03821161036e57603f8382018301018a131561036e57602082828501010151926101e684610565565b9a6101f46040519c8d61051c565b848c52604082840185018601011161036e575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c6565b6040820181905260e08401516001600160a01b039081169116036103855751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015291516001600160a01b0390811661012483015260e0830151811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102fb906101a48401906104dd565b828103600319016024840152610310916104dd565b604435604483015203815a93602094fa801561037a575f9061033a575b6020906040519015158152f35b506020813d602011610372575b816103546020938361051c565b8101031261036e5751801515810361036e5760209061032d565b5f80fd5b3d9150610347565b6040513d5f823e3d90fd5b63c77ead7160e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036e57602036600319011261036e57600435906001600160401b03821161036e573660238301121561036e5781600401356001600160401b03811161036e57820191602483019136831161036e576040816104055f93610501565b8281526060602082015201526020602319602483860301011261036e576024810135906001600160401b03821161036e5701916060908390031261036e576040519061045082610501565b61045c60248401610551565b82526044830135906001600160401b03821161036e57610486606491602461049494870101610580565b936020840194855201610551565b604082019081526104c96040519384936020855260018060a01b039051166020850152516060604085015260808401906104dd565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039457604052565b90601f801991011681019081106001600160401b0382111761039457604052565b35906001600160401b038216820361036e57565b35906001600160a01b038216820361036e57565b6001600160401b03811161039457601f01601f191660200190565b81601f8201121561036e5780359061059782610565565b926105a5604051948561051c565b8284526020838301011161036e57815f926020809301838601378301015290565b51906001600160a01b038216820361036e5756fea2646970667358221220acb0256e2a17aecbb584193dd5afaef36d9f039a652368890ac73c1f292731bb64736f6c634300081b0033",
    "sourceMap": "215:899:69:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a8575063e6c9714d14610032575f80fd5b3461036e57606036600319011261036e576004356001600160401b03811161036e57610140600319823603011261036e576040519061014082018281106001600160401b0382111761039457604052806004013582526024810135602083015261009e6044820161053d565b604083019081526100b16064830161053d565b90606084019182526100c56084840161053d565b936080810194855260a081019060a485013582526100e560c48601610551565b9460c082019586526100f960e48201610551565b60e0830152610104810135801515810361036e57610100830152610124810135906001600160401b03821161036e5760046101379236920101610580565b6101208201526024356001600160401b03811161036e5761015c903690600401610580565b9485518601602081019660208183031261036e576020810151916001600160401b03831161036e5760608284019091031261036e576040519161019e83610501565b6101ac6020828401016105c6565b835260408183010151906001600160401b03821161036e57603f8382018301018a131561036e57602082828501010151926101e684610565565b9a6101f46040519c8d61051c565b848c52604082840185018601011161036e575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c6565b6040820181905260e08401516001600160a01b039081169116036103855751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015291516001600160a01b0390811661012483015260e0830151811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102fb906101a48401906104dd565b828103600319016024840152610310916104dd565b604435604483015203815a93602094fa801561037a575f9061033a575b6020906040519015158152f35b506020813d602011610372575b816103546020938361051c565b8101031261036e5751801515810361036e5760209061032d565b5f80fd5b3d9150610347565b6040513d5f823e3d90fd5b63c77ead7160e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036e57602036600319011261036e57600435906001600160401b03821161036e573660238301121561036e5781600401356001600160401b03811161036e57820191602483019136831161036e576040816104055f93610501565b8281526060602082015201526020602319602483860301011261036e576024810135906001600160401b03821161036e5701916060908390031261036e576040519061045082610501565b61045c60248401610551565b82526044830135906001600160401b03821161036e57610486606491602461049494870101610580565b936020840194855201610551565b604082019081526104c96040519384936020855260018060a01b039051166020850152516060604085015260808401906104dd565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039457604052565b90601f801991011681019081106001600160401b0382111761039457604052565b35906001600160401b038216820361036e57565b35906001600160a01b038216820361036e57565b6001600160401b03811161039457601f01601f191660200190565b81601f8201121561036e5780359061059782610565565b926105a5604051948561051c565b8284526020838301011161036e57815f926020809301838601378301015290565b51906001600160a01b038216820361036e5756fea2646970667358221220acb0256e2a17aecbb584193dd5afaef36d9f039a652368890ac73c1f292731bb64736f6c634300081b0033",
    "sourceMap": "215:899:69:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:899:69;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;:::i;:::-;;;;647:32;;215:899;647:32;;215:899;;;;;;;;;647:32;;215:899;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;-1:-1:-1;215:899:69;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;693:39;689:72;;215:899;882:18;;215:899;;-1:-1:-1;;;791:153:69;;215:899;;791:153;;215:899;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:899:69;;;;;;;;:::i;:::-;;;;;;;791:153;;;;215:899;791:153;;;;;;215:899;791:153;;;215:899;;;;;;;;;;;791:153;;215:899;791:153;;215:899;791:153;;;;;;215:899;791:153;;;:::i;:::-;;;215:899;;;;;;;;;;;;;791:153;;;215:899;;;;791:153;;;-1:-1:-1;791:153:69;;;215:899;;;;;;;;;689:72;741:20;;;215:899;741:20;215:899;;741:20;215:899;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:899:69;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;215:899:69;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:899:69;;;;;;;;-1:-1:-1;;215:899:69;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:899:69;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:899:69;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:899:69;;;;;;:::o;:::-;-1:-1:-1;;;;;215:899:69;;;;;;-1:-1:-1;;215:899:69;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:899:69;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:899:69;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"AttesterMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct AttesterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/AttesterArbiter.sol":"AttesterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/AttesterArbiter.sol":{"keccak256":"0x8c102296de0ab060ab5127c66d10ebb2933987450c40bc590a714174c4174ebb","license":"UNLICENSED","urls":["bzz-raw://44363de050d8b8fd160f71b1d06b9e37af9e429efd05e4f700bd219cf9d1886a","dweb:/ipfs/QmcW58xfVNwDZ8SCDwagFyo6ospq2dVaDDzBAXPyrNxUXu"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "AttesterMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct AttesterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/AttesterArbiter.sol": "AttesterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/AttesterArbiter.sol": {
        "keccak256": "0x8c102296de0ab060ab5127c66d10ebb2933987450c40bc590a714174c4174ebb",
        "urls": [
          "bzz-raw://44363de050d8b8fd160f71b1d06b9e37af9e429efd05e4f700bd219cf9d1886a",
          "dweb:/ipfs/QmcW58xfVNwDZ8SCDwagFyo6ospq2dVaDDzBAXPyrNxUXu"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 69
};

// src/contracts/AttesterArbiterNonComposing.ts
var abi2 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttesterArbiter.DemandData",
          "components": [
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "AttesterMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610338908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101c15763e6c9714d1461002f575f80fd5b346101a95760603660031901126101a95760043567ffffffffffffffff81116101a95761014060031982360301126101a957604051610140810181811067ffffffffffffffff8211176101ad57604052816004013581526024820135602082015261009c60448301610271565b60408201526100ad60648301610271565b60608201526100be60848301610271565b608082015260a482013560a08201526100d960c48301610286565b60c08201526100ea60e48301610286565b9160e0820192835261010481013580151581036101a95761010083015261012481013567ffffffffffffffff81116101a95761012091600461012f923692010161029a565b91015260243567ffffffffffffffff81116101a95761015290369060040161029a565b906020828051810103126101a957602061016a610251565b9201516001600160a01b038116928382036101a95752516001600160a01b03160361019a57602060405160018152f35b63c77ead7160e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a95760203660031901126101a95760043567ffffffffffffffff81116101a957366023820112156101a957806004013567ffffffffffffffff81116101a95781013660248201116101a9576020905f61021b610251565b52829003126101a95760209061023b6024610234610251565b9201610286565b908190526040516001600160a01b039091168152f35b604051906020820182811067ffffffffffffffff8211176101ad57604052565b359067ffffffffffffffff821682036101a957565b35906001600160a01b03821682036101a957565b81601f820112156101a95780359067ffffffffffffffff82116101ad5760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101ad57604052828452602083830101116101a957815f92602080930183860137830101529056fea26469706673582212209440f59b2ca5300dfaf48a75af00b7503ae56e458b3ca8c7ecc6516552516ef064736f6c634300081b0033",
    "sourceMap": "215:687:81:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101c15763e6c9714d1461002f575f80fd5b346101a95760603660031901126101a95760043567ffffffffffffffff81116101a95761014060031982360301126101a957604051610140810181811067ffffffffffffffff8211176101ad57604052816004013581526024820135602082015261009c60448301610271565b60408201526100ad60648301610271565b60608201526100be60848301610271565b608082015260a482013560a08201526100d960c48301610286565b60c08201526100ea60e48301610286565b9160e0820192835261010481013580151581036101a95761010083015261012481013567ffffffffffffffff81116101a95761012091600461012f923692010161029a565b91015260243567ffffffffffffffff81116101a95761015290369060040161029a565b906020828051810103126101a957602061016a610251565b9201516001600160a01b038116928382036101a95752516001600160a01b03160361019a57602060405160018152f35b63c77ead7160e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a95760203660031901126101a95760043567ffffffffffffffff81116101a957366023820112156101a957806004013567ffffffffffffffff81116101a95781013660248201116101a9576020905f61021b610251565b52829003126101a95760209061023b6024610234610251565b9201610286565b908190526040516001600160a01b039091168152f35b604051906020820182811067ffffffffffffffff8211176101ad57604052565b359067ffffffffffffffff821682036101a957565b35906001600160a01b03821682036101a957565b81601f820112156101a95780359067ffffffffffffffff82116101ad5760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101ad57604052828452602083830101116101a957815f92602080930183860137830101529056fea26469706673582212209440f59b2ca5300dfaf48a75af00b7503ae56e458b3ca8c7ecc6516552516ef064736f6c634300081b0033",
    "sourceMap": "215:687:81:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:687:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;596:32;;215:687;;;;;;;:::i;:::-;596:32;;215:687;-1:-1:-1;;;;;215:687:81;;;;;;;;;;-1:-1:-1;;;;;215:687:81;642:39;638:72;;215:687;;;;;;;638:72;690:20;;;215:687;690:20;215:687;;690:20;215:687;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:687:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:687:81;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:687:81;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:687:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:687:81;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"AttesterMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"attester","type":"address"}],"internalType":"struct AttesterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/AttesterArbiter.sol":"AttesterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/AttesterArbiter.sol":{"keccak256":"0xc2b77b13d10e17b21f4baae212184b368bd64b39c882585a27d5b168ee5f7db1","license":"UNLICENSED","urls":["bzz-raw://c241076679af5ae7b4fd6356398ddb0ef947553c5e5d075c729e42d19502c22d","dweb:/ipfs/QmdxfZCt5Gv3H6mHWw9aPMJJtSGCqi4CvfN7bMgFNjmt23"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "AttesterMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct AttesterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/AttesterArbiter.sol": "AttesterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/AttesterArbiter.sol": {
        "keccak256": "0xc2b77b13d10e17b21f4baae212184b368bd64b39c882585a27d5b168ee5f7db1",
        "urls": [
          "bzz-raw://c241076679af5ae7b4fd6356398ddb0ef947553c5e5d075c729e42d19502c22d",
          "dweb:/ipfs/QmdxfZCt5Gv3H6mHWw9aPMJJtSGCqi4CvfN7bMgFNjmt23"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 81
};

// src/contracts/ExpirationTimeAfterArbiterComposing.ts
var abi3 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeAfterArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotAfter",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610608908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116106103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b630e31b6a160e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220d6dcb9bb4ad627071949e6c24d8c7c88aaa245732d5a8614d348571b85dd1d1a64736f6c634300081b0033",
    "sourceMap": "215:946:70:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116106103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b630e31b6a160e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220d6dcb9bb4ad627071949e6c24d8c7c88aaa245732d5a8614d348571b85dd1d1a64736f6c634300081b0033",
    "sourceMap": "215:946:70:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:946:70;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;:::i;:::-;;;;667:32;;215:946;667:32;;215:946;;;;;;;;;667:32;;215:946;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;-1:-1:-1;215:946:70;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;713:50;709:99;;215:946;929:18;;215:946;;-1:-1:-1;;;838:153:70;;215:946;;838:153;;215:946;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;929:18;215:946;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:946:70;;;;;;;;:::i;:::-;;;;;;;838:153;;;;215:946;838:153;;;;;;215:946;838:153;;;215:946;;;;;;;;;;;838:153;;215:946;838:153;;215:946;838:153;;;;;;215:946;838:153;;;:::i;:::-;;;215:946;;;;;;;;;;;;;838:153;;;215:946;;;;838:153;;;-1:-1:-1;838:153:70;;;215:946;;;;;;;;;709:99;784:24;;;215:946;784:24;215:946;;784:24;215:946;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:946:70;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:946:70;;;;;;;;-1:-1:-1;;215:946:70;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:946:70;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:946:70;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:946:70;;;;;;:::o;:::-;-1:-1:-1;;;;;215:946:70;;;;;;-1:-1:-1;;215:946:70;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:946:70;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotAfter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeAfterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/ExpirationTimeAfterArbiter.sol":"ExpirationTimeAfterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/ExpirationTimeAfterArbiter.sol":{"keccak256":"0xecfbccfd7acbbeae733c247eb45200f453b27d100c77c90edffed4bdb210601a","license":"UNLICENSED","urls":["bzz-raw://3d021efea883670624b030f2efbd254f99da867e7525333601da636e69166db2","dweb:/ipfs/QmcStsVMDxKMkZKBdnM72aokS3VpKbXTmXPLJ6zfN3JFTX"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotAfter"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeAfterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/ExpirationTimeAfterArbiter.sol": "ExpirationTimeAfterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/ExpirationTimeAfterArbiter.sol": {
        "keccak256": "0xecfbccfd7acbbeae733c247eb45200f453b27d100c77c90edffed4bdb210601a",
        "urls": [
          "bzz-raw://3d021efea883670624b030f2efbd254f99da867e7525333601da636e69166db2",
          "dweb:/ipfs/QmcStsVMDxKMkZKBdnM72aokS3VpKbXTmXPLJ6zfN3JFTX"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 70
};

// src/contracts/ExpirationTimeAfterArbiterNonComposing.ts
var abi4 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeAfterArbiter.DemandData",
          "components": [
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotAfter",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161061019757602060405160018152f35b630e31b6a160e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220ad1baf47c4d3e631bbfecad3fd728b6e389e8b1ce90a27829dda74a60d60759d64736f6c634300081b0033",
    "sourceMap": "215:734:82:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161061019757602060405160018152f35b630e31b6a160e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220ad1baf47c4d3e631bbfecad3fd728b6e389e8b1ce90a27829dda74a60d60759d64736f6c634300081b0033",
    "sourceMap": "215:734:82:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:734:82;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;:::i;:::-;;;;;616:32;;215:734;;;;;;;:::i;:::-;616:32;;215:734;;-1:-1:-1;;;;;215:734:82;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;662:50;658:99;;215:734;;;;;;;658:99;733:24;;;215:734;733:24;215:734;;733:24;215:734;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:734:82;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:734:82;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:734:82;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;-1:-1:-1;;215:734:82;;;;;;;;-1:-1:-1;;;;;215:734:82;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:734:82;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotAfter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeAfterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/ExpirationTimeAfterArbiter.sol":"ExpirationTimeAfterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/ExpirationTimeAfterArbiter.sol":{"keccak256":"0x2f87042d9f50cd88ab631f1578ec56ac2fbde036d98602852447557be716e863","license":"UNLICENSED","urls":["bzz-raw://59701b1232d9658a57eb70e601877008a6eb7d3b906c7a2ba865b714d8b13acd","dweb:/ipfs/QmNpUyAARJfhDvYgeNZVbtaKRokm5bxp5CXVf2BqPTR2pq"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotAfter"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeAfterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/ExpirationTimeAfterArbiter.sol": "ExpirationTimeAfterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/ExpirationTimeAfterArbiter.sol": {
        "keccak256": "0x2f87042d9f50cd88ab631f1578ec56ac2fbde036d98602852447557be716e863",
        "urls": [
          "bzz-raw://59701b1232d9658a57eb70e601877008a6eb7d3b906c7a2ba865b714d8b13acd",
          "dweb:/ipfs/QmNpUyAARJfhDvYgeNZVbtaKRokm5bxp5CXVf2BqPTR2pq"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 82
};

// src/contracts/ExpirationTimeBeforeArbiterComposing.ts
var abi5 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeBeforeArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotBefore",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610608908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116116103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b636f0197bb60e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220ea72423e05c0a3054ff38abb1be328f8ee9e0c2dc41d2f725e4556a1c0112bd964736f6c634300081b0033",
    "sourceMap": "215:949:71:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116116103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b636f0197bb60e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220ea72423e05c0a3054ff38abb1be328f8ee9e0c2dc41d2f725e4556a1c0112bd964736f6c634300081b0033",
    "sourceMap": "215:949:71:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:949:71;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;:::i;:::-;;;;669:32;;215:949;669:32;;215:949;;;;;;;;;669:32;;215:949;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;-1:-1:-1;215:949:71;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;715:50;711:100;;215:949;932:18;;215:949;;-1:-1:-1;;;841:153:71;;215:949;;841:153;;215:949;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;932:18;215:949;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:949:71;;;;;;;;:::i;:::-;;;;;;;841:153;;;;215:949;841:153;;;;;;215:949;841:153;;;215:949;;;;;;;;;;;841:153;;215:949;841:153;;215:949;841:153;;;;;;215:949;841:153;;;:::i;:::-;;;215:949;;;;;;;;;;;;;841:153;;;215:949;;;;841:153;;;-1:-1:-1;841:153:71;;;215:949;;;;;;;;;711:100;786:25;;;215:949;786:25;215:949;;786:25;215:949;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:949:71;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:949:71;;;;;;;;-1:-1:-1;;215:949:71;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:949:71;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:949:71;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:949:71;;;;;;:::o;:::-;-1:-1:-1;;;;;215:949:71;;;;;;-1:-1:-1;;215:949:71;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:949:71;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotBefore","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeBeforeArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/ExpirationTimeBeforeArbiter.sol":"ExpirationTimeBeforeArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/ExpirationTimeBeforeArbiter.sol":{"keccak256":"0x18c649657fba9c1d97db50e866a99861b41282eb6a0e61cb4b8090f92ad40a24","license":"UNLICENSED","urls":["bzz-raw://c055267acebdb738c22587a8b584603e1d35782787da40c27e762a95eb213cae","dweb:/ipfs/QmY73bNx57BXArWunZnBAnadhMMf5Ek21Bv16sCNxQnJ77"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotBefore"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeBeforeArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/ExpirationTimeBeforeArbiter.sol": "ExpirationTimeBeforeArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/ExpirationTimeBeforeArbiter.sol": {
        "keccak256": "0x18c649657fba9c1d97db50e866a99861b41282eb6a0e61cb4b8090f92ad40a24",
        "urls": [
          "bzz-raw://c055267acebdb738c22587a8b584603e1d35782787da40c27e762a95eb213cae",
          "dweb:/ipfs/QmY73bNx57BXArWunZnBAnadhMMf5Ek21Bv16sCNxQnJ77"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 71
};

// src/contracts/ExpirationTimeBeforeArbiterNonComposing.ts
var abi6 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeBeforeArbiter.DemandData",
          "components": [
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotBefore",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161161019757602060405160018152f35b636f0197bb60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220e36607eb8185627960beb4cc3dafa8a79811382ee7882faa6426982a553636ff64736f6c634300081b0033",
    "sourceMap": "215:737:83:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161161019757602060405160018152f35b636f0197bb60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220e36607eb8185627960beb4cc3dafa8a79811382ee7882faa6426982a553636ff64736f6c634300081b0033",
    "sourceMap": "215:737:83:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:737:83;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;:::i;:::-;;;;;618:32;;215:737;;;;;;;:::i;:::-;618:32;;215:737;;-1:-1:-1;;;;;215:737:83;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;664:50;660:100;;215:737;;;;;;;660:100;735:25;;;215:737;735:25;215:737;;735:25;215:737;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:737:83;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:737:83;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:737:83;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;-1:-1:-1;;215:737:83;;;;;;;;-1:-1:-1;;;;;215:737:83;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:737:83;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotBefore","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeBeforeArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/ExpirationTimeBeforeArbiter.sol":"ExpirationTimeBeforeArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/ExpirationTimeBeforeArbiter.sol":{"keccak256":"0x6627434f4e7d30276af1c16fd99de43b4f6625a98846af8335e1b71a82daa788","license":"UNLICENSED","urls":["bzz-raw://03df8692e744ca980739707284028368c9bfb68fc78c17239172f8f9c4cfeb12","dweb:/ipfs/QmcSxEmApk7xkH6hv5KdPYFjFi383cHuBWUMTw7ddLXQ1x"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotBefore"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeBeforeArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/ExpirationTimeBeforeArbiter.sol": "ExpirationTimeBeforeArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/ExpirationTimeBeforeArbiter.sol": {
        "keccak256": "0x6627434f4e7d30276af1c16fd99de43b4f6625a98846af8335e1b71a82daa788",
        "urls": [
          "bzz-raw://03df8692e744ca980739707284028368c9bfb68fc78c17239172f8f9c4cfeb12",
          "dweb:/ipfs/QmcSxEmApk7xkH6hv5KdPYFjFi383cHuBWUMTw7ddLXQ1x"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 83
};

// src/contracts/ExpirationTimeEqualArbiterComposing.ts
var abi7 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeEqualArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotEqual",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610608908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116036103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b635931e77d60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220a0302d20ad5a551dc758d42903a2b9b40c11bd384f339d81660bb2753dc90a3864736f6c634300081b0033",
    "sourceMap": "215:947:72:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b4575063e6c9714d14610032575f80fd5b3461037a57606036600319011261037a576004356001600160401b03811161037a57610140600319823603011261037a576040519061014082018281106001600160401b038211176103a057604052806004013582526024810135602083015261009e60448201610549565b604083019081526100b160648301610549565b60608401526100c260848301610549565b906080840191825260a084019360a484013585526100e260c4850161055d565b9060c081019182526100f660e4860161055d565b9460e08201958652610104810135801515810361037a57610100830152610124810135906001600160401b03821161037a576004610137923692010161058c565b6101208201526024356001600160401b03811161037a5761015c90369060040161058c565b9485518601602081019660208183031261037a576020810151916001600160401b03831161037a5760608284019091031261037a576040519161019e8361050d565b818101602001516001600160a01b038116810361037a57835260408183010151916001600160401b03831161037a57603f8183018401018a131561037a576020838383010101516101ee81610571565b9a6101fc6040519c8d610528565b818c52604083850186018301011161037a576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101516001600160401b0381169081810361037a5760408301526001600160401b03606085015116036103915751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b0390811661012485015294518516610144840152610100810151151561016484015261012001516101406101848401529193909216918391829190610307906101a48401906104e9565b82810360031901602484015261031c916104e9565b604435604483015203815a93602094fa8015610386575f90610346575b6020906040519015158152f35b506020813d60201161037e575b8161036060209383610528565b8101031261037a5751801515810361037a57602090610339565b5f80fd5b3d9150610353565b6040513d5f823e3d90fd5b635931e77d60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037a57602036600319011261037a57600435906001600160401b03821161037a573660238301121561037a5781600401356001600160401b03811161037a57820191602483019136831161037a576040816104115f9361050d565b8281526060602082015201526020602319602483860301011261037a576024810135906001600160401b03821161037a5701916060908390031261037a576040519061045c8261050d565b6104686024840161055d565b82526044830135906001600160401b03821161037a5761049260649160246104a09487010161058c565b936020840194855201610549565b604082019081526001600160401b036104dd6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e9565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b038211176103a057604052565b90601f801991011681019081106001600160401b038211176103a057604052565b35906001600160401b038216820361037a57565b35906001600160a01b038216820361037a57565b6001600160401b0381116103a057601f01601f191660200190565b81601f8201121561037a578035906105a382610571565b926105b16040519485610528565b8284526020838301011161037a57815f92602080930183860137830101529056fea2646970667358221220a0302d20ad5a551dc758d42903a2b9b40c11bd384f339d81660bb2753dc90a3864736f6c634300081b0033",
    "sourceMap": "215:947:72:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:947:72;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;:::i;:::-;;;;667:32;;215:947;667:32;;215:947;;;;;;;;;667:32;;215:947;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;-1:-1:-1;215:947:72;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;713:51;709:100;;215:947;930:18;;215:947;;-1:-1:-1;;;839:153:72;;215:947;;839:153;;215:947;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;930:18;215:947;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:947:72;;;;;;;;:::i;:::-;;;;;;;839:153;;;;215:947;839:153;;;;;;215:947;839:153;;;215:947;;;;;;;;;;;839:153;;215:947;839:153;;215:947;839:153;;;;;;215:947;839:153;;;:::i;:::-;;;215:947;;;;;;;;;;;;;839:153;;;215:947;;;;839:153;;;-1:-1:-1;839:153:72;;;215:947;;;;;;;;;709:100;785:24;;;215:947;785:24;215:947;;785:24;215:947;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:947:72;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:947:72;;;;;;;;-1:-1:-1;;215:947:72;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:947:72;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:947:72;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:947:72;;;;;;:::o;:::-;-1:-1:-1;;;;;215:947:72;;;;;;-1:-1:-1;;215:947:72;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:947:72;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotEqual","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeEqualArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/ExpirationTimeEqualArbiter.sol":"ExpirationTimeEqualArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/ExpirationTimeEqualArbiter.sol":{"keccak256":"0xc8a65dfe4d44c02320d2bb75e8862632f07006e58cb714006027dcb124734831","license":"UNLICENSED","urls":["bzz-raw://0dceb8c5c760f31acaa8e2e1a17f226d5f545ee0dc396460437462730cd41fd0","dweb:/ipfs/QmNmibvQYNaiXvx5orE6Rqf155DFn2fb6eBmHhZ5o8Hmns"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotEqual"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeEqualArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/ExpirationTimeEqualArbiter.sol": "ExpirationTimeEqualArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/ExpirationTimeEqualArbiter.sol": {
        "keccak256": "0xc8a65dfe4d44c02320d2bb75e8862632f07006e58cb714006027dcb124734831",
        "urls": [
          "bzz-raw://0dceb8c5c760f31acaa8e2e1a17f226d5f545ee0dc396460437462730cd41fd0",
          "dweb:/ipfs/QmNmibvQYNaiXvx5orE6Rqf155DFn2fb6eBmHhZ5o8Hmns"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 72
};

// src/contracts/ExpirationTimeEqualArbiterNonComposing.ts
var abi8 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ExpirationTimeEqualArbiter.DemandData",
          "components": [
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "ExpirationTimeNotEqual",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251160361019757602060405160018152f35b635931e77d60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea26469706673582212207d36dd2b568cc6cab9f2d2454381ef1182b84847000ec272da0be58dc038965f64736f6c634300081b0033",
    "sourceMap": "215:735:84:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b60408201526100ab60648301610269565b91606082019283526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251160361019757602060405160018152f35b635931e77d60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea26469706673582212207d36dd2b568cc6cab9f2d2454381ef1182b84847000ec272da0be58dc038965f64736f6c634300081b0033",
    "sourceMap": "215:735:84:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:735:84;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;:::i;:::-;;;;;616:32;;215:735;;;;;;;:::i;:::-;616:32;;215:735;;-1:-1:-1;;;;;215:735:84;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;662:51;658:100;;215:735;;;;;;;658:100;734:24;;;215:735;734:24;215:735;;734:24;215:735;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:735:84;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:735:84;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:735:84;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;-1:-1:-1;;215:735:84;;;;;;;;-1:-1:-1;;;;;215:735:84;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:735:84;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ExpirationTimeNotEqual","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"internalType":"struct ExpirationTimeEqualArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/ExpirationTimeEqualArbiter.sol":"ExpirationTimeEqualArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/ExpirationTimeEqualArbiter.sol":{"keccak256":"0xe3c445db2f2effd7188750edcc544ff0edcc5a4bbf5c64c24a6e4041140fafaa","license":"UNLICENSED","urls":["bzz-raw://db24b3717ef59d264a3eaa55a8c28af9d9e264342729f88387ff3ff82d4a7074","dweb:/ipfs/QmQwJunFDqQWP3T67uCqSZEHc7aghorBLvxEkt9Nv1VgKh"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ExpirationTimeNotEqual"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct ExpirationTimeEqualArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/ExpirationTimeEqualArbiter.sol": "ExpirationTimeEqualArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/ExpirationTimeEqualArbiter.sol": {
        "keccak256": "0xe3c445db2f2effd7188750edcc544ff0edcc5a4bbf5c64c24a6e4041140fafaa",
        "urls": [
          "bzz-raw://db24b3717ef59d264a3eaa55a8c28af9d9e264342729f88387ff3ff82d4a7074",
          "dweb:/ipfs/QmQwJunFDqQWP3T67uCqSZEHc7aghorBLvxEkt9Nv1VgKh"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 84
};

// src/contracts/RecipientArbiterComposing.ts
var abi9 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RecipientArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RecipientMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761060e908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b6358cf6deb60e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea26469706673582212200cd94f5fc53066e833507d6fc39fe69978796e066a7098f0df1025cd3d40f96f64736f6c634300081b0033",
    "sourceMap": "215:917:73:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b6358cf6deb60e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea26469706673582212200cd94f5fc53066e833507d6fc39fe69978796e066a7098f0df1025cd3d40f96f64736f6c634300081b0033",
    "sourceMap": "215:917:73:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:917:73;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;:::i;:::-;;;;650:32;;215:917;650:32;;215:917;;;;;;;;;650:32;;215:917;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;-1:-1:-1;215:917:73;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;696:41;692:87;;215:917;900:18;;215:917;;-1:-1:-1;;;809:153:73;;215:917;;809:153;;215:917;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:917:73;;;;;;;;:::i;:::-;;;;;;;809:153;;;;215:917;809:153;;;;;;215:917;809:153;;;215:917;;;;;;;;;;;809:153;;215:917;809:153;;215:917;809:153;;;;;;215:917;809:153;;;:::i;:::-;;;215:917;;;;;;;;;;;;;809:153;;;215:917;;;;809:153;;;-1:-1:-1;809:153:73;;;215:917;;;;;;;;;692:87;758:21;;;215:917;758:21;215:917;;758:21;215:917;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:917:73;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;215:917:73;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:917:73;;;;;;;;-1:-1:-1;;215:917:73;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:917:73;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:917:73;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:917:73;;;;;;:::o;:::-;-1:-1:-1;;;;;215:917:73;;;;;;-1:-1:-1;;215:917:73;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:917:73;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:917:73;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RecipientMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"}],"internalType":"struct RecipientArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/RecipientArbiter.sol":"RecipientArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/RecipientArbiter.sol":{"keccak256":"0xcde36c6a61e50c8b92a6541b8047c654140aeb33123103476fd6ac921092970c","license":"UNLICENSED","urls":["bzz-raw://3dcd28bcf1796bf701bdf29ca3093102e6162b57ee460a89387176cd40ba69d8","dweb:/ipfs/QmQMxwJL5sVvncL3KUQiZxsFsYkorW3WEJfTLVoTTV9cfo"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RecipientMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RecipientArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/RecipientArbiter.sol": "RecipientArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/RecipientArbiter.sol": {
        "keccak256": "0xcde36c6a61e50c8b92a6541b8047c654140aeb33123103476fd6ac921092970c",
        "urls": [
          "bzz-raw://3dcd28bcf1796bf701bdf29ca3093102e6162b57ee460a89387176cd40ba69d8",
          "dweb:/ipfs/QmQMxwJL5sVvncL3KUQiZxsFsYkorW3WEJfTLVoTTV9cfo"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 73
};

// src/contracts/RecipientArbiterNonComposing.ts
var abi10 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RecipientArbiter.DemandData",
          "components": [
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RecipientMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610338908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101c15763e6c9714d1461002f575f80fd5b346101a95760603660031901126101a95760043567ffffffffffffffff81116101a95761014060031982360301126101a957604051610140810181811067ffffffffffffffff8211176101ad57604052816004013581526024820135602082015261009c60448301610271565b60408201526100ad60648301610271565b60608201526100be60848301610271565b608082015260a482013560a08201526100d960c48301610286565b9160c082019283526100ed60e48201610286565b60e083015261010481013580151581036101a95761010083015261012481013567ffffffffffffffff81116101a95761012091600461012f923692010161029a565b91015260243567ffffffffffffffff81116101a95761015290369060040161029a565b906020828051810103126101a957602061016a610251565b9201516001600160a01b038116928382036101a95752516001600160a01b03160361019a57602060405160018152f35b6358cf6deb60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a95760203660031901126101a95760043567ffffffffffffffff81116101a957366023820112156101a957806004013567ffffffffffffffff81116101a95781013660248201116101a9576020905f61021b610251565b52829003126101a95760209061023b6024610234610251565b9201610286565b908190526040516001600160a01b039091168152f35b604051906020820182811067ffffffffffffffff8211176101ad57604052565b359067ffffffffffffffff821682036101a957565b35906001600160a01b03821682036101a957565b81601f820112156101a95780359067ffffffffffffffff82116101ad5760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101ad57604052828452602083830101116101a957815f92602080930183860137830101529056fea26469706673582212205d97c0180a27466dc8646478b21aead279a4a1d2bb3af735e07fcca88c7f708c64736f6c634300081b0033",
    "sourceMap": "215:705:85:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101c15763e6c9714d1461002f575f80fd5b346101a95760603660031901126101a95760043567ffffffffffffffff81116101a95761014060031982360301126101a957604051610140810181811067ffffffffffffffff8211176101ad57604052816004013581526024820135602082015261009c60448301610271565b60408201526100ad60648301610271565b60608201526100be60848301610271565b608082015260a482013560a08201526100d960c48301610286565b9160c082019283526100ed60e48201610286565b60e083015261010481013580151581036101a95761010083015261012481013567ffffffffffffffff81116101a95761012091600461012f923692010161029a565b91015260243567ffffffffffffffff81116101a95761015290369060040161029a565b906020828051810103126101a957602061016a610251565b9201516001600160a01b038116928382036101a95752516001600160a01b03160361019a57602060405160018152f35b6358cf6deb60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a95760203660031901126101a95760043567ffffffffffffffff81116101a957366023820112156101a957806004013567ffffffffffffffff81116101a95781013660248201116101a9576020905f61021b610251565b52829003126101a95760209061023b6024610234610251565b9201610286565b908190526040516001600160a01b039091168152f35b604051906020820182811067ffffffffffffffff8211176101ad57604052565b359067ffffffffffffffff821682036101a957565b35906001600160a01b03821682036101a957565b81601f820112156101a95780359067ffffffffffffffff82116101ad5760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101ad57604052828452602083830101116101a957815f92602080930183860137830101529056fea26469706673582212205d97c0180a27466dc8646478b21aead279a4a1d2bb3af735e07fcca88c7f708c64736f6c634300081b0033",
    "sourceMap": "215:705:85:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:705:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;599:32;;215:705;;;;;;;:::i;:::-;599:32;;215:705;-1:-1:-1;;;;;215:705:85;;;;;;;;;;-1:-1:-1;;;;;215:705:85;645:41;641:87;;215:705;;;;;;;641:87;707:21;;;215:705;707:21;215:705;;707:21;215:705;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:705:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:705:85;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:705:85;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:705:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:705:85;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RecipientMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"recipient","type":"address"}],"internalType":"struct RecipientArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/RecipientArbiter.sol":"RecipientArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/RecipientArbiter.sol":{"keccak256":"0xc66db2fefd080bef2607c12793dc5e5166f0efe76c4347dae4963160e7fc2c4a","license":"UNLICENSED","urls":["bzz-raw://86776a860780da4a7746012871535e32f07d943d5a0c4a35c5215db43ec7df46","dweb:/ipfs/QmPJsCgXJ6iJyKrgDoNCNnNKbrHjUjdiBYg9FLCMmzkGkV"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RecipientMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RecipientArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/RecipientArbiter.sol": "RecipientArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/RecipientArbiter.sol": {
        "keccak256": "0xc66db2fefd080bef2607c12793dc5e5166f0efe76c4347dae4963160e7fc2c4a",
        "urls": [
          "bzz-raw://86776a860780da4a7746012871535e32f07d943d5a0c4a35c5215db43ec7df46",
          "dweb:/ipfs/QmPJsCgXJ6iJyKrgDoNCNnNKbrHjUjdiBYg9FLCMmzkGkV"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 85
};

// src/contracts/RefUidArbiterComposing.ts
var abi11 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RefUidArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RefUidMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x608080604052346015576105dd908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461039a575063e6c9714d14610032575f80fd5b34610360576060366003190112610360576004356001600160401b038111610360576101406003198236030112610360576040519061014082018281106001600160401b0382111761038657604052806004013582526024810135602083015261009e6044820161051e565b604083019081526100b16064830161051e565b90606084019182526100c56084840161051e565b936080810194855260a484013560a08201526100e360c48501610532565b9060c081019182526100f760e48601610532565b9460e08201958652610104810135801515810361036057610100830152610124810135906001600160401b0382116103605760046101389236920101610561565b6101208201526024356001600160401b0381116103605761015d903690600401610561565b94855186016020810196602081830312610360576020810151916001600160401b03831161036057606082840190910312610360576040519161019f836104e2565b818101602001516001600160a01b038116810361036057835260408183010151916001600160401b03831161036057603f8183018401018a1315610360576020838383010101516101ef81610546565b9a6101fd6040519c8d6104fd565b818c526040838501860183010111610360576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a5201015180604083015260a0840151036103775751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e484015260a081015161010484015290516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102ed906101a48401906104be565b828103600319016024840152610302916104be565b604435604483015203815a93602094fa801561036c575f9061032c575b6020906040519015158152f35b506020813d602011610364575b81610346602093836104fd565b81010312610360575180151581036103605760209061031f565b5f80fd5b3d9150610339565b6040513d5f823e3d90fd5b635f11c88560e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036057602036600319011261036057600435906001600160401b03821161036057366023830112156103605781600401356001600160401b038111610360578201916024830191368311610360576040816103f75f936104e2565b82815260606020820152015260206023196024838603010112610360576024810135906001600160401b038211610360570191606090839003126103605760405190610442826104e2565b61044e60248401610532565b82526044830135906001600160401b03821161036057602461047292850101610561565b916020820192835260646040830191013581526104b36040519384936020855260018060a01b039051166020850152516060604085015260808401906104be565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038657604052565b90601f801991011681019081106001600160401b0382111761038657604052565b35906001600160401b038216820361036057565b35906001600160a01b038216820361036057565b6001600160401b03811161038657601f01601f191660200190565b81601f820112156103605780359061057882610546565b9261058660405194856104fd565b8284526020838301011161036057815f92602080930183860137830101529056fea26469706673582212207ef9203635e3007f9df61422de8dc28309bd1f76926fde44c237a4d3b703d64764736f6c634300081b0033",
    "sourceMap": "215:887:74:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461039a575063e6c9714d14610032575f80fd5b34610360576060366003190112610360576004356001600160401b038111610360576101406003198236030112610360576040519061014082018281106001600160401b0382111761038657604052806004013582526024810135602083015261009e6044820161051e565b604083019081526100b16064830161051e565b90606084019182526100c56084840161051e565b936080810194855260a484013560a08201526100e360c48501610532565b9060c081019182526100f760e48601610532565b9460e08201958652610104810135801515810361036057610100830152610124810135906001600160401b0382116103605760046101389236920101610561565b6101208201526024356001600160401b0381116103605761015d903690600401610561565b94855186016020810196602081830312610360576020810151916001600160401b03831161036057606082840190910312610360576040519161019f836104e2565b818101602001516001600160a01b038116810361036057835260408183010151916001600160401b03831161036057603f8183018401018a1315610360576020838383010101516101ef81610546565b9a6101fd6040519c8d6104fd565b818c526040838501860183010111610360576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a5201015180604083015260a0840151036103775751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e484015260a081015161010484015290516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102ed906101a48401906104be565b828103600319016024840152610302916104be565b604435604483015203815a93602094fa801561036c575f9061032c575b6020906040519015158152f35b506020813d602011610364575b81610346602093836104fd565b81010312610360575180151581036103605760209061031f565b5f80fd5b3d9150610339565b6040513d5f823e3d90fd5b635f11c88560e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036057602036600319011261036057600435906001600160401b03821161036057366023830112156103605781600401356001600160401b038111610360578201916024830191368311610360576040816103f75f936104e2565b82815260606020820152015260206023196024838603010112610360576024810135906001600160401b038211610360570191606090839003126103605760405190610442826104e2565b61044e60248401610532565b82526044830135906001600160401b03821161036057602461047292850101610561565b916020820192835260646040830191013581526104b36040519384936020855260018060a01b039051166020850152516060604085015260808401906104be565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038657604052565b90601f801991011681019081106001600160401b0382111761038657604052565b35906001600160401b038216820361036057565b35906001600160a01b038216820361036057565b6001600160401b03811161038657601f01601f191660200190565b81601f820112156103605780359061057882610546565b9261058660405194856104fd565b8284526020838301011161036057815f92602080930183860137830101529056fea26469706673582212207ef9203635e3007f9df61422de8dc28309bd1f76926fde44c237a4d3b703d64764736f6c634300081b0033",
    "sourceMap": "215:887:74:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:887:74;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;:::i;:::-;;;;641:32;;215:887;641:32;;215:887;;;;;;;;;641:32;;215:887;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;-1:-1:-1;215:887:74;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;687:35;683:66;;215:887;870:18;;215:887;;-1:-1:-1;;;779:153:74;;215:887;;779:153;;215:887;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:887:74;;;;;;;;:::i;:::-;;;;;;;779:153;;;;215:887;779:153;;;;;;215:887;779:153;;;215:887;;;;;;;;;;;779:153;;215:887;779:153;;215:887;779:153;;;;;;215:887;779:153;;;:::i;:::-;;;215:887;;;;;;;;;;;;;779:153;;;215:887;;;;779:153;;;-1:-1:-1;779:153:74;;;215:887;;;;;;;;;683:66;731:18;;;215:887;731:18;215:887;;731:18;215:887;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:887:74;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:887:74;;;;;;;;-1:-1:-1;;215:887:74;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:74;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:887:74;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:887:74;;;;;;:::o;:::-;-1:-1:-1;;;;;215:887:74;;;;;;-1:-1:-1;;215:887:74;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:887:74;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RefUidMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"internalType":"struct RefUidArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/RefUidArbiter.sol":"RefUidArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/RefUidArbiter.sol":{"keccak256":"0x8261f6b51e98e16344eed43a3a9e41476ca297abfefd0dc23efe6ae33736bc9a","license":"UNLICENSED","urls":["bzz-raw://ba847d92e94b17e4bc5bde7eef83b89ed5ffe1ef6a90ed1d4064c6289f666d46","dweb:/ipfs/QmVRByUfkCEjJjEgRg14FQXBFmnGYuAqpFTu4STXiaJPGj"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RefUidMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RefUidArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/RefUidArbiter.sol": "RefUidArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/RefUidArbiter.sol": {
        "keccak256": "0x8261f6b51e98e16344eed43a3a9e41476ca297abfefd0dc23efe6ae33736bc9a",
        "urls": [
          "bzz-raw://ba847d92e94b17e4bc5bde7eef83b89ed5ffe1ef6a90ed1d4064c6289f666d46",
          "dweb:/ipfs/QmVRByUfkCEjJjEgRg14FQXBFmnGYuAqpFTu4STXiaJPGj"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 74
};

// src/contracts/RefUidArbiterNonComposing.ts
var abi12 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RefUidArbiter.DemandData",
          "components": [
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RefUidMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761030c908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a75763e6c9714d1461002f575f80fd5b3461018f57606036600319011261018f5760043567ffffffffffffffff811161018f57610140600319823603011261018f57604051610140810181811067ffffffffffffffff82111761019357604052816004013581526024820135602082015261009c60448301610245565b60408201526100ad60648301610245565b60608201526100be60848301610245565b608082015260a081019160a481013583526100db60c4820161025a565b60c08301526100ec60e4820161025a565b60e0830152610104810135801515810361018f5761010083015261012481013567ffffffffffffffff811161018f5761012091600461012e923692010161026e565b91015260243567ffffffffffffffff811161018f5761015190369060040161026e565b9060208280518101031261018f576020610169610225565b920151809252510361018057602060405160018152f35b635f11c88560e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018f57602036600319011261018f5760043567ffffffffffffffff811161018f573660238201121561018f57806004013567ffffffffffffffff811161018f57810136602482011161018f576020905f610201610225565b528290031261018f576020906024610217610225565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019357604052565b359067ffffffffffffffff8216820361018f57565b35906001600160a01b038216820361018f57565b81601f8201121561018f5780359067ffffffffffffffff82116101935760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610193576040528284526020838301011161018f57815f92602080930183860137830101529056fea26469706673582212202dce9839e09c3d96003416a8ad1d01cd2377399061fe2d4b0176d0fa0b67633264736f6c634300081b0033",
    "sourceMap": "215:675:86:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a75763e6c9714d1461002f575f80fd5b3461018f57606036600319011261018f5760043567ffffffffffffffff811161018f57610140600319823603011261018f57604051610140810181811067ffffffffffffffff82111761019357604052816004013581526024820135602082015261009c60448301610245565b60408201526100ad60648301610245565b60608201526100be60848301610245565b608082015260a081019160a481013583526100db60c4820161025a565b60c08301526100ec60e4820161025a565b60e0830152610104810135801515810361018f5761010083015261012481013567ffffffffffffffff811161018f5761012091600461012e923692010161026e565b91015260243567ffffffffffffffff811161018f5761015190369060040161026e565b9060208280518101031261018f576020610169610225565b920151809252510361018057602060405160018152f35b635f11c88560e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018f57602036600319011261018f5760043567ffffffffffffffff811161018f573660238201121561018f57806004013567ffffffffffffffff811161018f57810136602482011161018f576020905f610201610225565b528290031261018f576020906024610217610225565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019357604052565b359067ffffffffffffffff8216820361018f57565b35906001600160a01b038216820361018f57565b81601f8201121561018f5780359067ffffffffffffffff82116101935760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610193576040528284526020838301011161018f57815f92602080930183860137830101529056fea26469706673582212202dce9839e09c3d96003416a8ad1d01cd2377399061fe2d4b0176d0fa0b67633264736f6c634300081b0033",
    "sourceMap": "215:675:86:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;590:32;;215:675;;;;;;;:::i;:::-;590:32;;215:675;;;;;636:35;632:66;;215:675;;;;;;;632:66;680:18;;;215:675;680:18;215:675;;680:18;215:675;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:675:86;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:675:86;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RefUidMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"internalType":"struct RefUidArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/RefUidArbiter.sol":"RefUidArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/RefUidArbiter.sol":{"keccak256":"0xa815f4e0097f420504bbb37ba9abf526bb3f73b0e25ecab9fc8164d0b12c9d1c","license":"UNLICENSED","urls":["bzz-raw://75a0edacfbc3f4ece49a6e140850042393cb47c8e3b455ccedbd5ed9d6bef9cf","dweb:/ipfs/QmdVQXrJbSAEeFysBKpMHqTdscBiJu9aTPjwg7s2Eandov"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RefUidMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RefUidArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/RefUidArbiter.sol": "RefUidArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/RefUidArbiter.sol": {
        "keccak256": "0xa815f4e0097f420504bbb37ba9abf526bb3f73b0e25ecab9fc8164d0b12c9d1c",
        "urls": [
          "bzz-raw://75a0edacfbc3f4ece49a6e140850042393cb47c8e3b455ccedbd5ed9d6bef9cf",
          "dweb:/ipfs/QmdVQXrJbSAEeFysBKpMHqTdscBiJu9aTPjwg7s2Eandov"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 86
};

// src/contracts/RevocableArbiterComposing.ts
var abi13 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RevocableArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RevocabilityMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761060b908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a4575063e6c9714d14610032575f80fd5b3461036a57606036600319011261036a576004356001600160401b03811161036a57610140600319823603011261036a576040519061014082018281106001600160401b0382111761039057604052806004013582526024810135602083015261009e60448201610532565b604083019081526100b160648301610532565b90606084019182526100c560848401610532565b936080810194855260a081019060a485013582526100e560c48601610546565b9460c082019586526100f960e48201610546565b9060e0830191825261010e610104820161055a565b610100840152610124810135906001600160401b03821161036a5760046101389236920101610582565b6101208301526024356001600160401b03811161036a5761015d903690600401610582565b9586518701602081019760208183031261036a576020810151916001600160401b03831161036a5760608284019091031261036a576040519161019f836104f6565b818101602001516001600160a01b038116810361036a57835260408183010151906001600160401b03821161036a57603f8382018301018b131561036a57602082828501010151926101f084610567565b9b6101fe6040519d8e610511565b848d52604082840185018601011161036a575f6020858e6102399783806060998989010101018483015e010152602085019b8c5201016105c8565b8060408301526101008501511515901515036103815751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b039081166101248401529051811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102f9906101a48401906104d2565b82810360031901602484015261030e916104d2565b604435604483015203815a93602094fa8015610376575f90610338575b6020906040519015158152f35b506020813d60201161036e575b8161035260209383610511565b8101031261036a576103656020916105c8565b61032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b6320ee3a7d60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036a57602036600319011261036a57600435906001600160401b03821161036a573660238301121561036a5781600401356001600160401b03811161036a57820191602483019136831161036a576040816104015f936104f6565b8281526060602082015201526020602319602483860301011261036a576024810135906001600160401b03821161036a5701916060908390031261036a576040519061044c826104f6565b61045860248401610546565b82526044830135906001600160401b03821161036a57610482606491602461049094870101610582565b93602084019485520161055a565b604082019081526104c56040519384936020855260018060a01b039051166020850152516060604085015260808401906104d2565b9051151560608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039057604052565b90601f801991011681019081106001600160401b0382111761039057604052565b35906001600160401b038216820361036a57565b35906001600160a01b038216820361036a57565b3590811515820361036a57565b6001600160401b03811161039057601f01601f191660200190565b81601f8201121561036a5780359061059982610567565b926105a76040519485610511565b8284526020838301011161036a57815f926020809301838601378301015290565b5190811515820361036a5756fea264697066735822122079acef2beeea3c35dd00349ca124397781ac37520cc0eed5d8f299dda4bcf02c64736f6c634300081b0033",
    "sourceMap": "215:920:75:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a4575063e6c9714d14610032575f80fd5b3461036a57606036600319011261036a576004356001600160401b03811161036a57610140600319823603011261036a576040519061014082018281106001600160401b0382111761039057604052806004013582526024810135602083015261009e60448201610532565b604083019081526100b160648301610532565b90606084019182526100c560848401610532565b936080810194855260a081019060a485013582526100e560c48601610546565b9460c082019586526100f960e48201610546565b9060e0830191825261010e610104820161055a565b610100840152610124810135906001600160401b03821161036a5760046101389236920101610582565b6101208301526024356001600160401b03811161036a5761015d903690600401610582565b9586518701602081019760208183031261036a576020810151916001600160401b03831161036a5760608284019091031261036a576040519161019f836104f6565b818101602001516001600160a01b038116810361036a57835260408183010151906001600160401b03821161036a57603f8382018301018b131561036a57602082828501010151926101f084610567565b9b6101fe6040519d8e610511565b848d52604082840185018601011161036a575f6020858e6102399783806060998989010101018483015e010152602085019b8c5201016105c8565b8060408301526101008501511515901515036103815751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b039081166101248401529051811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102f9906101a48401906104d2565b82810360031901602484015261030e916104d2565b604435604483015203815a93602094fa8015610376575f90610338575b6020906040519015158152f35b506020813d60201161036e575b8161035260209383610511565b8101031261036a576103656020916105c8565b61032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b6320ee3a7d60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036a57602036600319011261036a57600435906001600160401b03821161036a573660238301121561036a5781600401356001600160401b03811161036a57820191602483019136831161036a576040816104015f936104f6565b8281526060602082015201526020602319602483860301011261036a576024810135906001600160401b03821161036a5701916060908390031261036a576040519061044c826104f6565b61045860248401610546565b82526044830135906001600160401b03821161036a57610482606491602461049094870101610582565b93602084019485520161055a565b604082019081526104c56040519384936020855260018060a01b039051166020850152516060604085015260808401906104d2565b9051151560608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039057604052565b90601f801991011681019081106001600160401b0382111761039057604052565b35906001600160401b038216820361036a57565b35906001600160a01b038216820361036a57565b3590811515820361036a57565b6001600160401b03811161039057601f01601f191660200190565b81601f8201121561036a5780359061059982610567565b926105a76040519485610511565b8284526020838301011161036a57815f926020809301838601378301015290565b5190811515820361036a5756fea264697066735822122079acef2beeea3c35dd00349ca124397781ac37520cc0eed5d8f299dda4bcf02c64736f6c634300081b0033",
    "sourceMap": "215:920:75:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:920:75;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;:::i;:::-;;;;650:32;;215:920;650:32;;215:920;;;;;;;;;650:32;;215:920;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;-1:-1:-1;215:920:75;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;696:41;692:90;;215:920;903:18;;215:920;;-1:-1:-1;;;812:153:75;;215:920;;812:153;;215:920;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:920:75;;;;;;;;:::i;:::-;;;;;;;812:153;;;;215:920;812:153;;;;;;215:920;812:153;;;215:920;;;;;;;;;;;812:153;;215:920;812:153;;215:920;812:153;;;;;;215:920;812:153;;;:::i;:::-;;;215:920;;;;;;;;:::i;:::-;812:153;;215:920;;;;812:153;;;-1:-1:-1;812:153:75;;;215:920;;;;;;;;;692:90;758:24;;;215:920;758:24;215:920;;758:24;215:920;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:920:75;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:920:75;;;;;;;;-1:-1:-1;;215:920:75;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:920:75;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:920:75;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:920:75;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;215:920:75;;;;;;-1:-1:-1;;215:920:75;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:920:75;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RevocabilityMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"bool","name":"revocable","type":"bool"}],"internalType":"struct RevocableArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/RevocableArbiter.sol":"RevocableArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/RevocableArbiter.sol":{"keccak256":"0x67eef526ebc183fe7c793795093895929bd0d4cb40881f648f9089f4891c08a8","license":"UNLICENSED","urls":["bzz-raw://98f61f0e60e0910d456209dbdd2cac6854a71d3b3c78815621d82987a9ad6db6","dweb:/ipfs/QmYr2tRcr9oxQu1muD4hDJ49WhyWCmxZxAoPtpZFfkojQM"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RevocabilityMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RevocableArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/RevocableArbiter.sol": "RevocableArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/RevocableArbiter.sol": {
        "keccak256": "0x67eef526ebc183fe7c793795093895929bd0d4cb40881f648f9089f4891c08a8",
        "urls": [
          "bzz-raw://98f61f0e60e0910d456209dbdd2cac6854a71d3b3c78815621d82987a9ad6db6",
          "dweb:/ipfs/QmYr2tRcr9oxQu1muD4hDJ49WhyWCmxZxAoPtpZFfkojQM"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 75
};

// src/contracts/RevocableArbiterNonComposing.ts
var abi14 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct RevocableArbiter.DemandData",
          "components": [
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "RevocabilityMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032c908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101b15763e6c9714d1461002f575f80fd5b346101995760603660031901126101995760043567ffffffffffffffff811161019957610140600319823603011261019957604051610140810181811067ffffffffffffffff82111761019d57604052816004013581526024820135602082015261009c60448301610258565b60408201526100ad60648301610258565b60608201526100be60848301610258565b608082015260a482013560a08201526100d960c4830161026d565b60c08201526100ea60e4830161026d565b60e08201526100fc6101048301610281565b91610100820192835261012481013567ffffffffffffffff81116101995761012091600461012d923692010161028e565b91015260243567ffffffffffffffff81116101995761015090369060040161028e565b90602082805181010312610199576020610168610238565b9201518015159283820361019957525115150361018a57602060405160018152f35b6320ee3a7d60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101995760203660031901126101995760043567ffffffffffffffff8111610199573660238201121561019957806004013567ffffffffffffffff8111610199578101366024820111610199576020905f61020b610238565b52829003126101995760209061022b6024610224610238565b9201610281565b8091526040519015158152f35b604051906020820182811067ffffffffffffffff82111761019d57604052565b359067ffffffffffffffff8216820361019957565b35906001600160a01b038216820361019957565b3590811515820361019957565b81601f820112156101995780359067ffffffffffffffff821161019d5760405192601f8301601f19908116603f0116840167ffffffffffffffff81118582101761019d576040528284526020838301011161019957815f92602080930183860137830101529056fea26469706673582212209d4b716d7d2dd3cbab728d9e377b30227f08eb7858805ac72eaca38a72b76f4f64736f6c634300081b0033",
    "sourceMap": "215:708:87:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101b15763e6c9714d1461002f575f80fd5b346101995760603660031901126101995760043567ffffffffffffffff811161019957610140600319823603011261019957604051610140810181811067ffffffffffffffff82111761019d57604052816004013581526024820135602082015261009c60448301610258565b60408201526100ad60648301610258565b60608201526100be60848301610258565b608082015260a482013560a08201526100d960c4830161026d565b60c08201526100ea60e4830161026d565b60e08201526100fc6101048301610281565b91610100820192835261012481013567ffffffffffffffff81116101995761012091600461012d923692010161028e565b91015260243567ffffffffffffffff81116101995761015090369060040161028e565b90602082805181010312610199576020610168610238565b9201518015159283820361019957525115150361018a57602060405160018152f35b6320ee3a7d60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101995760203660031901126101995760043567ffffffffffffffff8111610199573660238201121561019957806004013567ffffffffffffffff8111610199578101366024820111610199576020905f61020b610238565b52829003126101995760209061022b6024610224610238565b9201610281565b8091526040519015158152f35b604051906020820182811067ffffffffffffffff82111761019d57604052565b359067ffffffffffffffff8216820361019957565b35906001600160a01b038216820361019957565b3590811515820361019957565b81601f820112156101995780359067ffffffffffffffff821161019d5760405192601f8301601f19908116603f0116840167ffffffffffffffff81118582101761019d576040528284526020838301011161019957815f92602080930183860137830101529056fea26469706673582212209d4b716d7d2dd3cbab728d9e377b30227f08eb7858805ac72eaca38a72b76f4f64736f6c634300081b0033",
    "sourceMap": "215:708:87:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:708:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;599:32;;215:708;;;;;;;:::i;:::-;599:32;;215:708;;;;;;;;;;;;;;645:41;641:90;;215:708;;;;;;;641:90;707:24;;;215:708;707:24;215:708;;707:24;215:708;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:708:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:708:87;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:708:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:708:87;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"RevocabilityMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bool","name":"revocable","type":"bool"}],"internalType":"struct RevocableArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/RevocableArbiter.sol":"RevocableArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/RevocableArbiter.sol":{"keccak256":"0x78dd2b19d51be93559591bbea425d057c3eafc7d225b577e7fea59d955433188","license":"UNLICENSED","urls":["bzz-raw://6a5a8dc5b84f1d3ca934645276f94bda7e7edc2d1ce78e75483c6ec564a66727","dweb:/ipfs/Qmb7jExPy9fnYhk5qfaUseLfgj5xFdSgYgAF2WaaF4eHoG"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "RevocabilityMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct RevocableArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/RevocableArbiter.sol": "RevocableArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/RevocableArbiter.sol": {
        "keccak256": "0x78dd2b19d51be93559591bbea425d057c3eafc7d225b577e7fea59d955433188",
        "urls": [
          "bzz-raw://6a5a8dc5b84f1d3ca934645276f94bda7e7edc2d1ce78e75483c6ec564a66727",
          "dweb:/ipfs/Qmb7jExPy9fnYhk5qfaUseLfgj5xFdSgYgAF2WaaF4eHoG"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 87
};

// src/contracts/SchemaArbiterComposing.ts
var abi15 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "SchemaMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x608080604052346015576105dd908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461039a575063e6c9714d14610032575f80fd5b34610360576060366003190112610360576004356001600160401b038111610360576101406003198236030112610360576040519061014082018281106001600160401b0382111761038657604052806004013582526024810135602083015261009e6044820161051e565b604083019081526100b16064830161051e565b60608401526100c26084830161051e565b906080840191825260a084019360a484013585526100e260c48501610532565b9060c081019182526100f660e48601610532565b9460e08201958652610104810135801515810361036057610100830152610124810135906001600160401b0382116103605760046101379236920101610561565b6101208201526024356001600160401b0381116103605761015c903690600401610561565b94855186016020810196602081830312610360576020810151916001600160401b03831161036057606082840190910312610360576040519161019e836104e2565b818101602001516001600160a01b038116810361036057835260408183010151916001600160401b03831161036057603f8183018401018a1315610360576020838383010101516101ee81610546565b9a6101fc6040519c8d6104fd565b818c526040838501860183010111610360576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101518060408301526020840151036103775751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b03908116610124850152945185166101448401526101008101511515610164840152610120015161014061018484015291939092169183918291906102ed906101a48401906104be565b828103600319016024840152610302916104be565b604435604483015203815a93602094fa801561036c575f9061032c575b6020906040519015158152f35b506020813d602011610364575b81610346602093836104fd565b81010312610360575180151581036103605760209061031f565b5f80fd5b3d9150610339565b6040513d5f823e3d90fd5b630a65e99d60e41b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036057602036600319011261036057600435906001600160401b03821161036057366023830112156103605781600401356001600160401b038111610360578201916024830191368311610360576040816103f75f936104e2565b82815260606020820152015260206023196024838603010112610360576024810135906001600160401b038211610360570191606090839003126103605760405190610442826104e2565b61044e60248401610532565b82526044830135906001600160401b03821161036057602461047292850101610561565b916020820192835260646040830191013581526104b36040519384936020855260018060a01b039051166020850152516060604085015260808401906104be565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038657604052565b90601f801991011681019081106001600160401b0382111761038657604052565b35906001600160401b038216820361036057565b35906001600160a01b038216820361036057565b6001600160401b03811161038657601f01601f191660200190565b81601f820112156103605780359061057882610546565b9261058660405194856104fd565b8284526020838301011161036057815f92602080930183860137830101529056fea2646970667358221220509da0f49c45d2519d5799fbab666f9635753000f48951e753ea5d4179cfc19c64736f6c634300081b0033",
    "sourceMap": "215:887:76:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461039a575063e6c9714d14610032575f80fd5b34610360576060366003190112610360576004356001600160401b038111610360576101406003198236030112610360576040519061014082018281106001600160401b0382111761038657604052806004013582526024810135602083015261009e6044820161051e565b604083019081526100b16064830161051e565b60608401526100c26084830161051e565b906080840191825260a084019360a484013585526100e260c48501610532565b9060c081019182526100f660e48601610532565b9460e08201958652610104810135801515810361036057610100830152610124810135906001600160401b0382116103605760046101379236920101610561565b6101208201526024356001600160401b0381116103605761015c903690600401610561565b94855186016020810196602081830312610360576020810151916001600160401b03831161036057606082840190910312610360576040519161019e836104e2565b818101602001516001600160a01b038116810361036057835260408183010151916001600160401b03831161036057603f8183018401018a1315610360576020838383010101516101ee81610546565b9a6101fc6040519c8d6104fd565b818c526040838501860183010111610360576020815f928d83808060609a8a8a0101010191015e8c01015260208401998a520101518060408301526020840151036103775751955160405163e6c9714d60e01b8152606060048201819052845160648301526020850151608483015295516001600160401b0390811660a483015295840151861660c4820152955190941660e4860152955161010485015290516001600160a01b03908116610124850152945185166101448401526101008101511515610164840152610120015161014061018484015291939092169183918291906102ed906101a48401906104be565b828103600319016024840152610302916104be565b604435604483015203815a93602094fa801561036c575f9061032c575b6020906040519015158152f35b506020813d602011610364575b81610346602093836104fd565b81010312610360575180151581036103605760209061031f565b5f80fd5b3d9150610339565b6040513d5f823e3d90fd5b630a65e99d60e41b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036057602036600319011261036057600435906001600160401b03821161036057366023830112156103605781600401356001600160401b038111610360578201916024830191368311610360576040816103f75f936104e2565b82815260606020820152015260206023196024838603010112610360576024810135906001600160401b038211610360570191606090839003126103605760405190610442826104e2565b61044e60248401610532565b82526044830135906001600160401b03821161036057602461047292850101610561565b916020820192835260646040830191013581526104b36040519384936020855260018060a01b039051166020850152516060604085015260808401906104be565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038657604052565b90601f801991011681019081106001600160401b0382111761038657604052565b35906001600160401b038216820361036057565b35906001600160a01b038216820361036057565b6001600160401b03811161038657601f01601f191660200190565b81601f820112156103605780359061057882610546565b9261058660405194856104fd565b8284526020838301011161036057815f92602080930183860137830101529056fea2646970667358221220509da0f49c45d2519d5799fbab666f9635753000f48951e753ea5d4179cfc19c64736f6c634300081b0033",
    "sourceMap": "215:887:76:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:887:76;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;:::i;:::-;;;;641:32;;215:887;641:32;;215:887;;;;;;;;;641:32;;215:887;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;-1:-1:-1;215:887:76;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;687:35;683:66;;215:887;870:18;;215:887;;-1:-1:-1;;;779:153:76;;215:887;;779:153;;215:887;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;870:18;215:887;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:887:76;;;;;;;;:::i;:::-;;;;;;;779:153;;;;215:887;779:153;;;;;;215:887;779:153;;;215:887;;;;;;;;;;;779:153;;215:887;779:153;;215:887;779:153;;;;;;215:887;779:153;;;:::i;:::-;;;215:887;;;;;;;;;;;;;779:153;;;215:887;;;;779:153;;;-1:-1:-1;779:153:76;;;215:887;;;;;;;;;683:66;731:18;;;215:887;731:18;215:887;;731:18;215:887;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:887:76;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:887:76;;;;;;;;-1:-1:-1;;215:887:76;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:887:76;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:887:76;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:887:76;;;;;;:::o;:::-;-1:-1:-1;;;;;215:887:76;;;;;;-1:-1:-1;;215:887:76;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:887:76;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"SchemaMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"bytes32","name":"schema","type":"bytes32"}],"internalType":"struct SchemaArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/SchemaArbiter.sol":"SchemaArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/SchemaArbiter.sol":{"keccak256":"0xd5f3ee3dcd29c68694612bb601000d061729b7cf2dc030dfee4c78916d43ac4b","license":"UNLICENSED","urls":["bzz-raw://1ba8e569ce0a63934b7d4d211584636bd649655d6491144a130f71c5e785ee21","dweb:/ipfs/QmShTksGe5tkjT3jvVikxYGJoS2F9nc8uH8yBwWLVYuYZL"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "SchemaMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct SchemaArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/SchemaArbiter.sol": "SchemaArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/SchemaArbiter.sol": {
        "keccak256": "0xd5f3ee3dcd29c68694612bb601000d061729b7cf2dc030dfee4c78916d43ac4b",
        "urls": [
          "bzz-raw://1ba8e569ce0a63934b7d4d211584636bd649655d6491144a130f71c5e785ee21",
          "dweb:/ipfs/QmShTksGe5tkjT3jvVikxYGJoS2F9nc8uH8yBwWLVYuYZL"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 76
};

// src/contracts/SchemaArbiterNonComposing.ts
var abi16 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaArbiter.DemandData",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "SchemaMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761030c908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a75763e6c9714d1461002f575f80fd5b3461018f57606036600319011261018f5760043567ffffffffffffffff811161018f57610140600319823603011261018f57604051610140810181811067ffffffffffffffff821117610193576040528160040135815260208101916024810135835261009e60448201610245565b60408301526100af60648201610245565b60608301526100c060848201610245565b608083015260a481013560a08301526100db60c4820161025a565b60c08301526100ec60e4820161025a565b60e0830152610104810135801515810361018f5761010083015261012481013567ffffffffffffffff811161018f5761012091600461012e923692010161026e565b91015260243567ffffffffffffffff811161018f5761015190369060040161026e565b9060208280518101031261018f576020610169610225565b920151809252510361018057602060405160018152f35b630a65e99d60e41b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018f57602036600319011261018f5760043567ffffffffffffffff811161018f573660238201121561018f57806004013567ffffffffffffffff811161018f57810136602482011161018f576020905f610201610225565b528290031261018f576020906024610217610225565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019357604052565b359067ffffffffffffffff8216820361018f57565b35906001600160a01b038216820361018f57565b81601f8201121561018f5780359067ffffffffffffffff82116101935760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610193576040528284526020838301011161018f57815f92602080930183860137830101529056fea26469706673582212208aed5e8cd6951b3403deeab1b8a303fc28a9754a43381deac1428b9359b7187164736f6c634300081b0033",
    "sourceMap": "215:675:88:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a75763e6c9714d1461002f575f80fd5b3461018f57606036600319011261018f5760043567ffffffffffffffff811161018f57610140600319823603011261018f57604051610140810181811067ffffffffffffffff821117610193576040528160040135815260208101916024810135835261009e60448201610245565b60408301526100af60648201610245565b60608301526100c060848201610245565b608083015260a481013560a08301526100db60c4820161025a565b60c08301526100ec60e4820161025a565b60e0830152610104810135801515810361018f5761010083015261012481013567ffffffffffffffff811161018f5761012091600461012e923692010161026e565b91015260243567ffffffffffffffff811161018f5761015190369060040161026e565b9060208280518101031261018f576020610169610225565b920151809252510361018057602060405160018152f35b630a65e99d60e41b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018f57602036600319011261018f5760043567ffffffffffffffff811161018f573660238201121561018f57806004013567ffffffffffffffff811161018f57810136602482011161018f576020905f610201610225565b528290031261018f576020906024610217610225565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019357604052565b359067ffffffffffffffff8216820361018f57565b35906001600160a01b038216820361018f57565b81601f8201121561018f5780359067ffffffffffffffff82116101935760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610193576040528284526020838301011161018f57815f92602080930183860137830101529056fea26469706673582212208aed5e8cd6951b3403deeab1b8a303fc28a9754a43381deac1428b9359b7187164736f6c634300081b0033",
    "sourceMap": "215:675:88:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;590:32;;215:675;;;;;;;:::i;:::-;590:32;;215:675;;;;;636:35;632:66;;215:675;;;;;;;632:66;680:18;;;215:675;680:18;215:675;;680:18;215:675;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:675:88;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:675:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:675:88;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"SchemaMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"}],"internalType":"struct SchemaArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/SchemaArbiter.sol":"SchemaArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/SchemaArbiter.sol":{"keccak256":"0xe1c90561387359af94a60423309701e7d0f9933e869c6125801f07bb645d920b","license":"UNLICENSED","urls":["bzz-raw://0aaa451ab7992879dddc4903bdda1a51039f251a77c325c7b177f690a49420f0","dweb:/ipfs/QmdN5BHdRJoDzNkRkFWKHwkt7LvAbCmmvSqNf5UkfxfTRP"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "SchemaMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct SchemaArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/SchemaArbiter.sol": "SchemaArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/SchemaArbiter.sol": {
        "keccak256": "0xe1c90561387359af94a60423309701e7d0f9933e869c6125801f07bb645d920b",
        "urls": [
          "bzz-raw://0aaa451ab7992879dddc4903bdda1a51039f251a77c325c7b177f690a49420f0",
          "dweb:/ipfs/QmdN5BHdRJoDzNkRkFWKHwkt7LvAbCmmvSqNf5UkfxfTRP"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 88
};

// src/contracts/TimeAfterArbiterComposing.ts
var abi17 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeAfterArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotAfter",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610606908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751161061038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b633fed642d60e21b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea264697066735822122002395246358266ca5ef2f9eb30e5d2059ab47c1501624a22c931e1fa475ecf5064736f6c634300081b0033",
    "sourceMap": "215:874:77:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751161061038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b633fed642d60e21b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea264697066735822122002395246358266ca5ef2f9eb30e5d2059ab47c1501624a22c931e1fa475ecf5064736f6c634300081b0033",
    "sourceMap": "215:874:77:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:874:77;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;:::i;:::-;;;;637:32;;215:874;637:32;;215:874;;;;;;;;;637:32;;215:874;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;-1:-1:-1;215:874:77;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;683:30;679:57;;215:874;857:18;;215:874;;-1:-1:-1;;;766:153:77;;215:874;;766:153;;215:874;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:874:77;;;;;;;;:::i;:::-;;;;;;;766:153;;;;215:874;766:153;;;;;;215:874;766:153;;;215:874;;;;;;;;;;;766:153;;215:874;766:153;;215:874;766:153;;;;;;215:874;766:153;;;:::i;:::-;;;215:874;;;;;;;;;;;;;766:153;;;215:874;;;;766:153;;;-1:-1:-1;766:153:77;;;215:874;;;;;;;;;679:57;722:14;;;215:874;722:14;215:874;;722:14;215:874;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:874:77;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:874:77;;;;;;;;-1:-1:-1;;215:874:77;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:874:77;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:874:77;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:874:77;;;;;;:::o;:::-;-1:-1:-1;;;;;215:874:77;;;;;;-1:-1:-1;;215:874:77;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:874:77;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotAfter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeAfterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/TimeAfterArbiter.sol":"TimeAfterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/TimeAfterArbiter.sol":{"keccak256":"0x9148b3e751c9a47918f39fd898cd38453dbed263298ab19d5d112537686baa03","license":"UNLICENSED","urls":["bzz-raw://63ffa47a92f308bc2175910ec5b3b0593ec69e2933d2eb016f9089bbdb7e11a3","dweb:/ipfs/QmeLEGhsmCwmB28merJpy5SkkciZNFvUQ8pFvCgvnDcmVd"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotAfter"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeAfterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/TimeAfterArbiter.sol": "TimeAfterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/TimeAfterArbiter.sol": {
        "keccak256": "0x9148b3e751c9a47918f39fd898cd38453dbed263298ab19d5d112537686baa03",
        "urls": [
          "bzz-raw://63ffa47a92f308bc2175910ec5b3b0593ec69e2933d2eb016f9089bbdb7e11a3",
          "dweb:/ipfs/QmeLEGhsmCwmB28merJpy5SkkciZNFvUQ8pFvCgvnDcmVd"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 77
};

// src/contracts/TimeAfterArbiterNonComposing.ts
var abi18 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeAfterArbiter.DemandData",
          "components": [
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotAfter",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161061019757602060405160018152f35b633fed642d60e21b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220db6da1d00e043ff43bb58307859c6ca1dbe9bcf5c4d34044a153b7a40f87254964736f6c634300081b0033",
    "sourceMap": "215:662:89:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161061019757602060405160018152f35b633fed642d60e21b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220db6da1d00e043ff43bb58307859c6ca1dbe9bcf5c4d34044a153b7a40f87254964736f6c634300081b0033",
    "sourceMap": "215:662:89:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:662:89;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;:::i;:::-;;;;;586:32;;215:662;;;;;;;:::i;:::-;586:32;;215:662;;-1:-1:-1;;;;;215:662:89;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;632:30;628:57;;215:662;;;;;;;628:57;671:14;;;215:662;671:14;215:662;;671:14;215:662;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:662:89;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:662:89;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:662:89;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;-1:-1:-1;;215:662:89;;;;;;;;-1:-1:-1;;;;;215:662:89;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:662:89;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotAfter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeAfterArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/TimeAfterArbiter.sol":"TimeAfterArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/TimeAfterArbiter.sol":{"keccak256":"0xeea7663f60e12319052694eb470ef894219c2404c0fd84ab907e6522dc9b8043","license":"UNLICENSED","urls":["bzz-raw://6a4f0e9c784abb28e94fe56b51127890eec44bdd36e6c1c50b68be1daec0754c","dweb:/ipfs/QmPrkM8dnE7tChTDcajRG9PGKZTtjzDW4DX25nyhHr3fZs"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotAfter"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeAfterArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/TimeAfterArbiter.sol": "TimeAfterArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/TimeAfterArbiter.sol": {
        "keccak256": "0xeea7663f60e12319052694eb470ef894219c2404c0fd84ab907e6522dc9b8043",
        "urls": [
          "bzz-raw://6a4f0e9c784abb28e94fe56b51127890eec44bdd36e6c1c50b68be1daec0754c",
          "dweb:/ipfs/QmPrkM8dnE7tChTDcajRG9PGKZTtjzDW4DX25nyhHr3fZs"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 89
};

// src/contracts/TimeBeforeArbiterComposing.ts
var abi19 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeBeforeArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotBefore",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610606908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751161161038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b63abcd2e9760e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea2646970667358221220ca31d46581c2066edc8870a0369f525ace630cd7ce6133824ff54eb7236f7c9864736f6c634300081b0033",
    "sourceMap": "215:877:78:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751161161038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b63abcd2e9760e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea2646970667358221220ca31d46581c2066edc8870a0369f525ace630cd7ce6133824ff54eb7236f7c9864736f6c634300081b0033",
    "sourceMap": "215:877:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:877:78;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;:::i;:::-;;;;639:32;;215:877;639:32;;215:877;;;;;;;;;639:32;;215:877;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;-1:-1:-1;215:877:78;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;685:30;681:58;;215:877;860:18;;215:877;;-1:-1:-1;;;769:153:78;;215:877;;769:153;;215:877;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:877:78;;;;;;;;:::i;:::-;;;;;;;769:153;;;;215:877;769:153;;;;;;215:877;769:153;;;215:877;;;;;;;;;;;769:153;;215:877;769:153;;215:877;769:153;;;;;;215:877;769:153;;;:::i;:::-;;;215:877;;;;;;;;;;;;;769:153;;;215:877;;;;769:153;;;-1:-1:-1;769:153:78;;;215:877;;;;;;;;;681:58;724:15;;;215:877;724:15;215:877;;724:15;215:877;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:877:78;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:877:78;;;;;;;;-1:-1:-1;;215:877:78;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:877:78;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:877:78;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:877:78;;;;;;:::o;:::-;-1:-1:-1;;;;;215:877:78;;;;;;-1:-1:-1;;215:877:78;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:877:78;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotBefore","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeBeforeArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/TimeBeforeArbiter.sol":"TimeBeforeArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/TimeBeforeArbiter.sol":{"keccak256":"0x5655e17b10f5adb071cba9063c5c7b8c881e474eea7684b57b73fe95129cfbd0","license":"UNLICENSED","urls":["bzz-raw://7fc9222b6a223d5f37365c014f997843f3bc1cf56903489ac4a683d8bcc6272b","dweb:/ipfs/QmPjhwM3qTiJj72LBkvvauvGGHLwjfzTBygptmijdAYuWg"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotBefore"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeBeforeArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/TimeBeforeArbiter.sol": "TimeBeforeArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/TimeBeforeArbiter.sol": {
        "keccak256": "0x5655e17b10f5adb071cba9063c5c7b8c881e474eea7684b57b73fe95129cfbd0",
        "urls": [
          "bzz-raw://7fc9222b6a223d5f37365c014f997843f3bc1cf56903489ac4a683d8bcc6272b",
          "dweb:/ipfs/QmPjhwM3qTiJj72LBkvvauvGGHLwjfzTBygptmijdAYuWg"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 78
};

// src/contracts/TimeBeforeArbiterNonComposing.ts
var abi20 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeBeforeArbiter.DemandData",
          "components": [
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotBefore",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161161019757602060405160018152f35b63abcd2e9760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220bfde9913a93f9fbda71b8038b49e97bc5b32644cd0fcbeafc5eff40341f0a86164736f6c634300081b0033",
    "sourceMap": "215:665:90:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251161161019757602060405160018152f35b63abcd2e9760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220bfde9913a93f9fbda71b8038b49e97bc5b32644cd0fcbeafc5eff40341f0a86164736f6c634300081b0033",
    "sourceMap": "215:665:90:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:665:90;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;:::i;:::-;;;;;588:32;;215:665;;;;;;;:::i;:::-;588:32;;215:665;;-1:-1:-1;;;;;215:665:90;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;634:30;630:58;;215:665;;;;;;;630:58;673:15;;;215:665;673:15;215:665;;673:15;215:665;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:665:90;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:665:90;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:665:90;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;-1:-1:-1;;215:665:90;;;;;;;;-1:-1:-1;;;;;215:665:90;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:665:90;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotBefore","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeBeforeArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/TimeBeforeArbiter.sol":"TimeBeforeArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/TimeBeforeArbiter.sol":{"keccak256":"0x58e61d1cb6344837019ae4134247a4ad485aff3d22f7fb37ac353bf6132b3673","license":"UNLICENSED","urls":["bzz-raw://c864b87b0e2543610fc178e2e1301df9575ff9df4226e08dbaac031f0eb5346b","dweb:/ipfs/QmTn2Ae68kZjfCvN4VuQ9f9wytYiwxAXGQu8iohF3oMuyd"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotBefore"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeBeforeArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/TimeBeforeArbiter.sol": "TimeBeforeArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/TimeBeforeArbiter.sol": {
        "keccak256": "0x58e61d1cb6344837019ae4134247a4ad485aff3d22f7fb37ac353bf6132b3673",
        "urls": [
          "bzz-raw://c864b87b0e2543610fc178e2e1301df9575ff9df4226e08dbaac031f0eb5346b",
          "dweb:/ipfs/QmTn2Ae68kZjfCvN4VuQ9f9wytYiwxAXGQu8iohF3oMuyd"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 90
};

// src/contracts/TimeEqualArbiterComposing.ts
var abi21 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeEqualArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotEqual",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610606908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751160361038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b6308b5d45360e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea2646970667358221220276af0508fd71e80711e4b8194c44db466a78334a4100e845b5fe50bdf8ac5b264736f6c634300081b0033",
    "sourceMap": "215:875:79:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103b2575063e6c9714d14610032575f80fd5b34610378576060366003190112610378576004356001600160401b038111610378576101406003198236030112610378576040519061014082018281106001600160401b0382111761039e57604052806004013582526024810135602083015261009e60448201610547565b604083019081526100b160648301610547565b90606084019182526100c560848401610547565b936080810194855260a081019060a485013582526100e560c4860161055b565b9460c082019586526100f960e4820161055b565b9060e08301918252610104810135801515810361037857610100840152610124810135906001600160401b03821161037857600461013a923692010161058a565b6101208301526024356001600160401b0381116103785761015f90369060040161058a565b95865187016020810197602081830312610378576020810151916001600160401b0383116103785760608284019091031261037857604051916101a18361050b565b818101602001516001600160a01b038116810361037857835260408183010151916001600160401b03831161037857603f8183018401018b1315610378576020838383010101516101f18161056f565b9b6101ff6040519d8e610526565b818d526040838501860183010111610378576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101516001600160401b038116908181036103785760408301526001600160401b038751160361038f5751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b03908116610124840152905181166101448301526101008301511515610164830152610120909201516101406101848301529093919092169183918291610305906101a48401906104e7565b82810360031901602484015261031a916104e7565b604435604483015203815a93602094fa8015610384575f90610344575b6020906040519015158152f35b506020813d60201161037c575b8161035e60209383610526565b810103126103785751801515810361037857602090610337565b5f80fd5b3d9150610351565b6040513d5f823e3d90fd5b6308b5d45360e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461037857602036600319011261037857600435906001600160401b03821161037857366023830112156103785781600401356001600160401b0381116103785782019160248301913683116103785760408161040f5f9361050b565b82815260606020820152015260206023196024838603010112610378576024810135906001600160401b03821161037857019160609083900312610378576040519061045a8261050b565b6104666024840161055b565b82526044830135906001600160401b03821161037857610490606491602461049e9487010161058a565b936020840194855201610547565b604082019081526001600160401b036104db6040519485946020865260018060a01b039051166020860152516060604086015260808501906104e7565b91511660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039e57604052565b90601f801991011681019081106001600160401b0382111761039e57604052565b35906001600160401b038216820361037857565b35906001600160a01b038216820361037857565b6001600160401b03811161039e57601f01601f191660200190565b81601f82011215610378578035906105a18261056f565b926105af6040519485610526565b8284526020838301011161037857815f92602080930183860137830101529056fea2646970667358221220276af0508fd71e80711e4b8194c44db466a78334a4100e845b5fe50bdf8ac5b264736f6c634300081b0033",
    "sourceMap": "215:875:79:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:875:79;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;:::i;:::-;;;;637:32;;215:875;637:32;;215:875;;;;;;;;;637:32;;215:875;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;-1:-1:-1;215:875:79;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;683:31;679:58;;215:875;858:18;;215:875;;-1:-1:-1;;;767:153:79;;215:875;;767:153;;215:875;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:875:79;;;;;;;;:::i;:::-;;;;;;;767:153;;;;215:875;767:153;;;;;;215:875;767:153;;;215:875;;;;;;;;;;;767:153;;215:875;767:153;;215:875;767:153;;;;;;215:875;767:153;;;:::i;:::-;;;215:875;;;;;;;;;;;;;767:153;;;215:875;;;;767:153;;;-1:-1:-1;767:153:79;;;215:875;;;;;;;;;679:58;723:14;;;215:875;723:14;215:875;;723:14;215:875;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:875:79;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:875:79;;;;;;;;-1:-1:-1;;215:875:79;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:875:79;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:875:79;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:875:79;;;;;;:::o;:::-;-1:-1:-1;;;;;215:875:79;;;;;;-1:-1:-1;;215:875:79;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:875:79;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotEqual","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeEqualArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/TimeEqualArbiter.sol":"TimeEqualArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/TimeEqualArbiter.sol":{"keccak256":"0xc9ae7d5fe5ab7139217d2c82d7348b154d981a701bd6e6403be107501967f236","license":"UNLICENSED","urls":["bzz-raw://6c51223b1c77ec2b2e5915956d941f244cddce7d841a7ddec47e353fd003b2d1","dweb:/ipfs/QmTK3qNBuBhfSWrvtERmvSbEV5Aucx57SVQ6Fw5rT6taFP"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotEqual"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeEqualArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/TimeEqualArbiter.sol": "TimeEqualArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/TimeEqualArbiter.sol": {
        "keccak256": "0xc9ae7d5fe5ab7139217d2c82d7348b154d981a701bd6e6403be107501967f236",
        "urls": [
          "bzz-raw://6c51223b1c77ec2b2e5915956d941f244cddce7d841a7ddec47e353fd003b2d1",
          "dweb:/ipfs/QmTK3qNBuBhfSWrvtERmvSbEV5Aucx57SVQ6Fw5rT6taFP"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 79
};

// src/contracts/TimeEqualArbiterNonComposing.ts
var abi22 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TimeEqualArbiter.DemandData",
          "components": [
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "TimeNotEqual",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761032d908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251160361019757602060405160018152f35b6308b5d45360e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220ef55b383521a4d28220d134fcefce5bf424e45132d1ce1e8c57459bdca6055da64736f6c634300081b0033",
    "sourceMap": "215:663:91:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101be5763e6c9714d1461002f575f80fd5b346101a65760603660031901126101a6576004356001600160401b0381116101a65761014060031982360301126101a65760405161014081018181106001600160401b038211176101aa57604052816004013581526024820135602082015261009a60448301610269565b91604082019283526100ae60648201610269565b60608301526100bf60848201610269565b608083015260a481013560a08301526100da60c4820161027d565b60c08301526100eb60e4820161027d565b60e083015261010481013580151581036101a6576101008301526101248101356001600160401b0381116101a65761012091600461012c9236920101610291565b9101526024356001600160401b0381116101a65761014e903690600401610291565b6020818051810103126101a657602061016561024a565b910151916001600160401b038316928381036101a6576001600160401b03925251160361019757602060405160018152f35b6308b5d45360e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101a65760203660031901126101a6576004356001600160401b0381116101a657366023820112156101a65780600401356001600160401b0381116101a65781013660248201116101a6576020905f61021661024a565b52829003126101a657602090610236602461022f61024a565b9201610269565b8091526001600160401b0360405191168152f35b60405190602082018281106001600160401b038211176101aa57604052565b35906001600160401b03821682036101a657565b35906001600160a01b03821682036101a657565b81601f820112156101a6578035906001600160401b0382116101aa5760405192601f8301601f19908116603f011684016001600160401b038111858210176101aa57604052828452602083830101116101a657815f92602080930183860137830101529056fea2646970667358221220ef55b383521a4d28220d134fcefce5bf424e45132d1ce1e8c57459bdca6055da64736f6c634300081b0033",
    "sourceMap": "215:663:91:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:663:91;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;:::i;:::-;;;;;586:32;;215:663;;;;;;;:::i;:::-;586:32;;215:663;;-1:-1:-1;;;;;215:663:91;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;632:31;628:58;;215:663;;;;;;;628:58;672:14;;;215:663;672:14;215:663;;672:14;215:663;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:663:91;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:663:91;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:663:91;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;-1:-1:-1;;215:663:91;;;;;;;;-1:-1:-1;;;;;215:663:91;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:663:91;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"TimeNotEqual","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"uint64","name":"time","type":"uint64"}],"internalType":"struct TimeEqualArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/TimeEqualArbiter.sol":"TimeEqualArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/TimeEqualArbiter.sol":{"keccak256":"0xa458d736ded63de6d3d7984998d0e1788b19856f32fd6dff4807251d5ddeed21","license":"UNLICENSED","urls":["bzz-raw://9e870601de20f0a24c48b82ec0570610492110c9c4dee1a072ee62d9b70db1c8","dweb:/ipfs/Qmc4xaFK3YyrRqdauKLJfNnEAq43kUMGiPdPpMmQ2pUKHL"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "TimeNotEqual"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TimeEqualArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/TimeEqualArbiter.sol": "TimeEqualArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/TimeEqualArbiter.sol": {
        "keccak256": "0xa458d736ded63de6d3d7984998d0e1788b19856f32fd6dff4807251d5ddeed21",
        "urls": [
          "bzz-raw://9e870601de20f0a24c48b82ec0570610492110c9c4dee1a072ee62d9b70db1c8",
          "dweb:/ipfs/Qmc4xaFK3YyrRqdauKLJfNnEAq43kUMGiPdPpMmQ2pUKHL"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 91
};

// src/contracts/UidArbiterComposing.ts
var abi23 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct UidArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "UidMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x608080604052346015576105db908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610398575063e6c9714d14610032575f80fd5b3461035e57606036600319011261035e576004356001600160401b03811161035e57610140600319823603011261035e576040519061014082018281106001600160401b0382111761038457604052806004013582526024810135602083015261009e6044820161051c565b604083019081526100b16064830161051c565b90606084019182526100c56084840161051c565b936080810194855260a081019060a485013582526100e560c48601610530565b9460c082019586526100f960e48201610530565b9060e08301918252610104810135801515810361035e57610100840152610124810135906001600160401b03821161035e57600461013a923692010161055f565b6101208301526024356001600160401b03811161035e5761015f90369060040161055f565b9586518701602081019760208183031261035e576020810151916001600160401b03831161035e5760608284019091031261035e57604051916101a1836104e0565b818101602001516001600160a01b038116810361035e57835260408183010151916001600160401b03831161035e57603f8183018401018b131561035e576020838383010101516101f181610544565b9b6101ff6040519d8e6104fb565b818d52604083850186018301011161035e576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101518060408301528451036103755751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b039081166101248401529051811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102eb906101a48401906104bc565b828103600319016024840152610300916104bc565b604435604483015203815a93602094fa801561036a575f9061032a575b6020906040519015158152f35b506020813d602011610362575b81610344602093836104fb565b8101031261035e5751801515810361035e5760209061031d565b5f80fd5b3d9150610337565b6040513d5f823e3d90fd5b633f51589560e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461035e57602036600319011261035e57600435906001600160401b03821161035e573660238301121561035e5781600401356001600160401b03811161035e57820191602483019136831161035e576040816103f55f936104e0565b8281526060602082015201526020602319602483860301011261035e576024810135906001600160401b03821161035e5701916060908390031261035e5760405190610440826104e0565b61044c60248401610530565b82526044830135906001600160401b03821161035e5760246104709285010161055f565b916020820192835260646040830191013581526104b16040519384936020855260018060a01b039051166020850152516060604085015260808401906104bc565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038457604052565b90601f801991011681019081106001600160401b0382111761038457604052565b35906001600160401b038216820361035e57565b35906001600160a01b038216820361035e57565b6001600160401b03811161038457601f01601f191660200190565b81601f8201121561035e5780359061057682610544565b9261058460405194856104fb565b8284526020838301011161035e57815f92602080930183860137830101529056fea26469706673582212200756ee1cb0fb33506dc8ad9d8d12a414e7640d7408fa71e0d3db8eb8c8b2885d64736f6c634300081b0033",
    "sourceMap": "215:869:80:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610398575063e6c9714d14610032575f80fd5b3461035e57606036600319011261035e576004356001600160401b03811161035e57610140600319823603011261035e576040519061014082018281106001600160401b0382111761038457604052806004013582526024810135602083015261009e6044820161051c565b604083019081526100b16064830161051c565b90606084019182526100c56084840161051c565b936080810194855260a081019060a485013582526100e560c48601610530565b9460c082019586526100f960e48201610530565b9060e08301918252610104810135801515810361035e57610100840152610124810135906001600160401b03821161035e57600461013a923692010161055f565b6101208301526024356001600160401b03811161035e5761015f90369060040161055f565b9586518701602081019760208183031261035e576020810151916001600160401b03831161035e5760608284019091031261035e57604051916101a1836104e0565b818101602001516001600160a01b038116810361035e57835260408183010151916001600160401b03831161035e57603f8183018401018b131561035e576020838383010101516101f181610544565b9b6101ff6040519d8e6104fb565b818d52604083850186018301011161035e576020815f928e83808060609a8a8a0101010191015e8d010152602084019a8b520101518060408301528451036103755751965160405163e6c9714d60e01b815260606004820152845160648201526020850151608482015295516001600160401b0390811660a48801529651871660c4870152975190951660e4850152915161010484015292516001600160a01b039081166101248401529051811661014483015261010083015115156101648301526101209092015161014061018483015290939190921691839182916102eb906101a48401906104bc565b828103600319016024840152610300916104bc565b604435604483015203815a93602094fa801561036a575f9061032a575b6020906040519015158152f35b506020813d602011610362575b81610344602093836104fb565b8101031261035e5751801515810361035e5760209061031d565b5f80fd5b3d9150610337565b6040513d5f823e3d90fd5b633f51589560e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461035e57602036600319011261035e57600435906001600160401b03821161035e573660238301121561035e5781600401356001600160401b03811161035e57820191602483019136831161035e576040816103f55f936104e0565b8281526060602082015201526020602319602483860301011261035e576024810135906001600160401b03821161035e5701916060908390031261035e5760405190610440826104e0565b61044c60248401610530565b82526044830135906001600160401b03821161035e5760246104709285010161055f565b916020820192835260646040830191013581526104b16040519384936020855260018060a01b039051166020850152516060604085015260808401906104bc565b905160608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761038457604052565b90601f801991011681019081106001600160401b0382111761038457604052565b35906001600160401b038216820361035e57565b35906001600160a01b038216820361035e57565b6001600160401b03811161038457601f01601f191660200190565b81601f8201121561035e5780359061057682610544565b9261058460405194856104fb565b8284526020838301011161035e57815f92602080930183860137830101529056fea26469706673582212200756ee1cb0fb33506dc8ad9d8d12a414e7640d7408fa71e0d3db8eb8c8b2885d64736f6c634300081b0033",
    "sourceMap": "215:869:80:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:869:80;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;:::i;:::-;;;;632:32;;215:869;632:32;;215:869;;;;;;;;;632:32;;215:869;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;-1:-1:-1;215:869:80;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;678:29;674:57;;215:869;852:18;;215:869;;-1:-1:-1;;;761:153:80;;215:869;;761:153;;215:869;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;215:869:80;;;;;;;;:::i;:::-;;;;;;;761:153;;;;215:869;761:153;;;;;;215:869;761:153;;;215:869;;;;;;;;;;;761:153;;215:869;761:153;;215:869;761:153;;;;;;215:869;761:153;;;:::i;:::-;;;215:869;;;;;;;;;;;;;761:153;;;215:869;;;;761:153;;;-1:-1:-1;761:153:80;;;215:869;;;;;;;;;674:57;716:15;;;215:869;716:15;215:869;;716:15;215:869;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:869:80;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:869:80;;;;;;;;-1:-1:-1;;215:869:80;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;215:869:80;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:869:80;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:869:80;;;;;;:::o;:::-;-1:-1:-1;;;;;215:869:80;;;;;;-1:-1:-1;;215:869:80;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;215:869:80;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"UidMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct UidArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/composing/UidArbiter.sol":"UidArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/composing/UidArbiter.sol":{"keccak256":"0x34986c24fb7679718e81c8ad472bce03d3954c68e3c7d870e75286b8141dd609","license":"UNLICENSED","urls":["bzz-raw://3924906f9a79d80a3917eb675ad517940347b9a609c8985c197289b618d55c0e","dweb:/ipfs/QmfZ285e3rTv4qWqzi3xHeyhPFVxrp2ontcWBFuZWgPd49"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "UidMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct UidArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/composing/UidArbiter.sol": "UidArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/composing/UidArbiter.sol": {
        "keccak256": "0x34986c24fb7679718e81c8ad472bce03d3954c68e3c7d870e75286b8141dd609",
        "urls": [
          "bzz-raw://3924906f9a79d80a3917eb675ad517940347b9a609c8985c197289b618d55c0e",
          "dweb:/ipfs/QmfZ285e3rTv4qWqzi3xHeyhPFVxrp2ontcWBFuZWgPd49"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 80
};

// src/contracts/UidArbiterNonComposing.ts
var abi24 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct UidArbiter.DemandData",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "UidMismatched",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761030b908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b633f51589560e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea26469706673582212206148b2ed6de9afc64b7cab1db15f69110c4288a0c724ac98dd1212a7bdeea04164736f6c634300081b0033",
    "sourceMap": "215:657:92:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b633f51589560e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea26469706673582212206148b2ed6de9afc64b7cab1db15f69110c4288a0c724ac98dd1212a7bdeea04164736f6c634300081b0033",
    "sourceMap": "215:657:92:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:657:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;581:32;;215:657;;;;;;;:::i;:::-;581:32;;215:657;;;;;627:29;623:57;;215:657;;;;;;;623:57;665:15;;;215:657;665:15;215:657;;665:15;215:657;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:657:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;215:657:92;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:657:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;215:657:92;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"UidMismatched","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct UidArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/attestation-properties/non-composing/UidArbiter.sol":"UidArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/attestation-properties/non-composing/UidArbiter.sol":{"keccak256":"0x0fb6b326567ee993db707029840a10e6a62bca49156639aa52b494294cc580cd","license":"UNLICENSED","urls":["bzz-raw://65d323e1d43e0c2b59c4d820e64e0ff70f0485694c1001b93a061c2900c3edd6","dweb:/ipfs/QmaibzJwD4DZ8w2q2HqJyd4wGzqS6WA6kFB5nXPN6NSoMA"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "UidMismatched"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct UidArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/attestation-properties/non-composing/UidArbiter.sol": "UidArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/attestation-properties/non-composing/UidArbiter.sol": {
        "keccak256": "0x0fb6b326567ee993db707029840a10e6a62bca49156639aa52b494294cc580cd",
        "urls": [
          "bzz-raw://65d323e1d43e0c2b59c4d820e64e0ff70f0485694c1001b93a061c2900c3edd6",
          "dweb:/ipfs/QmaibzJwD4DZ8w2q2HqJyd4wGzqS6WA6kFB5nXPN6NSoMA"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 92
};

// src/clients/attestationPropertiesArbiters.ts
var attesterArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi.abi,
  name: "decodeDemandData"
});
var attesterArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi2.abi,
  name: "decodeDemandData"
});
var timeAfterArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi17.abi,
  name: "decodeDemandData"
});
var timeAfterArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi18.abi,
  name: "decodeDemandData"
});
var timeBeforeArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi19.abi,
  name: "decodeDemandData"
});
var timeBeforeArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi20.abi,
  name: "decodeDemandData"
});
var timeEqualArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi21.abi,
  name: "decodeDemandData"
});
var timeEqualArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi22.abi,
  name: "decodeDemandData"
});
var expirationTimeAfterArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi3.abi,
  name: "decodeDemandData"
});
var expirationTimeAfterArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi4.abi,
  name: "decodeDemandData"
});
var expirationTimeBeforeArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi5.abi,
  name: "decodeDemandData"
});
var expirationTimeBeforeArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi6.abi,
  name: "decodeDemandData"
});
var expirationTimeEqualArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi7.abi,
  name: "decodeDemandData"
});
var expirationTimeEqualArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi8.abi,
  name: "decodeDemandData"
});
var recipientArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi9.abi,
  name: "decodeDemandData"
});
var recipientArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi10.abi,
  name: "decodeDemandData"
});
var refUidArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi11.abi,
  name: "decodeDemandData"
});
var refUidArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi12.abi,
  name: "decodeDemandData"
});
var revocableArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi13.abi,
  name: "decodeDemandData"
});
var revocableArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi14.abi,
  name: "decodeDemandData"
});
var schemaArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi15.abi,
  name: "decodeDemandData"
});
var schemaArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi16.abi,
  name: "decodeDemandData"
});
var uidArbiterComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi23.abi,
  name: "decodeDemandData"
});
var uidArbiterNonComposingDecodeDemandFunction = (0, import_viem.getAbiItem)({
  abi: abi24.abi,
  name: "decodeDemandData"
});
var attesterArbiterComposingDemandDataType = attesterArbiterComposingDecodeDemandFunction.outputs[0];
var attesterArbiterNonComposingDemandDataType = attesterArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeAfterArbiterComposingDemandDataType = timeAfterArbiterComposingDecodeDemandFunction.outputs[0];
var timeAfterArbiterNonComposingDemandDataType = timeAfterArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeBeforeArbiterComposingDemandDataType = timeBeforeArbiterComposingDecodeDemandFunction.outputs[0];
var timeBeforeArbiterNonComposingDemandDataType = timeBeforeArbiterNonComposingDecodeDemandFunction.outputs[0];
var timeEqualArbiterComposingDemandDataType = timeEqualArbiterComposingDecodeDemandFunction.outputs[0];
var timeEqualArbiterNonComposingDemandDataType = timeEqualArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeAfterArbiterComposingDemandDataType = expirationTimeAfterArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeAfterArbiterNonComposingDemandDataType = expirationTimeAfterArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeBeforeArbiterComposingDemandDataType = expirationTimeBeforeArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeBeforeArbiterNonComposingDemandDataType = expirationTimeBeforeArbiterNonComposingDecodeDemandFunction.outputs[0];
var expirationTimeEqualArbiterComposingDemandDataType = expirationTimeEqualArbiterComposingDecodeDemandFunction.outputs[0];
var expirationTimeEqualArbiterNonComposingDemandDataType = expirationTimeEqualArbiterNonComposingDecodeDemandFunction.outputs[0];
var recipientArbiterComposingDemandDataType = recipientArbiterComposingDecodeDemandFunction.outputs[0];
var recipientArbiterNonComposingDemandDataType = recipientArbiterNonComposingDecodeDemandFunction.outputs[0];
var refUidArbiterComposingDemandDataType = refUidArbiterComposingDecodeDemandFunction.outputs[0];
var refUidArbiterNonComposingDemandDataType = refUidArbiterNonComposingDecodeDemandFunction.outputs[0];
var revocableArbiterComposingDemandDataType = revocableArbiterComposingDecodeDemandFunction.outputs[0];
var revocableArbiterNonComposingDemandDataType = revocableArbiterNonComposingDecodeDemandFunction.outputs[0];
var schemaArbiterComposingDemandDataType = schemaArbiterComposingDecodeDemandFunction.outputs[0];
var schemaArbiterNonComposingDemandDataType = schemaArbiterNonComposingDecodeDemandFunction.outputs[0];
var uidArbiterComposingDemandDataType = uidArbiterComposingDecodeDemandFunction.outputs[0];
var uidArbiterNonComposingDemandDataType = uidArbiterNonComposingDecodeDemandFunction.outputs[0];
var makeAttestationPropertiesArbitersClient = (viemClient) => {
  return {
    // Attester Arbiters
    /**
     * Encodes AttesterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address attester}
     */
    encodeAttesterArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([attesterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes AttesterArbiterComposing.DemandData from bytes.
     */
    decodeAttesterArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([attesterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes AttesterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {address attester}
     */
    encodeAttesterArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([attesterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes AttesterArbiterNonComposing.DemandData from bytes.
     */
    decodeAttesterArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([attesterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time After Arbiters
    /**
     * Encodes TimeAfterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeAfterArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeAfterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeAfterArbiterComposing.DemandData from bytes.
     */
    decodeTimeAfterArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeAfterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeAfterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeAfterArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeAfterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeAfterArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeAfterArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeAfterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time Before Arbiters
    /**
     * Encodes TimeBeforeArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeBeforeArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeBeforeArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeBeforeArbiterComposing.DemandData from bytes.
     */
    decodeTimeBeforeArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeBeforeArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeBeforeArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeBeforeArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeBeforeArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeBeforeArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeBeforeArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeBeforeArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Time Equal Arbiters
    /**
     * Encodes TimeEqualArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 time}
     */
    encodeTimeEqualArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeEqualArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeEqualArbiterComposing.DemandData from bytes.
     */
    decodeTimeEqualArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeEqualArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes TimeEqualArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 time}
     */
    encodeTimeEqualArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([timeEqualArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes TimeEqualArbiterNonComposing.DemandData from bytes.
     */
    decodeTimeEqualArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([timeEqualArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time After Arbiters
    /**
     * Encodes ExpirationTimeAfterArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeAfterArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeAfterArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeAfterArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeAfterArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeAfterArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeAfterArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeAfterArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeAfterArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeAfterArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeAfterArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeAfterArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time Before Arbiters
    /**
     * Encodes ExpirationTimeBeforeArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeBeforeArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeBeforeArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeBeforeArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeBeforeArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeBeforeArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeBeforeArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeBeforeArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeBeforeArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeBeforeArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeBeforeArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeBeforeArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Expiration Time Equal Arbiters
    /**
     * Encodes ExpirationTimeEqualArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, uint64 expirationTime}
     */
    encodeExpirationTimeEqualArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeEqualArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeEqualArbiterComposing.DemandData from bytes.
     */
    decodeExpirationTimeEqualArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeEqualArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes ExpirationTimeEqualArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {uint64 expirationTime}
     */
    encodeExpirationTimeEqualArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([expirationTimeEqualArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes ExpirationTimeEqualArbiterNonComposing.DemandData from bytes.
     */
    decodeExpirationTimeEqualArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([expirationTimeEqualArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Recipient Arbiters
    /**
     * Encodes RecipientArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address recipient}
     */
    encodeRecipientArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([recipientArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RecipientArbiterComposing.DemandData from bytes.
     */
    decodeRecipientArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([recipientArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RecipientArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {address recipient}
     */
    encodeRecipientArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([recipientArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RecipientArbiterNonComposing.DemandData from bytes.
     */
    decodeRecipientArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([recipientArbiterNonComposingDemandDataType], demandData)[0];
    },
    // RefUID Arbiters
    /**
     * Encodes RefUidArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 refUID}
     */
    encodeRefUidArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([refUidArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RefUidArbiterComposing.DemandData from bytes.
     */
    decodeRefUidArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([refUidArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RefUidArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 refUID}
     */
    encodeRefUidArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([refUidArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RefUidArbiterNonComposing.DemandData from bytes.
     */
    decodeRefUidArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([refUidArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Revocable Arbiters
    /**
     * Encodes RevocableArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bool revocable}
     */
    encodeRevocableArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([revocableArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RevocableArbiterComposing.DemandData from bytes.
     */
    decodeRevocableArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([revocableArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes RevocableArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bool revocable}
     */
    encodeRevocableArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([revocableArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes RevocableArbiterNonComposing.DemandData from bytes.
     */
    decodeRevocableArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([revocableArbiterNonComposingDemandDataType], demandData)[0];
    },
    // Schema Arbiters
    /**
     * Encodes SchemaArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 schema}
     */
    encodeSchemaArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([schemaArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes SchemaArbiterComposing.DemandData from bytes.
     */
    decodeSchemaArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([schemaArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes SchemaArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 schema}
     */
    encodeSchemaArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([schemaArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes SchemaArbiterNonComposing.DemandData from bytes.
     */
    decodeSchemaArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([schemaArbiterNonComposingDemandDataType], demandData)[0];
    },
    // UID Arbiters
    /**
     * Encodes UidArbiterComposing.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, bytes32 uid}
     */
    encodeUidArbiterComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([uidArbiterComposingDemandDataType], [demand]);
    },
    /**
     * Decodes UidArbiterComposing.DemandData from bytes.
     */
    decodeUidArbiterComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([uidArbiterComposingDemandDataType], demandData)[0];
    },
    /**
     * Encodes UidArbiterNonComposing.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 uid}
     */
    encodeUidArbiterNonComposingDemand: (demand) => {
      return (0, import_viem.encodeAbiParameters)([uidArbiterNonComposingDemandDataType], [demand]);
    },
    /**
     * Decodes UidArbiterNonComposing.DemandData from bytes.
     */
    decodeUidArbiterNonComposingDemand: (demandData) => {
      return (0, import_viem.decodeAbiParameters)([uidArbiterNonComposingDemandDataType], demandData)[0];
    }
  };
};

// src/clients/generalArbiters.ts
var import_viem3 = require("viem");

// src/contracts/IntrinsicsArbiter2.ts
var abi25 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IntrinsicsArbiter2.DemandData",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610362908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101fd5763e6c9714d1461002f575f80fd5b346101e55760603660031901126101e55760043567ffffffffffffffff81116101e55761014060031982360301126101e557604051610140810181811067ffffffffffffffff8211176101e95760405281600401358152602081016024830135815261009d6044840161029b565b60408301526100ae6064840161029b565b91606081019283526100c26084850161029b565b936080820194855260a481013560a08301526100e060c482016102b0565b60c08301526100f160e482016102b0565b60e083015261010481013580151581036101e55761010083015261012481013567ffffffffffffffff81116101e55761012091600461013392369201016102c4565b91015260243567ffffffffffffffff81116101e5576101569036906004016102c4565b906020828051810103126101e557602061016e61027b565b92015180925251036101d6575167ffffffffffffffff1680151590816101cc575b506101bd575167ffffffffffffffff166101ae57602060405160018152f35b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61018f565b635f9bd90760e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101e55760203660031901126101e55760043567ffffffffffffffff81116101e557366023820112156101e557806004013567ffffffffffffffff81116101e55781013660248201116101e5576020905f61025761027b565b52829003126101e557602090602461026d61027b565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff8211176101e957604052565b359067ffffffffffffffff821682036101e557565b35906001600160a01b03821682036101e557565b81601f820112156101e55780359067ffffffffffffffff82116101e95760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101e957604052828452602083830101116101e557815f92602080930183860137830101529056fea2646970667358221220314d315b6bd8e22f0a10ec07b85d907f24ea69cff36537a069ac85d73fe8377764736f6c634300081b0033",
    "sourceMap": "203:691:66:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101fd5763e6c9714d1461002f575f80fd5b346101e55760603660031901126101e55760043567ffffffffffffffff81116101e55761014060031982360301126101e557604051610140810181811067ffffffffffffffff8211176101e95760405281600401358152602081016024830135815261009d6044840161029b565b60408301526100ae6064840161029b565b91606081019283526100c26084850161029b565b936080820194855260a481013560a08301526100e060c482016102b0565b60c08301526100f160e482016102b0565b60e083015261010481013580151581036101e55761010083015261012481013567ffffffffffffffff81116101e55761012091600461013392369201016102c4565b91015260243567ffffffffffffffff81116101e5576101569036906004016102c4565b906020828051810103126101e557602061016e61027b565b92015180925251036101d6575167ffffffffffffffff1680151590816101cc575b506101bd575167ffffffffffffffff166101ae57602060405160018152f35b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61018f565b635f9bd90760e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b346101e55760203660031901126101e55760043567ffffffffffffffff81116101e557366023820112156101e557806004013567ffffffffffffffff81116101e55781013660248201116101e5576020905f61025761027b565b52829003126101e557602090602461026d61027b565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff8211176101e957604052565b359067ffffffffffffffff821682036101e557565b35906001600160a01b03821682036101e557565b81601f820112156101e55780359067ffffffffffffffff82116101e95760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101e957604052828452602083830101116101e557815f92602080930183860137830101529056fea2646970667358221220314d315b6bd8e22f0a10ec07b85d907f24ea69cff36537a069ac85d73fe8377764736f6c634300081b0033",
    "sourceMap": "203:691:66:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;633:32;;203:691;;;;;;;:::i;:::-;633:32;;203:691;;;;;1016:27:60;1012:55;;203:691:66;;;353:30:60;;;;;:89;;203:691:66;721:55:60;;;203:691:66;;;786:58:60;;203:691:66;;;;;;;786:58:60;824:20;;;203:691:66;824:20:60;203:691:66;;824:20:60;721:55;759:17;;;203:691:66;759:17:60;203:691:66;;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1012:55;1052:15;;;203:691:66;1052:15:60;203:691:66;;1052:15:60;203:691:66;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;203:691:66;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;203:691:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;203:691:66;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"}],"internalType":"struct IntrinsicsArbiter2.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/IntrinsicsArbiter2.sol":"IntrinsicsArbiter2"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/IntrinsicsArbiter2.sol":{"keccak256":"0xaa7673cfdb2ca0482a53da4f336b588c4034d95af1dd41df96ac1da3b91c08ea","license":"UNLICENSED","urls":["bzz-raw://9ee11ca22195fb780e49bf90e2554dcdaf7e3876995e6763886e6b2a4575e14f","dweb:/ipfs/QmVcZAqerfqb6qF8bLURhhV6C1KAtzS9nxqU6wEVXpo9SV"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct IntrinsicsArbiter2.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/IntrinsicsArbiter2.sol": "IntrinsicsArbiter2"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/IntrinsicsArbiter2.sol": {
        "keccak256": "0xaa7673cfdb2ca0482a53da4f336b588c4034d95af1dd41df96ac1da3b91c08ea",
        "urls": [
          "bzz-raw://9ee11ca22195fb780e49bf90e2554dcdaf7e3876995e6763886e6b2a4575e14f",
          "dweb:/ipfs/QmVcZAqerfqb6qF8bLURhhV6C1KAtzS9nxqU6wEVXpo9SV"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 66
};

// src/contracts/SpecificAttestationArbiter.ts
var abi26 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SpecificAttestationArbiter.DemandData",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "NotDemandedAttestation",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761030b908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b631579b0f760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea2646970667358221220b0a8bb1259fceb1d455cc6af97ba51697c791d16315c3e0cd7f13cf815fdcbe864736f6c634300081b0033",
    "sourceMap": "156:649:102:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c8063838a68d9146101a65763e6c9714d1461002f575f80fd5b3461018e57606036600319011261018e5760043567ffffffffffffffff811161018e57610140600319823603011261018e5760405190610140820182811067ffffffffffffffff82111761019257604052806004013582526024810135602083015261009d60448201610244565b60408301526100ae60648201610244565b60608301526100bf60848201610244565b608083015260a481013560a08301526100da60c48201610259565b60c08301526100eb60e48201610259565b60e0830152610104810135801515810361018e576101008301526101248101359067ffffffffffffffff821161018e57600461012a923692010161026d565b61012082015260243567ffffffffffffffff811161018e5761015090369060040161026d565b9060208280518101031261018e576020610168610224565b920151809252510361017f57602060405160018152f35b631579b0f760e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3461018e57602036600319011261018e5760043567ffffffffffffffff811161018e573660238201121561018e57806004013567ffffffffffffffff811161018e57810136602482011161018e576020905f610200610224565b528290031261018e576020906024610216610224565b910135809152604051908152f35b604051906020820182811067ffffffffffffffff82111761019257604052565b359067ffffffffffffffff8216820361018e57565b35906001600160a01b038216820361018e57565b81601f8201121561018e5780359067ffffffffffffffff82116101925760405192601f8301601f19908116603f0116840167ffffffffffffffff811185821017610192576040528284526020838301011161018e57815f92602080930183860137830101529056fea2646970667358221220b0a8bb1259fceb1d455cc6af97ba51697c791d16315c3e0cd7f13cf815fdcbe864736f6c634300081b0033",
    "sourceMap": "156:649:102:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;506:32;;156:649;;;;;;;:::i;:::-;506:32;;156:649;;;;;552:29;548:66;;156:649;;;;;;;548:66;590:24;;;156:649;590:24;156:649;;590:24;156:649;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;156:649:102;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;156:649:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;156:649:102;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"NotDemandedAttestation","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct SpecificAttestationArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/deprecated/SpecificAttestationArbiter.sol":"SpecificAttestationArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/deprecated/SpecificAttestationArbiter.sol":{"keccak256":"0xfb5181d8c5db61ff4fce0e7c964eb3449f028325014e67c6a81458d288dda91e","license":"UNLICENSED","urls":["bzz-raw://146feee63a3fdce150fd4bb93a46f10f0f048e1c6ee3c55286b8da6151100db5","dweb:/ipfs/QmUF478Y4pF9XXRVvc7VQ74erN6SA2h5WfuvJxvCKPMXKP"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "NotDemandedAttestation"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct SpecificAttestationArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/deprecated/SpecificAttestationArbiter.sol": "SpecificAttestationArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/deprecated/SpecificAttestationArbiter.sol": {
        "keccak256": "0xfb5181d8c5db61ff4fce0e7c964eb3449f028325014e67c6a81458d288dda91e",
        "urls": [
          "bzz-raw://146feee63a3fdce150fd4bb93a46f10f0f048e1c6ee3c55286b8da6151100db5",
          "dweb:/ipfs/QmUF478Y4pF9XXRVvc7VQ74erN6SA2h5WfuvJxvCKPMXKP"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 102
};

// src/contracts/TrustedOracleArbiter.ts
var abi27 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "arbitrate",
      "inputs": [
        {
          "name": "obligation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "decision",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TrustedOracleArbiter.DemandData",
          "components": [
            {
              "name": "oracle",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "requestArbitration",
      "inputs": [
        {
          "name": "_obligation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "oracle",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ArbitrationMade",
      "inputs": [
        {
          "name": "obligation",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "oracle",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "decision",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ArbitrationRequested",
      "inputs": [
        {
          "name": "obligation",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "oracle",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "UnauthorizedArbitrationRequest",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x608034606f57601f61077638819003918201601f19168301916001600160401b03831184841017607357808492602094604052833981010312606f57516001600160a01b03811690819003606f575f80546001600160a01b0319169190911790556040516106ee90816100888239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461043c575080638c08667e146103c9578063e6c9714d146102195763ef9fb71d14610048575f80fd5b3461020a57604036600319011261020a576024356001600160a01b038116906004359082900361020a575f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa90811561020e575f91610116575b5060e08101516001600160a01b031633141590816100fe575b506100ef577f4a55e4a537f0b657a8b464f243ae30dd8404841df3956cceee1aabac341d382f5f80a3005b63ff323ecb60e01b5f5260045ffd5b60c001516001600160a01b031633141590505f6100c4565b90503d805f833e61012781836105a0565b81019060208183031261020a578051906001600160401b03821161020a57016101408183031261020a576040519161015e83610584565b8151835260208201516020840152610178604083016106a4565b6040840152610189606083016106a4565b606084015261019a608083016106a4565b608084015260a082015160a08401526101b560c0830161064a565b60c08401526101c660e0830161064a565b60e0840152610100820151801515810361020a576101008401526101208201516001600160401b03811161020a576101fe920161065e565b6101208201525f6100ab565b5f80fd5b6040513d5f823e3d90fd5b3461020a57606036600319011261020a576004356001600160401b03811161020a57610140600319823603011261020a576040519061025782610584565b8060040135825260248101356020830152610274604482016105c1565b6040830152610285606482016105c1565b6060830152610296608482016105c1565b608083015260a481013560a08301526102b160c482016105d5565b60c08301526102c260e482016105d5565b60e0830152610104810135801515810361020a57610100830152610124810135906001600160401b03821161020a5760046103009236920101610604565b6101208201526024356001600160401b03811161020a57610325903690600401610604565b805181019060208183031261020a576020810151906001600160401b03821161020a57019060408282031261020a576040519161036183610555565b61036d6020820161064a565b83526040810151916001600160401b03831161020a5761039492602080920192010161065e565b602082015260018060a01b039051165f52600160205260405f2090515f52602052602060ff60405f2054166040519015158152f35b3461020a57604036600319011261020a576004356024359081151580920361020a57335f52600160205260405f20815f5260205260405f2060ff1981541660ff84161790556040519182527f17b56dd782cd998b68e9b95d1fc547096b22671d6848644badf18d515329792760203393a3005b3461020a57602036600319011261020a576004356001600160401b03811161020a573660238201121561020a5780600401356001600160401b03811161020a57810190602482019236841161020a57602081610499606093610555565b5f8152015260208183031261020a576024810135906001600160401b03821161020a5701906040908290031261020a57604051916104d683610555565b6104e2602483016105d5565b83526044820135906001600160401b03821161020a576024610508926080940101610604565b9160208101928352602060405193849282845260018060a01b0390511682840152516040808401528051918291826060860152018484015e5f828201840152601f01601f19168101030190f35b604081019081106001600160401b0382111761057057604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b0382111761057057604052565b90601f801991011681019081106001600160401b0382111761057057604052565b35906001600160401b038216820361020a57565b35906001600160a01b038216820361020a57565b6001600160401b03811161057057601f01601f191660200190565b81601f8201121561020a5780359061061b826105e9565b9261062960405194856105a0565b8284526020838301011161020a57815f926020809301838601378301015290565b51906001600160a01b038216820361020a57565b81601f8201121561020a57805190610675826105e9565b9261068360405194856105a0565b8284526020838301011161020a57815f9260208093018386015e8301015290565b51906001600160401b038216820361020a5756fea2646970667358221220df38b50a7a6054e532bb293eb33a1b2a489a7803578c360ef8889defda3bf33e64736f6c634300081b0033",
    "sourceMap": "239:1605:68:-:0;;;;;;;;;;;;;-1:-1:-1;;239:1605:68;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;-1:-1:-1;239:1605:68;;-1:-1:-1;;;;;;239:1605:68;;;;;;;;;;;;;;;;;-1:-1:-1;239:1605:68;;;;;;-1:-1:-1;239:1605:68;;;;;-1:-1:-1;239:1605:68",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d91461043c575080638c08667e146103c9578063e6c9714d146102195763ef9fb71d14610048575f80fd5b3461020a57604036600319011261020a576024356001600160a01b038116906004359082900361020a575f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa90811561020e575f91610116575b5060e08101516001600160a01b031633141590816100fe575b506100ef577f4a55e4a537f0b657a8b464f243ae30dd8404841df3956cceee1aabac341d382f5f80a3005b63ff323ecb60e01b5f5260045ffd5b60c001516001600160a01b031633141590505f6100c4565b90503d805f833e61012781836105a0565b81019060208183031261020a578051906001600160401b03821161020a57016101408183031261020a576040519161015e83610584565b8151835260208201516020840152610178604083016106a4565b6040840152610189606083016106a4565b606084015261019a608083016106a4565b608084015260a082015160a08401526101b560c0830161064a565b60c08401526101c660e0830161064a565b60e0840152610100820151801515810361020a576101008401526101208201516001600160401b03811161020a576101fe920161065e565b6101208201525f6100ab565b5f80fd5b6040513d5f823e3d90fd5b3461020a57606036600319011261020a576004356001600160401b03811161020a57610140600319823603011261020a576040519061025782610584565b8060040135825260248101356020830152610274604482016105c1565b6040830152610285606482016105c1565b6060830152610296608482016105c1565b608083015260a481013560a08301526102b160c482016105d5565b60c08301526102c260e482016105d5565b60e0830152610104810135801515810361020a57610100830152610124810135906001600160401b03821161020a5760046103009236920101610604565b6101208201526024356001600160401b03811161020a57610325903690600401610604565b805181019060208183031261020a576020810151906001600160401b03821161020a57019060408282031261020a576040519161036183610555565b61036d6020820161064a565b83526040810151916001600160401b03831161020a5761039492602080920192010161065e565b602082015260018060a01b039051165f52600160205260405f2090515f52602052602060ff60405f2054166040519015158152f35b3461020a57604036600319011261020a576004356024359081151580920361020a57335f52600160205260405f20815f5260205260405f2060ff1981541660ff84161790556040519182527f17b56dd782cd998b68e9b95d1fc547096b22671d6848644badf18d515329792760203393a3005b3461020a57602036600319011261020a576004356001600160401b03811161020a573660238201121561020a5780600401356001600160401b03811161020a57810190602482019236841161020a57602081610499606093610555565b5f8152015260208183031261020a576024810135906001600160401b03821161020a5701906040908290031261020a57604051916104d683610555565b6104e2602483016105d5565b83526044820135906001600160401b03821161020a576024610508926080940101610604565b9160208101928352602060405193849282845260018060a01b0390511682840152516040808401528051918291826060860152018484015e5f828201840152601f01601f19168101030190f35b604081019081106001600160401b0382111761057057604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b0382111761057057604052565b90601f801991011681019081106001600160401b0382111761057057604052565b35906001600160401b038216820361020a57565b35906001600160a01b038216820361020a57565b6001600160401b03811161057057601f01601f191660200190565b81601f8201121561020a5780359061061b826105e9565b9261062960405194856105a0565b8284526020838301011161020a57815f926020809301838601378301015290565b51906001600160a01b038216820361020a57565b81601f8201121561020a57805190610675826105e9565b9261068360405194856105a0565b8284526020838301011161020a57815f9260208093018386015e8301015290565b51906001600160401b038216820361020a5756fea2646970667358221220df38b50a7a6054e532bb293eb33a1b2a489a7803578c360ef8889defda3bf33e64736f6c634300081b0033",
    "sourceMap": "239:1605:68:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1605:68;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;-1:-1:-1;;;1116:31:68;;239:1605;1116:31;;239:1605;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;1116:31;;;;;;;239:1605;1116:31;;;239:1605;-1:-1:-1;239:1605:68;1174:19;;239:1605;-1:-1:-1;;;;;239:1605:68;1197:10;1174:33;;;;:83;;239:1605;1157:150;;;1323:41;239:1605;1323:41;;239:1605;1157:150;1275:32;;;239:1605;1275:32;239:1605;;1275:32;1174:83;1223:20;;239:1605;-1:-1:-1;;;;;239:1605:68;1197:10;1223:34;;;-1:-1:-1;1174:83:68;;;1116:31;;;;;239:1605;1116:31;;;;;;:::i;:::-;;;239:1605;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;:::i;:::-;;;;;1116:31;;;239:1605;;;;1116:31;239:1605;;;;;;;;;;;;;;;-1:-1:-1;;239:1605:68;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;:::i;:::-;;;1584:32;;239:1605;;;;;;;;;1584:32;;239:1605;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;1584:32;239:1605;1584:32;;;239:1605;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1605:68;;;;;;;;;;;;;;;;;891:10;239:1605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;940:49;239:1605;891:10;940:49;;239:1605;;;;;;;-1:-1:-1;;239:1605:68;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;239:1605:68;;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;:::o;:::-;;;;-1:-1:-1;239:1605:68;;;;;-1:-1:-1;239:1605:68;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;239:1605:68;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1605:68;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1605:68;;;;;;:::o;:::-;-1:-1:-1;;;;;239:1605:68;;;;;;-1:-1:-1;;239:1605:68;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;239:1605:68;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1605:68;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;239:1605:68;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;239:1605:68;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "arbitrate(bytes32,bool)": "8c08667e",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9",
    "requestArbitration(bytes32,address)": "ef9fb71d"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"UnauthorizedArbitrationRequest","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"obligation","type":"bytes32"},{"indexed":true,"internalType":"address","name":"oracle","type":"address"},{"indexed":false,"internalType":"bool","name":"decision","type":"bool"}],"name":"ArbitrationMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"obligation","type":"bytes32"},{"indexed":true,"internalType":"address","name":"oracle","type":"address"}],"name":"ArbitrationRequested","type":"event"},{"inputs":[{"internalType":"bytes32","name":"obligation","type":"bytes32"},{"internalType":"bool","name":"decision","type":"bool"}],"name":"arbitrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"oracle","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct TrustedOracleArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_obligation","type":"bytes32"},{"internalType":"address","name":"oracle","type":"address"}],"name":"requestArbitration","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/TrustedOracleArbiter.sol":"TrustedOracleArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/TrustedOracleArbiter.sol":{"keccak256":"0xc68eac09d0c8fa8392d37412fe6b658bb14862b13febb6bed5d0ad39f9ae1d66","license":"UNLICENSED","urls":["bzz-raw://1be3eb25c6c1b4980ccadf19462fe5a820f1e5293b126288540ca395ba8093ac","dweb:/ipfs/QmTTqDyCoFYVj2xJAK563VGha18j6qotoCLULrEi7Y55Wq"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedArbitrationRequest"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "obligation",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "decision",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ArbitrationMade",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "obligation",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ArbitrationRequested",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "obligation",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "decision",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "arbitrate"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TrustedOracleArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "oracle",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_obligation",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "requestArbitration"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/TrustedOracleArbiter.sol": "TrustedOracleArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/TrustedOracleArbiter.sol": {
        "keccak256": "0xc68eac09d0c8fa8392d37412fe6b658bb14862b13febb6bed5d0ad39f9ae1d66",
        "urls": [
          "bzz-raw://1be3eb25c6c1b4980ccadf19462fe5a820f1e5293b126288540ca395ba8093ac",
          "dweb:/ipfs/QmTTqDyCoFYVj2xJAK563VGha18j6qotoCLULrEi7Y55Wq"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 68
};

// src/contracts/TrustedPartyArbiter.ts
var abi28 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TrustedPartyArbiter.DemandData",
          "components": [
            {
              "name": "baseArbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "baseDemand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "creator",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "NotTrustedParty",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080806040523460155761060e908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b634673ab7b60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea264697066735822122097ef8157f95dfcfd6fe74fa244ce675e0d8e44fc2ea108a0c4d11c0d1abfe7c664736f6c634300081b0033",
    "sourceMap": "209:896:104:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d9146103a6575063e6c9714d14610032575f80fd5b3461036c57606036600319011261036c576004356001600160401b03811161036c57610140600319823603011261036c576040519061014082018281106001600160401b0382111761039257604052806004013582526024810135602083015261009e6044820161053b565b604083019081526100b16064830161053b565b90606084019182526100c56084840161053b565b936080810194855260a081019060a485013582526100e560c4860161054f565b60c08201526100f660e4860161054f565b9460e08201958652610104810135801515810361036c57610100830152610124810135906001600160401b03821161036c576004610137923692010161057e565b6101208201526024356001600160401b03811161036c5761015c90369060040161057e565b9485518601602081019660208183031261036c576020810151916001600160401b03831161036c5760608284019091031261036c576040519161019e836104ff565b6101ac6020828401016105c4565b835260408183010151906001600160401b03821161036c57603f8382018301018a131561036c57602082828501010151926101e684610563565b9a6101f46040519c8d61051a565b848c52604082840185018601011161036c575f602085610230968e83808060609a8a8a0101010191015e8d010152602085019a8b5201016105c4565b6040820181905260c08401516001600160a01b039081169116036103835751955160405163e6c9714d60e01b815260606004820152835160648201526020840151608482015294516001600160401b0390811660a48701529551861660c4860152965190941660e4840152905161010483015260c08101516001600160a01b03908116610124840152925183166101448301526101008101511515610164830152610120015161014061018483015290939190921691839182916102f9906101a48401906104db565b82810360031901602484015261030e916104db565b604435604483015203815a93602094fa8015610378575f90610338575b6020906040519015158152f35b506020813d602011610370575b816103526020938361051a565b8101031261036c5751801515810361036c5760209061032b565b5f80fd5b3d9150610345565b6040513d5f823e3d90fd5b634673ab7b60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b3461036c57602036600319011261036c57600435906001600160401b03821161036c573660238301121561036c5781600401356001600160401b03811161036c57820191602483019136831161036c576040816104035f936104ff565b8281526060602082015201526020602319602483860301011261036c576024810135906001600160401b03821161036c5701916060908390031261036c576040519061044e826104ff565b61045a6024840161054f565b82526044830135906001600160401b03821161036c5761048460649160246104929487010161057e565b93602084019485520161054f565b604082019081526104c76040519384936020855260018060a01b039051166020850152516060604085015260808401906104db565b90516001600160a01b031660608301520390f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606081019081106001600160401b0382111761039257604052565b90601f801991011681019081106001600160401b0382111761039257604052565b35906001600160401b038216820361036c57565b35906001600160a01b038216820361036c57565b6001600160401b03811161039257601f01601f191660200190565b81601f8201121561036c5780359061059582610563565b926105a3604051948561051a565b8284526020838301011161036c57815f926020809301838601378301015290565b51906001600160a01b038216820361036c5756fea264697066735822122097ef8157f95dfcfd6fe74fa244ce675e0d8e44fc2ea108a0c4d11c0d1abfe7c664736f6c634300081b0033",
    "sourceMap": "209:896:104:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:896:104;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;:::i;:::-;;;;641:32;;209:896;641:32;;209:896;;;;;;;;;641:32;;209:896;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;-1:-1:-1;209:896:104;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;687:39;683:69;;209:896;873:18;;209:896;;-1:-1:-1;;;782:153:104;;209:896;;782:153;;209:896;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:896:104;;;;;;;;:::i;:::-;;;;;;;782:153;;;;209:896;782:153;;;;;;209:896;782:153;;;209:896;;;;;;;;;;;782:153;;209:896;782:153;;209:896;782:153;;;;;;209:896;782:153;;;:::i;:::-;;;209:896;;;;;;;;;;;;;782:153;;;209:896;;;;782:153;;;-1:-1:-1;782:153:104;;;209:896;;;;;;;;;683:69;735:17;;;209:896;735:17;209:896;;735:17;209:896;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:896:104;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;209:896:104;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:896:104;;;;;;;;-1:-1:-1;;209:896:104;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:896:104;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:104;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:104;;;;;;:::o;:::-;-1:-1:-1;;;;;209:896:104;;;;;;-1:-1:-1;;209:896:104;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:896:104;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:896:104;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"NotTrustedParty","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address","name":"baseArbiter","type":"address"},{"internalType":"bytes","name":"baseDemand","type":"bytes"},{"internalType":"address","name":"creator","type":"address"}],"internalType":"struct TrustedPartyArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/deprecated/TrustedPartyArbiter.sol":"TrustedPartyArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/deprecated/TrustedPartyArbiter.sol":{"keccak256":"0x598cacff078f75f663339bcaa44bce8a56ef84a25a1e0badc580b1305147043f","license":"UNLICENSED","urls":["bzz-raw://20767f2d2625fbb5dda5b6545122ff398e97217a902a460187a45da576dae84b","dweb:/ipfs/QmSEpAwmFuRnffhcZATGmmExvmBKRj1qm145kko5NKCLBn"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "NotTrustedParty"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct TrustedPartyArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "baseArbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "baseDemand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/deprecated/TrustedPartyArbiter.sol": "TrustedPartyArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/deprecated/TrustedPartyArbiter.sol": {
        "keccak256": "0x598cacff078f75f663339bcaa44bce8a56ef84a25a1e0badc580b1305147043f",
        "urls": [
          "bzz-raw://20767f2d2625fbb5dda5b6545122ff398e97217a902a460187a45da576dae84b",
          "dweb:/ipfs/QmSEpAwmFuRnffhcZATGmmExvmBKRj1qm145kko5NKCLBn"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 104
};

// src/utils.ts
var import_viem2 = require("viem");

// src/config.ts
var contractAddresses = {
  "Base Sepolia": {
    eas: "0x4200000000000000000000000000000000000021",
    easSchemaRegistry: "0x4200000000000000000000000000000000000020",
    erc20BarterUtils: "0xF02d5fD6c858b7E7088D5E6912008936846519E5",
    erc20EscrowObligation: "0x3826430c1C358623a76e7E240f186D8ad0aEc1d1",
    erc20PaymentObligation: "0x70573b0A9E98cc9E5E8a9899C1756510057eeC70",
    erc721BarterUtils: "0x83417Ea0b4dE1333C40CC8F98A4Fee2A0BAD8A8F",
    erc721EscrowObligation: "0xAb647525526BeBBE59B23af166F708b0e7A23C31",
    erc721PaymentObligation: "0x64f89f110378219cb9A70Aa175d3936e36e64495",
    erc1155BarterUtils: "0xC5DC89829091D35AD2aBb8c7f32C20eCF30C3eA5",
    erc1155EscrowObligation: "0xe29A8516dd347919cC1939c2113EFD611Ba47a9E",
    erc1155PaymentObligation: "0xE083f6B4b1b5F89e6E2E1E043a1947fa14839A67",
    tokenBundleBarterUtils: "0x1300a5AD4C33F482f106B72fAA72a0e73D7e94eA",
    tokenBundleEscrowObligation: "0x187cc572B48F296A579FC8998FF65e94eaB678f0",
    tokenBundlePaymentObligation: "0xd46EEE3c196D09cCDb752EbB79e3762fA9147E42",
    attestationBarterUtils: "0x20b49D94D71B686db5Da0d4E4Ea76dD158E03C4F",
    attestationEscrowObligation: "0xbeeae6735892f2dEf5F0A3D9EfEC2eAC02324b20",
    attestationEscrowObligation2: "0x11909d3AB6D539469422B5830533c3B9B3dDaF0c",
    stringObligation: "0x655677c421BA84f97D7A17A4A2D5038c8B564dCD",
    trustedPartyArbiter: "0x",
    specificAttestationArbiter: "0x",
    trivialArbiter: "0xeAc6eDB3341b295f6eD815a66B0d7D79216a66B4",
    trustedOracleArbiter: "0xC343eA368bb7c4a54c92a1aB4d46Db38D7CCaf39",
    allArbiter: "0x033EB5BF55fE4d002096232Ca7bDfF600f4e0a2b",
    anyArbiter: "0x0e1B34fB00AfD95e7dD7a686B676C6bB7efA2481",
    notArbiter: "0x6f9BFDF8556e6619D525ae9c13849090c0Cf886f",
    intrinsicsArbiter: "0xB950a89e42570Bd9cdf4f800F830bE095706CFf9",
    intrinsicsArbiter2: "0x16Bc823B27d964bbb6b48592b8b2E019b4897C62",
    erc8004Arbiter: "0xbF27542802e10c7370eb12fe5Cc4cc33521B46B0",
    confirmationArbiter: "0x10BC6135736A94AbB538C83ab03affd8e4aEe49D",
    confirmationArbiterComposing: "0xDB68575Ca35D926dB9045d367C6878F27d79eA5B",
    revocableConfirmationArbiter: "0xB74eBd0C5acdfDfD9222D4B9985aF79d537aaED7",
    revocableConfirmationArbiterComposing: "0xCa06fF3Cbd798F4A5777BBDf3B3A0bFc7d48e7cf",
    unrevocableConfirmationArbiter: "0x063B177e2765658183C28caD8BC35458cb0Be8e1",
    unrevocableArbiterComposing: "0x1ab005Af053246674cF3bF19747b55F34D49D6aA",
    nativeTokenEscrowObligation: "0x5Cd459c5775bEB4aDBbB5E6e0714E7CBefa7103a",
    nativeTokenPaymentObligation: "0x82c4778699A498e07E31ee0678F1Db146CA47e50",
    nativeTokenBarterUtils: "0x592C653B1d28787c645528dfF84D06A26eE3E9c5"
  },
  "Filecoin Calibration": {
    eas: "0x3c79a0225380fb6f3cb990ffc4e3d5af4546b524",
    easSchemaRegistry: "0x2bb94a4e6ec0d81de7f81007b572ac09a5be37b4",
    specificAttestationArbiter: "0x10788ba2c4c65d1e97bc6005436b61c2c2e51572",
    trustedPartyArbiter: "0xed550301b3258612509615bbddd4b2383cf32df4",
    trivialArbiter: "0x6e9bc0d34fff16140401fc51653347be0a1f0ec0",
    trustedOracleArbiter: "0x5f1db54dbc5006894ef6c43b2174c05ccaa250ec",
    stringObligation: "0xbb022fc36d0cc97b6cae5a2e15d45b7a9ad46f99",
    erc20EscrowObligation: "0x235792a6d077a04fb190a19f362acecab7866ab5",
    erc20PaymentObligation: "0xd8b6199aa91992f5d3bafddc3372b391e46c92ce",
    erc721EscrowObligation: "0x336f2f91b093001edd90e49216422b33b8b4e03b",
    erc721PaymentObligation: "0x4b9b6ff4a7c2bc89eee6f28355b9a94e6649bbf8",
    erc1155EscrowObligation: "0x96c14b182cd99a09ddddc6b755ba0c4ed3d6991c",
    erc1155PaymentObligation: "0x903caa028b1848ab8fdd15c4ccd20c4e7be2b1c0",
    tokenBundleEscrowObligation: "0xdcc1104325d9d99c6bd5faa0804a7d743f3d0c20",
    tokenBundlePaymentObligation: "0xab43cce34a7b831fa7ab134bcdc21a6ba20882b6",
    tokenBundleBarterUtils: "0xb63cf08c6623f69d2ad34e37b8a68cca6c125d49",
    erc20BarterUtils: "0xaeeddd0a2f24f7286eae7e7fa5cea746fcf064fc",
    erc721BarterUtils: "0x2129f46737135fe4ebb3c49953487122088bc739",
    erc1155BarterUtils: "0x66b7398b2bb322bb4a480ae370142c02c52b886a",
    attestationEscrowObligation: "0x553e4de0916074201a9d32123efcc8f734ee5675",
    attestationEscrowObligation2: "0x11c3931f2715d8fca8ea5ca79fac4bbbcdbe9903",
    attestationBarterUtils: "0x0c19138441e1bee2964e65e0edf1702d59a2e786",
    anyArbiter: "0x",
    allArbiter: "0x",
    notArbiter: "0x",
    intrinsicsArbiter: "0x",
    intrinsicsArbiter2: "0x",
    erc8004Arbiter: "0x",
    confirmationArbiter: "0x",
    confirmationArbiterComposing: "0x",
    revocableConfirmationArbiter: "0x",
    revocableConfirmationArbiterComposing: "0x",
    unrevocableConfirmationArbiter: "0x",
    unrevocableArbiterComposing: "0x",
    nativeTokenEscrowObligation: "0x",
    nativeTokenPaymentObligation: "0x",
    nativeTokenBarterUtils: "0x"
  }
};
var supportedChains = ["Base Sepolia", "Filecoin Calibration"];

// src/contracts/IEAS.ts
var abi29 = {
  "abi": [
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct AttestationRequest",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple",
              "internalType": "struct AttestationRequestData",
              "components": [
                {
                  "name": "recipient",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "expirationTime",
                  "type": "uint64",
                  "internalType": "uint64"
                },
                {
                  "name": "revocable",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refUID",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "attestByDelegation",
      "inputs": [
        {
          "name": "delegatedRequest",
          "type": "tuple",
          "internalType": "struct DelegatedAttestationRequest",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple",
              "internalType": "struct AttestationRequestData",
              "components": [
                {
                  "name": "recipient",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "expirationTime",
                  "type": "uint64",
                  "internalType": "uint64"
                },
                {
                  "name": "revocable",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refUID",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "signature",
              "type": "tuple",
              "internalType": "struct Signature",
              "components": [
                {
                  "name": "v",
                  "type": "uint8",
                  "internalType": "uint8"
                },
                {
                  "name": "r",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "s",
                  "type": "bytes32",
                  "internalType": "bytes32"
                }
              ]
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "deadline",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getAttestation",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRevokeOffchain",
      "inputs": [
        {
          "name": "revoker",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "data",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchemaRegistry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getTimestamp",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isAttestationValid",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "multiRequests",
          "type": "tuple[]",
          "internalType": "struct MultiAttestationRequest[]",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple[]",
              "internalType": "struct AttestationRequestData[]",
              "components": [
                {
                  "name": "recipient",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "expirationTime",
                  "type": "uint64",
                  "internalType": "uint64"
                },
                {
                  "name": "revocable",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refUID",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiAttestByDelegation",
      "inputs": [
        {
          "name": "multiDelegatedRequests",
          "type": "tuple[]",
          "internalType": "struct MultiDelegatedAttestationRequest[]",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple[]",
              "internalType": "struct AttestationRequestData[]",
              "components": [
                {
                  "name": "recipient",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "expirationTime",
                  "type": "uint64",
                  "internalType": "uint64"
                },
                {
                  "name": "revocable",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refUID",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "signatures",
              "type": "tuple[]",
              "internalType": "struct Signature[]",
              "components": [
                {
                  "name": "v",
                  "type": "uint8",
                  "internalType": "uint8"
                },
                {
                  "name": "r",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "s",
                  "type": "bytes32",
                  "internalType": "bytes32"
                }
              ]
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "deadline",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "multiRequests",
          "type": "tuple[]",
          "internalType": "struct MultiRevocationRequest[]",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple[]",
              "internalType": "struct RevocationRequestData[]",
              "components": [
                {
                  "name": "uid",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevokeByDelegation",
      "inputs": [
        {
          "name": "multiDelegatedRequests",
          "type": "tuple[]",
          "internalType": "struct MultiDelegatedRevocationRequest[]",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple[]",
              "internalType": "struct RevocationRequestData[]",
              "components": [
                {
                  "name": "uid",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "signatures",
              "type": "tuple[]",
              "internalType": "struct Signature[]",
              "components": [
                {
                  "name": "v",
                  "type": "uint8",
                  "internalType": "uint8"
                },
                {
                  "name": "r",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "s",
                  "type": "bytes32",
                  "internalType": "bytes32"
                }
              ]
            },
            {
              "name": "revoker",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "deadline",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevokeOffchain",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "multiTimestamp",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct RevocationRequest",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple",
              "internalType": "struct RevocationRequestData",
              "components": [
                {
                  "name": "uid",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revokeByDelegation",
      "inputs": [
        {
          "name": "delegatedRequest",
          "type": "tuple",
          "internalType": "struct DelegatedRevocationRequest",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple",
              "internalType": "struct RevocationRequestData",
              "components": [
                {
                  "name": "uid",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "signature",
              "type": "tuple",
              "internalType": "struct Signature",
              "components": [
                {
                  "name": "v",
                  "type": "uint8",
                  "internalType": "uint8"
                },
                {
                  "name": "r",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "s",
                  "type": "bytes32",
                  "internalType": "bytes32"
                }
              ]
            },
            {
              "name": "revoker",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "deadline",
              "type": "uint64",
              "internalType": "uint64"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revokeOffchain",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "timestamp",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Attested",
      "inputs": [
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "attester",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "uid",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "schemaUID",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Revoked",
      "inputs": [
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "attester",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "uid",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "schemaUID",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RevokedOffchain",
      "inputs": [
        {
          "name": "revoker",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "data",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "timestamp",
          "type": "uint64",
          "indexed": true,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Timestamped",
      "inputs": [
        {
          "name": "data",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "timestamp",
          "type": "uint64",
          "indexed": true,
          "internalType": "uint64"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": "f17325e7",
    "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": "3c042715",
    "getAttestation(bytes32)": "a3112a64",
    "getRevokeOffchain(address,bytes32)": "b469318d",
    "getSchemaRegistry()": "f10b5cc8",
    "getTimestamp(bytes32)": "d45c4435",
    "isAttestationValid(bytes32)": "e30bb563",
    "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": "44adc90e",
    "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": "95411525",
    "multiRevoke((bytes32,(bytes32,uint256)[])[])": "4cb7e9e5",
    "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": "0eabf660",
    "multiRevokeOffchain(bytes32[])": "13893f61",
    "multiTimestamp(bytes32[])": "e71ff365",
    "revoke((bytes32,(bytes32,uint256)))": "46926267",
    "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": "a6d4dbc7",
    "revokeOffchain(bytes32)": "cf190f34",
    "timestamp(bytes32)": "4d003070",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID of the new attestation."}},"Revoked(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"params":{"request":"The arguments of the attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attest({         schema: \\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\",         data: {             recipient: \\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\",             expirationTime: 0,             revocable: true,             refUID: \\"0x0000000000000000000000000000000000000000000000000000000000000000\\",             data: \\"0xF00D\\",             value: 0         }     })"}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"}},"getAttestation(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"}},"multiRevokeOffchain(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"params":{"request":"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"}},"revokeOffchain(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"IEAS","version":1},"userdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been made."},"Revoked(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been revoked."},"RevokedOffchain(address,bytes32,uint64)":{"notice":"Emitted when a data has been revoked."},"Timestamped(bytes32,uint64)":{"notice":"Emitted when a data has been timestamped."}},"kind":"user","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"notice":"Attests to a specific schema."},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Attests to a specific schema via the provided ECDSA signature."},"getAttestation(bytes32)":{"notice":"Returns an existing attestation by UID."},"getRevokeOffchain(address,bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"getSchemaRegistry()":{"notice":"Returns the address of the global schema registry."},"getTimestamp(bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"isAttestationValid(bytes32)":{"notice":"Checks whether an attestation exists."},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"notice":"Attests to multiple schemas."},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Attests to multiple schemas using via provided ECDSA signatures."},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"notice":"Revokes existing attestations to multiple schemas."},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Revokes existing attestations to multiple schemas via provided ECDSA signatures."},"multiRevokeOffchain(bytes32[])":{"notice":"Revokes the specified multiple bytes32 data."},"multiTimestamp(bytes32[])":{"notice":"Timestamps the specified multiple bytes32 data."},"revoke((bytes32,(bytes32,uint256)))":{"notice":"Revokes an existing attestation to a specific schema."},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Revokes an existing attestation to a specific schema via the provided ECDSA signature."},"revokeOffchain(bytes32)":{"notice":"Revokes the specified bytes32 data."},"timestamp(bytes32)":{"notice":"Timestamps the specified bytes32 data."},"version()":{"notice":"Returns the full semver contract version."}},"notice":"EAS - Ethereum Attestation Service interface.","version":1}},"settings":{"compilationTarget":{"lib/eas-contracts/contracts/IEAS.sol":"IEAS"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "schemaUID",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Attested",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "schemaUID",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Revoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "revoker",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RevokedOffchain",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Timestamped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct AttestationRequestData",
                  "name": "data",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expirationTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool",
                      "name": "revocable",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "refUID",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct DelegatedAttestationRequest",
              "name": "delegatedRequest",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct AttestationRequestData",
                  "name": "data",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expirationTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool",
                      "name": "revocable",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "refUID",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct Signature",
                  "name": "signature",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "v",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "r",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "s",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attestByDelegation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAttestation",
          "outputs": [
            {
              "internalType": "struct Attestation",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "revoker",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevokeOffchain",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchemaRegistry",
          "outputs": [
            {
              "internalType": "contract ISchemaRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTimestamp",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isAttestationValid",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiAttestationRequest[]",
              "name": "multiRequests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct AttestationRequestData[]",
                  "name": "data",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expirationTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool",
                      "name": "revocable",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "refUID",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiDelegatedAttestationRequest[]",
              "name": "multiDelegatedRequests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct AttestationRequestData[]",
                  "name": "data",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expirationTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool",
                      "name": "revocable",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "refUID",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct Signature[]",
                  "name": "signatures",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "v",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "r",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "s",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttestByDelegation",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiRevocationRequest[]",
              "name": "multiRequests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct RevocationRequestData[]",
                  "name": "data",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "uid",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke"
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiDelegatedRevocationRequest[]",
              "name": "multiDelegatedRequests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct RevocationRequestData[]",
                  "name": "data",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "uid",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct Signature[]",
                  "name": "signatures",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "v",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "r",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "s",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "revoker",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevokeByDelegation"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multiRevokeOffchain",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multiTimestamp",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct RevocationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct RevocationRequestData",
                  "name": "data",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "uid",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke"
        },
        {
          "inputs": [
            {
              "internalType": "struct DelegatedRevocationRequest",
              "name": "delegatedRequest",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct RevocationRequestData",
                  "name": "data",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "uid",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct Signature",
                  "name": "signature",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "v",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "r",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "s",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "revoker",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revokeByDelegation"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeOffchain",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "timestamp",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": {
            "params": {
              "request": "The arguments of the attestation request."
            },
            "returns": {
              "_0": 'The UID of the new attestation. Example:     attest({         schema: "0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0",         data: {             recipient: "0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf",             expirationTime: 0,             revocable: true,             refUID: "0x0000000000000000000000000000000000000000000000000000000000000000",             data: "0xF00D",             value: 0         }     })'
            }
          },
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            "params": {
              "delegatedRequest": "The arguments of the delegated attestation request."
            },
            "returns": {
              "_0": "The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"
            }
          },
          "getAttestation(bytes32)": {
            "params": {
              "uid": "The UID of the attestation to retrieve."
            },
            "returns": {
              "_0": "The attestation data members."
            }
          },
          "getRevokeOffchain(address,bytes32)": {
            "params": {
              "data": "The data to query."
            },
            "returns": {
              "_0": "The timestamp the data was timestamped with."
            }
          },
          "getSchemaRegistry()": {
            "returns": {
              "_0": "The address of the global schema registry."
            }
          },
          "getTimestamp(bytes32)": {
            "params": {
              "data": "The data to query."
            },
            "returns": {
              "_0": "The timestamp the data was timestamped with."
            }
          },
          "isAttestationValid(bytes32)": {
            "params": {
              "uid": "The UID of the attestation to retrieve."
            },
            "returns": {
              "_0": "Whether an attestation exists."
            }
          },
          "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": {
            "params": {
              "multiRequests": "The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."
            },
            "returns": {
              "_0": "The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"
            }
          },
          "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            "params": {
              "multiDelegatedRequests": "The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."
            },
            "returns": {
              "_0": "The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"
            }
          },
          "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
            "params": {
              "multiRequests": "The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"
            }
          },
          "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            "params": {
              "multiDelegatedRequests": "The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"
            }
          },
          "multiRevokeOffchain(bytes32[])": {
            "params": {
              "data": "The data to timestamp."
            },
            "returns": {
              "_0": "The timestamp the data was revoked with."
            }
          },
          "multiTimestamp(bytes32[])": {
            "params": {
              "data": "The data to timestamp."
            },
            "returns": {
              "_0": "The timestamp the data was timestamped with."
            }
          },
          "revoke((bytes32,(bytes32,uint256)))": {
            "params": {
              "request": "The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"
            }
          },
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            "params": {
              "delegatedRequest": "The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"
            }
          },
          "revokeOffchain(bytes32)": {
            "params": {
              "data": "The data to timestamp."
            },
            "returns": {
              "_0": "The timestamp the data was revoked with."
            }
          },
          "timestamp(bytes32)": {
            "params": {
              "data": "The data to timestamp."
            },
            "returns": {
              "_0": "The timestamp the data was timestamped with."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": {
            "notice": "Attests to a specific schema."
          },
          "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            "notice": "Attests to a specific schema via the provided ECDSA signature."
          },
          "getAttestation(bytes32)": {
            "notice": "Returns an existing attestation by UID."
          },
          "getRevokeOffchain(address,bytes32)": {
            "notice": "Returns the timestamp that the specified data was timestamped with."
          },
          "getSchemaRegistry()": {
            "notice": "Returns the address of the global schema registry."
          },
          "getTimestamp(bytes32)": {
            "notice": "Returns the timestamp that the specified data was timestamped with."
          },
          "isAttestationValid(bytes32)": {
            "notice": "Checks whether an attestation exists."
          },
          "multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])": {
            "notice": "Attests to multiple schemas."
          },
          "multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            "notice": "Attests to multiple schemas using via provided ECDSA signatures."
          },
          "multiRevoke((bytes32,(bytes32,uint256)[])[])": {
            "notice": "Revokes existing attestations to multiple schemas."
          },
          "multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])": {
            "notice": "Revokes existing attestations to multiple schemas via provided ECDSA signatures."
          },
          "multiRevokeOffchain(bytes32[])": {
            "notice": "Revokes the specified multiple bytes32 data."
          },
          "multiTimestamp(bytes32[])": {
            "notice": "Timestamps the specified multiple bytes32 data."
          },
          "revoke((bytes32,(bytes32,uint256)))": {
            "notice": "Revokes an existing attestation to a specific schema."
          },
          "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))": {
            "notice": "Revokes an existing attestation to a specific schema via the provided ECDSA signature."
          },
          "revokeOffchain(bytes32)": {
            "notice": "Revokes the specified bytes32 data."
          },
          "timestamp(bytes32)": {
            "notice": "Timestamps the specified bytes32 data."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/eas-contracts/contracts/IEAS.sol": "IEAS"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 2
};

// src/utils.ts
var isWebSocketTransport = (viemClient) => {
  const transport = viemClient.transport;
  return transport.type === "webSocket" || // Additional check for subscription capabilities
  typeof transport === "object" && transport !== null && "subscribe" in transport;
};
var getOptimalPollingInterval = (viemClient, defaultInterval = 1e3) => {
  return isWebSocketTransport(viemClient) ? void 0 : defaultInterval;
};
var getAttestation = async (viemClient, uid, addresses) => {
  const easAddress = addresses?.eas ?? contractAddresses[viemClient.chain.name]?.eas;
  if (!easAddress) {
    throw new Error(`No EAS address found for chain ${viemClient.chain.name}`);
  }
  const attestation = await viemClient.readContract({
    address: easAddress,
    abi: abi29.abi,
    functionName: "getAttestation",
    args: [uid]
  });
  return attestation;
};
var getAttestedEventFromTxHash = async (client, hash) => {
  let tx;
  try {
    tx = await client.waitForTransactionReceipt({ hash });
  } catch (error) {
    throw new Error(`Failed to get transaction receipt for ${hash}: ${error}`);
  }
  const events = (0, import_viem2.parseEventLogs)({
    abi: abi29.abi,
    eventName: "Attested",
    logs: tx.logs
  });
  if (events.length === 0 || !events[0]) {
    throw new Error(`No Attested event found in transaction ${hash}`);
  }
  return events[0].args;
};
var flattenTokenBundle = (bundle) => ({
  erc20Tokens: bundle.erc20s.map((x) => x.address),
  erc20Amounts: bundle.erc20s.map((x) => x.value),
  erc721Tokens: bundle.erc721s.map((x) => x.address),
  erc721TokenIds: bundle.erc721s.map((x) => x.id),
  erc1155Tokens: bundle.erc1155s.map((x) => x.address),
  erc1155TokenIds: bundle.erc1155s.map((x) => x.id),
  erc1155Amounts: bundle.erc1155s.map((x) => x.value)
});

// src/clients/generalArbiters.ts
var intrinsicsArbiter2DecodeDemandFunction = (0, import_viem3.getAbiItem)({
  abi: abi25.abi,
  name: "decodeDemandData"
});
var trustedPartyArbiterDecodeDemandFunction = (0, import_viem3.getAbiItem)({
  abi: abi28.abi,
  name: "decodeDemandData"
});
var specificAttestationArbiterDecodeDemandFunction = (0, import_viem3.getAbiItem)({
  abi: abi26.abi,
  name: "decodeDemandData"
});
var trustedOracleArbiterDecodeDemandFunction = (0, import_viem3.getAbiItem)({
  abi: abi27.abi,
  name: "decodeDemandData"
});
var intrinsicsArbiter2DemandDataType = intrinsicsArbiter2DecodeDemandFunction.outputs[0];
var trustedPartyArbiterDemandDataType = trustedPartyArbiterDecodeDemandFunction.outputs[0];
var specificAttestationArbiterDemandDataType = specificAttestationArbiterDecodeDemandFunction.outputs[0];
var trustedOracleArbiterDemandDataType = trustedOracleArbiterDecodeDemandFunction.outputs[0];
var makeGeneralArbitersClient = (viemClient, addresses) => {
  const arbitrationMadeEvent = (0, import_viem3.parseAbiItem)(
    "event ArbitrationMade(bytes32 indexed obligation, address indexed oracle, bool decision)"
  );
  const arbitrationRequestedEvent = (0, import_viem3.parseAbiItem)(
    "event ArbitrationRequested(bytes32 indexed obligation, address indexed oracle)"
  );
  return {
    /**
     * Encodes IntrinsicsArbiter2.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 schema}
     * @returns abi encoded bytes
     */
    encodeIntrinsics2Demand: (demand) => {
      return (0, import_viem3.encodeAbiParameters)([intrinsicsArbiter2DemandDataType], [demand]);
    },
    /**
     * Decodes IntrinsicsArbiter2.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeIntrinsics2Demand: (demandData) => {
      return (0, import_viem3.decodeAbiParameters)([intrinsicsArbiter2DemandDataType], demandData)[0];
    },
    /**
     * Encodes TrustedPartyArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address baseArbiter, bytes baseDemand, address creator}
     * @returns abi encoded bytes
     */
    encodeTrustedPartyDemand: (demand) => {
      return (0, import_viem3.encodeAbiParameters)([trustedPartyArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes TrustedPartyArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeTrustedPartyDemand: (demandData) => {
      return (0, import_viem3.decodeAbiParameters)([trustedPartyArbiterDemandDataType], demandData)[0];
    },
    /**
     * Encodes SpecificAttestationArbiter.DemandData to bytes.
     * @param demand - struct DemandData {bytes32 uid}
     * @returns abi encoded bytes
     */
    encodeSpecificAttestationDemand: (demand) => {
      return (0, import_viem3.encodeAbiParameters)([specificAttestationArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes SpecificAttestationArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeSpecificAttestationDemand: (demandData) => {
      return (0, import_viem3.decodeAbiParameters)([specificAttestationArbiterDemandDataType], demandData)[0];
    },
    /**
     * Encodes TrustedOracleArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address oracle, bytes data}
     * @returns abi encoded bytes
     */
    encodeTrustedOracleDemand: (demand) => {
      return (0, import_viem3.encodeAbiParameters)([trustedOracleArbiterDemandDataType], [demand]);
    },
    /**
     * Decodes TrustedOracleArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeTrustedOracleDemand: (demandData) => {
      return (0, import_viem3.decodeAbiParameters)([trustedOracleArbiterDemandDataType], demandData)[0];
    },
    /**
     * Arbitrate on the validality of an obligation fulfilling
     * a demand for TrustedOracleArbiter
     * @param obligation - bytes32 obligation
     * @param decision - bool decision
     * @returns transaction hash
     */
    arbitrateAsTrustedOracle: async (obligation, decision) => {
      const hash = await viemClient.writeContract({
        address: addresses.trustedOracleArbiter,
        abi: abi27.abi,
        functionName: "arbitrate",
        args: [obligation, decision]
      });
      return hash;
    },
    /**
     * Request arbitration on an obligation from TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle to request arbitration from
     * @returns transaction hash
     */
    requestArbitrationFromTrustedOracle: async (obligation, oracle) => {
      const hash = await viemClient.writeContract({
        address: addresses.trustedOracleArbiter,
        abi: abi27.abi,
        functionName: "requestArbitration",
        args: [obligation, oracle]
      });
      return hash;
    },
    /**
     * Check if an arbitration has already been made for a specific obligation by a specific oracle
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @returns the arbitration result if exists, undefined if not
     */
    checkExistingArbitration: async (obligation, oracle) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationMadeEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length > 0 && logs[0]) {
        return logs[0].args;
      }
      return void 0;
    },
    /**
     * Wait for an arbitration to be made on a TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns the event args
     */
    waitForTrustedOracleArbitration: async (obligation, oracle, pollingInterval) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationMadeEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0]) return logs[0].args;
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: addresses.trustedOracleArbiter,
          event: arbitrationMadeEvent,
          args: { obligation, oracle },
          pollingInterval: optimalInterval,
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve(logs2[0].args);
            unwatch();
          },
          fromBlock: 1n
        });
      });
    },
    /**
     * Wait for an arbitration request to be made on a TrustedOracleArbiter
     * @param obligation - bytes32 obligation uid
     * @param oracle - address of the oracle
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns the event args
     */
    waitForTrustedOracleArbitrationRequest: async (obligation, oracle, pollingInterval) => {
      const logs = await viemClient.getLogs({
        address: addresses.trustedOracleArbiter,
        event: arbitrationRequestedEvent,
        args: { obligation, oracle },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0]) return logs[0].args;
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: addresses.trustedOracleArbiter,
          event: arbitrationRequestedEvent,
          args: { obligation, oracle },
          pollingInterval: optimalInterval,
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve(logs2[0].args);
            unwatch();
          },
          fromBlock: 1n
        });
      });
    },
    /**
     * Listen for arbitration requests and only arbitrate on request
     * This function continuously listens for ArbitrationRequested events
     * and calls the provided arbitration handler for each request
     * @param oracle - address of the oracle (filter for requests to this oracle)
     * @param arbitrationHandler - function to handle arbitration requests
     * @param pollingInterval - polling interval in milliseconds (default: 1000)
     * @returns unwatch function to stop listening
     */
    listenForArbitrationRequestsOnly: (oracle, arbitrationHandler, pollingInterval) => {
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval ?? 1e3);
      return viemClient.watchEvent({
        address: addresses.trustedOracleArbiter,
        event: arbitrationRequestedEvent,
        args: { oracle },
        pollingInterval: optimalInterval,
        onLogs: async (logs) => {
          for (const log of logs) {
            const { obligation: requestedObligation, oracle: requestedOracle } = log.args;
            if (requestedObligation && requestedOracle) {
              try {
                const decision = await arbitrationHandler(requestedObligation, requestedOracle);
                await viemClient.writeContract({
                  address: addresses.trustedOracleArbiter,
                  abi: abi27.abi,
                  functionName: "arbitrate",
                  args: [requestedObligation, decision]
                });
              } catch (error) {
                console.error(`Failed to arbitrate for obligation ${requestedObligation}:`, error);
              }
            }
          }
        },
        fromBlock: 1n
      });
    }
  };
};

// src/clients/logicalArbiters.ts
var import_viem4 = require("viem");

// src/contracts/AllArbiter.ts
var abi30 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AllArbiter.DemandData",
          "components": [
            {
              "name": "arbiters",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "demands",
              "type": "bytes[]",
              "internalType": "bytes[]"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "MismatchedArrayLengths",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610884908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082e57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c857505050505060208401918083528451519051036107b9575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa9081156107a3575f91610769575b501561076057600101610635565b50505050505f90565b90506020813d821161079b575b8161078360209383610428565b8101031261016857518015158103610168575f610752565b3d9150610776565b6040513d5f823e3d90fd5b505050505050600190565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f483610471565b6108016040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea2646970667358221220750141bc3dc20676c11e8b7f8c5bc141974959adf1702348f4410425ca93220964736f6c634300081b0033",
    "sourceMap": "209:1250:110:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082e57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c857505050505060208401918083528451519051036107b9575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa9081156107a3575f91610769575b501561076057600101610635565b50505050505f90565b90506020813d821161079b575b8161078360209383610428565b8101031261016857518015158103610168575f610752565b3d9150610776565b6040513d5f823e3d90fd5b505050505050600190565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f483610471565b6108016040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea2646970667358221220750141bc3dc20676c11e8b7f8c5bc141974959adf1702348f4410425ca93220964736f6c634300081b0033",
    "sourceMap": "209:1250:110:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1250:110;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1250:110;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;-1:-1:-1;209:1250:110;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:1250:110;;;;;;;;-1:-1:-1;;209:1250:110;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1250:110;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1250:110;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1250:110;;;;;;-1:-1:-1;;209:1250:110;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:1250:110;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1250:110;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;418:878;;;209:1250;;621:32;;;;;;209:1250;621:32;209:1250;;;;;;621:32;;;209:1250;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;:::i;:::-;621:32;209:1250;;;-1:-1:-1;;;;;209:1250:110;;;;621:32;209:1250;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1250;;;;;;;;;;;;;;;621:32;209:1250;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;621:32;209:1250;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1250;;;;;;;;;;;;;;;621:32;209:1250;;;;;;;;;;;;;;621:32;209:1250;;;;;;667:16;;209:1250;;;667:49;663:98;;209:1250;821:3;796:16;;209:1250;;792:27;;;;;209:1250;;621:32;;-1:-1:-1;;;;;209:1250:110;1039:19;;209:1250;;1039:19;:::i;:::-;209:1250;;1129:18;:15;;;:18;:::i;:::-;;209:1250;;;;;;;;;;;1030:169;;209:1250;1030:169;;;209:1250;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:1250:110;;;;;;;:::i;:::-;;;;;;1030:169;;;;;;;;;209:1250;1030:169;;;821:3;1029:170;;840:419;;209:1250;;777:13;;840:419;1232:12;;;;;209:1250;1232:12;:::o;1030:169::-;;;621:32;1030:169;;;;;;;;;621:32;1030:169;;;:::i;:::-;;;209:1250;;;;;;;;;;;;1030:169;;;;;;-1:-1:-1;1030:169:110;;;209:1250;;;;;;;;;792:27;;;;;;;209:1250;418:878;:::o;663:98::-;737:24;;;209:1250;737:24;;209:1250;737:24;209:1250;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;;;;;;;621:32;209:1250;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;209:1250:110;;;621:32;209:1250;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1250:110;;;;;;;;621:32;209:1250;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"MismatchedArrayLengths","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address[]","name":"arbiters","type":"address[]"},{"internalType":"bytes[]","name":"demands","type":"bytes[]"}],"internalType":"struct AllArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/logical/AllArbiter.sol":"AllArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/logical/AllArbiter.sol":{"keccak256":"0x2ef93f84a7af5d0e8b0c130b9843745c206a89abdb32f3fecdc8249630581185","license":"UNLICENSED","urls":["bzz-raw://fe3e7288f2f558ca43e9951df3d4172546796152034c5ae1e8a252399ee2f531","dweb:/ipfs/QmQdE3K9i26CtWRGoWMhhrgtqqFkypDcppehkvEGHVrLpP"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "MismatchedArrayLengths"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct AllArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "arbiters",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "demands",
                  "type": "bytes[]"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/logical/AllArbiter.sol": "AllArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/logical/AllArbiter.sol": {
        "keccak256": "0x2ef93f84a7af5d0e8b0c130b9843745c206a89abdb32f3fecdc8249630581185",
        "urls": [
          "bzz-raw://fe3e7288f2f558ca43e9951df3d4172546796152034c5ae1e8a252399ee2f531",
          "dweb:/ipfs/QmQdE3K9i26CtWRGoWMhhrgtqqFkypDcppehkvEGHVrLpP"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 110
};

// src/contracts/AnyArbiter.ts
var abi31 = {
  "abi": [
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "counteroffer",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeDemandData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AnyArbiter.DemandData",
          "components": [
            {
              "name": "arbiters",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "demands",
              "type": "bytes[]",
              "internalType": "bytes[]"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "error",
      "name": "MismatchedArrayLengths",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601557610883908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082d57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c757505050505060208401918083528451519051036107b8575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa5f9181610772575b5061075c57506001905b01610635565b61076857600190610756565b5050505050600190565b9091506020813d82116107a6575b8161078d60209383610428565b810103126101685751801515810361016857905f61074c565b3d9150610780565b5050505050505f90565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f383610471565b6108006040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea26469706673582212203df3ac2addbcc0234290777f8530c895c8ff5b8e24d9424465468cac14e258f064736f6c634300081b0033",
    "sourceMap": "209:1372:111:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163838a68d914610180575063e6c9714d14610032575f80fd5b34610168576060366003190112610168576004356001600160401b038111610168576101406003198236030112610168576040519061014082018281106001600160401b0382111761016c57604052806004013582526024810135602083015261009e60448201610449565b60408301526100af60648201610449565b60608301526100c060848201610449565b608083015260a481013560a08301526100db60c4820161045d565b60c08301526100ec60e4820161045d565b60e0830152610104810135801515810361016857610100830152610124810135906001600160401b03821161016857600461012a923692010161048c565b6101208201526024356001600160401b0381116101685760209161015561015e92369060040161048c565b60443591610511565b6040519015158152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b34610168576020366003190112610168576004356001600160401b03811161016857366023820112156101685780600401356001600160401b038111610168578101906024820192368411610168576020816101dd60609361040d565b8281520152602081830312610168576024810135906001600160401b03821161016857019060409082900312610168576040519061021a8261040d565b60248101356001600160401b0381116101685760249082010183601f820112156101685780359061024a826104d2565b916102586040519384610428565b80835260208084019160051b8301019186831161016857602001905b8282106103d157505050825260448101356001600160401b0381116101685760249101019180601f840112156101685782356102af816104d2565b936102bd6040519586610428565b81855260208086019260051b820101918383116101685760208201905b8382106103a45785876020820190815260405191829160208352606083019151916040602085015282518091526020608085019301905f5b818110610382575050505190601f19838203016040840152815180825260208201916020808360051b8301019401925f915b8383106103515786860387f35b919395509193602080610370600193601f1986820301875289516103e9565b97019301930190928695949293610344565b82516001600160a01b0316855286955060209485019490920191600101610312565b81356001600160401b038111610168576020916103c68784809488010161048c565b8152019101906102da565b602080916103de8461045d565b815201910190610274565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604081019081106001600160401b0382111761016c57604052565b90601f801991011681019081106001600160401b0382111761016c57604052565b35906001600160401b038216820361016857565b35906001600160a01b038216820361016857565b6001600160401b03811161016c57601f01601f191660200190565b81601f82011215610168578035906104a382610471565b926104b16040519485610428565b8284526020838301011161016857815f926020809301838601378301015290565b6001600160401b03811161016c5760051b60200190565b80518210156104fd5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b919080518101926020840191602081860312610168576020810151906001600160401b0382116101685701936040908590031261016857604051936105558561040d565b60208101516001600160401b0381116101685760209082010183601f82011215610168578051610584816104d2565b916105926040519384610428565b81835260208084019260051b8201019086821161016857602001915b81831061082d57505050855260408101516001600160401b0381116101685760209101019180601f84011215610168578251926105ea846104d2565b936105f86040519586610428565b80855260208086019160051b830101918383116101685760208101915b8383106107c757505050505060208401918083528451519051036107b8575f5b845180518210156107ae5761073a906020906001600160a01b039061065b9085906104e9565b51166106688487516104e9565b5190604051808095819463e6c9714d60e01b83526060600484015289516064840152868a015160848401526001600160401b0360408b01511660a48401526001600160401b0360608b01511660c48401526001600160401b0360808b01511660e484015260a08a015161010484015260018060a01b0360c08b01511661012484015260018060a01b0360e08b0151166101448401526101008a015115156101648401526107286101208b01516101406101848601526101a48501906103e9565b838103600319016024850152906103e9565b8a604483015203915afa5f9181610772575b5061075c57506001905b01610635565b61076857600190610756565b5050505050600190565b9091506020813d82116107a6575b8161078d60209383610428565b810103126101685751801515810361016857905f61074c565b3d9150610780565b5050505050505f90565b632b477e7160e11b5f5260045ffd5b82516001600160401b03811161016857820185603f82011215610168576020810151916107f383610471565b6108006040519182610428565b8381526040838501018810610168575f602085819660408397018386015e83010152815201920191610615565b82516001600160a01b0381168103610168578152602092830192016105ae56fea26469706673582212203df3ac2addbcc0234290777f8530c895c8ff5b8e24d9424465468cac14e258f064736f6c634300081b0033",
    "sourceMap": "209:1372:111:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1372:111;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;209:1372:111;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;-1:-1:-1;209:1372:111;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:1372:111;;;;;;;;-1:-1:-1;;209:1372:111;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1372:111;;;;;;:::o;:::-;;;-1:-1:-1;;;;;209:1372:111;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1372:111;;;;;;-1:-1:-1;;209:1372:111;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;209:1372:111;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;209:1372:111;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;418:1000;;;209:1372;;621:32;;;;;;209:1372;621:32;209:1372;;;;;;621:32;;;209:1372;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;:::i;:::-;621:32;209:1372;;;-1:-1:-1;;;;;209:1372:111;;;;621:32;209:1372;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1372;;;;;;;;;;;;;;;621:32;209:1372;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;621:32;209:1372;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;621:32;209:1372;;;;;;;;;;;;;;;621:32;209:1372;;;;;;;;;;;;;;621:32;209:1372;;;;;;667:16;;209:1372;;;667:49;663:98;;209:1372;821:3;796:16;;209:1372;;792:27;;;;;209:1372;;621:32;;-1:-1:-1;;;;;209:1372:111;970:19;;209:1372;;970:19;:::i;:::-;209:1372;;1060:18;:15;;;:18;:::i;:::-;;209:1372;;;;;;;;;;;961:169;;209:1372;961:169;;;209:1372;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;209:1372:111;;;;;;;:::i;:::-;;;;;;961:169;;;;209:1372;;961:169;;;821:3;-1:-1:-1;840:540:111;;1357:8;209:1372;1357:8;777:13;209:1372;777:13;;840:540;1183:64;;209:1372;840:540;821:3;;1183:64;1217:11;;;;;209:1372;1217:11;:::o;961:169::-;;;;621:32;961:169;;;;;;;;;621:32;961:169;;;:::i;:::-;;;209:1372;;;;;;;;;;;;961:169;;;;;;;-1:-1:-1;961:169:111;;792:27;;;;;;;209:1372;418:1000;:::o;663:98::-;737:24;;;209:1372;737:24;;209:1372;737:24;209:1372;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;;;;;;;621:32;209:1372;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;209:1372:111;;;621:32;209:1372;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;209:1372:111;;;;;;;;621:32;209:1372;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeDemandData(bytes)": "838a68d9"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"MismatchedArrayLengths","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"counteroffer","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeDemandData","outputs":[{"components":[{"internalType":"address[]","name":"arbiters","type":"address[]"},{"internalType":"bytes[]","name":"demands","type":"bytes[]"}],"internalType":"struct AnyArbiter.DemandData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/arbiters/logical/AnyArbiter.sol":"AnyArbiter"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/arbiters/logical/AnyArbiter.sol":{"keccak256":"0x4d1cda9beb26d6f6e532421b351dd2929cee24af761b34a27eb145fa8d60e456","license":"UNLICENSED","urls":["bzz-raw://632293b7b484842d552bdf4f124fe80de97e592f27279a333744958a8c44a06c","dweb:/ipfs/QmSxaC94fDEoFyanjqLjHdQX5Z2FvigTEa7zyiykpmsM8Q"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "MismatchedArrayLengths"
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "counteroffer",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeDemandData",
          "outputs": [
            {
              "internalType": "struct AnyArbiter.DemandData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "arbiters",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "demands",
                  "type": "bytes[]"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/arbiters/logical/AnyArbiter.sol": "AnyArbiter"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/arbiters/logical/AnyArbiter.sol": {
        "keccak256": "0x4d1cda9beb26d6f6e532421b351dd2929cee24af761b34a27eb145fa8d60e456",
        "urls": [
          "bzz-raw://632293b7b484842d552bdf4f124fe80de97e592f27279a333744958a8c44a06c",
          "dweb:/ipfs/QmSxaC94fDEoFyanjqLjHdQX5Z2FvigTEa7zyiykpmsM8Q"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 111
};

// src/clients/logicalArbiters.ts
var anyArbiterDecodeDemandFunction = (0, import_viem4.getAbiItem)({
  abi: abi31.abi,
  name: "decodeDemandData"
});
var allArbiterDecodeDemandFunction = (0, import_viem4.getAbiItem)({
  abi: abi30.abi,
  name: "decodeDemandData"
});
var anyDemandDataType = anyArbiterDecodeDemandFunction.outputs[0];
var allDemandDataType = allArbiterDecodeDemandFunction.outputs[0];
var makeLogicalArbitersClient = (viemClient) => {
  return {
    /**
     * Encodes AnyArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address[] arbiters, bytes[] demands}
     * @returns abi encoded bytes
     */
    encodeAnyArbiterDemand: (demand) => {
      return (0, import_viem4.encodeAbiParameters)([anyDemandDataType], [demand]);
    },
    /**
     * Decodes AnyArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeAnyArbiterDemand: (demandData) => {
      return (0, import_viem4.decodeAbiParameters)([anyDemandDataType], demandData)[0];
    },
    /**
     * Encodes AllArbiter.DemandData to bytes.
     * @param demand - struct DemandData {address[] arbiters, bytes[] demands}
     * @returns abi encoded bytes
     */
    encodeAllArbiterDemand: (demand) => {
      return (0, import_viem4.encodeAbiParameters)([allDemandDataType], [demand]);
    },
    /**
     * Decodes AllArbiter.DemandData from bytes.
     * @param demandData - DemandData as abi encoded bytes
     * @returns the decoded DemandData object
     */
    decodeAllArbiterDemand: (demandData) => {
      return (0, import_viem4.decodeAbiParameters)([allDemandDataType], demandData)[0];
    }
  };
};

// src/clients/arbiters.ts
var makeArbitersClient = (viemClient, addresses) => {
  const generalArbiters = makeGeneralArbitersClient(viemClient, addresses);
  const logicalArbiters = makeLogicalArbitersClient(viemClient);
  const attestationPropertiesArbiters = makeAttestationPropertiesArbitersClient(viemClient);
  return {
    // General arbiters
    ...generalArbiters,
    // Logical arbiters
    ...logicalArbiters,
    // Attestation properties arbiters
    ...attestationPropertiesArbiters,
    // Backward compatibility aliases
    /**
     * @deprecated Use encodeAnyArbiterDemand instead
     */
    encodeMultiArbiterDemand: logicalArbiters.encodeAnyArbiterDemand,
    /**
     * @deprecated Use decodeAnyArbiterDemand instead
     */
    decodeMultiArbiterDemand: logicalArbiters.decodeAnyArbiterDemand
  };
};

// src/clients/attestation.ts
var import_viem5 = require("viem");

// src/contracts/AttestationBarterUtils.ts
var abi32 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        },
        {
          "name": "_escrowContract",
          "type": "address",
          "internalType": "contract AttestationEscrowObligation2"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "schema",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "revocable",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "attestAndCreateEscrow",
      "inputs": [
        {
          "name": "attestationRequest",
          "type": "tuple",
          "internalType": "struct AttestationRequest",
          "components": [
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "data",
              "type": "tuple",
              "internalType": "struct AttestationRequestData",
              "components": [
                {
                  "name": "recipient",
                  "type": "address",
                  "internalType": "address"
                },
                {
                  "name": "expirationTime",
                  "type": "uint64",
                  "internalType": "uint64"
                },
                {
                  "name": "revocable",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refUID",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "bytes",
                  "internalType": "bytes"
                },
                {
                  "name": "value",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            }
          ]
        },
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "attestationUid",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "escrowUid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "eas",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IEAS"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "escrowContract",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract AttestationEscrowObligation2"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [
        {
          "name": "schemaId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "registerSchema",
      "inputs": [
        {
          "name": "schema",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "resolver",
          "type": "address",
          "internalType": "contract SchemaResolver"
        },
        {
          "name": "revocable",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "schemaRegistry",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "schemaResolvers",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "SchemaRegistered",
      "inputs": [
        {
          "name": "schemaId",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "schema",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "resolver",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidResolver",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6101603461012557601f61109f38819003918201601f19168301916001600160401b03831184841017610129578084926060946040528339810103126101255780516001600160a01b0381169190828103610125576020820151916001600160a01b03831683036101255760400151926001600160a01b0384168403610125576001608052600360a0525f60c05215610116578060e052610100526101205261014052604051610f61908161013e82396080518161067b015260a051816106a6015260c051816106d1015260e05181610eec0152610100518181816104600152818161062d0152610a6d0152610120518181816101a2015281816107ed01526108e1015261014051818181610101015261052d0152f35b6341bc07ff60e11b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816313bbebfc14610ae2575080632ac17f32146109105780634441bbd9146108cc57806353d55cc01461075e57806354fd4d501461065c5780638150864d1461061857806388e5b2d9146105ef57806391db0b7e146105ef57806394ede4d014610300578063a2ea7c6e1461014e578063ce46e04614610134578063e42a96e7146100ec578063e49617e1146100cf5763e60c3505146100cf575f61000f565b6100d836610bfa565b506100e1610eea565b602060405160018152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610130575f3660031901126101305760206040515f8152f35b346101305760203660031901126101305760608060405161016e81610c2e565b5f81525f60208201525f604082015201526040516351753e3760e11b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156102f5575f9061021b575b606090610217604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b56565b0390f35b503d805f833e61022b8183610c49565b810190602081830312610130578051906001600160401b0382116101305701608081830312610130576040519061026182610c2e565b8051825260208101516001600160a01b0381168103610130576020830152604081015180151581036101305760408301526060810151906001600160401b03821161013057019180601f840112156101305782516102be81610c6a565b916102cc6040519384610c49565b81835260208286010111610130576020815f9282606097018386015e83010152828201526101d1565b6040513d5f823e3d90fd5b34610130576080366003190112610130576004356001600160401b03811161013057803603604060031982011261013057610339610b13565b6044356001600160401b03811161013057610358903690600401610b29565b9390606435916001600160401b038316809303610130576040519463f17325e760e01b8652602060048701528160040135602487015260248201359060c2190181121561013057604060448701520160048101356001600160a01b0381169081900361013057606486015260248101356001600160401b03811680910361013057608486015260448101358015158091036101305760a4860152606481013560c48601526084810135602219368390030181121561013057816004910101602081359101906001600160401b0381116101305780360382136101305760209260a46104528994859460c060e4870152610124860191610cbb565b91013561010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19384156102f5575f946105bb575b506040519060608201908282106001600160401b038311176105a75761051c966020956104d39360405260018060a01b031684523691610c85565b918382019283526040820190858252604051968794859463aadc8f6360e01b86526040600487015260018060a01b039051166044860152516060606486015260a4850190610b56565b91516084840152602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610574575b6040809350519182526020820152f35b506020823d60201161059f575b8161058e60209383610c49565b810103126101305760409151610564565b3d9150610581565b634e487b7160e01b5f52604160045260245ffd5b9093506020813d6020116105e7575b816105d760209383610c49565b8101031261013057519285610498565b3d91506105ca565b602061060e6105fd36610baa565b92610609929192610eea565b610d12565b6040519015158152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610130575f36600319011261013057610217602061074a600161069f7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81846106ca7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81806106f57f0000000000000000000000000000000000000000000000000000000000000000610d7d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c49565b604051918291602083526020830190610b56565b34610130576060366003190112610130576004356001600160401b0381116101305761078e903690600401610b29565b6024356001600160a01b03811691908290036101305760443591821515809303610130576020604051808095630c1af44f60e31b8252606060048301526107d960648301878a610cbb565b60248301869052604483019190915203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156102f5575f93610895575b5060209383927fe1de970d17b45f7e907a7d4a1b40501d574c2d5ac3426c2ac4acb06f43c1b35a92845f525f875260405f20816bffffffffffffffffffffffff60a01b825416179055610885604051938493604085526040850191610cbb565b90878301520390a2604051908152f35b909192506020813d6020116108c4575b816108b260209383610c49565b81010312610130575191906020610825565b3d91506108a5565b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101305760c036600319011261013057610929610b13565b604435906001600160401b038216809203610130576064358015158091036101305760a4356001600160401b0381116101305761096a903690600401610b29565b90916040519460c08601948686106001600160401b038711176105a7576109b19560405260018060a01b031686526020860152604085015260843560608501523691610c85565b60808201525f60a082015260405160408101908082106001600160401b038311176105a75760209160405260043581528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610a5f608083015160c060e4860152610124850190610b56565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610aaf575b602090604051908152f35b506020813d602011610ada575b81610ac960209383610c49565b810103126101305760209051610aa4565b3d9150610abc565b34610130576020366003190112610130576004355f90815260208181526040909120546001600160a01b0316825290f35b602435906001600160a01b038216820361013057565b9181601f84011215610130578235916001600160401b038311610130576020838186019501011161013057565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610130578235916001600160401b038311610130576020808501948460051b01011161013057565b6040600319820112610130576004356001600160401b0381116101305781610bd491600401610b7a565b92909291602435906001600160401b03821161013057610bf691600401610b7a565b9091565b602060031982011261013057600435906001600160401b038211610130576101409082900360031901126101305760040190565b608081019081106001600160401b038211176105a757604052565b90601f801991011681019081106001600160401b038211176105a757604052565b6001600160401b0381116105a757601f01601f191660200190565b929192610c9182610c6a565b91610c9f6040519384610c49565b829481845281830111610130578281602093845f960137010152565b908060209392818452848401375f828201840152601f01601f1916010190565b9190811015610cfe5760051b8101359061013e1981360301821215610130570190565b634e487b7160e01b5f52603260045260245ffd5b9291828203610d6e575f90345b838310610d3157505050505050600190565b84831015610cfe578260051b820135818111610d5f57600191610d5585878a610cdb565b5003920191610d1f565b63044044a560e21b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ec7575b806d04ee2d6d415b85acef8100000000600a921015610eac575b662386f26fc10000811015610e98575b6305f5e100811015610e87575b612710811015610e78575b6064811015610e6a575b1015610e5f575b600a60216001840193610e0485610c6a565b94610e126040519687610c49565b808652610e21601f1991610c6a565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e5a57600a9091610e2c565b505090565b600190910190610df2565b606460029104930192610deb565b61271060049104930192610de1565b6305f5e10060089104930192610dd6565b662386f26fc1000060109104930192610dc9565b6d04ee2d6d415b85acef810000000060209104930192610db9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610d9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f1c57565b634ca8886760e01b5f5260045ffdfea264697066735822122077445ee32b80cf8475902d8a5e48f3911e7766fe0128002e9ef81b7fade9d6f464736f6c634300081b0033",
    "sourceMap": "422:3049:134:-:0;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;685:1:9;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;790:10;;;1024::134;;1044:32;;1086;;422:3049;;;;;;;;759:14:6;422:3049:134;;;;;783:14:6;422:3049:134;;;;;807:14:6;422:3049:134;;;;;790:10:9;422:3049:134;;;;;1024:10;422:3049;;;;;;;;;;;;;;;1044:32;422:3049;;;;;;;;;;;;;;;1086:32;422:3049;;;;;;;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;422:3049:134;-1:-1:-1;422:3049:134;;;;;;-1:-1:-1;422:3049:134;;;;;-1:-1:-1;422:3049:134",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816313bbebfc14610ae2575080632ac17f32146109105780634441bbd9146108cc57806353d55cc01461075e57806354fd4d501461065c5780638150864d1461061857806388e5b2d9146105ef57806391db0b7e146105ef57806394ede4d014610300578063a2ea7c6e1461014e578063ce46e04614610134578063e42a96e7146100ec578063e49617e1146100cf5763e60c3505146100cf575f61000f565b6100d836610bfa565b506100e1610eea565b602060405160018152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b34610130575f3660031901126101305760206040515f8152f35b346101305760203660031901126101305760608060405161016e81610c2e565b5f81525f60208201525f604082015201526040516351753e3760e11b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156102f5575f9061021b575b606090610217604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b56565b0390f35b503d805f833e61022b8183610c49565b810190602081830312610130578051906001600160401b0382116101305701608081830312610130576040519061026182610c2e565b8051825260208101516001600160a01b0381168103610130576020830152604081015180151581036101305760408301526060810151906001600160401b03821161013057019180601f840112156101305782516102be81610c6a565b916102cc6040519384610c49565b81835260208286010111610130576020815f9282606097018386015e83010152828201526101d1565b6040513d5f823e3d90fd5b34610130576080366003190112610130576004356001600160401b03811161013057803603604060031982011261013057610339610b13565b6044356001600160401b03811161013057610358903690600401610b29565b9390606435916001600160401b038316809303610130576040519463f17325e760e01b8652602060048701528160040135602487015260248201359060c2190181121561013057604060448701520160048101356001600160a01b0381169081900361013057606486015260248101356001600160401b03811680910361013057608486015260448101358015158091036101305760a4860152606481013560c48601526084810135602219368390030181121561013057816004910101602081359101906001600160401b0381116101305780360382136101305760209260a46104528994859460c060e4870152610124860191610cbb565b91013561010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19384156102f5575f946105bb575b506040519060608201908282106001600160401b038311176105a75761051c966020956104d39360405260018060a01b031684523691610c85565b918382019283526040820190858252604051968794859463aadc8f6360e01b86526040600487015260018060a01b039051166044860152516060606486015260a4850190610b56565b91516084840152602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610574575b6040809350519182526020820152f35b506020823d60201161059f575b8161058e60209383610c49565b810103126101305760409151610564565b3d9150610581565b634e487b7160e01b5f52604160045260245ffd5b9093506020813d6020116105e7575b816105d760209383610c49565b8101031261013057519285610498565b3d91506105ca565b602061060e6105fd36610baa565b92610609929192610eea565b610d12565b6040519015158152f35b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610130575f36600319011261013057610217602061074a600161069f7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81846106ca7f0000000000000000000000000000000000000000000000000000000000000000610d7d565b81806106f57f0000000000000000000000000000000000000000000000000000000000000000610d7d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c49565b604051918291602083526020830190610b56565b34610130576060366003190112610130576004356001600160401b0381116101305761078e903690600401610b29565b6024356001600160a01b03811691908290036101305760443591821515809303610130576020604051808095630c1af44f60e31b8252606060048301526107d960648301878a610cbb565b60248301869052604483019190915203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156102f5575f93610895575b5060209383927fe1de970d17b45f7e907a7d4a1b40501d574c2d5ac3426c2ac4acb06f43c1b35a92845f525f875260405f20816bffffffffffffffffffffffff60a01b825416179055610885604051938493604085526040850191610cbb565b90878301520390a2604051908152f35b909192506020813d6020116108c4575b816108b260209383610c49565b81010312610130575191906020610825565b3d91506108a5565b34610130575f366003190112610130576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101305760c036600319011261013057610929610b13565b604435906001600160401b038216809203610130576064358015158091036101305760a4356001600160401b0381116101305761096a903690600401610b29565b90916040519460c08601948686106001600160401b038711176105a7576109b19560405260018060a01b031686526020860152604085015260843560608501523691610c85565b60808201525f60a082015260405160408101908082106001600160401b038311176105a75760209160405260043581528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610a5f608083015160c060e4860152610124850190610b56565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f5575f90610aaf575b602090604051908152f35b506020813d602011610ada575b81610ac960209383610c49565b810103126101305760209051610aa4565b3d9150610abc565b34610130576020366003190112610130576004355f90815260208181526040909120546001600160a01b0316825290f35b602435906001600160a01b038216820361013057565b9181601f84011215610130578235916001600160401b038311610130576020838186019501011161013057565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610130578235916001600160401b038311610130576020808501948460051b01011161013057565b6040600319820112610130576004356001600160401b0381116101305781610bd491600401610b7a565b92909291602435906001600160401b03821161013057610bf691600401610b7a565b9091565b602060031982011261013057600435906001600160401b038211610130576101409082900360031901126101305760040190565b608081019081106001600160401b038211176105a757604052565b90601f801991011681019081106001600160401b038211176105a757604052565b6001600160401b0381116105a757601f01601f191660200190565b929192610c9182610c6a565b91610c9f6040519384610c49565b829481845281830111610130578281602093845f960137010152565b908060209392818452848401375f828201840152601f01601f1916010190565b9190811015610cfe5760051b8101359061013e1981360301821215610130570190565b634e487b7160e01b5f52603260045260245ffd5b9291828203610d6e575f90345b838310610d3157505050505050600190565b84831015610cfe578260051b820135818111610d5f57600191610d5585878a610cdb565b5003920191610d1f565b63044044a560e21b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ec7575b806d04ee2d6d415b85acef8100000000600a921015610eac575b662386f26fc10000811015610e98575b6305f5e100811015610e87575b612710811015610e78575b6064811015610e6a575b1015610e5f575b600a60216001840193610e0485610c6a565b94610e126040519687610c49565b808652610e21601f1991610c6a565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e5a57600a9091610e2c565b505090565b600190910190610df2565b606460029104930192610deb565b61271060049104930192610de1565b6305f5e10060089104930192610dd6565b662386f26fc1000060109104930192610dc9565b6d04ee2d6d415b85acef810000000060209104930192610db9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610d9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f1c57565b634ca8886760e01b5f5260045ffdfea264697066735822122077445ee32b80cf8475902d8a5e48f3911e7766fe0128002e9ef81b7fade9d6f464736f6c634300081b0033",
    "sourceMap": "422:3049:134:-:0;;;;;;;;;;-1:-1:-1;422:3049:134;;;;;;;;;1183:12:9;;;1054:5;1183:12;422:3049:134;1054:5:9;1183:12;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;881:58:9;;:::i;:::-;422:3049:134;;;3274:4;422:3049;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;562:60;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3428:34;;422:3049;;;3428:34;;422:3049;;;3428:34;422:3049;;;;;;3428:14;422:3049;3428:34;;;;;;422:3049;3428:34;;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;3428:34;;;;422:3049;3428:34;;;;;;:::i;:::-;;;422:3049;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3428:34;;;422:3049;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;2521:30;;422:3049;;2521:30;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2521:30;422:3049;;2521:3;-1:-1:-1;;;;;422:3049:134;2521:30;;;;;;;422:3049;2521:30;;;422:3049;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2683:173;;;;422:3049;;;;2683:173;;422:3049;;;;;;;;;;;;;;2879:51;;422:3049;;2879:51;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;2879:51;422:3049;-1:-1:-1;2879:14:134;-1:-1:-1;;;;;422:3049:134;2879:51;;;;;;422:3049;2879:51;;;422:3049;;;;;;;;;;;;;;2879:51;;422:3049;2879:51;;422:3049;2879:51;;;;;;422:3049;2879:51;;;:::i;:::-;;;422:3049;;;;;;;2879:51;;;;;-1:-1:-1;2879:51:134;;422:3049;;;;;;;;;;;;2521:30;;;;422:3049;2521:30;;422:3049;2521:30;;;;;;422:3049;2521:30;;;:::i;:::-;;;422:3049;;;;;2521:30;;;;;;;-1:-1:-1;2521:30:134;;422:3049;;1442:1461:9;422:3049:134;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;:::-;422:3049:134;;;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;478:25;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;1055:104:6;;422:3049:134;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;422:3049:134;;;;;;;;;;;;1055:104:6;;;422:3049:134;;;;-1:-1:-1;;;422:3049:134;;;;;;;;;;;;;;;;;-1:-1:-1;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;422:3049:134;;;;;1055:104:6;422:3049:134;;1055:104:6;422:3049:134;;;;:::i;:::-;;;;;;-1:-1:-1;;422:3049:134;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1306:52;;422:3049;;1306:52;;422:3049;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1306:52;422:3049;-1:-1:-1;1306:14:134;-1:-1:-1;;;;;422:3049:134;1306:52;;;;;;;422:3049;1306:52;;;422:3049;;;;;;1428:53;422:3049;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;1428:53;;;422:3049;;;;;;1306:52;;;;;422:3049;1306:52;;422:3049;1306:52;;;;;;422:3049;1306:52;;;:::i;:::-;;;422:3049;;;;;;1306:52;422:3049;1306:52;;;;;-1:-1:-1;1306:52:134;;422:3049;;;;;;-1:-1:-1;;422:3049:134;;;;;;509:47;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;1867:304;;422:3049;;1867:304;;422:3049;;;;1867:304;;422:3049;;;;:::i;:::-;;1867:304;;422:3049;;;1867:304;;422:3049;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;1784:406;;;422:3049;;;;;;;;;;;;1756:448;;;422:3049;1756:448;;422:3049;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1756:448;422:3049;;1756:3;-1:-1:-1;;;;;422:3049:134;1756:448;;;;;;422:3049;1756:448;;;422:3049;;;;;;;;;1756:448;;422:3049;1756:448;;422:3049;1756:448;;;;;;422:3049;1756:448;;;:::i;:::-;;;422:3049;;;;;;;1756:448;;;;;-1:-1:-1;1756:448:134;;422:3049;;;;;;-1:-1:-1;;422:3049:134;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;422:3049:134;;;;;;;;-1:-1:-1;;422:3049:134;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;422:3049:134;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;:::i;:::-;;;:::o;:::-;;-1:-1:-1;;422:3049:134;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;;;-1:-1:-1;;422:3049:134;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;:::o;:::-;;;1055:104:6;;422:3049:134;;;;;;;;-1:-1:-1;;;;;422:3049:134;;;;;;;:::o;:::-;-1:-1:-1;;;;;422:3049:134;;;;;;-1:-1:-1;;422:3049:134;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;422:3049:134;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;422:3049:134;;;;;;;;-1:-1:-1;;422:3049:134;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;3133:1460:9;;;3340:23;;;3336:76;;3881:1;;3844:9;3884:10;;;;;;4575:11;;;;;;1489:1:0;3133:1460:9;:::o;3896:19::-;422:3049:134;;;;;;;;;;;;4064:22:9;;;4060:87;;1489:1:0;4284:15:9;;;;;;:::i;:::-;;422:3049:134;3896:19:9;422:3049:134;3869:13:9;;;4060:87;4113:19;;;3881:1;4113:19;;3881:1;4113:19;3336:76;3386:15;;;;;;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;422:3049:134;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;422:3049:134;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;422:3049:134;;-1:-1:-1;;;1033:111:50;;;;422:3049:134;1033:111:50;422:3049:134;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;422:3049:134;;;;26127:66:57;;26014:100;26027:7;26098:1;422:3049:134;;;;26014:100:57;;;25901;25914:7;25985:1;422:3049:134;;;;25901:100:57;;;25788;25801:7;25872:1;422:3049:134;;;;25788:100:57;;;25672:103;25685:8;25758:2;422:3049:134;;;;25672:103:57;;;25556;25569:8;25642:2;422:3049:134;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;422:3049:134;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;422:3049:134;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 1659,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 1702,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 1745,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 3820,
          "length": 32
        }
      ],
      "66879": [
        {
          "start": 1120,
          "length": 32
        },
        {
          "start": 1581,
          "length": 32
        },
        {
          "start": 2669,
          "length": 32
        }
      ],
      "66882": [
        {
          "start": 418,
          "length": 32
        },
        {
          "start": 2029,
          "length": 32
        },
        {
          "start": 2273,
          "length": 32
        }
      ],
      "66885": [
        {
          "start": 257,
          "length": 32
        },
        {
          "start": 1325,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "attest(bytes32,address,uint64,bool,bytes32,bytes)": "2ac17f32",
    "attestAndCreateEscrow((bytes32,(address,uint64,bool,bytes32,bytes,uint256)),address,bytes,uint64)": "94ede4d0",
    "eas()": "8150864d",
    "escrowContract()": "e42a96e7",
    "getSchema(bytes32)": "a2ea7c6e",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "registerSchema(string,address,bool)": "53d55cc0",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "schemaRegistry()": "4441bbd9",
    "schemaResolvers(bytes32)": "13bbebfc",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"},{"internalType":"contract AttestationEscrowObligation2","name":"_escrowContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidResolver","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"schemaId","type":"bytes32"},{"indexed":false,"internalType":"string","name":"schema","type":"string"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"SchemaRegistered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestationRequest","type":"tuple"},{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"attestAndCreateEscrow","outputs":[{"internalType":"bytes32","name":"attestationUid","type":"bytes32"},{"internalType":"bytes32","name":"escrowUid","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eas","outputs":[{"internalType":"contract IEAS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"escrowContract","outputs":[{"internalType":"contract AttestationEscrowObligation2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"schemaId","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract SchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"registerSchema","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"schemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"schemaResolvers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/utils/AttestationBarterUtils.sol":"AttestationBarterUtils"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation2.sol":{"keccak256":"0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252","license":"UNLICENSED","urls":["bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4","dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"]},"src/utils/AttestationBarterUtils.sol":{"keccak256":"0x83f6309f9bbede6435a4db88d5872946b74776f2259f07eae32841e630ad5548","license":"UNLICENSED","urls":["bzz-raw://385d1e6a80aa317f63a3ca95fd4f3f0ed48ef34eb7a4cff252b9addaed56853a","dweb:/ipfs/QmSzyADfEX1SiuGyua2CUXw1rQjDn5TsnXBBdwtRQksk9C"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            },
            {
              "internalType": "contract AttestationEscrowObligation2",
              "name": "_escrowContract",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidResolver"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "schemaId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "schema",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SchemaRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationRequest",
              "name": "attestationRequest",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "struct AttestationRequestData",
                  "name": "data",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "expirationTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bool",
                      "name": "revocable",
                      "type": "bool"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "refUID",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attestAndCreateEscrow",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "attestationUid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "escrowUid",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "eas",
          "outputs": [
            {
              "internalType": "contract IEAS",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "escrowContract",
          "outputs": [
            {
              "internalType": "contract AttestationEscrowObligation2",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "schemaId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "schema",
              "type": "string"
            },
            {
              "internalType": "contract SchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerSchema",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "schemaRegistry",
          "outputs": [
            {
              "internalType": "contract ISchemaRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "schemaResolvers",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/utils/AttestationBarterUtils.sol": "AttestationBarterUtils"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation2.sol": {
        "keccak256": "0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252",
        "urls": [
          "bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4",
          "dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/AttestationBarterUtils.sol": {
        "keccak256": "0x83f6309f9bbede6435a4db88d5872946b74776f2259f07eae32841e630ad5548",
        "urls": [
          "bzz-raw://385d1e6a80aa317f63a3ca95fd4f3f0ed48ef34eb7a4cff252b9addaed56853a",
          "dweb:/ipfs/QmSzyADfEX1SiuGyua2CUXw1rQjDn5TsnXBBdwtRQksk9C"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 134
};

// src/contracts/AttestationEscrowObligation.ts
var abi33 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestation",
              "type": "tuple",
              "internalType": "struct AttestationRequest",
              "components": [
                {
                  "name": "schema",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "tuple",
                  "internalType": "struct AttestationRequestData",
                  "components": [
                    {
                      "name": "recipient",
                      "type": "address",
                      "internalType": "address"
                    },
                    {
                      "name": "expirationTime",
                      "type": "uint64",
                      "internalType": "uint64"
                    },
                    {
                      "name": "revocable",
                      "type": "bool",
                      "internalType": "bool"
                    },
                    {
                      "name": "refUID",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    },
                    {
                      "name": "data",
                      "type": "bytes",
                      "internalType": "bytes"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestation",
              "type": "tuple",
              "internalType": "struct AttestationRequest",
              "components": [
                {
                  "name": "schema",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "tuple",
                  "internalType": "struct AttestationRequestData",
                  "components": [
                    {
                      "name": "recipient",
                      "type": "address",
                      "internalType": "address"
                    },
                    {
                      "name": "expirationTime",
                      "type": "uint64",
                      "internalType": "uint64"
                    },
                    {
                      "name": "revocable",
                      "type": "bool",
                      "internalType": "bool"
                    },
                    {
                      "name": "refUID",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    },
                    {
                      "name": "data",
                      "type": "bytes",
                      "internalType": "bytes"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestation",
              "type": "tuple",
              "internalType": "struct AttestationRequest",
              "components": [
                {
                  "name": "schema",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "tuple",
                  "internalType": "struct AttestationRequestData",
                  "components": [
                    {
                      "name": "recipient",
                      "type": "address",
                      "internalType": "address"
                    },
                    {
                      "name": "expirationTime",
                      "type": "uint64",
                      "internalType": "uint64"
                    },
                    {
                      "name": "revocable",
                      "type": "bool",
                      "internalType": "bool"
                    },
                    {
                      "name": "refUID",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    },
                    {
                      "name": "data",
                      "type": "bytes",
                      "internalType": "bytes"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestation",
              "type": "tuple",
              "internalType": "struct AttestationRequest",
              "components": [
                {
                  "name": "schema",
                  "type": "bytes32",
                  "internalType": "bytes32"
                },
                {
                  "name": "data",
                  "type": "tuple",
                  "internalType": "struct AttestationRequestData",
                  "components": [
                    {
                      "name": "recipient",
                      "type": "address",
                      "internalType": "address"
                    },
                    {
                      "name": "expirationTime",
                      "type": "uint64",
                      "internalType": "uint64"
                    },
                    {
                      "name": "revocable",
                      "type": "bool",
                      "internalType": "bool"
                    },
                    {
                      "name": "refUID",
                      "type": "bytes32",
                      "internalType": "bytes32"
                    },
                    {
                      "name": "data",
                      "type": "bytes",
                      "internalType": "bytes"
                    },
                    {
                      "name": "value",
                      "type": "uint256",
                      "internalType": "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationCreationFailed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x610160806040523461028457604081611fdf803803809161002082856102be565b8339810103126102845780516001600160a01b038116918282036102845760200151916001600160a01b0383168084036102845760405160e081016001600160401b038111828210176102aa5760405260b1815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c207484527f75706c65286279746573333220736368656d612c207475706c6528616464726560408301527f737320726563697069656e742c2075696e7436342065787069726174696f6e5460608301527f696d652c20626f6f6c207265766f6361626c652c20627974657333322072656660808301527f5549442c20627974657320646174612c2075696e743235362076616c7565292060a0830152703230ba30949030ba3a32b9ba30ba34b7b760791b60c08301526001608052600360a0525f60c0521561029b576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af1908115610290575f9161025a575b5061014052604051611cfd90816102e2823960805181610a47015260a05181610a72015260c05181610a9d015260e05181611c14015261010051816108c9015261012051818181610558015281816107c5015281816112780152611a110152610140518181816105980152818161089701528181610a05015281816114580152818161184d01526119c60152f35b90506020813d602011610288575b81610275602093836102be565b8101031261028457515f6101cc565b5f80fd5b3d9150610268565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102aa5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610b1657806354fd4d5014610a285780635bf2f20d146109ee5780636b122fe0146108585780637d2c29311461078d5780638371ef591461072f57806388e5b2d9146106e2578063891d9ea81461070157806391db0b7e146106e25780639c13d80e1461065a578063b3b902d414610614578063c6ec507014610519578063c93844be1461039c578063cce1f561146102bd578063ce46e046146102a3578063e49617e114610288578063e60c350514610288578063e6c9714d146101685763f0ffa1850361000e5760a0366003190112610164576004356001600160401b03811161016457610127903690600401610d81565b61012f610d2d565b91610138610d57565b606435906001600160a01b03821682036101645760209461015c9460843594611955565b604051908152f35b5f80fd5b34610164576060366003190112610164576004356001600160401b03811161016457610140600319823603011261016457604051906101a682610c01565b80600401358252602481013560208301526101c360448201610d43565b60408301526101d460648201610d43565b60608301526101e560848201610d43565b608083015260a481013560a083015261020060c48201610d6d565b60c083015261021160e48201610d6d565b60e08301526102236101048201610e98565b610100830152610124810135906001600160401b03821161016457600461024d9236920101610c8f565b6101208201526024356001600160401b0381116101645760209161027861027e923690600401610c8f565b9061184b565b6040519015158152f35b602061027e61029636610e64565b61029e611c12565b611c53565b34610164575f3660031901126101645760206040515f8152f35b34610164576040366003190112610164576004356001600160401b038111610164576060600319823603011261016457602061034091610313610321610301610d2d565b926040519283916004018683016116b0565b03601f198101835282610c1d565b60405163f0ffa18560e01b8152938492839233918291600486016117aa565b03815f305af18015610391575f9061035e575b602090604051908152f35b506020813d602011610389575b8161037860209383610c1d565b810103126101645760209051610353565b3d915061036b565b6040513d5f823e3d90fd5b34610164576020366003190112610164576004356001600160401b038111610164576103cc903690600401610d81565b6103d46117ed565b50810190602081830312610164578035906001600160401b0382116101645701606081830312610164576040519061040b82610bb0565b61041481610d6d565b825260208101356001600160401b0381116101645783610435918301610c8f565b60208301526040810135906001600160401b0382116101645701604081840312610164576040519061046682610bcb565b803582526020810135906001600160401b03821161016457019260c084820312610164576040519061049782610be6565b6104a085610d6d565b82526104ae60208601610d43565b60208301526104bf60408601610e98565b6040830152606085013560608301526080850135946001600160401b038611610164576104f360a092610515978301610c8f565b6080840152013560a08201526020820152604082015260405191829182610e1d565b0390f35b34610164576020366003190112610164576105326117ed565b5061053b610ee8565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610391575f916105f2575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105e3576105d76101206105159201516020808251830101910161104f565b60405191829182610e1d565b635527981560e11b5f5260045ffd5b61060e91503d805f833e6106068183610c1d565b810190610f74565b81610590565b6060366003190112610164576004356001600160401b0381116101645761015c6106446020923690600401610d81565b61064c610d2d565b916044359233923392611955565b34610164576060366003190112610164576004356001600160401b03811161016457606060031982360301126101645760206106b4610697610d2d565b6106c26106a2610d57565b946040519384916004018683016116b0565b03601f198101845283610c1d565b610340604051948593849363f0ffa18560e01b85523391600486016117aa565b602061027e6106f036610cdd565b926106fc929192611c12565b6111aa565b346101645761051561071b61071536610b47565b9061124e565b604051918291602083526020830190610b5d565b34610164576020366003190112610164576004356001600160401b03811161016457610762610767913690600401610c8f565b611181565b604080516001600160a01b03909316835260208301819052829161051591830190610b5d565b34610164576020366003190112610164576004356107a9610ee8565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161083c575b5061080f57506301fb6dd160e01b5f5260045260245ffd5b606001516001600160401b0316421061082d57602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6108519192503d805f833e6106068183610c1d565b90836107f7565b34610164575f3660031901126101645760608060405161087781610b81565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610391575f9061093e575b606090610515604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b5d565b503d805f833e61094e8183610c1d565b810190602081830312610164578051906001600160401b0382116101645701608081830312610164576040519061098482610b81565b8051825260208101516001600160a01b03811681036101645760208301526109ae60408201610ea5565b60408301526060810151906001600160401b038211610164570182601f82011215610164576060928160206109e593519101610eb2565b828201526108f8565b34610164575f3660031901126101645760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610164575f36600319011261016457610515602061071b6001610a6b7f0000000000000000000000000000000000000000000000000000000000000000611aa5565b8184610a967f0000000000000000000000000000000000000000000000000000000000000000611aa5565b8180610ac17f0000000000000000000000000000000000000000000000000000000000000000611aa5565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c1d565b3461016457610b2761071536610b47565b602081519181808201938492010103126101645760209051604051908152f35b6040906003190112610164576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b9c57604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610b9c57604052565b604081019081106001600160401b03821117610b9c57604052565b60c081019081106001600160401b03821117610b9c57604052565b61014081019081106001600160401b03821117610b9c57604052565b90601f801991011681019081106001600160401b03821117610b9c57604052565b6001600160401b038111610b9c57601f01601f191660200190565b929192610c6582610c3e565b91610c736040519384610c1d565b829481845281830111610164578281602093845f960137010152565b9080601f8301121561016457816020610caa93359101610c59565b90565b9181601f84011215610164578235916001600160401b038311610164576020808501948460051b01011161016457565b6040600319820112610164576004356001600160401b0381116101645781610d0791600401610cad565b92909291602435906001600160401b03821161016457610d2991600401610cad565b9091565b602435906001600160401b038216820361016457565b35906001600160401b038216820361016457565b604435906001600160a01b038216820361016457565b35906001600160a01b038216820361016457565b9181601f84011215610164578235916001600160401b038311610164576020838186019501011161016457565b602090805183520151906040602082015260018060a01b0382511660408201526001600160401b036020830151166060820152604082015115156080820152606082015160a082015260e060a0610e14608085015160c080860152610100850190610b5d565b93015191015290565b90610caa916020815260018060a01b0382511660208201526040610e4f60208401516060838501526080840190610b5d565b920151906060601f1982850301910152610dae565b602060031982011261016457600435906001600160401b038211610164576101409082900360031901126101645760040190565b3590811515820361016457565b5190811515820361016457565b929192610ebe82610c3e565b91610ecc6040519384610c1d565b829481845281830111610164578281602093845f96015e010152565b60405190610ef582610c01565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361016457565b51906001600160a01b038216820361016457565b9080601f83011215610164578151610caa92602001610eb2565b602081830312610164578051906001600160401b0382116101645701610140818303126101645760405191610fa883610c01565b8151835260208201516020840152610fc260408301610f32565b6040840152610fd360608301610f32565b6060840152610fe460808301610f32565b608084015260a082015160a0840152610fff60c08301610f46565b60c084015261101060e08301610f46565b60e08401526110226101008301610ea5565b6101008401526101208201516001600160401b038111610164576110469201610f5a565b61012082015290565b602081830312610164578051906001600160401b038211610164570190606082820312610164576040519161108383610bb0565b61108c81610f46565b835260208101516001600160401b03811161016457826110ad918301610f5a565b60208401526040810151906001600160401b03821161016457019060408282031261016457604051916110df83610bcb565b805183526020810151906001600160401b03821161016457019060c082820312610164576040519161111083610be6565b61111981610f46565b835261112760208201610f32565b602084015261113860408201610ea5565b60408401526060810151606084015260808101516001600160401b0381116101645760a092611168918301610f5a565b6080840152015160a08201526020820152604082015290565b611194906020808251830101910161104f565b80516020909101516001600160a01b0390911691565b92909281840361123f575f91345b858410156112345781841015611220578360051b80860135908282116112115784013561013e1985360301811215610164576111f5908501611c53565b1561120657600191039301926111b8565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611258610ee8565b50611261610ee8565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611643575b506112c957856301fb6dd160e01b5f5260045260245ffd5b9491929394906040516328c44a9960e21b81528660048201525f81602481855afa5f9181611627575b5061130a57866301fb6dd160e01b5f5260045260245ffd5b9591929394959261131a81611c6c565b15611618576113f960206101208084019360c08861140b61133b8851611181565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b5d565b84810360031901602486015290610b5d565b604483019190915203916001600160a01b03165afa908115610391575f916115de575b50156115cf5760405161144081610bcb565b8581525f60208201526040519061145682610bcb565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152833b1561016457604051634692626760e01b81529151600483015251805160248301526020015160448201525f8160648183875af190816115ba575b506114d55763614cf93960e01b86526004859052602486fd5b61151a869260406114f5602094989697985185808251830101910161104f565b015160405194858094819363f17325e760e01b83528760048401526024830190610dae565b03925af1859181611586575b5061153a57638d7100d760e01b8552600485fd5b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c090949360405195602087015260208652611576604087610c1d565b516001600160a01b03169380a490565b9091506020813d6020116115b2575b816115a260209383610c1d565b810103126101645751905f611526565b3d9150611595565b6115c79197505f90610c1d565b5f955f6114bc565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611610575b816115f960209383610c1d565b810103126101645761160a90610ea5565b5f61142e565b3d91506115ec565b63629cd40b60e11b5f5260045ffd5b61163c9192503d805f833e6106068183610c1d565b905f6112f2565b6116589192503d805f833e6106068183610c1d565b905f6112b1565b9035601e19823603018112156101645701602081359101916001600160401b03821161016457813603831361016457565b908060209392818452848401375f828201840152601f01601f1916010190565b602081526001600160a01b036116c583610d6d565b1660208201526116ec6116db602084018461165f565b606060408501526080840191611690565b916040810135603e19823603018112156101645701906060601f198285030191015280358252602081013560be1982360301811215610164576040602084015201906001600160a01b0361173f83610d6d565b1660408201526001600160401b0361175960208401610d43565b16606082015261176b60408301610e98565b15156080820152606082013560a082015260e060a06117a1611790608086018661165f565b60c080870152610100860191611690565b93013591015290565b90935f936001600160401b036117cc608095989760a0865260a0860190610b5d565b971660208401526001600160a01b0390811660408401521660608201520152565b604051906117fa82610bb0565b815f815260606020820152604080519161181383610bcb565b5f8352815161182181610be6565b5f81525f60208201525f838201525f6060820152606060808201525f60a082015260208401520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119465761187f81611c6c565b156119405761189f6101206118af9201516020808251830101910161104f565b916020808251830101910161104f565b60408201516040516118d1816103136020820194602086526040830190610dae565b51902060408201516040516118f6816103136020820194602086526040830190610dae565b519020149182611927575b8261190b57505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611901565b50505f90565b635f9bd90760e11b5f5260045ffd5b6020935061197990611a0c979692959395611971368284610c59565b503691610c59565b906001600160401b036040519361198f85610be6565b60018060a01b031695868552168484015260016040840152606083015260808201525f60a0820152604051906119c482610bcb565b7f00000000000000000000000000000000000000000000000000000000000000008252828201526040518095819263f17325e760e01b83528460048401526024830190610dae565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610391575f93611a71575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011611a9d575b81611a8d60209383610c1d565b810103126101645751915f611a49565b3d9150611a80565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611bef575b806d04ee2d6d415b85acef8100000000600a921015611bd4575b662386f26fc10000811015611bc0575b6305f5e100811015611baf575b612710811015611ba0575b6064811015611b92575b1015611b87575b600a60216001840193611b2c85610c3e565b94611b3a6040519687610c1d565b808652611b49601f1991610c3e565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b8257600a9091611b54565b505090565b600190910190611b1a565b606460029104930192611b13565b61271060049104930192611b09565b6305f5e10060089104930192611afe565b662386f26fc1000060109104930192611af1565b6d04ee2d6d415b85acef810000000060209104930192611ae1565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611ac7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c4457565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361016457301490565b6001600160401b036060820151168015159081611cbd575b50611cae57608001516001600160401b0316611c9f57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c8456fea26469706673582212205e374c78f7af15efbdee91c1f54f9cf2f951341c5e836f4ce432c8b5918d793564736f6c634300081b0033",
    "sourceMap": "407:4081:113:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4081:113;;;;1047:4;407:4081;759:14:6;688:1:9;407:4081:113;783:14:6;-1:-1:-1;407:4081:113;807:14:6;708:26:9;704:76;;407:4081:113;790:10:9;;407:4081:113;790:10:9;407:4081:113;790:10:9;789::61;;809:32;;-1:-1:-1;407:4081:113;;;;;;;;;;;872:48:61;;407:4081:113;872:48:61;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;904:4:61;407:4081:113;;;;1047:4;407:4081;;;;;;-1:-1:-1;;407:4081:113;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:32:61;407:4081:113;;;;;789:10:61;407:4081:113;;;;;;;;;;;;;;;;;;;;851:69:61;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;407:4081:113;872:48:61;;407:4081:113;872:48:61;;;;;;407:4081:113;872:48:61;;;:::i;:::-;;;407:4081:113;;;;;872:48:61;;;407:4081:113;-1:-1:-1;407:4081:113;;872:48:61;;;-1:-1:-1;872:48:61;;;407:4081:113;;;-1:-1:-1;407:4081:113;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;;-1:-1:-1;407:4081:113;;;;;;-1:-1:-1;;407:4081:113;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610b1657806354fd4d5014610a285780635bf2f20d146109ee5780636b122fe0146108585780637d2c29311461078d5780638371ef591461072f57806388e5b2d9146106e2578063891d9ea81461070157806391db0b7e146106e25780639c13d80e1461065a578063b3b902d414610614578063c6ec507014610519578063c93844be1461039c578063cce1f561146102bd578063ce46e046146102a3578063e49617e114610288578063e60c350514610288578063e6c9714d146101685763f0ffa1850361000e5760a0366003190112610164576004356001600160401b03811161016457610127903690600401610d81565b61012f610d2d565b91610138610d57565b606435906001600160a01b03821682036101645760209461015c9460843594611955565b604051908152f35b5f80fd5b34610164576060366003190112610164576004356001600160401b03811161016457610140600319823603011261016457604051906101a682610c01565b80600401358252602481013560208301526101c360448201610d43565b60408301526101d460648201610d43565b60608301526101e560848201610d43565b608083015260a481013560a083015261020060c48201610d6d565b60c083015261021160e48201610d6d565b60e08301526102236101048201610e98565b610100830152610124810135906001600160401b03821161016457600461024d9236920101610c8f565b6101208201526024356001600160401b0381116101645760209161027861027e923690600401610c8f565b9061184b565b6040519015158152f35b602061027e61029636610e64565b61029e611c12565b611c53565b34610164575f3660031901126101645760206040515f8152f35b34610164576040366003190112610164576004356001600160401b038111610164576060600319823603011261016457602061034091610313610321610301610d2d565b926040519283916004018683016116b0565b03601f198101835282610c1d565b60405163f0ffa18560e01b8152938492839233918291600486016117aa565b03815f305af18015610391575f9061035e575b602090604051908152f35b506020813d602011610389575b8161037860209383610c1d565b810103126101645760209051610353565b3d915061036b565b6040513d5f823e3d90fd5b34610164576020366003190112610164576004356001600160401b038111610164576103cc903690600401610d81565b6103d46117ed565b50810190602081830312610164578035906001600160401b0382116101645701606081830312610164576040519061040b82610bb0565b61041481610d6d565b825260208101356001600160401b0381116101645783610435918301610c8f565b60208301526040810135906001600160401b0382116101645701604081840312610164576040519061046682610bcb565b803582526020810135906001600160401b03821161016457019260c084820312610164576040519061049782610be6565b6104a085610d6d565b82526104ae60208601610d43565b60208301526104bf60408601610e98565b6040830152606085013560608301526080850135946001600160401b038611610164576104f360a092610515978301610c8f565b6080840152013560a08201526020820152604082015260405191829182610e1d565b0390f35b34610164576020366003190112610164576105326117ed565b5061053b610ee8565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610391575f916105f2575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105e3576105d76101206105159201516020808251830101910161104f565b60405191829182610e1d565b635527981560e11b5f5260045ffd5b61060e91503d805f833e6106068183610c1d565b810190610f74565b81610590565b6060366003190112610164576004356001600160401b0381116101645761015c6106446020923690600401610d81565b61064c610d2d565b916044359233923392611955565b34610164576060366003190112610164576004356001600160401b03811161016457606060031982360301126101645760206106b4610697610d2d565b6106c26106a2610d57565b946040519384916004018683016116b0565b03601f198101845283610c1d565b610340604051948593849363f0ffa18560e01b85523391600486016117aa565b602061027e6106f036610cdd565b926106fc929192611c12565b6111aa565b346101645761051561071b61071536610b47565b9061124e565b604051918291602083526020830190610b5d565b34610164576020366003190112610164576004356001600160401b03811161016457610762610767913690600401610c8f565b611181565b604080516001600160a01b03909316835260208301819052829161051591830190610b5d565b34610164576020366003190112610164576004356107a9610ee8565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161083c575b5061080f57506301fb6dd160e01b5f5260045260245ffd5b606001516001600160401b0316421061082d57602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6108519192503d805f833e6106068183610c1d565b90836107f7565b34610164575f3660031901126101645760608060405161087781610b81565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610391575f9061093e575b606090610515604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b5d565b503d805f833e61094e8183610c1d565b810190602081830312610164578051906001600160401b0382116101645701608081830312610164576040519061098482610b81565b8051825260208101516001600160a01b03811681036101645760208301526109ae60408201610ea5565b60408301526060810151906001600160401b038211610164570182601f82011215610164576060928160206109e593519101610eb2565b828201526108f8565b34610164575f3660031901126101645760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610164575f36600319011261016457610515602061071b6001610a6b7f0000000000000000000000000000000000000000000000000000000000000000611aa5565b8184610a967f0000000000000000000000000000000000000000000000000000000000000000611aa5565b8180610ac17f0000000000000000000000000000000000000000000000000000000000000000611aa5565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c1d565b3461016457610b2761071536610b47565b602081519181808201938492010103126101645760209051604051908152f35b6040906003190112610164576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b9c57604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610b9c57604052565b604081019081106001600160401b03821117610b9c57604052565b60c081019081106001600160401b03821117610b9c57604052565b61014081019081106001600160401b03821117610b9c57604052565b90601f801991011681019081106001600160401b03821117610b9c57604052565b6001600160401b038111610b9c57601f01601f191660200190565b929192610c6582610c3e565b91610c736040519384610c1d565b829481845281830111610164578281602093845f960137010152565b9080601f8301121561016457816020610caa93359101610c59565b90565b9181601f84011215610164578235916001600160401b038311610164576020808501948460051b01011161016457565b6040600319820112610164576004356001600160401b0381116101645781610d0791600401610cad565b92909291602435906001600160401b03821161016457610d2991600401610cad565b9091565b602435906001600160401b038216820361016457565b35906001600160401b038216820361016457565b604435906001600160a01b038216820361016457565b35906001600160a01b038216820361016457565b9181601f84011215610164578235916001600160401b038311610164576020838186019501011161016457565b602090805183520151906040602082015260018060a01b0382511660408201526001600160401b036020830151166060820152604082015115156080820152606082015160a082015260e060a0610e14608085015160c080860152610100850190610b5d565b93015191015290565b90610caa916020815260018060a01b0382511660208201526040610e4f60208401516060838501526080840190610b5d565b920151906060601f1982850301910152610dae565b602060031982011261016457600435906001600160401b038211610164576101409082900360031901126101645760040190565b3590811515820361016457565b5190811515820361016457565b929192610ebe82610c3e565b91610ecc6040519384610c1d565b829481845281830111610164578281602093845f96015e010152565b60405190610ef582610c01565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361016457565b51906001600160a01b038216820361016457565b9080601f83011215610164578151610caa92602001610eb2565b602081830312610164578051906001600160401b0382116101645701610140818303126101645760405191610fa883610c01565b8151835260208201516020840152610fc260408301610f32565b6040840152610fd360608301610f32565b6060840152610fe460808301610f32565b608084015260a082015160a0840152610fff60c08301610f46565b60c084015261101060e08301610f46565b60e08401526110226101008301610ea5565b6101008401526101208201516001600160401b038111610164576110469201610f5a565b61012082015290565b602081830312610164578051906001600160401b038211610164570190606082820312610164576040519161108383610bb0565b61108c81610f46565b835260208101516001600160401b03811161016457826110ad918301610f5a565b60208401526040810151906001600160401b03821161016457019060408282031261016457604051916110df83610bcb565b805183526020810151906001600160401b03821161016457019060c082820312610164576040519161111083610be6565b61111981610f46565b835261112760208201610f32565b602084015261113860408201610ea5565b60408401526060810151606084015260808101516001600160401b0381116101645760a092611168918301610f5a565b6080840152015160a08201526020820152604082015290565b611194906020808251830101910161104f565b80516020909101516001600160a01b0390911691565b92909281840361123f575f91345b858410156112345781841015611220578360051b80860135908282116112115784013561013e1985360301811215610164576111f5908501611c53565b1561120657600191039301926111b8565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611258610ee8565b50611261610ee8565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611643575b506112c957856301fb6dd160e01b5f5260045260245ffd5b9491929394906040516328c44a9960e21b81528660048201525f81602481855afa5f9181611627575b5061130a57866301fb6dd160e01b5f5260045260245ffd5b9591929394959261131a81611c6c565b15611618576113f960206101208084019360c08861140b61133b8851611181565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b5d565b84810360031901602486015290610b5d565b604483019190915203916001600160a01b03165afa908115610391575f916115de575b50156115cf5760405161144081610bcb565b8581525f60208201526040519061145682610bcb565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152833b1561016457604051634692626760e01b81529151600483015251805160248301526020015160448201525f8160648183875af190816115ba575b506114d55763614cf93960e01b86526004859052602486fd5b61151a869260406114f5602094989697985185808251830101910161104f565b015160405194858094819363f17325e760e01b83528760048401526024830190610dae565b03925af1859181611586575b5061153a57638d7100d760e01b8552600485fd5b7ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c090949360405195602087015260208652611576604087610c1d565b516001600160a01b03169380a490565b9091506020813d6020116115b2575b816115a260209383610c1d565b810103126101645751905f611526565b3d9150611595565b6115c79197505f90610c1d565b5f955f6114bc565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611610575b816115f960209383610c1d565b810103126101645761160a90610ea5565b5f61142e565b3d91506115ec565b63629cd40b60e11b5f5260045ffd5b61163c9192503d805f833e6106068183610c1d565b905f6112f2565b6116589192503d805f833e6106068183610c1d565b905f6112b1565b9035601e19823603018112156101645701602081359101916001600160401b03821161016457813603831361016457565b908060209392818452848401375f828201840152601f01601f1916010190565b602081526001600160a01b036116c583610d6d565b1660208201526116ec6116db602084018461165f565b606060408501526080840191611690565b916040810135603e19823603018112156101645701906060601f198285030191015280358252602081013560be1982360301811215610164576040602084015201906001600160a01b0361173f83610d6d565b1660408201526001600160401b0361175960208401610d43565b16606082015261176b60408301610e98565b15156080820152606082013560a082015260e060a06117a1611790608086018661165f565b60c080870152610100860191611690565b93013591015290565b90935f936001600160401b036117cc608095989760a0865260a0860190610b5d565b971660208401526001600160a01b0390811660408401521660608201520152565b604051906117fa82610bb0565b815f815260606020820152604080519161181383610bcb565b5f8352815161182181610be6565b5f81525f60208201525f838201525f6060820152606060808201525f60a082015260208401520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036119465761187f81611c6c565b156119405761189f6101206118af9201516020808251830101910161104f565b916020808251830101910161104f565b60408201516040516118d1816103136020820194602086526040830190610dae565b51902060408201516040516118f6816103136020820194602086526040830190610dae565b519020149182611927575b8261190b57505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611901565b50505f90565b635f9bd90760e11b5f5260045ffd5b6020935061197990611a0c979692959395611971368284610c59565b503691610c59565b906001600160401b036040519361198f85610be6565b60018060a01b031695868552168484015260016040840152606083015260808201525f60a0820152604051906119c482610bcb565b7f00000000000000000000000000000000000000000000000000000000000000008252828201526040518095819263f17325e760e01b83528460048401526024830190610dae565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610391575f93611a71575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011611a9d575b81611a8d60209383610c1d565b810103126101645751915f611a49565b3d9150611a80565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611bef575b806d04ee2d6d415b85acef8100000000600a921015611bd4575b662386f26fc10000811015611bc0575b6305f5e100811015611baf575b612710811015611ba0575b6064811015611b92575b1015611b87575b600a60216001840193611b2c85610c3e565b94611b3a6040519687610c1d565b808652611b49601f1991610c3e565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b8257600a9091611b54565b505090565b600190910190611b1a565b606460029104930192611b13565b61271060049104930192611b09565b6305f5e10060089104930192611afe565b662386f26fc1000060109104930192611af1565b6d04ee2d6d415b85acef810000000060209104930192611ae1565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611ac7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c4457565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361016457301490565b6001600160401b036060820151168015159081611cbd575b50611cae57608001516001600160401b0316611c9f57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611c8456fea26469706673582212205e374c78f7af15efbdee91c1f54f9cf2f951341c5e836f4ce432c8b5918d793564736f6c634300081b0033",
    "sourceMap": "407:4081:113:-:0;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;;;1183:12:9;;;1054:5;1183:12;407:4081:113;1054:5:9;1183:12;407:4081:113;;;;;;;;;;4040:29;407:4081;4040:29;;;407:4081;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;407:4081:113;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;407:4081:113:-;;;;;;-1:-1:-1;;407:4081:113;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;3263:187;407:4081;3304:16;;407:4081;;:::i;:::-;;;;;;;;;3304:16;;;;:::i;:::-;;1055:104:6;;3304:16:113;;;;;;:::i;:::-;407:4081;;-1:-1:-1;;;3263:187:113;;407:4081;;;;;3370:10;;;;407:4081;3263:187;;;:::i;:::-;;:4;407:4081;3263:4;:187;;;;;;407:4081;3263:187;;;407:4081;;;;;;;;;3263:187;;407:4081;3263:187;;407:4081;3263:187;;;;;;407:4081;3263:187;;;:::i;:::-;;;407:4081;;;;;;;3263:187;;;;;-1:-1:-1;3263:187:113;;;407:4081;;;;;;;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;4445:34;;407:4081;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;407:4081:113;;-1:-1:-1;;;2392:23:61;;407:4081:113;;;2392:23:61;;;407:4081:113;-1:-1:-1;407:4081:113;2392:23:61;407:4081:113;2392:3:61;-1:-1:-1;;;;;407:4081:113;2392:23:61;;;;;;;407:4081:113;2392:23:61;;;407:4081:113;2429:19:61;407:4081:113;2429:19:61;;407:4081:113;2452:18:61;2429:41;2425:87;;4260:46:113;4271:16;407:4081;4271:16;;;407:4081;;;;4260:46;;;;;;:::i;:::-;407:4081;;;;;;;:::i;2425:87:61:-;2491:21;;;407:4081:113;2491:21:61;407:4081:113;;2491:21:61;2392:23;;;;;;407:4081:113;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;407:4081:113;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;724:142:63;407:4081:113;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;407:4081:113:-;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;3687:16;407:4081;;:::i;:::-;3687:16;407:4081;;:::i;:::-;;;;;;;;;3687:16;;;;:::i;:::-;;1055:104:6;;3687:16:113;;;;;;:::i;:::-;3646:186;407:4081;;;;;;;;;;3646:186;;3753:10;3646:186;407:4081;3646:186;;;:::i;407:4081::-;;1442:1461:9;407:4081:113;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;407:4081:113:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4081:113;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4081:113;;;;;;;;:::i;:::-;-1:-1:-1;407:4081:113;;-1:-1:-1;;;3986:23:62;;407:4081:113;3986:23:62;;407:4081:113;;;-1:-1:-1;407:4081:113;3986:23:62;407:4081:113;3986:3:62;-1:-1:-1;;;;;407:4081:113;3986:23:62;;407:4081:113;;3986:23:62;;;407:4081:113;-1:-1:-1;3982:172:62;;4119:24;;;;407:4081:113;4119:24:62;407:4081:113;;3986:23:62;407:4081:113;4119:24:62;3982:172;4186:26;;407:4081:113;-1:-1:-1;;;;;407:4081:113;4168:15:62;:44;4164:87;;407:4081:113;;;;;;;4164:87:62;4233:18;;;407:4081:113;4233:18:62;407:4081:113;;4233:18:62;3986:23;;;;;;;407:4081:113;3986:23:62;;;;;;:::i;:::-;;;;;407:4081:113;;;;;;-1:-1:-1;;407:4081:113;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;407:4081:113;1497:44:61;;407:4081:113;;;1497:44:61;407:4081:113;;;;;;1497:14:61;407:4081:113;1497:44:61;;;;;;407:4081:113;1497:44:61;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;407:4081:113;1497:44:61;;;;;;:::i;:::-;;;407:4081:113;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;407:4081:113;;;;;;-1:-1:-1;;407:4081:113;;;;;;;542:43:61;407:4081:113;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;1055:104:6;;407:4081:113;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;407:4081:113;;;;;;;;;;;;1055:104:6;;;407:4081:113;;;;-1:-1:-1;;;407:4081:113;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;407:4081:113:-;;;;3986:37;407:4081;;;:::i;3986:37::-;407:4081;;;4040:29;;;;;;;;;;407:4081;;;;4040:29;407:4081;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;;;-1:-1:-1;;407:4081:113;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;;;;-1:-1:-1;407:4081:113;;;;;-1:-1:-1;407:4081:113;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;;;1055:104:6;;407:4081:113;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;:::o;:::-;-1:-1:-1;;;;;407:4081:113;;;;;;-1:-1:-1;;407:4081:113;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4081:113;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1055:104:6;407:4081:113;1055:104:6;;407:4081:113;;;;;;;;:::i;:::-;;-1:-1:-1;;407:4081:113;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;-1:-1:-1;;407:4081:113;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;407:4081:113;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4081:113;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;1126:267::-;1302:34;1126:267;1302:34;407:4081;;;1302:34;;;;;;:::i;:::-;407:4081;;1302:34;1371:14;;;;-1:-1:-1;;;;;407:4081:113;;;;1126:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;407:4081:113;;;;;;;;;;;;;4064:22:9;;;;4060:87;;407:4081:113;;;;;;;;;;;;;;4274:33:9;407:4081:113;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;407:4081:113;;3896:19:9;407:4081:113;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;407:4081:113;;;;3881:1:9;407:4081:113;;;;;3881:1:9;407:4081:113;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;407:4081:113;;:::i;:::-;2221:30:62;407:4081:113;;:::i;:::-;-1:-1:-1;407:4081:113;;-1:-1:-1;;;2314:27:62;;;;;407:4081:113;;;2314:3:62;-1:-1:-1;;;;;407:4081:113;;-1:-1:-1;407:4081:113;2314:27:62;407:4081:113;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;407:4081:113;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;2310:219;407:4081:113;;;;;2543:32:62;;;2314:27;2543:32;;407:4081:113;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;407:4081:113;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;407:4081:113;;2991:11:62;;;;;407:4081:113;2991:11:62;407:4081:113;2954:58:62;2991:11;;2954:58;:::i;:::-;407:4081:113;;;;;;;;;;;;;;;;;3083:66:62;;407:4081:113;2314:27:62;3083:66;;407:4081:113;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;407:4081:113;2314:27:62;407:4081:113;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;407:4081:113;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;407:4081:113;;;;;:::i;:::-;;;;-1:-1:-1;407:4081:113;3369:47:62;;407:4081:113;;;;;;;:::i;:::-;3323:18:62;407:4081:113;;;3275:160:62;;407:4081:113;;;3247:202:62;;;;;407:4081:113;;-1:-1:-1;;;3247:202:62;;407:4081:113;;2314:27:62;3247:202;;407:4081:113;;;;2314:27:62;407:4081:113;;;;;;;;;;-1:-1:-1;407:4081:113;;;-1:-1:-1;3247:202:62;;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;407:4081:113;;;2314:27:62;3488:25;;3231:293;407:4081:113;3231:293:62;;407:4081:113;1802:74;407:4081;3231:293:62;;;;;3622:11;407:4081:113;;;;1802:74;;;;;;:::i;:::-;1934:19;;407:4081;;;;;;;;;;;1923:31;;;2314:27:62;1923:31:113;;407:4081;2314:27:62;407:4081:113;;;;:::i;:::-;1923:31;;;;;;;;;3231:293:62;-1:-1:-1;1919:169:113;;-1:-1:-1;;;2050:27:113;;2314::62;2050::113;;1919:169;3720:61:62;1991:20:113;;;407:4081;;2105:26;407:4081;2105:26;;407:4081;;2105:26;;;407:4081;2105:26;;:::i;:::-;407:4081;-1:-1:-1;;;;;407:4081:113;;3720:61:62;;2051:1760;:::o;1923:31:113:-;;;;407:4081;1923:31;;407:4081;1923:31;;;;;;407:4081;1923:31;;;:::i;:::-;;;407:4081;;;;;1923:31;;;;;;;-1:-1:-1;1923:31:113;;3247:202:62;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;407:4081:113;3083:66:62;;407:4081:113;3083:66:62;;;;;;407:4081:113;3083:66:62;;;:::i;:::-;;;407:4081:113;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;407:4081:113;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;;;-1:-1:-1;;407:4081:113;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4081:113;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1055:104:6;407:4081:113;1055:104:6;;407:4081:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4081:113;;;:::i;:::-;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4081:113;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;-1:-1:-1;407:4081:113;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;407:4081:113;;;;;;;:::i;:::-;-1:-1:-1;407:4081:113;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;-1:-1:-1;407:4081:113;;;;;;;;;-1:-1:-1;407:4081:113;;;;;;;;;;:::o;2360:711::-;2573:18;1016:17:60;;;407:4081:113;1016:27:60;1012:55;;1084:27;;;:::i;:::-;2545:47:113;2541:65;;2648:79;2672:15;2772:36;2672:15;;;1016:17:60;407:4081:113;;;2648:79;;;;;;:::i;:::-;407:4081;1016:17:60;407:4081:113;;;2772:36;;;;;;:::i;:::-;2859:18;;;;;407:4081;2848:30;;407:4081;1016:17:60;2848:30:113;;407:4081;1016:17:60;407:4081:113;;2859:18;407:4081;;;;:::i;2848:30::-;407:4081;2838:41;;2859:18;2916:22;;;2859:18;407:4081;2905:34;;407:4081;1016:17:60;2905:34:113;;407:4081;1016:17:60;407:4081:113;;2859:18;407:4081;;;;:::i;2905:34::-;407:4081;2895:45;;2838:102;:154;;;;2360:711;2838:226;;;2819:245;;2360:711;:::o;2838:226::-;1016:17:60;3018:13:113;;;;;;407:4081;;;;;3008:24;3046:17;;;1016::60;407:4081:113;;;;3036:28;3008:56;2360:711;:::o;2838:154::-;407:4081;;;;-1:-1:-1;;;;;407:4081:113;;;;;2956:36;;-1:-1:-1;2838:154:113;;2541:65;2594:12;;407:4081;2594:12;:::o;1012:55:60:-;1052:15;;;407:4081:113;1052:15:60;;407:4081:113;1052:15:60;879:385:63;1914:299:61;879:385:63;;407:4081:113;879:385:63;407:4081:113;879:385:63;;;;;;407:4081:113;;;;;:::i;:::-;;;;;:::i;:::-;;-1:-1:-1;;;;;407:4081:113;;;;;;:::i;:::-;;;;;;;;;;;;1914:299:61;;;407:4081:113;2076:4:61;407:4081:113;1914:299:61;;407:4081:113;1914:299:61;;;407:4081:113;1914:299:61;;;407:4081:113;-1:-1:-1;1914:299:61;;;407:4081:113;;;;;;;:::i;:::-;1868:18:61;407:4081:113;;1819:413:61;;;407:4081:113;;;;;;;;;;1791:455:61;;;;;;407:4081:113;;;;;;:::i;:::-;1791:455:61;407:4081:113;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;407:4081:113;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;879:385:63;1150:55;;4817:26:62;-1:-1:-1;4817:26:62;;879:385:63:o;1791:455:61:-;;;;1914:299;1791:455;;1914:299;1791:455;;;;;;407:4081:113;1791:455:61;;;:::i;:::-;;;407:4081:113;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;407:4081:113;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;407:4081:113;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;407:4081:113;;-1:-1:-1;;;1033:111:50;;;;407:4081:113;1033:111:50;407:4081:113;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;407:4081:113;;;;26127:66:57;;26014:100;26027:7;26098:1;407:4081:113;;;;26014:100:57;;;25901;25914:7;25985:1;407:4081:113;;;;25901:100:57;;;25788;25801:7;25872:1;407:4081:113;;;;25788:100:57;;;25672:103;25685:8;25758:2;407:4081:113;;;;25672:103:57;;;25556;25569:8;25642:2;407:4081:113;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;407:4081:113;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;407:4081:113;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;407:4081:113;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;407:4081:113;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;407:4081:113;-1:-1:-1;;;;;407:4081:113;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2631,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2674,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2717,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 7188,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2249,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1368,
          "length": 32
        },
        {
          "start": 1989,
          "length": 32
        },
        {
          "start": 4728,
          "length": 32
        },
        {
          "start": 6673,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1432,
          "length": 32
        },
        {
          "start": 2199,
          "length": 32
        },
        {
          "start": 2565,
          "length": 32
        },
        {
          "start": 5208,
          "length": 32
        },
        {
          "start": 6221,
          "length": 32
        },
        {
          "start": 6598,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,(bytes32,(address,uint64,bool,bytes32,bytes,uint256))),uint64)": "cce1f561",
    "doObligationFor((address,bytes,(bytes32,(address,uint64,bool,bytes32,bytes,uint256))),uint64,address)": "9c13d80e",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationCreationFailed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"attestation","type":"tuple"}],"internalType":"struct AttestationEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/AttestationEscrowObligation.sol":"AttestationEscrowObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation.sol":{"keccak256":"0x8dacc27072a9e9d4ff4ba77b2a5d5ba0e877991ce18710db2f25506288b47a46","license":"UNLICENSED","urls":["bzz-raw://8b19b185874889feecc9fcd19ab9d3713f7ad5b6adb5b8e0fb964e4b9c80375b","dweb:/ipfs/QmdXP6zn1y65qKdGNc4Atyc4URrcBBSXehrfZFxXEZnD9c"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationCreationFailed"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct AttestationEscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "struct AttestationRequest",
                  "name": "attestation",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "schema",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "struct AttestationRequestData",
                      "name": "data",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "address",
                          "name": "recipient",
                          "type": "address"
                        },
                        {
                          "internalType": "uint64",
                          "name": "expirationTime",
                          "type": "uint64"
                        },
                        {
                          "internalType": "bool",
                          "name": "revocable",
                          "type": "bool"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "refUID",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "uint256",
                          "name": "value",
                          "type": "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationEscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "struct AttestationRequest",
                  "name": "attestation",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "schema",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "struct AttestationRequestData",
                      "name": "data",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "address",
                          "name": "recipient",
                          "type": "address"
                        },
                        {
                          "internalType": "uint64",
                          "name": "expirationTime",
                          "type": "uint64"
                        },
                        {
                          "internalType": "bool",
                          "name": "revocable",
                          "type": "bool"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "refUID",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "uint256",
                          "name": "value",
                          "type": "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationEscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "struct AttestationRequest",
                  "name": "attestation",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "schema",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "struct AttestationRequestData",
                      "name": "data",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "address",
                          "name": "recipient",
                          "type": "address"
                        },
                        {
                          "internalType": "uint64",
                          "name": "expirationTime",
                          "type": "uint64"
                        },
                        {
                          "internalType": "bool",
                          "name": "revocable",
                          "type": "bool"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "refUID",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "uint256",
                          "name": "value",
                          "type": "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct AttestationEscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "struct AttestationRequest",
                  "name": "attestation",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "schema",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "struct AttestationRequestData",
                      "name": "data",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "address",
                          "name": "recipient",
                          "type": "address"
                        },
                        {
                          "internalType": "uint64",
                          "name": "expirationTime",
                          "type": "uint64"
                        },
                        {
                          "internalType": "bool",
                          "name": "revocable",
                          "type": "bool"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "refUID",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        },
                        {
                          "internalType": "uint256",
                          "name": "value",
                          "type": "uint256"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/AttestationEscrowObligation.sol": "AttestationEscrowObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation.sol": {
        "keccak256": "0x8dacc27072a9e9d4ff4ba77b2a5d5ba0e877991ce18710db2f25506288b47a46",
        "urls": [
          "bzz-raw://8b19b185874889feecc9fcd19ab9d3713f7ad5b6adb5b8e0fb964e4b9c80375b",
          "dweb:/ipfs/QmdXP6zn1y65qKdGNc4Atyc4URrcBBSXehrfZFxXEZnD9c"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 113
};

// src/contracts/AttestationEscrowObligation2.ts
var abi34 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "VALIDATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestationUid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestationUid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestationUid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct AttestationEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "attestationUid",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x610180806040523461027757604081611de7803803809161002082856102e3565b833981010312610277578051906001600160a01b0382169081830361027757602001516001600160a01b03811692908381036102775760405190606082016001600160401b038111838210176102cf576040526035825260208201937f6164647265737320617262697465722c2062797465732064656d616e642c206285527f797465733332206174746573746174696f6e556964000000000000000000000060408401526001608052600360a0525f60c052156102c0578260209360e0526101205261010052608460405180948193630c1af44f60e31b8352606060048401525180918160648501528484015e5f83828401015230602483015260016044830152601f801991011681010301815f865af1908115610283575f9161028e575b505f916020916101405260a460405180948193630c1af44f60e31b835260606004840152601f60648401527f627974657333322076616c6964617465644174746573746174696f6e556964006084840152306024840152600160448401525af1908115610283575f9161024d575b5061016052604051611ae090816103078239608051816109cd015260a051816109f8015260c05181610a23015260e0518161198a0152610100518161084f0152610120518181816103ff0152818161074b015281816110af015261178701526101405181818161043f0152818161081d0152818161098b0152818161128e0152818161160a01526117430152610160518181816102c701526113860152f35b90506020813d60201161027b575b81610268602093836102e3565b8101031261027757515f6101ae565b5f80fd5b3d915061025b565b6040513d5f823e3d90fd5b90506020813d6020116102b8575b816102a9602093836102e3565b8101031261027757515f610140565b3d915061029c565b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102cf5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610a9c57806354fd4d50146109ae5780635bf2f20d146109745780636b122fe0146107de5780637d2c2931146107135780638371ef59146106b557806388e5b2d914610668578063891d9ea81461068757806391db0b7e14610668578063aadc8f63146105e5578063b3b902d41461059f578063b5f3baff146104c6578063c6ec5070146103c0578063c93844be14610304578063ce46e046146102ea578063df61dd2c146102b0578063e49617e114610295578063e60c350514610295578063e6c9714d146101735763f0ffa1850361000e5760a036600319011261016f576004356001600160401b03811161016f57610132903690600401610cdd565b61013a610cb3565b91610143610d0a565b606435906001600160a01b038216820361016f5760209461016794608435946116d2565b604051908152f35b5f80fd5b3461016f57606036600319011261016f576004356001600160401b03811161016f57610140600319823603011261016f57604051906101b182610b51565b80600401358252602481013560208301526101ce60448201610cc9565b60408301526101df60648201610cc9565b60608301526101f060848201610cc9565b608083015260a481013560a083015261020b60c48201610d20565b60c083015261021c60e48201610d20565b60e0830152610104810135801515810361016f57610100830152610124810135906001600160401b03821161016f57600461025a9236920101610c15565b6101208201526024356001600160401b03811161016f5760209161028561028b923690600401610c15565b90611608565b6040519015158152f35b602061028b6102a336610d6b565b6102ab611988565b6119c9565b3461016f575f36600319011261016f5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461016f575f36600319011261016f5760206040515f8152f35b3461016f57602036600319011261016f576004356001600160401b03811161016f57610334903690600401610cdd565b61033c6115e9565b5081019060208183031261016f578035906001600160401b03821161016f57019060608282031261016f576040519061037482610b36565b61037d83610d20565b82526020830135926001600160401b03841161016f576103a46040926103bc958301610c15565b60208401520135604082015260405191829182610d34565b0390f35b3461016f57602036600319011261016f576103d96115e9565b506103e2610de2565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156104bb575f91610499575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361048a5761047e6101206103bc92015160208082518301019101610f49565b60405191829182610d34565b635527981560e11b5f5260045ffd5b6104b591503d805f833e6104ad8183610ba3565b810190610e6e565b81610437565b6040513d5f823e3d90fd5b3461016f57606036600319011261016f576004356001600160401b03811161016f576060600319823603011261016f576020610520610503610cb3565b61052e61050e610d0a565b94604051938491600401868301611528565b03601f198101845283610ba3565b61054e604051948593849363f0ffa18560e01b85523391600486016115a6565b03815f305af180156104bb575f9061056c575b602090604051908152f35b506020813d602011610597575b8161058660209383610ba3565b8101031261016f5760209051610561565b3d9150610579565b606036600319011261016f576004356001600160401b03811161016f576101676105cf6020923690600401610cdd565b6105d7610cb3565b9160443592339233926116d2565b3461016f57604036600319011261016f576004356001600160401b03811161016f576060600319823603011261016f57602061054e9161063b610649610629610cb3565b92604051928391600401868301611528565b03601f198101835282610ba3565b60405163f0ffa18560e01b8152938492839233918291600486016115a6565b602061028b61067636610c63565b92610682929192611988565b610fe1565b3461016f576103bc6106a161069b36610acd565b90611085565b604051918291602083526020830190610ae3565b3461016f57602036600319011261016f576004356001600160401b03811161016f576106e86106ed913690600401610c15565b610fb8565b604080516001600160a01b0390931683526020830181905282916103bc91830190610ae3565b3461016f57602036600319011261016f5760043561072f610de2565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f91816107c2575b5061079557506301fb6dd160e01b5f5260045260245ffd5b606001516001600160401b031642106107b357602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6107d79192503d805f833e6104ad8183610ba3565b908361077d565b3461016f575f36600319011261016f576060806040516107fd81610b07565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156104bb575f906108c4575b6060906103bc604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610ae3565b503d805f833e6108d48183610ba3565b81019060208183031261016f578051906001600160401b03821161016f570160808183031261016f576040519061090a82610b07565b8051825260208101516001600160a01b038116810361016f57602083015261093460408201610d9f565b60408301526060810151906001600160401b03821161016f570182601f8201121561016f5760609281602061096b93519101610dac565b8282015261087e565b3461016f575f36600319011261016f5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461016f575f36600319011261016f576103bc60206106a160016109f17f000000000000000000000000000000000000000000000000000000000000000061181b565b8184610a1c7f000000000000000000000000000000000000000000000000000000000000000061181b565b8180610a477f000000000000000000000000000000000000000000000000000000000000000061181b565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610ba3565b3461016f57610aad61069b36610acd565b6020815191818082019384920101031261016f5760209051604051908152f35b604090600319011261016f576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b2257604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610b2257604052565b61014081019081106001600160401b03821117610b2257604052565b604081019081106001600160401b03821117610b2257604052565b60c081019081106001600160401b03821117610b2257604052565b90601f801991011681019081106001600160401b03821117610b2257604052565b6001600160401b038111610b2257601f01601f191660200190565b929192610beb82610bc4565b91610bf96040519384610ba3565b82948184528183011161016f578281602093845f960137010152565b9080601f8301121561016f57816020610c3093359101610bdf565b90565b9181601f8401121561016f578235916001600160401b03831161016f576020808501948460051b01011161016f57565b604060031982011261016f576004356001600160401b03811161016f5781610c8d91600401610c33565b92909291602435906001600160401b03821161016f57610caf91600401610c33565b9091565b602435906001600160401b038216820361016f57565b35906001600160401b038216820361016f57565b9181601f8401121561016f578235916001600160401b03831161016f576020838186019501011161016f57565b604435906001600160a01b038216820361016f57565b35906001600160a01b038216820361016f57565b6020815260018060a01b03825116602082015260606040610d62602085015183838601526080850190610ae3565b93015191015290565b602060031982011261016f57600435906001600160401b03821161016f5761014090829003600319011261016f5760040190565b5190811515820361016f57565b929192610db882610bc4565b91610dc66040519384610ba3565b82948184528183011161016f578281602093845f96015e010152565b60405190610def82610b51565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361016f57565b51906001600160a01b038216820361016f57565b9080601f8301121561016f578151610c3092602001610dac565b60208183031261016f578051906001600160401b03821161016f57016101408183031261016f5760405191610ea283610b51565b8151835260208201516020840152610ebc60408301610e2c565b6040840152610ecd60608301610e2c565b6060840152610ede60808301610e2c565b608084015260a082015160a0840152610ef960c08301610e40565b60c0840152610f0a60e08301610e40565b60e0840152610f1c6101008301610d9f565b6101008401526101208201516001600160401b03811161016f57610f409201610e54565b61012082015290565b60208183031261016f578051906001600160401b03821161016f57019060608282031261016f5760405191610f7d83610b36565b610f8681610e40565b835260208101516001600160401b03811161016f57604092610fa9918301610e54565b60208401520151604082015290565b610fcb9060208082518301019101610f49565b80516020909101516001600160a01b0390911691565b929092818403611076575f91345b8584101561106b5781841015611057578360051b80860135908282116110485784013561013e198536030181121561016f5761102c9085016119c9565b1561103d5760019103930192610fef565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f61108f610de2565b50611098610de2565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f918161150c575b5061110057856301fb6dd160e01b5f5260045260245ffd5b9491929394906040516328c44a9960e21b81528660048201525f81602481855afa5f91816114f0575b5061114157866301fb6dd160e01b5f5260045260245ffd5b959293949591611150816119e2565b156114e15761122f60206101208084019360c0876112416111718851610fb8565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019d8e60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610ae3565b84810360031901602486015290610ae3565b604483019190915203916001600160a01b03165afa9081156104bb575f916114a7575b50156114985760405161127681610b6d565b8581525f60208201526040519061128c82610b6d565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152833b1561016f57604051634692626760e01b81529151600483015251805160248301526020015160448201525f8160648183875af19081611483575b5061130b5763614cf93960e01b86526004859052602486fd5b6113c78695939260209251604061133460018060a01b0387511692868082518301019101610f49565b015160405190808683015285825261134d604083610ba3565b6040519261135a84610b88565b83528986840152896040840152606083015260808201528760a08201526040519061138482610b6d565b7f000000000000000000000000000000000000000000000000000000000000000082528482015260405198898094819363f17325e760e01b835260048301611a3d565b03925af1948515611478578495611424575b507ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c09060405195602087015260208652611414604087610ba3565b516001600160a01b03169380a490565b9094506020813d602011611470575b8161144060209383610ba3565b8101031261016f5751937ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c06113d9565b3d9150611433565b6040513d86823e3d90fd5b6114909197505f90610ba3565b5f955f6112f2565b630ebe58ef60e11b5f5260045ffd5b90506020813d6020116114d9575b816114c260209383610ba3565b8101031261016f576114d390610d9f565b5f611264565b3d91506114b5565b63629cd40b60e11b5f5260045ffd5b6115059192503d805f833e6104ad8183610ba3565b905f611129565b6115219192503d805f833e6104ad8183610ba3565b905f6110e8565b602081526001600160a01b0361153d83610d20565b1660208201526020820135601e198336030181121561016f5782016020813591016001600160401b03821161016f57813603811361016f5760a09382604092606084870152816080870152868601375f84840186015201356060830152601f01601f1916010190565b90935f936001600160401b036115c8608095989760a0865260a0860190610ae3565b971660208401526001600160a01b0390811660408401521660608201520152565b604051906115f682610b36565b5f604083828152606060208201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036116c35761163c816119e2565b156116bd5761165c61012061166c92015160208082518301019101610f49565b9160208082518301019101610f49565b604082015160408201511491826116a4575b8261168857505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061167e565b50505f90565b635f9bd90760e11b5f5260045ffd5b602093506116f6906117829796929593956116ee368284610bdf565b503691610bdf565b906001600160401b036040519361170c85610b88565b60018060a01b031695868552168484015260016040840152606083015260808201525f60a08201526040519061174182610b6d565b7f00000000000000000000000000000000000000000000000000000000000000008252828201526040518095819263f17325e760e01b835260048301611a3d565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156104bb575f936117e7575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011611813575b8161180360209383610ba3565b8101031261016f5751915f6117bf565b3d91506117f6565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611965575b806d04ee2d6d415b85acef8100000000600a92101561194a575b662386f26fc10000811015611936575b6305f5e100811015611925575b612710811015611916575b6064811015611908575b10156118fd575b600a602160018401936118a285610bc4565b946118b06040519687610ba3565b8086526118bf601f1991610bc4565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530480156118f857600a90916118ca565b505090565b600190910190611890565b606460029104930192611889565b6127106004910493019261187f565b6305f5e10060089104930192611874565b662386f26fc1000060109104930192611867565b6d04ee2d6d415b85acef810000000060209104930192611857565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b810461183d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036119ba57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361016f57301490565b6001600160401b036060820151168015159081611a33575b50611a2457608001516001600160401b0316611a1557600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f6119fa565b9060209081835280518284015201519060408082015260018060a01b0382511660608201526001600160401b0360208301511660808201526040820151151560a0820152606082015160c082015261010060a0610d62608085015160c060e0860152610120850190610ae356fea264697066735822122075e4ad051150b1c96b9f938ff6c7b81326052a2e4a6be114cbe2af8bba895f0864736f6c634300081b0033",
    "sourceMap": "407:4453:114:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;966:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;790:10;407:4453:114;790:10:9;;;789::61;;809:32;;407:4453:114;;;;;;;;;;872:48:61;;407:4453:114;872:48:61;;;407:4453:114;;;;;;;;;;;;;-1:-1:-1;407:4453:114;;;;;;904:4:61;407:4453:114;;;;966:4;407:4453;;;;;;;;;;;;872:48:61;;;-1:-1:-1;872:48:61;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;-1:-1:-1;851:69:61;407:4453:114;851:69:61;;;1057:117:114;407:4453;;;;;;;;;1057:117;;407:4453;872:48:61;1057:117:114;;407:4453;;;;;;;;;;;904:4:61;407:4453:114;;;;966:4;407:4453;;;;1057:117;;;;;;;-1:-1:-1;1057:117:114;;;-1:-1:-1;1037:137:114;;;407:4453;;;;;;;;759:14:6;407:4453:114;;;;;783:14:6;407:4453:114;;;;;807:14:6;407:4453:114;;;;;790:10:9;407:4453:114;;;;;809:32:61;407:4453:114;;;;;789:10:61;407:4453:114;;;;;;;;;;;;;;;;;;;;851:69:61;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1037:137;407:4453;;;;;;;;;;;1057:117;;;407:4453;1057:117;;407:4453;1057:117;;;;;;407:4453;1057:117;;;:::i;:::-;;;407:4453;;;;;1057:117;;;407:4453;-1:-1:-1;407:4453:114;;1057:117;;;-1:-1:-1;1057:117:114;;;407:4453;;;-1:-1:-1;407:4453:114;;;;;872:48:61;;;407:4453:114;872:48:61;;407:4453:114;872:48:61;;;;;;407:4453:114;872:48:61;;;:::i;:::-;;;407:4453:114;;;;;-1:-1:-1;872:48:61;;;;;-1:-1:-1;872:48:61;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;;-1:-1:-1;407:4453:114;;;;;;-1:-1:-1;;407:4453:114;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "407:4453:114:-:0;;;;;;;;;-1:-1:-1;407:4453:114;;;;;;;;1183:12:9;;;1054:5;1183:12;407:4453:114;1054:5:9;1183:12;407:4453:114;;;;;;;;;;4412:29;407:4453;4412:29;;;407:4453;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;407:4453:114;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;407:4453:114:-;;;;;;-1:-1:-1;;407:4453:114;;;;;;;526:42;407:4453;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;4817:34;;407:4453;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;407:4453:114;;-1:-1:-1;;;2392:23:61;;407:4453:114;;;2392:23:61;;;407:4453:114;-1:-1:-1;407:4453:114;2392:23:61;407:4453:114;2392:3:61;-1:-1:-1;;;;;407:4453:114;2392:23:61;;;;;;;407:4453:114;2392:23:61;;;407:4453:114;2429:19:61;407:4453:114;2429:19:61;;407:4453:114;2452:18:61;2429:41;2425:87;;4632:46:114;4643:16;407:4453;4643:16;;;407:4453;;;;4632:46;;;;;;:::i;:::-;407:4453;;;;;;;:::i;2425:87:61:-;2491:21;;;407:4453:114;2491:21:61;407:4453:114;;2491:21:61;2392:23;;;;;;407:4453:114;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;407:4453:114;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;4059:16;407:4453;;:::i;:::-;4059:16;407:4453;;:::i;:::-;;;;;;;;;4059:16;;;;:::i;:::-;;1055:104:6;;4059:16:114;;;;;;:::i;:::-;4018:186;407:4453;;;;;;;;;;4018:186;;4125:10;4018:186;407:4453;4018:186;;;:::i;:::-;;:4;407:4453;4018:4;:186;;;;;;407:4453;4018:186;;;407:4453;;;;;;;;;4018:186;;407:4453;4018:186;;407:4453;4018:186;;;;;;407:4453;4018:186;;;:::i;:::-;;;407:4453;;;;;;;4018:186;;;;;-1:-1:-1;4018:186:114;;407:4453;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;724:142:63;407:4453:114;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;407:4453:114:-;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;3635:187;407:4453;3676:16;;407:4453;;:::i;:::-;;;;;;;;;3676:16;;;;:::i;:::-;;1055:104:6;;3676:16:114;;;;;;:::i;:::-;407:4453;;-1:-1:-1;;;3635:187:114;;407:4453;;;;;3742:10;;;;407:4453;3635:187;;;:::i;407:4453::-;;1442:1461:9;407:4453:114;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;407:4453:114:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4453:114;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;407:4453:114;;;;;;;;:::i;:::-;-1:-1:-1;407:4453:114;;-1:-1:-1;;;3986:23:62;;407:4453:114;3986:23:62;;407:4453:114;;;-1:-1:-1;407:4453:114;3986:23:62;407:4453:114;3986:3:62;-1:-1:-1;;;;;407:4453:114;3986:23:62;;407:4453:114;;3986:23:62;;;407:4453:114;-1:-1:-1;3982:172:62;;4119:24;;;;407:4453:114;4119:24:62;407:4453:114;;3986:23:62;407:4453:114;4119:24:62;3982:172;4186:26;;407:4453:114;-1:-1:-1;;;;;407:4453:114;4168:15:62;:44;4164:87;;407:4453:114;;;;;;;4164:87:62;4233:18;;;407:4453:114;4233:18:62;407:4453:114;;4233:18:62;3986:23;;;;;;;407:4453:114;3986:23:62;;;;;;:::i;:::-;;;;;407:4453:114;;;;;;-1:-1:-1;;407:4453:114;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;407:4453:114;1497:44:61;;407:4453:114;;;1497:44:61;407:4453:114;;;;;;1497:14:61;407:4453:114;1497:44:61;;;;;;407:4453:114;1497:44:61;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;407:4453:114;1497:44:61;;;;;;:::i;:::-;;;407:4453:114;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;407:4453:114;;;;;;-1:-1:-1;;407:4453:114;;;;;;;542:43:61;407:4453:114;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;1055:104:6;;407:4453:114;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;407:4453:114;;;;;;;;;;;;1055:104:6;;;407:4453:114;;;;-1:-1:-1;;;407:4453:114;;;;;;;;;;;;;;;;;-1:-1:-1;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;407:4453:114:-;;;;4358:37;407:4453;;;:::i;4358:37::-;407:4453;;;4412:29;;;;;;;;;;407:4453;;;;4412:29;407:4453;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:114;;;;;;;;-1:-1:-1;;407:4453:114;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;;;;-1:-1:-1;407:4453:114;;;;;-1:-1:-1;407:4453:114;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;;;1055:104:6;;407:4453:114;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;:::o;:::-;-1:-1:-1;;;;;407:4453:114;;;;;;-1:-1:-1;;407:4453:114;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:114;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4453:114;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;-1:-1:-1;;407:4453:114;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;-1:-1:-1;;407:4453:114;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;407:4453:114;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;407:4453:114;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;-1:-1:-1;407:4453:114;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;-1:-1:-1;;;;;407:4453:114;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1239:267::-;1415:34;1239:267;1415:34;407:4453;;;1415:34;;;;;;:::i;:::-;407:4453;;1415:34;1484:14;;;;-1:-1:-1;;;;;407:4453:114;;;;1239:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;407:4453:114;;;;;;;;;;;;;4064:22:9;;;;4060:87;;407:4453:114;;;;;;;;;;;;;;4274:33:9;407:4453:114;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;407:4453:114;;3896:19:9;407:4453:114;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;407:4453:114;;;;3881:1:9;407:4453:114;;;;;3881:1:9;407:4453:114;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;407:4453:114;;:::i;:::-;2221:30:62;407:4453:114;;:::i;:::-;-1:-1:-1;407:4453:114;;-1:-1:-1;;;2314:27:62;;;;;407:4453:114;;;2314:3:62;-1:-1:-1;;;;;407:4453:114;;-1:-1:-1;407:4453:114;2314:27:62;407:4453:114;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;407:4453:114;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;2310:219;407:4453:114;;;;;2543:32:62;;;2314:27;2543:32;;407:4453:114;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;407:4453:114;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;407:4453:114;;2991:11:62;;;;;407:4453:114;2991:11:62;407:4453:114;2954:58:62;2991:11;;2954:58;:::i;:::-;407:4453:114;;;;;;;;;;;;;;;;;3083:66:62;;407:4453:114;2314:27:62;3083:66;;407:4453:114;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;407:4453:114;2314:27:62;407:4453:114;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;407:4453:114;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;407:4453:114;;;;;:::i;:::-;;;;-1:-1:-1;407:4453:114;3369:47:62;;407:4453:114;;;;;;;:::i;:::-;3323:18:62;407:4453:114;;;3275:160:62;;407:4453:114;;;3247:202:62;;;;;407:4453:114;;-1:-1:-1;;;3247:202:62;;407:4453:114;;2314:27:62;3247:202;;407:4453:114;;;;2314:27:62;407:4453:114;;;;;;;;;;-1:-1:-1;407:4453:114;;;-1:-1:-1;3247:202:62;;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;407:4453:114;;;2314:27:62;3488:25;;3231:293;2066:446:114;3231:293:62;;;;407:4453:114;3231:293:62;3622:11;407:4453:114;1916:74;407:4453;;;;;;;;;;;;;1916:74;;;;;;:::i;:::-;2354:22;407:4453;;;2404:34;;;;;407:4453;2404:34;;;;407:4453;2404:34;;:::i;:::-;407:4453;;;;;;:::i;:::-;;;2176:311;;;;407:4453;2176:311;407:4453;2176:311;;407:4453;;2176:311;;407:4453;;2176:311;;407:4453;2176:311;407:4453;2176:311;;407:4453;;;;;;;:::i;:::-;2135:17;407:4453;;2090:412;;;407:4453;;;;;;;;;;;;2066:446;;2314:27:62;2066:446:114;;;:::i;:::-;;;;;;;;;;;;;;3231:293:62;407:4453:114;3720:61:62;407:4453:114;;;2530:25;407:4453;2530:25;;407:4453;;2530:25;;;407:4453;2530:25;;:::i;:::-;407:4453;-1:-1:-1;;;;;407:4453:114;;3720:61:62;;2051:1760;:::o;2066:446:114:-;;;;407:4453;2066:446;;407:4453;2066:446;;;;;;407:4453;2066:446;;;:::i;:::-;;;407:4453;;;;;;3720:61:62;2066:446:114;;;;;-1:-1:-1;2066:446:114;;;407:4453;;;;;;;;;3247:202:62;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;407:4453:114;3083:66:62;;407:4453:114;3083:66:62;;;;;;407:4453:114;3083:66:62;;;:::i;:::-;;;407:4453:114;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;407:4453:114;;;;-1:-1:-1;;;;;407:4453:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;407:4453:114;;;;:::o;:::-;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;-1:-1:-1;407:4453:114;;;;;;;;;;;;:::o;2784:659::-;2997:18;1016:17:60;;;407:4453:114;1016:27:60;1012:55;;1084:27;;;:::i;:::-;2969:47:114;2965:65;;3072:79;3096:15;3196:36;3096:15;;;1016:17:60;407:4453:114;;;3072:79;;;;;;:::i;:::-;407:4453;1016:17:60;407:4453:114;;;3196:36;;;;;;:::i;:::-;3262:21;;;407:4453;3262:21;3287:25;;407:4453;3262:50;:102;;;;2784:659;3262:174;;;3243:193;;2784:659;:::o;3262:174::-;1016:17:60;3390:13:114;;;;;;407:4453;;;;;3380:24;3418:17;;;1016::60;407:4453:114;;;;3408:28;3380:56;2784:659;:::o;3262:102::-;407:4453;;;;-1:-1:-1;;;;;407:4453:114;;;;;3328:36;;-1:-1:-1;3262:102:114;;2965:65;3018:12;;407:4453;3018:12;:::o;1012:55:60:-;1052:15;;;407:4453:114;1052:15:60;;407:4453:114;1052:15:60;879:385:63;1914:299:61;879:385:63;;407:4453:114;879:385:63;1791:455:61;879:385:63;;;;;;407:4453:114;;;;;:::i;:::-;;;;;:::i;:::-;;-1:-1:-1;;;;;407:4453:114;;;;;;:::i;:::-;;;;;;;;;;;;1914:299:61;;;407:4453:114;2076:4:61;407:4453:114;1914:299:61;;407:4453:114;1914:299:61;;;407:4453:114;1914:299:61;;;407:4453:114;-1:-1:-1;1914:299:61;;;407:4453:114;;;;;;;:::i;:::-;1868:18:61;407:4453:114;;1819:413:61;;;407:4453:114;;;;;;;;;;1791:455:61;;;;;;:::i;:::-;;407:4453:114;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;407:4453:114;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;879:385:63;1150:55;;4817:26:62;-1:-1:-1;4817:26:62;;879:385:63:o;1791:455:61:-;;;;1914:299;1791:455;;1914:299;1791:455;;;;;;407:4453:114;1791:455:61;;;:::i;:::-;;;407:4453:114;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;407:4453:114;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;407:4453:114;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;407:4453:114;;-1:-1:-1;;;1033:111:50;;;;407:4453:114;1033:111:50;407:4453:114;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;407:4453:114;;;;26127:66:57;;26014:100;26027:7;26098:1;407:4453:114;;;;26014:100:57;;;25901;25914:7;25985:1;407:4453:114;;;;25901:100:57;;;25788;25801:7;25872:1;407:4453:114;;;;25788:100:57;;;25672:103;25685:8;25758:2;407:4453:114;;;;25672:103:57;;;25556;25569:8;25642:2;407:4453:114;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;407:4453:114;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;407:4453:114;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;407:4453:114;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;407:4453:114;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;407:4453:114;-1:-1:-1;;;;;407:4453:114;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;407:4453:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2509,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2552,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2595,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 6538,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2127,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1023,
          "length": 32
        },
        {
          "start": 1867,
          "length": 32
        },
        {
          "start": 4271,
          "length": 32
        },
        {
          "start": 6023,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1087,
          "length": 32
        },
        {
          "start": 2077,
          "length": 32
        },
        {
          "start": 2443,
          "length": 32
        },
        {
          "start": 4750,
          "length": 32
        },
        {
          "start": 5642,
          "length": 32
        },
        {
          "start": 5955,
          "length": 32
        }
      ],
      "56806": [
        {
          "start": 711,
          "length": 32
        },
        {
          "start": 4998,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "VALIDATION_SCHEMA()": "df61dd2c",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,bytes32),uint64)": "aadc8f63",
    "doObligationFor((address,bytes,bytes32),uint64,address)": "b5f3baff",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VALIDATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"attestationUid","type":"bytes32"}],"internalType":"struct AttestationEscrowObligation2.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/AttestationEscrowObligation2.sol":"AttestationEscrowObligation2"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/AttestationEscrowObligation2.sol":{"keccak256":"0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252","license":"UNLICENSED","urls":["bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4","dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "VALIDATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct AttestationEscrowObligation2.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "attestationUid",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationEscrowObligation2.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "attestationUid",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AttestationEscrowObligation2.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "attestationUid",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct AttestationEscrowObligation2.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "attestationUid",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/AttestationEscrowObligation2.sol": "AttestationEscrowObligation2"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/AttestationEscrowObligation2.sol": {
        "keccak256": "0x387ae58350478d9547582240dd5837e17ad8ddc7fa00886c36c40ffaa9b3e252",
        "urls": [
          "bzz-raw://3416c14fca2bfacdc26ab02a1a9517247e6c0d0fb10a776ae210f6a660688dd4",
          "dweb:/ipfs/QmfYDG6G29Pr18XucUuVgx8kj7dsUWd2xuPBJqTRQiag5N"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 114
};

// src/clients/attestation.ts
var makeAttestationClient = (viemClient, addresses) => {
  const escrowObligationDataType = (0, import_viem5.getAbiItem)({
    abi: abi33.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const escrow2ObligationDataType = (0, import_viem5.getAbiItem)({
    abi: abi34.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const attestationAbi = [escrowObligationDataType];
  const attestation2Abi = [escrow2ObligationDataType];
  const getEscrowSchema = async () => await viemClient.readContract({
    address: addresses.attestationEscrowObligation,
    abi: abi33.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const getEscrow2Schema = async () => await viemClient.readContract({
    address: addresses.attestationEscrowObligation2,
    abi: abi34.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  return {
    /**
     * Encodes AttestationEscrowObligation.ObligationData to bytes.
     * @param data - ObligationData object to encode
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (data) => {
      return (0, import_viem5.encodeAbiParameters)(attestationAbi, [data]);
    },
    /**
     * Encodes AttestationEscrowObligation2.ObligationData to bytes.
     * @param data - ObligationData object to encode
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrow2Obligation: (data) => {
      return (0, import_viem5.encodeAbiParameters)(attestation2Abi, [data]);
    },
    /**
     * Decodes AttestationEscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return (0, import_viem5.decodeAbiParameters)(attestationAbi, obligationData)[0];
    },
    /**
     * Decodes AttestationEscrowObligation2.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrow2Obligation: (obligationData) => {
      return (0, import_viem5.decodeAbiParameters)(attestation2Abi, obligationData)[0];
    },
    getEscrowSchema,
    getEscrow2Schema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getEscrowObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrowSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem5.decodeAbiParameters)(attestationAbi, attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getEscrow2Obligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrow2Schema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem5.decodeAbiParameters)(attestation2Abi, attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    /**
     * Creates an escrow using an attestation as the escrowed item.
     * This function uses the original AttestationEscrowObligation contract where the full attestation
     * data is stored in the escrow obligation. When collecting payment, this contract creates a new
     * attestation as the collection event, requiring the contract to have attestation rights.
     *
     * @param attestation - The attestation data to be escrowed
     * @param item - The arbiter and demand data for the escrow
     * @param expiration - Optional expiration time for the escrow (default: 0 = no expiration)
     * @returns The transaction hash and attested escrow data
     */
    buyWithAttestation: async (attestation, item, expiration = 0n) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation,
        abi: abi33.abi,
        functionName: "doObligation",
        args: [
          {
            attestation,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Collects payment from an attestation escrow by providing a fulfillment attestation.
     * This function is used with the original AttestationEscrowObligation contract.
     *
     * @param escrowAttestation - The UID of the escrow attestation
     * @param fulfillmentAttestation - The UID of the fulfillment attestation
     * @returns The transaction hash and validation attestation data
     */
    collectEscrow: async (escrowAttestation, fulfillmentAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation,
        abi: abi33.abi,
        functionName: "collectEscrow",
        args: [escrowAttestation, fulfillmentAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow using an attestation UID as reference.
     * This function uses AttestationEscrowObligation2 which references the attestation by UID
     * instead of storing the full attestation data, making it more gas efficient. When collecting
     * payment, this contract creates a validation attestation that references the original attestation,
     * allowing it to work with any schema implementation without requiring attestation rights.
     *
     * @param attestationUid - The UID of the attestation to be escrowed
     * @param item - The arbiter and demand data for the escrow
     * @param expiration - Optional expiration time for the escrow (default: 0 = no expiration)
     * @returns The transaction hash and attested escrow data
     */
    buyWithAttestation2: async (attestationUid, item, expiration = 0n) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation2,
        abi: abi34.abi,
        functionName: "doObligation",
        args: [
          {
            attestationUid,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Collects payment from an attestation escrow by providing a fulfillment attestation.
     * This function is used with AttestationEscrowObligation2 and creates a validation
     * attestation referencing the original attestation.
     *
     * @param escrowAttestation - The UID of the escrow attestation
     * @param fulfillmentAttestation - The UID of the fulfillment attestation
     * @returns The transaction hash and validation attestation data
     */
    collectEscrow2: async (escrowAttestation, fulfillmentAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationEscrowObligation2,
        abi: abi34.abi,
        functionName: "collectEscrow",
        args: [escrowAttestation, fulfillmentAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Registers a new schema in the EAS Schema Registry.
     *
     * @param schema - The schema string defining the attestation structure
     * @param resolver - The address of the resolver contract
     * @param revocable - Whether attestations using this schema can be revoked
     * @returns The transaction hash
     */
    registerSchema: async (schema, resolver, revocable) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "registerSchema",
        args: [schema, resolver, revocable]
      });
      return hash;
    },
    /**
     * Creates a new attestation using the AttestationBarterUtils contract.
     *
     * @param schema - The schema UID for the attestation
     * @param recipient - The recipient address of the attestation
     * @param expirationTime - The expiration time for the attestation
     * @param revocable - Whether the attestation can be revoked
     * @param refUID - Reference to another attestation UID (if any)
     * @param data - The encoded attestation data
     * @returns The transaction hash and attested data
     */
    createAttestation: async (schema, recipient, expirationTime, revocable, refUID, data) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "attest",
        args: [schema, recipient, expirationTime, revocable, refUID, data]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an attestation and immediately escrows it in a single transaction.
     * This is a convenience function that combines createAttestation and createEscrow.
     *
     * @param attestation - The attestation data to create and escrow
     * @param escrow - The escrow parameters including arbiter, demand, and expiration
     * @returns The transaction hash and attested data
     */
    attestAndCreateEscrow: async (attestation, escrow) => {
      const hash = await viemClient.writeContract({
        address: addresses.attestationBarterUtils,
        abi: abi32.abi,
        functionName: "attestAndCreateEscrow",
        args: [attestation, escrow.arbiter, escrow.demand, escrow.expirationTime]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc20.ts
var import_viem6 = require("viem");

// src/contracts/ERC20BarterCrossToken.ts
var abi35 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_erc20Escrow",
          "type": "address",
          "internalType": "contract ERC20EscrowObligation"
        },
        {
          "name": "_erc20Payment",
          "type": "address",
          "internalType": "contract ERC20PaymentObligation"
        },
        {
          "name": "_erc721Escrow",
          "type": "address",
          "internalType": "contract ERC721EscrowObligation"
        },
        {
          "name": "_erc721Payment",
          "type": "address",
          "internalType": "contract ERC721PaymentObligation"
        },
        {
          "name": "_erc1155Escrow",
          "type": "address",
          "internalType": "contract ERC1155EscrowObligation"
        },
        {
          "name": "_erc1155Payment",
          "type": "address",
          "internalType": "contract ERC1155PaymentObligation"
        },
        {
          "name": "_bundleEscrow",
          "type": "address",
          "internalType": "contract TokenBundleEscrowObligation"
        },
        {
          "name": "_bundlePayment",
          "type": "address",
          "internalType": "contract TokenBundlePaymentObligation"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyBundleWithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askData",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc1155WithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc20ForErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc721WithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc20ForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc20ForErc1155",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc20ForErc20",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc20ForErc721",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndBuyBundleWithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askData",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndBuyErc1155WithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndBuyErc20ForErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndBuyErc721WithErc20",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndBuyWithErc20",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayErc20ForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayErc20ForErc1155",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayErc20ForErc20",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayErc20ForErc721",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayWithErc20",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "payee",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "CouldntCollectEscrow",
      "inputs": []
    },
    {
      "type": "error",
      "name": "PermitFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "reason",
          "type": "string",
          "internalType": "string"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x6080346101ae57601f61227638819003918201601f19168301916001600160401b038311848410176101b257808492610120946040528339810103126101ae5780516001600160a01b03811691908290036101ae5760208101516001600160a01b038116908190036101ae5760408201516001600160a01b038116908190036101ae5760608301516001600160a01b038116908190036101ae5760808401516001600160a01b03811691908290036101ae5760a08501516001600160a01b03811693908490036101ae5760c08601516001600160a01b03811695908690036101ae5760e08701516001600160a01b03811697908890036101ae5761010001516001600160a01b03811698908990036101ae5760018060a01b03195f5416175f5560018060a01b0319600154161760015560018060a01b0319600254161760025560018060a01b0319600354161760035560018060a01b0319600454161760045560018060a01b0319600554161760055560018060a01b0319600654161760065560018060a01b0319600754161760075560018060a01b031960085416176008556040516120af90816101c78239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081631454e3d214610d34575080631b24bf5214610d185780632bf2ee3914610c6d5780633d94053d14610c5157806346b3aca214610c1157806367cebb7014610a9a57806372448d4d14610983578063759503f2146108d5578063a6c002e914610842578063a7a6884d146107a2578063a827053014610703578063a96addea146106a1578063ab2fc26514610609578063b56edf541461054b578063c17783891461047d578063c266137314610303578063e1982e13146101ab5763e3139e86146100e4575f80fd5b346101a8576100f236610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d5791610166602061015661012061016d97956101729b9a99978d859e9261017a575b5050015182808251830101910161174a565b015189808251830101910161118f565b95866118fc565b611fb2565b604051908152f35b61019692503d8091833e61018e8183610f0f565b810190611034565b5f80610144565b6040513d89823e3d90fd5b80fd5b50346101a8576101003660031901126101a8576101c6610deb565b906024356044356001600160401b0381116102ff5761010060031982360301126102ff576101f2610e41565b9260a43560ff811681036102fb576001546001600160a01b039081169190871690813b156102f75791839291868461024f96946040519788958694859363d505accf60e01b855260e4359260c435926084359133600489016112b2565b03925af191826102e2575b50506102c6578361026961159e565b6308c379a014610295575b6040516308f14ec160e11b81529081906102919060048301611650565b0390fd5b61029d6115b9565b90816102aa579050610274565b6102916040519283926308f14ec160e11b84526004840161162e565b9261017292916102dc6020953690600401611466565b91611eb2565b6102ed828092610f0f565b6101a8578061025a565b8380fd5b5080fd5b8280fd5b50346101a85760e03660031901126101a8578061031e610deb565b602435610329610e01565b6084359260ff84168403610479576002546001600160a01b03918216949116843b156104755761037e918691604051938492839263d505accf60e01b845260c4359160a435918a6064359133600489016112b2565b038183885af190811561046a57859161044c575b5050906020926103ed9260018060a01b036002541692604051926103b584610ed8565b8352858301526001600160a01b03166040808301919091525163446c5bf160e11b8152958693849283919033908190600485016118bd565b03925af19081156104405790610409575b602090604051908152f35b506020813d602011610438575b8161042360209383610f0f565b8101031261043457602090516103fe565b5f80fd5b3d9150610416565b604051903d90823e3d90fd5b8161045991949394610f0f565b6104655790835f610392565b505050fd5b6040513d87823e3d90fd5b8580fd5b8480fd5b50346101a8576101403660031901126101a857610498610deb565b602435916104a4610e01565b926104ad610e2b565b9160e43560ff811681036102fb576001546001600160a01b038681169116813b156102f7579183929183926105089560405180978195829463d505accf60e01b8452610124359161010435918d60c4359133600489016112b2565b03925af19182610536575b5050610522578261026961159e565b610172926020946084359260643592611cf9565b610541828092610f0f565b6101a85780610513565b50346101a85760203660031901126101a85760249060043561056b6111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa809383946105ed575b506105b6576301fb6dd160e01b825260045260249150fd5b6101726020916105e7836105d761012088015182808251830101910161174a565b015184808251830101910161118f565b90611fb2565b6106029194503d8085833e61018e8183610f0f565b925f61059e565b50346101a85761061836610f4b565b60015497999497959695929493926001600160a01b038a81169391169190833b1561047557859493926106668d9387936040519a8b988997889663d505accf60e01b885233600489016112b2565b03925af1918261068c575b5050610680578361026961159e565b60209461017294611ccc565b610697828092610f0f565b6101a85780610671565b50346101a85760803660031901126101a8576106bb610deb565b604435916001600160401b0383116101a85761010060031984360301126101a857602061017284846106f96106ee610e41565b923690600401611466565b9060243590611eb2565b50346101a85760203660031901126101a85780546040516328c44a9960e21b815260048035908201819052918390829060249082906001600160a01b03165afa9081156107975760206105d76101206101729594610776948885999261077c575b5050015182808251830101910161110f565b90611d7c565b61079092503d8091833e61018e8183610f0f565b5f80610764565b6040513d85823e3d90fd5b50346101a8576107b136610f4b565b6001549499959896979695949293926001600160a01b038088169391169190833b1561083e57869493926108008a938793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af180156108335761081e575b60206101728888888888611af6565b610829828092610f0f565b6101a8578061080f565b6040513d84823e3d90fd5b8680fd5b50346101a85761085136610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d579161016660206101566101206108b597956101729b9a99978d859e926108ba575b50500151828082518301019101611218565b611c05565b6108ce92503d8091833e61018e8183610f0f565b5f806108a3565b50346101a85760203660031901126101a8576024906004356108f56111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa80938394610967575b50610940576301fb6dd160e01b825260045260249150fd5b610172602091610961836105d761012088015182808251830101910161110f565b906119e5565b61097c9194503d8085833e61018e8183610f0f565b925f610928565b50346101a85761099236610dbf565b85546040516328c44a9960e21b81526004810187905292969492908590829060249082906001600160a01b03165afa90811561046a576109ed6101206109fe936020938991610a80575b50015182808251830101910161110f565b01516020808251830101910161118f565b8051600254602083015192986001600160a01b03928316949190921691843b15610a7c5791610a4c8896959493928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af1801561083357610a67575b60206101728585611d7c565b610a72828092610f0f565b6101a85780610a5b565b8780fd5b610a9491503d808b833e61018e8183610f0f565b5f6109dc565b50346104345761012036600319011261043457610ab5610deb565b9060243590610ac2610e01565b6064356001600160401b0381116104345736602382011215610434578060040135610aec81610f30565b91610afa6040519384610f0f565b818352366024838301011161043457815f926024602093018386013783010152608435916001600160401b03831683036104345760c4359560ff87168703610434576001546001600160a01b03918216969116863b1561043457610b84975f91604051998a92839263d505accf60e01b8452610104359160e435918860a4359133600489016112b2565b0381838a5af1968715610c06576103ed97610bf1575b506020949560018060a01b03600154169360405193610bb885610ea9565b60018060a01b03168452868401526040830152606082015284604051809781958294631e72ae8160e11b84523391339160048601611317565b602095505f610bff91610f0f565b5f94610b9a565b6040513d5f823e3d90fd5b346104345760c0366003190112610434576020610172610c2f610deb565b610c37610e01565b610c3f610e2b565b91608435916064359160243590611cf9565b34610434576020610172610c6436610e57565b93929092611ccc565b3461043457602036600319011261043457600435610c896111ce565b505f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa5f9181610cfc575b50610cd557506301fb6dd160e01b5f5260045260245ffd5b602091610cf6836105d7610120610172950151828082518301019101611218565b90611c05565b610d119192503d805f833e61018e8183610f0f565b9083610cbd565b34610434576020610172610d2b36610e57565b93929092611af6565b3461043457610d4236610dbf565b5f80546328c44a9960e21b8852600488018790529396929593839060249082906001600160a01b03165afa948515610c0657602096610166886101566101206101729a610da0985f91610da55750015182808251830101910161110f565b6119e5565b610db991503d805f833e61018e8183610f0f565b8d6109dc565b60a090600319011261043457600435906024359060443560ff8116810361043457906064359060843590565b600435906001600160a01b038216820361043457565b604435906001600160a01b038216820361043457565b35906001600160a01b038216820361043457565b60a435906001600160401b038216820361043457565b606435906001600160401b038216820361043457565b60a0906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b03811681036104345790565b608081019081106001600160401b03821117610ec457604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ec457604052565b61014081019081106001600160401b03821117610ec457604052565b90601f801991011681019081106001600160401b03821117610ec457604052565b6001600160401b038111610ec457601f01601f191660200190565b610120906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b0381168103610434579060a4359060c43560ff81168103610434579060e435906101043590565b51906001600160401b038216820361043457565b51906001600160a01b038216820361043457565b5190811515820361043457565b81601f820112156104345780519061100582610f30565b926110136040519485610f0f565b8284526020838301011161043457815f9260208093018386015e8301015290565b602081830312610434578051906001600160401b038211610434570161014081830312610434576040519161106883610ef3565b815183526020820151602084015261108260408301610fb9565b604084015261109360608301610fb9565b60608401526110a460808301610fb9565b608084015260a082015160a08401526110bf60c08301610fcd565b60c08401526110d060e08301610fcd565b60e08401526110e26101008301610fe1565b6101008401526101208201516001600160401b038111610434576111069201610fee565b61012082015290565b602081830312610434578051906001600160401b038211610434570190608082820312610434576040519161114383610ea9565b61114c81610fcd565b835260208101516001600160401b0381116104345760609261116f918301610fee565b602084015261118060408201610fcd565b60408401520151606082015290565b90816060910312610434576111c660408051926111ab84610ed8565b6111b481610fcd565b84526020810151602085015201610fcd565b604082015290565b604051906111db82610ef3565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b602081830312610434578051906001600160401b03821161043457019060a082820312610434576040519160a083018381106001600160401b03821117610ec45760405261126581610fcd565b835260208101516001600160401b03811161043457608092611288918301610fee565b602084015261129960408201610fcd565b6040840152606081015160608401520151608082015290565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b926001600160401b036060939695926080865260018060a01b038151166080870152846113546020830151608060a08a01526101008901906112f3565b6040838101516001600160a01b0390811660c08b0152929093015160e08901529890921660208701529181169185019190915216910152565b6001600160401b038111610ec45760051b60200190565b9080601f830112156104345781356113bb8161138d565b926113c96040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106113f15750505090565b602080916113fe84610e17565b8152019101906113e4565b9080601f830112156104345781356114208161138d565b9261142e6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106114565750505090565b8135815260209182019101611449565b91909161010081840312610434576040519061010082018281106001600160401b03821117610ec457604052819381356001600160401b03811161043457816114b09184016113a4565b835260208201356001600160401b03811161043457816114d1918401611409565b602084015260408201356001600160401b03811161043457816114f59184016113a4565b604084015260608201356001600160401b0381116104345781611519918401611409565b606084015260808201356001600160401b038111610434578161153d9184016113a4565b608084015260a08201356001600160401b0381116104345781611561918401611409565b60a084015260c0820135906001600160401b038211610434578261158e60e0949261159994869401611409565b60c086015201610e17565b910152565b5f9060033d116115aa57565b905060045f803e5f5160e01c90565b5f60443d1061161d576040513d600319016004823e8051913d60248401116001600160401b0384111761162857828201928351916001600160401b038311611620573d84016003190185840160200111611620575061161d92910160200190610f0f565b90565b949350505050565b92915050565b6001600160a01b03909116815260406020820181905261161d929101906112f3565b6001600160a01b039091168152604060208201819052600d908201526c2ab735b737bbb71032b93937b960991b606082015260800190565b9080601f8301121561043457815161169f8161138d565b926116ad6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106116d55750505090565b602080916116e284610fcd565b8152019101906116c8565b9080601f830112156104345781516117048161138d565b926117126040519485610f0f565b81845260208085019260051b82010192831161043457602001905b82821061173a5750505090565b815181526020918201910161172d565b602081830312610434578051906001600160401b038211610434570161012081830312610434576040519161012083018381106001600160401b03821117610ec45760405261179882610fcd565b835260208201516001600160401b03811161043457816117b9918401610fee565b602084015260408201516001600160401b03811161043457816117dd918401611688565b604084015260608201516001600160401b03811161043457816118019184016116ed565b606084015260808201516001600160401b0381116104345781611825918401611688565b608084015260a08201516001600160401b03811161043457816118499184016116ed565b60a084015260c08201516001600160401b038111610434578161186d918401611688565b60c084015260e08201516001600160401b03811161043457816118919184016116ed565b60e08401526101008201516001600160401b038111610434576118b492016116ed565b61010082015290565b81516001600160a01b03908116825260208084015190830152604092830151811692820192909252918116606083015291909116608082015260a00190565b805160025460208301519297969495946001600160a01b039283169392909116833b15610434576119495f96928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af190816119d5575b506119d1575061196261159e565b6308c379a014611994575b516040516308f14ec160e11b8152908190610291906001600160a01b031660048301611650565b61199c6115b9565b90816119a957905061196d565b516040516308f14ec160e11b815291829161029191906001600160a01b03166004840161162e565b9050565b5f6119df91610f0f565b5f611954565b6020611a185f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611ac1575b50600354604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575b5015611a785790565b63a97a981d60e01b5f5260045ffd5b90506020813d602011611ab9575b81611aa260209383610f0f565b8101031261043457611ab390610fe1565b5f611a6f565b3d9150611a95565b9091506020813d602011611aee575b81611add60209383610f0f565b810103126104345751906020611a2a565b3d9150611ad0565b600154600254604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b60018060a01b0316825287820152336040820152611b6c604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b60608152611b7b608082610f0f565b60405193611b8885610ea9565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601611317565b03925af1908115610c06575f91611bd6575090565b90506020813d602011611bfd575b81611bf160209383610f0f565b81010312610434575190565b3d9150611be4565b6020611c385f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611c97575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611cc4575b81611cb360209383610f0f565b810103126104345751906020611c4a565b3d9150611ca6565b600154600454604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b600154600654604051611bc19860209890976001600160a01b0394851697939094169594939192606090611d2c85610ea9565b60018060a01b0316938481528a8101938452604081019283520191338352604051938a85015251604084015251606083015260018060a01b03905116608082015260808152611b7b60a082610f0f565b6020611daf5f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611e0e575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611e3b575b81611e2a60209383610f0f565b810103126104345751906020611dc1565b3d9150611e1d565b90602080835192838152019201905f5b818110611e605750505090565b82516001600160a01b0316845260209384019390920191600101611e53565b90602080835192838152019201905f5b818110611e9c5750505090565b8251845260209384019390920191600101611e8f565b602092611bc1949260018060a01b03600154169260018060a01b036008541692611b7b60405180928980830152611f8e611f77611f61611f4b611f35611f1f611f09875161010060408b01526101408a0190611e43565b6020880151898203603f190160608b0152611e7f565b6040870151888203603f190160808a0152611e43565b6060860151878203603f190160a0890152611e7f565b6080850151868203603f190160c0880152611e43565b60a0840151858203603f190160e0870152611e7f565b60c0830151848203603f1901610100860152611e7f565b60e091909101516001600160a01b031661012083015203601f198101835282610f0f565b6020611fe55f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92612044575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011612071575b8161206060209383610f0f565b810103126104345751906020611ff7565b3d915061205356fea264697066735822122000be1237363c9ed5bd1a98802f3234c7cd67c8bc6f19e0835e56820c58671a4164736f6c634300081b0033",
    "sourceMap": "982:14186:85:-:0;;;;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;-1:-1:-1;982:14186:85;;;-1:-1:-1;982:14186:85;;;;;;;749:26:86;982:14186:85;;;749:26:86;982:14186:85;;;;;;;785:28:86;982:14186:85;;;785:28:86;982:14186:85;;;;;;;1954:28;982:14186;;;1954:28;982:14186;;;;;;;1992:30;982:14186;;;1992:30;982:14186;;;;;;;2032:30;982:14186;;;2032:30;982:14186;;;;;;;2072:32;982:14186;;;2072:32;982:14186;;;;;;;2114:28;982:14186;;;2114:28;982:14186;;;;;;;2152:30;982:14186;;;2152:30;982:14186;;;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;-1:-1:-1;982:14186:85;;;;;-1:-1:-1;982:14186:85",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081631454e3d214610d34575080631b24bf5214610d185780632bf2ee3914610c6d5780633d94053d14610c5157806346b3aca214610c1157806367cebb7014610a9a57806372448d4d14610983578063759503f2146108d5578063a6c002e914610842578063a7a6884d146107a2578063a827053014610703578063a96addea146106a1578063ab2fc26514610609578063b56edf541461054b578063c17783891461047d578063c266137314610303578063e1982e13146101ab5763e3139e86146100e4575f80fd5b346101a8576100f236610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d5791610166602061015661012061016d97956101729b9a99978d859e9261017a575b5050015182808251830101910161174a565b015189808251830101910161118f565b95866118fc565b611fb2565b604051908152f35b61019692503d8091833e61018e8183610f0f565b810190611034565b5f80610144565b6040513d89823e3d90fd5b80fd5b50346101a8576101003660031901126101a8576101c6610deb565b906024356044356001600160401b0381116102ff5761010060031982360301126102ff576101f2610e41565b9260a43560ff811681036102fb576001546001600160a01b039081169190871690813b156102f75791839291868461024f96946040519788958694859363d505accf60e01b855260e4359260c435926084359133600489016112b2565b03925af191826102e2575b50506102c6578361026961159e565b6308c379a014610295575b6040516308f14ec160e11b81529081906102919060048301611650565b0390fd5b61029d6115b9565b90816102aa579050610274565b6102916040519283926308f14ec160e11b84526004840161162e565b9261017292916102dc6020953690600401611466565b91611eb2565b6102ed828092610f0f565b6101a8578061025a565b8380fd5b5080fd5b8280fd5b50346101a85760e03660031901126101a8578061031e610deb565b602435610329610e01565b6084359260ff84168403610479576002546001600160a01b03918216949116843b156104755761037e918691604051938492839263d505accf60e01b845260c4359160a435918a6064359133600489016112b2565b038183885af190811561046a57859161044c575b5050906020926103ed9260018060a01b036002541692604051926103b584610ed8565b8352858301526001600160a01b03166040808301919091525163446c5bf160e11b8152958693849283919033908190600485016118bd565b03925af19081156104405790610409575b602090604051908152f35b506020813d602011610438575b8161042360209383610f0f565b8101031261043457602090516103fe565b5f80fd5b3d9150610416565b604051903d90823e3d90fd5b8161045991949394610f0f565b6104655790835f610392565b505050fd5b6040513d87823e3d90fd5b8580fd5b8480fd5b50346101a8576101403660031901126101a857610498610deb565b602435916104a4610e01565b926104ad610e2b565b9160e43560ff811681036102fb576001546001600160a01b038681169116813b156102f7579183929183926105089560405180978195829463d505accf60e01b8452610124359161010435918d60c4359133600489016112b2565b03925af19182610536575b5050610522578261026961159e565b610172926020946084359260643592611cf9565b610541828092610f0f565b6101a85780610513565b50346101a85760203660031901126101a85760249060043561056b6111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa809383946105ed575b506105b6576301fb6dd160e01b825260045260249150fd5b6101726020916105e7836105d761012088015182808251830101910161174a565b015184808251830101910161118f565b90611fb2565b6106029194503d8085833e61018e8183610f0f565b925f61059e565b50346101a85761061836610f4b565b60015497999497959695929493926001600160a01b038a81169391169190833b1561047557859493926106668d9387936040519a8b988997889663d505accf60e01b885233600489016112b2565b03925af1918261068c575b5050610680578361026961159e565b60209461017294611ccc565b610697828092610f0f565b6101a85780610671565b50346101a85760803660031901126101a8576106bb610deb565b604435916001600160401b0383116101a85761010060031984360301126101a857602061017284846106f96106ee610e41565b923690600401611466565b9060243590611eb2565b50346101a85760203660031901126101a85780546040516328c44a9960e21b815260048035908201819052918390829060249082906001600160a01b03165afa9081156107975760206105d76101206101729594610776948885999261077c575b5050015182808251830101910161110f565b90611d7c565b61079092503d8091833e61018e8183610f0f565b5f80610764565b6040513d85823e3d90fd5b50346101a8576107b136610f4b565b6001549499959896979695949293926001600160a01b038088169391169190833b1561083e57869493926108008a938793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af180156108335761081e575b60206101728888888888611af6565b610829828092610f0f565b6101a8578061080f565b6040513d84823e3d90fd5b8680fd5b50346101a85761085136610dbf565b9160248660018060a09897981b03815416604051928380926328c44a9960e21b82528960048301525afa90811561019d579161016660206101566101206108b597956101729b9a99978d859e926108ba575b50500151828082518301019101611218565b611c05565b6108ce92503d8091833e61018e8183610f0f565b5f806108a3565b50346101a85760203660031901126101a8576024906004356108f56111ce565b5081546040516328c44a9960e21b81526004810183905293839185919082906001600160a01b03165afa80938394610967575b50610940576301fb6dd160e01b825260045260249150fd5b610172602091610961836105d761012088015182808251830101910161110f565b906119e5565b61097c9194503d8085833e61018e8183610f0f565b925f610928565b50346101a85761099236610dbf565b85546040516328c44a9960e21b81526004810187905292969492908590829060249082906001600160a01b03165afa90811561046a576109ed6101206109fe936020938991610a80575b50015182808251830101910161110f565b01516020808251830101910161118f565b8051600254602083015192986001600160a01b03928316949190921691843b15610a7c5791610a4c8896959493928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af1801561083357610a67575b60206101728585611d7c565b610a72828092610f0f565b6101a85780610a5b565b8780fd5b610a9491503d808b833e61018e8183610f0f565b5f6109dc565b50346104345761012036600319011261043457610ab5610deb565b9060243590610ac2610e01565b6064356001600160401b0381116104345736602382011215610434578060040135610aec81610f30565b91610afa6040519384610f0f565b818352366024838301011161043457815f926024602093018386013783010152608435916001600160401b03831683036104345760c4359560ff87168703610434576001546001600160a01b03918216969116863b1561043457610b84975f91604051998a92839263d505accf60e01b8452610104359160e435918860a4359133600489016112b2565b0381838a5af1968715610c06576103ed97610bf1575b506020949560018060a01b03600154169360405193610bb885610ea9565b60018060a01b03168452868401526040830152606082015284604051809781958294631e72ae8160e11b84523391339160048601611317565b602095505f610bff91610f0f565b5f94610b9a565b6040513d5f823e3d90fd5b346104345760c0366003190112610434576020610172610c2f610deb565b610c37610e01565b610c3f610e2b565b91608435916064359160243590611cf9565b34610434576020610172610c6436610e57565b93929092611ccc565b3461043457602036600319011261043457600435610c896111ce565b505f80546040516328c44a9960e21b8152600481018490529190829060249082906001600160a01b03165afa5f9181610cfc575b50610cd557506301fb6dd160e01b5f5260045260245ffd5b602091610cf6836105d7610120610172950151828082518301019101611218565b90611c05565b610d119192503d805f833e61018e8183610f0f565b9083610cbd565b34610434576020610172610d2b36610e57565b93929092611af6565b3461043457610d4236610dbf565b5f80546328c44a9960e21b8852600488018790529396929593839060249082906001600160a01b03165afa948515610c0657602096610166886101566101206101729a610da0985f91610da55750015182808251830101910161110f565b6119e5565b610db991503d805f833e61018e8183610f0f565b8d6109dc565b60a090600319011261043457600435906024359060443560ff8116810361043457906064359060843590565b600435906001600160a01b038216820361043457565b604435906001600160a01b038216820361043457565b35906001600160a01b038216820361043457565b60a435906001600160401b038216820361043457565b606435906001600160401b038216820361043457565b60a0906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b03811681036104345790565b608081019081106001600160401b03821117610ec457604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b03821117610ec457604052565b61014081019081106001600160401b03821117610ec457604052565b90601f801991011681019081106001600160401b03821117610ec457604052565b6001600160401b038111610ec457601f01601f191660200190565b610120906003190112610434576004356001600160a01b03811681036104345790602435906044356001600160a01b03811681036104345790606435906084356001600160401b0381168103610434579060a4359060c43560ff81168103610434579060e435906101043590565b51906001600160401b038216820361043457565b51906001600160a01b038216820361043457565b5190811515820361043457565b81601f820112156104345780519061100582610f30565b926110136040519485610f0f565b8284526020838301011161043457815f9260208093018386015e8301015290565b602081830312610434578051906001600160401b038211610434570161014081830312610434576040519161106883610ef3565b815183526020820151602084015261108260408301610fb9565b604084015261109360608301610fb9565b60608401526110a460808301610fb9565b608084015260a082015160a08401526110bf60c08301610fcd565b60c08401526110d060e08301610fcd565b60e08401526110e26101008301610fe1565b6101008401526101208201516001600160401b038111610434576111069201610fee565b61012082015290565b602081830312610434578051906001600160401b038211610434570190608082820312610434576040519161114383610ea9565b61114c81610fcd565b835260208101516001600160401b0381116104345760609261116f918301610fee565b602084015261118060408201610fcd565b60408401520151606082015290565b90816060910312610434576111c660408051926111ab84610ed8565b6111b481610fcd565b84526020810151602085015201610fcd565b604082015290565b604051906111db82610ef3565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b602081830312610434578051906001600160401b03821161043457019060a082820312610434576040519160a083018381106001600160401b03821117610ec45760405261126581610fcd565b835260208101516001600160401b03811161043457608092611288918301610fee565b602084015261129960408201610fcd565b6040840152606081015160608401520151608082015290565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b926001600160401b036060939695926080865260018060a01b038151166080870152846113546020830151608060a08a01526101008901906112f3565b6040838101516001600160a01b0390811660c08b0152929093015160e08901529890921660208701529181169185019190915216910152565b6001600160401b038111610ec45760051b60200190565b9080601f830112156104345781356113bb8161138d565b926113c96040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106113f15750505090565b602080916113fe84610e17565b8152019101906113e4565b9080601f830112156104345781356114208161138d565b9261142e6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106114565750505090565b8135815260209182019101611449565b91909161010081840312610434576040519061010082018281106001600160401b03821117610ec457604052819381356001600160401b03811161043457816114b09184016113a4565b835260208201356001600160401b03811161043457816114d1918401611409565b602084015260408201356001600160401b03811161043457816114f59184016113a4565b604084015260608201356001600160401b0381116104345781611519918401611409565b606084015260808201356001600160401b038111610434578161153d9184016113a4565b608084015260a08201356001600160401b0381116104345781611561918401611409565b60a084015260c0820135906001600160401b038211610434578261158e60e0949261159994869401611409565b60c086015201610e17565b910152565b5f9060033d116115aa57565b905060045f803e5f5160e01c90565b5f60443d1061161d576040513d600319016004823e8051913d60248401116001600160401b0384111761162857828201928351916001600160401b038311611620573d84016003190185840160200111611620575061161d92910160200190610f0f565b90565b949350505050565b92915050565b6001600160a01b03909116815260406020820181905261161d929101906112f3565b6001600160a01b039091168152604060208201819052600d908201526c2ab735b737bbb71032b93937b960991b606082015260800190565b9080601f8301121561043457815161169f8161138d565b926116ad6040519485610f0f565b81845260208085019260051b82010192831161043457602001905b8282106116d55750505090565b602080916116e284610fcd565b8152019101906116c8565b9080601f830112156104345781516117048161138d565b926117126040519485610f0f565b81845260208085019260051b82010192831161043457602001905b82821061173a5750505090565b815181526020918201910161172d565b602081830312610434578051906001600160401b038211610434570161012081830312610434576040519161012083018381106001600160401b03821117610ec45760405261179882610fcd565b835260208201516001600160401b03811161043457816117b9918401610fee565b602084015260408201516001600160401b03811161043457816117dd918401611688565b604084015260608201516001600160401b03811161043457816118019184016116ed565b606084015260808201516001600160401b0381116104345781611825918401611688565b608084015260a08201516001600160401b03811161043457816118499184016116ed565b60a084015260c08201516001600160401b038111610434578161186d918401611688565b60c084015260e08201516001600160401b03811161043457816118919184016116ed565b60e08401526101008201516001600160401b038111610434576118b492016116ed565b61010082015290565b81516001600160a01b03908116825260208084015190830152604092830151811692820192909252918116606083015291909116608082015260a00190565b805160025460208301519297969495946001600160a01b039283169392909116833b15610434576119495f96928793604051998a988997889663d505accf60e01b885233600489016112b2565b03925af190816119d5575b506119d1575061196261159e565b6308c379a014611994575b516040516308f14ec160e11b8152908190610291906001600160a01b031660048301611650565b61199c6115b9565b90816119a957905061196d565b516040516308f14ec160e11b815291829161029191906001600160a01b03166004840161162e565b9050565b5f6119df91610f0f565b5f611954565b6020611a185f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611ac1575b50600354604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575b5015611a785790565b63a97a981d60e01b5f5260045ffd5b90506020813d602011611ab9575b81611aa260209383610f0f565b8101031261043457611ab390610fe1565b5f611a6f565b3d9150611a95565b9091506020813d602011611aee575b81611add60209383610f0f565b810103126104345751906020611a2a565b3d9150611ad0565b600154600254604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b60018060a01b0316825287820152336040820152611b6c604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b60608152611b7b608082610f0f565b60405193611b8885610ea9565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601611317565b03925af1908115610c06575f91611bd6575090565b90506020813d602011611bfd575b81611bf160209383610f0f565b81010312610434575190565b3d9150611be4565b6020611c385f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611c97575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611cc4575b81611cb360209383610f0f565b810103126104345751906020611c4a565b3d9150611ca6565b600154600454604051611bc19760209790966001600160a01b0394851696949093169492611b2383610ed8565b600154600654604051611bc19860209890976001600160a01b0394851697939094169594939192606090611d2c85610ea9565b60018060a01b0316938481528a8101938452604081019283520191338352604051938a85015251604084015251606083015260018060a01b03905116608082015260808152611b7b60a082610f0f565b6020611daf5f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92611e0e575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011611e3b575b81611e2a60209383610f0f565b810103126104345751906020611dc1565b3d9150611e1d565b90602080835192838152019201905f5b818110611e605750505090565b82516001600160a01b0316845260209384019390920191600101611e53565b90602080835192838152019201905f5b818110611e9c5750505090565b8251845260209384019390920191600101611e8f565b602092611bc1949260018060a01b03600154169260018060a01b036008541692611b7b60405180928980830152611f8e611f77611f61611f4b611f35611f1f611f09875161010060408b01526101408a0190611e43565b6020880151898203603f190160608b0152611e7f565b6040870151888203603f190160808a0152611e43565b6060860151878203603f190160a0890152611e7f565b6080850151868203603f190160c0880152611e43565b60a0840151858203603f190160e0870152611e7f565b60c0830151848203603f1901610100860152611e7f565b60e091909101516001600160a01b031661012083015203601f198101835282610f0f565b6020611fe55f9360018060a01b03600254169060405195868094819363446c5bf160e11b835233903390600485016118bd565b03925af1918215610c06575f92612044575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610c06575f91611a87575015611a785790565b9091506020813d602011612071575b8161206060209383610f0f565b810103126104345751906020611ff7565b3d915061205356fea264697066735822122000be1237363c9ed5bd1a98802f3234c7cd67c8bc6f19e0835e56820c58671a4164736f6c634300081b0033",
    "sourceMap": "982:14186:85:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;14694:34;982:14186;;;;;;;;;;;;;;;;;;;;;14694:34;;;982:14186;14694:34;;982:14186;14694:34;;;;;;;;14944:104;982:14186;14801:79;14825:8;15098:1;14694:34;;15117:42;14694:34;;;;;;;;;;982:14186;14825:8;;;;982:14186;;;;14801:79;;;;;;:::i;:::-;14968:17;;982:14186;;;;14944:104;;;;;;:::i;:::-;15098:1;;;:::i;:::-;15117:42;:::i;:::-;982:14186;;;;;;14694:34;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;982:14186;;;;;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;10359:206;;;;;982:14186;;;;;;10359:206;982:14186;;;;;;;;;;;;;;10359:206;;982:14186;;;;;;;;10393:10;;982:14186;10359:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;10343:408:85;;;;;:::i;:::-;;;;;;982:14186;;-1:-1:-1;;;10701:39:85;;982:14186;;;10701:39;;982:14186;10701:39;;;:::i;:::-;;;;10343:408;10577:96;;:::i;:::-;;;;;10343:408;;;;10577:96;10632:30;982:14186;;7801:30;;;;;;10632;;982:14186;10632:30;;;:::i;10343:408::-;;10768:61;10343:408;;982:14186;;10343:408;982:14186;;;;;:::i;:::-;10768:61;;:::i;10359:206::-;;;;;;:::i;:::-;982:14186;;10359:206;;;;982:14186;;;;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;2048:12:86;982:14186:85;-1:-1:-1;;;;;982:14186:85;;;;;;1989:169:86;;;;;;982:14186:85;;;;;;;;;;;;;1989:169:86;;982:14186:85;;;;;;;;;2016:10:86;;982:14186:85;1989:169:86;;;:::i;:::-;;;;;;;;;;;;;;;;982:14186:85;;;;;;2187:277:86;982:14186:85;;;;;;2048:12:86;982:14186:85;;;;;;;;;:::i;:::-;;;2233:161:86;;;982:14186:85;-1:-1:-1;;;;;982:14186:85;;2233:161:86;;;982:14186:85;;;;;-1:-1:-1;;;2187:277:86;;982:14186:85;;;;;;;;2016:10:86;;;;982:14186:85;2187:277:86;;;:::i;:::-;;;;;;;;;;;;;982:14186:85;;;;;;;;;2187:277:86;;982:14186:85;2187:277:86;;982:14186:85;2187:277:86;;;;;;982:14186:85;2187:277:86;;;:::i;:::-;;;982:14186:85;;;;;;;2187:277:86;;982:14186:85;-1:-1:-1;982:14186:85;;2187:277:86;;;-1:-1:-1;2187:277:86;;;982:14186:85;;;;;;;;;;1989:169:86;;;;;;;;:::i;:::-;982:14186:85;;1989:169:86;;;;;982:14186:85;;;;;1989:169:86;982:14186:85;;;;;;;;;1989:169:86;982:14186:85;;;;;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;9005:206;;;;;982:14186;;;;;;9005:206;982:14186;;;;;;;;;;;;9005:206;;982:14186;;;;;;;;;9039:10;;982:14186;9005:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;8989:408:85;;;;;:::i;:::-;9426:191;8989:408;982:14186;8989:408;982:14186;;;;;9426:191;;:::i;9005:206::-;;;;;;:::i;:::-;982:14186;;9005:206;;;982:14186;;;;;;;-1:-1:-1;;982:14186:85;;;;12468:34;982:14186;;;;;:::i;:::-;-1:-1:-1;982:14186:85;;;;-1:-1:-1;;;12468:34:85;;982:14186;12468:34;;982:14186;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;12468:34;;;;;;;;982:14186;-1:-1:-1;12464:204:85;;-1:-1:-1;;;12622:35:85;;982:14186;;12468:34;;-1:-1:-1;12622:35:85;12464:204;13006:42;982:14186;12573:10;12884:104;12573:10;12741:79;12765:8;12573:10;12765:8;;982:14186;;;;12741:79;;;;;;:::i;:::-;12908:17;;982:14186;;;;12884:104;;;;;;:::i;:::-;13006:42;;:::i;12468:34::-;;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;7528:206;;;;;982:14186;;;;7528:206;982:14186;;;;;;;;;;;;;;;;7528:206;;7562:10;982:14186;7528:206;;;:::i;:::-;;;;;;;;;982:14186;-1:-1:-1;;7512:408:85;;;;;:::i;:::-;982:14186;7512:408;7949:163;7512:408;7949:163;:::i;7528:206::-;;;;;;:::i;:::-;982:14186;;7528:206;;;982:14186;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;9901:61;982:14186;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;9901:61;;:::i;982:14186::-;;;;;;;-1:-1:-1;;982:14186:85;;;;;;;;-1:-1:-1;;;5958:34:86;;982:14186:85;;;5958:34:86;;;982:14186:85;;;;;;;;5958:34:86;;982:14186:85;;-1:-1:-1;;;;;982:14186:85;5958:34:86;;;;;;;982:14186:85;6059:94:86;6083:8;6339:41;5958:34;;6217:104;5958:34;;;;;;;982:14186:85;6083:8:86;;;;982:14186:85;;;;6059:94:86;;;;;;:::i;6217:104::-;6339:41;;:::i;5958:34::-;;;;;;;;;;;;;:::i;:::-;;;;;;982:14186:85;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;4150:174:86;;;;;982:14186:85;;;;4150:174:86;982:14186:85;;;;;;;;;;;;;;;;4150:174:86;;4180:10;982:14186:85;4150:174:86;;;:::i;:::-;;;;;;;;;;;982:14186:85;;4353:165:86;;;;;;;:::i;4150:174::-;;;;;;:::i;:::-;982:14186:85;;4150:174:86;;;;982:14186:85;;;;;;;;;4150:174:86;982:14186:85;;;;;;;;;;;:::i;:::-;;13985:34;982:14186;;;;;;;;;;;;;;;;;;;;;13985:34;;;982:14186;13985:34;;982:14186;13985:34;;;;;;;;14248:104;982:14186;14088:96;14112:8;14402:1;13985:34;;14421:43;13985:34;;;;;;;;;;982:14186;14112:8;;;;982:14186;;;;14088:96;;;;;;:::i;14402:1::-;14421:43;:::i;13985:34::-;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;-1:-1:-1;;982:14186:85;;;;10980:34;982:14186;;;;;:::i;:::-;-1:-1:-1;982:14186:85;;;;-1:-1:-1;;;10980:34:85;;982:14186;10980:34;;982:14186;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;10980:34;;;;;;;;982:14186;-1:-1:-1;10976:204:85;;-1:-1:-1;;;11134:35:85;;982:14186;;10980:34;;-1:-1:-1;11134:35:85;10976:204;11529:42;982:14186;11085:10;11407:104;11085:10;11248:95;11272:8;11085:10;11272:8;;982:14186;;;;11248:95;;;;;;:::i;11407:104::-;11529:42;;:::i;10980:34::-;;;;;;;;;;;;;;:::i;:::-;;;;;982:14186;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;4747:34:86;;982:14186:85;4747:34:86;;982:14186:85;;;;;;;;;;;;4747:34:86;;982:14186:85;;-1:-1:-1;;;;;982:14186:85;4747:34:86;;;;;;;4848:94;4872:8;5006:104;4747:34;982:14186:85;4747:34:86;;;;;982:14186:85;4872:8:86;;;982:14186:85;;;;4848:94:86;;;;;;:::i;:::-;5030:17;;982:14186:85;;;;5006:104:86;;;;;;:::i;:::-;982:14186:85;;5244:12:86;982:14186:85;;5271:13:86;;982:14186:85;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;5182:179:86;;;;;982:14186:85;5182:179:86;982:14186:85;;;;;;;;;;;;;;;;;;;;5182:179:86;;5212:10;982:14186:85;5182:179:86;;;:::i;:::-;;;;;;;;;;;982:14186:85;;5379:41:86;;;;:::i;5182:179::-;;;;;;:::i;:::-;982:14186:85;;5182:179:86;;;;982:14186:85;;;4747:34:86;;;;;;;;;;;;;:::i;:::-;;;;982:14186:85;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;1160:168:86;;;;;;982:14186:85;;;;;;;;;;;;;1160:168:86;;982:14186:85;;;;;;;;;1187:10:86;;982:14186:85;1160:168:86;;;:::i;:::-;;;;;;;;;;;;1357:343;1160:168;;;982:14186:85;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1402:200:86;;;982:14186:85;;1402:200:86;;982:14186:85;;1402:200:86;;982:14186:85;;;;;;;;;;;;;1357:343:86;;1187:10;;;1357:343;982:14186:85;1357:343:86;;;:::i;1160:168::-;982:14186:85;1160:168:86;;982:14186:85;1160:168:86;;;:::i;:::-;982:14186:85;1160:168:86;;;;982:14186:85;;;;;;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;;8410:191;982:14186;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;8410:191;;:::i;982:14186::-;;;;;6989:163;982:14186;;;:::i;:::-;6989:163;;;;;:::i;982:14186::-;;;;;;-1:-1:-1;;982:14186:85;;;;;;;;:::i;:::-;-1:-1:-1;982:14186:85;;;;;-1:-1:-1;;;11723:34:85;;982:14186;11723:34;;982:14186;;;;;;;11723:34;;982:14186;;-1:-1:-1;;;;;982:14186:85;11723:34;;982:14186;;11723:34;;;982:14186;-1:-1:-1;11719:204:85;;11877:35;;;;982:14186;11877:35;982:14186;;11723:34;982:14186;11877:35;11719:204;982:14186;11828:10;12152:104;11828:10;11992:96;12016:8;12274:43;11828:10;12016:8;;982:14186;;;;11992:96;;;;;;:::i;12152:104::-;12274:43;;:::i;11723:34::-;;;;;;;982:14186;11723:34;;;;;;:::i;:::-;;;;;982:14186;;;;;5654:165:86;982:14186:85;;;:::i;:::-;5654:165:86;;;;;:::i;982:14186:85:-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;13278:34:85;;982:14186;13278:34;;982:14186;;;;;;;;;;13278:34;;982:14186;;-1:-1:-1;;;;;982:14186:85;13278:34;;;;;;;982:14186;13278:34;13539:104;13278:34;13380:95;13404:8;13712:42;13278:34;13693:1;13278:34;982:14186;13278:34;;;13404:8;;;982:14186;;;;13380:95;;;;;;:::i;13693:1::-;13712:42;:::i;13278:34::-;;;;;;982:14186;13278:34;;;;;;:::i;:::-;;;;982:14186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;:::o;:::-;;;;-1:-1:-1;982:14186:85;;;;;-1:-1:-1;982:14186:85;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:85;;;;;;-1:-1:-1;;982:14186:85;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;982:14186:85;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;-1:-1:-1;982:14186:85;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;;;-1:-1:-1;;982:14186:85;;;;:::o;:::-;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:85;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;-1:-1:-1;;982:14186:85;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;:::o;:::-;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;-1:-1:-1;;;982:14186:85;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2221:680::-;982:14186;;2560:12;982:14186;2591:13;;;982:14186;2221:680;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;2221:680;;982:14186;2490:211;;;;;;-1:-1:-1;982:14186:85;;;;;;;;;;;;;;;;2490:211;;2524:10;2490:211;;;;:::i;:::-;;;;;;;;;2221:680;-1:-1:-1;2474:421:85;;;;;:::i;:::-;;;;;;982:14186;;;-1:-1:-1;;;2841:43:85;;982:14186;;;2841:43;;-1:-1:-1;;;;;982:14186:85;2490:211;2841:43;;;:::i;2474:421::-;2713:100;;:::i;:::-;;;;;2474:421;;;;2713:100;982:14186;;;-1:-1:-1;;;2768:34:85;;982:14186;;;2768:34;;7801:30;-1:-1:-1;;;;;982:14186:85;2490:211;2768:34;;;:::i;2474:421::-;;;2221:680::o;2490:211::-;-1:-1:-1;2490:211:85;;;:::i;:::-;-1:-1:-1;2490:211:85;;5315:466;5505:106;;-1:-1:-1;5315:466:85;982:14186;;;;;5505:12;982:14186;;;;;;;;;;;;;;5505:106;;5567:10;;;5505:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;5505:106:85;;;5315:466;-1:-1:-1;5627:12:85;982:14186;;;-1:-1:-1;;;5627:59:85;;5505:106;5627:59;;982:14186;;;;;;;;;;5505:106;;982:14186;;5627:59;;982:14186;;-1:-1:-1;;;;;;;982:14186:85;5627:59;;;;;;;-1:-1:-1;5627:59:85;;;5315:466;5626:60;;5622:120;;5315:466;:::o;5622:120::-;5709:22;;;-1:-1:-1;5709:22:85;5505:106;-1:-1:-1;5709:22:85;5627:59;;;5505:106;5627:59;;5505:106;5627:59;;;;;;5505:106;5627:59;;;:::i;:::-;;;982:14186;;;;;;;:::i;:::-;5627:59;;;;;;-1:-1:-1;5627:59:85;;5505:106;;;;;;;;;;;;;;982:14186;5505:106;;;:::i;:::-;;;982:14186;;;;;;5505:106;;;;;;-1:-1:-1;5505:106:85;;2477:848:86;982:14186:85;;2896:12:86;982:14186:85;;;2699:619:86;;2975:204;;2699:619;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2975:204:86;;;982:14186:85;3142:10:86;982:14186:85;2975:204:86;;982:14186:85;;;;2939:262:86;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:262:86;;;;;;:::i;:::-;982:14186:85;;;;;;:::i;:::-;;;2744:476:86;;;982:14186:85;;;;;;;;2744:476:86;;982:14186:85;;2744:476:86;;982:14186:85;-1:-1:-1;982:14186:85;;;;;;;;;;;2699:619:86;;3142:10;;;2699:619;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;2699:619:86;;;2680:638;2477:848;:::o;2699:619::-;;;2975:204;2699:619;;2975:204;2699:619;;;;;;982:14186:85;2699:619:86;;;:::i;:::-;;;982:14186:85;;;;;2477:848:86;:::o;2699:619::-;;;-1:-1:-1;2699:619:86;;5787:468:85;5978:106;;-1:-1:-1;5787:468:85;982:14186;;;;;5978:12;982:14186;;;;;;;;;;;;;;5978:106;;6040:10;;;5978:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;5978:106:85;;;5787:468;-1:-1:-1;6100:13:85;982:14186;;;-1:-1:-1;;;6100:60:85;;5978:106;6100:60;;982:14186;;;;;;;;;;5978:106;;982:14186;;6100:60;;982:14186;;-1:-1:-1;;;;;;;982:14186:85;6100:60;;;;;;;-1:-1:-1;6100:60:85;;;6099:61;;6095:121;;5787:468;:::o;5978:106::-;;;;;;;;;;;;;;982:14186;5978:106;;;:::i;:::-;;;982:14186;;;;;;5978:106;;;;;;-1:-1:-1;5978:106:85;;2907:845;982:14186;;3324:13;982:14186;;;3127:618;;3404:202;;3127:618;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;:::i;3758:922::-;982:14186;;4203:14;982:14186;;;4006:667;;4284:250;;3758:922;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;3758:922;;982:14186;;4284:250;;982:14186;;;:::i;:::-;;;;;;;;;;;4284:250;;;982:14186;;;;4284:250;;982:14186;;;4284:250;4497:10;;982:14186;;;;4248:308;;;;982:14186;;;;;;;4284:250;982:14186;;;;;;;;;;;;;;;;4248:308;;;;;;:::i;3331:464:86:-;3520:106;;-1:-1:-1;3331:464:86;982:14186:85;;;;;3520:12:86;982:14186:85;;;;;;;;;;;;;;3520:106:86;;3582:10;;;3520:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;3520:106:86;;;3331:464;-1:-1:-1;982:14186:85;;;;-1:-1:-1;;;3642:58:86;;3520:106;3642:58;;982:14186:85;;;;;;;;;;3520:106:86;;982:14186:85;;3642:58:86;;982:14186:85;;-1:-1:-1;;;;;;;982:14186:85;3642:58:86;;;;;;;-1:-1:-1;3642:58:86;;;3641:59;;3637:119;;3331:464;:::o;3520:106::-;;;;;;;;;;;;;;982:14186:85;3520:106:86;;;:::i;:::-;;;982:14186:85;;;;;;3520:106:86;;;;;;-1:-1:-1;3520:106:86;;982:14186:85;;;;;;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;982:14186:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;982:14186:85;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;4686:623;5166:19;4686:623;4925:377;4686:623;;982:14186;;;;;4925:11;982:14186;;;;;;;;5122:13;982:14186;;;5166:19;982:14186;;5166:19;;;;;;982:14186;;;;;;;;;;;;;;;;;;;;:::i;:::-;5166:19;982:14186;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;982:14186:85;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;982:14186:85;;;;;5166:19;-1:-1:-1;;5166:19:85;;;;;;:::i;6261:466::-;6451:106;;-1:-1:-1;6261:466:85;982:14186;;;;;6451:12;982:14186;;;;;;;;;;;;;;6451:106;;6513:10;;;6451:106;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;6451:106:85;;;6261:466;-1:-1:-1;6573:12:85;982:14186;;;-1:-1:-1;;;6573:59:85;;6451:106;6573:59;;982:14186;;;;;;;;;;6451:106;;982:14186;;6573:59;;982:14186;;-1:-1:-1;;;;;;;982:14186:85;6573:59;;;;;;;-1:-1:-1;6573:59:85;;;6572:60;;6568:120;;6261:466;:::o;6451:106::-;;;;;;;;;;;;;;982:14186;6451:106;;;:::i;:::-;;;982:14186;;;;;;6451:106;;;;;;-1:-1:-1;6451:106:85;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "buyBundleWithErc20(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "a96addea",
    "buyErc1155WithErc20(address,uint256,address,uint256,uint256,uint64)": "46b3aca2",
    "buyErc20ForErc20(address,uint256,address,uint256,uint64)": "1b24bf52",
    "buyErc721WithErc20(address,uint256,address,uint256,uint64)": "3d94053d",
    "payErc20ForBundle(bytes32)": "b56edf54",
    "payErc20ForErc1155(bytes32)": "2bf2ee39",
    "payErc20ForErc20(bytes32)": "a8270530",
    "payErc20ForErc721(bytes32)": "759503f2",
    "permitAndBuyBundleWithErc20(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64,uint256,uint8,bytes32,bytes32)": "e1982e13",
    "permitAndBuyErc1155WithErc20(address,uint256,address,uint256,uint256,uint64,uint256,uint8,bytes32,bytes32)": "c1778389",
    "permitAndBuyErc20ForErc20(address,uint256,address,uint256,uint64,uint256,uint8,bytes32,bytes32)": "a7a6884d",
    "permitAndBuyErc721WithErc20(address,uint256,address,uint256,uint64,uint256,uint8,bytes32,bytes32)": "ab2fc265",
    "permitAndBuyWithErc20(address,uint256,address,bytes,uint64,uint256,uint8,bytes32,bytes32)": "67cebb70",
    "permitAndPayErc20ForBundle(bytes32,uint256,uint8,bytes32,bytes32)": "e3139e86",
    "permitAndPayErc20ForErc1155(bytes32,uint256,uint8,bytes32,bytes32)": "a6c002e9",
    "permitAndPayErc20ForErc20(bytes32,uint256,uint8,bytes32,bytes32)": "72448d4d",
    "permitAndPayErc20ForErc721(bytes32,uint256,uint8,bytes32,bytes32)": "1454e3d2",
    "permitAndPayWithErc20(address,uint256,address,uint256,uint8,bytes32,bytes32)": "c2661373"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"string","name":"reason","type":"string"}],"name":"PermitFailed","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc20ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyBundleWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc1155WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyErc721WithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndBuyWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayErc20ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAndPayWithErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC20BarterCrossToken.sol":"ERC20BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef","license":"UNLICENSED","urls":["bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf","dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39","license":"UNLICENSED","urls":["bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411","dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019","license":"UNLICENSED","urls":["bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e","dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5","license":"UNLICENSED","urls":["bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3","dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"]},"src/utils/ERC20BarterCrossToken.sol":{"keccak256":"0x184e3195ea4bf95fe10083a36192cb4be23cb5d80ecc9ee9bc6d561a6d77ae30","license":"UNLICENSED","urls":["bzz-raw://1d1cebfbb0301a6393601cee78479b46d3743ed87724a51d01e510b91e05b639","dweb:/ipfs/QmeFrxcT49e6j7MHyfQWmakUaZJZ8tL1veDYfpX7Wtq5zf"]},"src/utils/ERC20BarterUtils.sol":{"keccak256":"0x057fa06fd0ce0f5c0befd73f0bd424c12ff72fdcb02f9cb759a0a74780d09160","license":"UNLICENSED","urls":["bzz-raw://267205a248ad08155e99fbe567e73378e93adb9a34146bb3c5a01b754a5cc894","dweb:/ipfs/QmSE4UcGQ2DPXpM7JVJEZRMSGSWLnYdwtWXtiodRs6oTvk"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ERC20EscrowObligation",
              "name": "_erc20Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC20PaymentObligation",
              "name": "_erc20Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC721EscrowObligation",
              "name": "_erc721Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC721PaymentObligation",
              "name": "_erc721Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155EscrowObligation",
              "name": "_erc1155Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155PaymentObligation",
              "name": "_erc1155Payment",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundleEscrowObligation",
              "name": "_bundleEscrow",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundlePaymentObligation",
              "name": "_bundlePayment",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CouldntCollectEscrow"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "PermitFailed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "askData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyBundleWithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc1155WithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc20ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc721WithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc20ForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc20ForErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc20ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc20ForErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "askData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndBuyBundleWithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndBuyErc1155WithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndBuyErc20ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndBuyErc721WithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndBuyWithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayErc20ForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayErc20ForErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayErc20ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayErc20ForErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayWithErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/utils/ERC20BarterCrossToken.sol": "ERC20BarterCrossToken"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        "urls": [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        "keccak256": "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        "urls": [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        "keccak256": "0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef",
        "urls": [
          "bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf",
          "dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        "keccak256": "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        "urls": [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        "keccak256": "0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39",
        "urls": [
          "bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411",
          "dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        "keccak256": "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        "urls": [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        "keccak256": "0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019",
        "urls": [
          "bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e",
          "dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        "keccak256": "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        "urls": [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        "keccak256": "0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5",
        "urls": [
          "bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3",
          "dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC20BarterCrossToken.sol": {
        "keccak256": "0x184e3195ea4bf95fe10083a36192cb4be23cb5d80ecc9ee9bc6d561a6d77ae30",
        "urls": [
          "bzz-raw://1d1cebfbb0301a6393601cee78479b46d3743ed87724a51d01e510b91e05b639",
          "dweb:/ipfs/QmeFrxcT49e6j7MHyfQWmakUaZJZ8tL1veDYfpX7Wtq5zf"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC20BarterUtils.sol": {
        "keccak256": "0x057fa06fd0ce0f5c0befd73f0bd424c12ff72fdcb02f9cb759a0a74780d09160",
        "urls": [
          "bzz-raw://267205a248ad08155e99fbe567e73378e93adb9a34146bb3c5a01b754a5cc894",
          "dweb:/ipfs/QmSE4UcGQ2DPXpM7JVJEZRMSGSWLnYdwtWXtiodRs6oTvk"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 85
};

// src/contracts/ERC20EscrowObligation.ts
var abi36 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC20EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC20EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC20EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC20EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC20TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x61016080604052346101f857604081611e0f80380380916100208285610232565b8339810103126101f85780516001600160a01b038116918282036101f85760200151916001600160a01b0383168084036101f857604051606081016001600160401b0381118282101761021e57604052603c815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c206184527f64647265737320746f6b656e2c2075696e7432353620616d6f756e740000000060408301526001608052600360a0525f60c0521561020f576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af1908115610204575f916101ce575b5061014052604051611bb99081610256823960805181610927015260a05181610952015260c0518161097d015260e051816119d6015261010051816107a90152610120518181816103be015281816106820152818161115301526117560152610140518181816103fe01528181610777015281816108e501528181611332015281816114cb01526116a90152f35b90506020813d6020116101fc575b816101e960209383610232565b810103126101f857515f610140565b5f80fd5b3d91506101dc565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b0382119082101761021e5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610a855780633ce55d02146109f657806354fd4d50146109085780635bf2f20d146108ce5780636b122fe0146107385780637d2c29311461064a5780638371ef59146105ec57806388e5b2d91461059f578063891d9ea8146105be57806391db0b7e1461059f578063a4f0d517146104cb578063b3b902d414610485578063c6ec50701461037f578063c93844be146102b2578063ce46e04614610298578063e49617e11461027d578063e60c35051461027d578063e6c9714d1461015b5763f0ffa1850361000e5760a0366003190112610157576004356001600160401b0381116101575761014f61012c6020923690600401610cac565b610134610aa8565b61013c610ad2565b90610145610ae8565b92608435946115ba565b604051908152f35b5f80fd5b34610157576060366003190112610157576004356001600160401b038111610157576101406003198236030112610157576040519061019982610b65565b80600401358252602481013560208301526101b660448201610abe565b60408301526101c760648201610abe565b60608301526101d860848201610abe565b608083015260a481013560a08301526101f360c48201610afe565b60c083015261020460e48201610afe565b60e0830152610104810135801515810361015757610100830152610124810135906001600160401b0382116101575760046102429236920101610c0e565b6101208201526024356001600160401b0381116101575760209161026d610273923690600401610c0e565b906114c9565b6040519015158152f35b602061027361028b36610d23565b6102936119d4565b611a15565b34610157575f3660031901126101575760206040515f8152f35b34610157576020366003190112610157576004356001600160401b038111610157576102e2903690600401610cac565b6102ea6114a5565b50810190602081830312610157578035906001600160401b038211610157570190608082820312610157576040519061032282610b36565b61032b83610afe565b82526020830135926001600160401b0384116101575761035260609261037b958301610c0e565b602084015261036360408201610afe565b60408401520135606082015260405191829182610cd9565b0390f35b34610157576020366003190112610157576103986114a5565b506103a1610e75565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561047a575f91610458575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036104495761043d61012061037b92015160208082518301019101610fdc565b60405191829182610cd9565b635527981560e11b5f5260045ffd5b61047491503d805f833e61046c8183610b9c565b810190610f01565b816103f6565b6040513d5f823e3d90fd5b6060366003190112610157576004356001600160401b0381116101575761014f6104b56020923690600401610cac565b6104bd610aa8565b9160443592339233926115ba565b34610157576040366003190112610157576004356001600160401b038111610157576080600319823603011261015757602061054e9161052161052f61050f610aa8565b92604051928391600401868301610d57565b03601f198101835282610b9c565b60405163f0ffa18560e01b815293849283923391829160048601610def565b03815f305af1801561047a575f9061056c575b602090604051908152f35b506020813d602011610597575b8161058660209383610b9c565b810103126101575760209051610561565b3d9150610579565b60206102736105ad36610c5c565b926105b99291926119d4565b611085565b346101575761037b6105d86105d236610a92565b90611129565b604051918291602083526020830190610b12565b34610157576020366003190112610157576004356001600160401b0381116101575761061f610624913690600401610c0e565b61105c565b604080516001600160a01b03909316835260208301819052829161037b91830190610b12565b3461015757602036600319011261015757600435610666610e75565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161071c575b506106cc57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b03606082015116421061070d5761012081015160c090910151610701916001600160a01b0390911690611a89565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6107319192503d805f833e61046c8183610b9c565b90836106b4565b34610157575f3660031901126101575760608060405161075781610b36565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561047a575f9061081e575b60609061037b604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b12565b503d805f833e61082e8183610b9c565b810190602081830312610157578051906001600160401b0382116101575701608081830312610157576040519061086482610b36565b8051825260208101516001600160a01b038116810361015757602083015261088e60408201610e32565b60408301526060810151906001600160401b038211610157570182601f82011215610157576060928160206108c593519101610e3f565b828201526107d8565b34610157575f3660031901126101575760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610157575f3660031901126101575761037b60206105d8600161094b7f0000000000000000000000000000000000000000000000000000000000000000611867565b81846109767f0000000000000000000000000000000000000000000000000000000000000000611867565b81806109a17f0000000000000000000000000000000000000000000000000000000000000000611867565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610b9c565b34610157576080366003190112610157576004356001600160401b0381116101575760806003198236030112610157576020610a30610aa8565b610a5c61054e610a3e610ad2565b94610a6a610a4a610ae8565b91604051948591600401888301610d57565b03601f198101855284610b9c565b60405163f0ffa18560e01b8152958694859460048601610def565b34610157576107016105d2365b6040906003190112610157576004359060243590565b602435906001600160401b038216820361015757565b35906001600160401b038216820361015757565b604435906001600160a01b038216820361015757565b606435906001600160a01b038216820361015757565b35906001600160a01b038216820361015757565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b5157604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610b5157604052565b604081019081106001600160401b03821117610b5157604052565b90601f801991011681019081106001600160401b03821117610b5157604052565b6001600160401b038111610b5157601f01601f191660200190565b929192610be482610bbd565b91610bf26040519384610b9c565b829481845281830111610157578281602093845f960137010152565b9080601f8301121561015757816020610c2993359101610bd8565b90565b9181601f84011215610157578235916001600160401b038311610157576020808501948460051b01011161015757565b6040600319820112610157576004356001600160401b0381116101575781610c8691600401610c2c565b92909291602435906001600160401b03821161015757610ca891600401610c2c565b9091565b9181601f84011215610157578235916001600160401b038311610157576020838186019501011161015757565b6020815260018060a01b03825116602082015260806060610d08602085015183604086015260a0850190610b12565b60408501516001600160a01b03168483015293015191015290565b602060031982011261015757600435906001600160401b038211610157576101409082900360031901126101575760040190565b602081526001600160a01b03610d6c83610afe565b1660208201526020820135601e19833603018112156101575782016020813591016001600160401b0382116101575781360381136101575760c09382606092608060408701528160a0870152868601375f8484018601526001600160a01b03610dd760408301610afe565b168483015201356080830152601f01601f1916010190565b90935f936001600160401b03610e11608095989760a0865260a0860190610b12565b971660208401526001600160a01b0390811660408401521660608201520152565b5190811515820361015757565b929192610e4b82610bbd565b91610e596040519384610b9c565b829481845281830111610157578281602093845f96015e010152565b60405190610e8282610b65565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361015757565b51906001600160a01b038216820361015757565b9080601f83011215610157578151610c2992602001610e3f565b602081830312610157578051906001600160401b0382116101575701610140818303126101575760405191610f3583610b65565b8151835260208201516020840152610f4f60408301610ebf565b6040840152610f6060608301610ebf565b6060840152610f7160808301610ebf565b608084015260a082015160a0840152610f8c60c08301610ed3565b60c0840152610f9d60e08301610ed3565b60e0840152610faf6101008301610e32565b6101008401526101208201516001600160401b03811161015757610fd39201610ee7565b61012082015290565b602081830312610157578051906001600160401b038211610157570190608082820312610157576040519161101083610b36565b61101981610ed3565b835260208101516001600160401b0381116101575760609261103c918301610ee7565b602084015261104d60408201610ed3565b60408401520151606082015290565b61106f9060208082518301019101610fdc565b80516020909101516001600160a01b0390911691565b92909281840361111a575f91345b8584101561110f57818410156110fb578360051b80860135908282116110ec5784013561013e1985360301811215610157576110d0908501611a15565b156110e15760019103930192611093565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611133610e75565b5061113c610e75565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611489575b506111a457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f918161146d575b506111e457866301fb6dd160e01b5f5260045260245ffd5b959192939495926111f482611a2e565b1561145e576112d360206101208085019460c0886112e5611215895161105c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b12565b84810360031901602486015290610b12565b604483019190915203916001600160a01b03165afa90811561047a575f91611424575b50156114155760405161131a81610b81565b8581525f60208201526040519061133082610b81565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156101575760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af19081611400575b506113b25763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0916113ef916001600160a01b031690611a89565b94516001600160a01b03169380a490565b61140d9196505f90610b9c565b5f945f611399565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611456575b8161143f60209383610b9c565b810103126101575761145090610e32565b5f611308565b3d9150611432565b63629cd40b60e11b5f5260045ffd5b6114829192503d805f833e61046c8183610b9c565b905f6111cc565b61149e9192503d805f833e61046c8183610b9c565b905f61118c565b604051906114b282610b36565b5f6060838281528160208201528260408201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036115ab576114fd81611a2e565b156115a55761151d61012061152d92015160208082518301019101610fdc565b9160208082518301019101610fdc565b604082810151908201516001600160a01b039081169116149182611591575b82611578575b8261155c57505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611552565b91506060820151606082015111159161154c565b50505f90565b635f9bd90760e11b5f5260045ffd5b91939594926115dc6115cd368486610bd8565b60208082518301019101610fdc565b90604082015f6020606060018060a01b038451169501946064865160405194859384926323b872dd60e01b845260018060a01b038a16600485015230602485015260448401525af15f918161182b575b5061182657505f5b156117ea5750505090611648913691610bd8565b906040519460c08601908682106001600160401b03831117610b51576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a084015260206040516116a781610b81565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611748608083015160c060e4860152610124850190610b12565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561047a575f936117b6575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d6020116117e2575b816117d260209383610b9c565b810103126101575751915f61178e565b3d91506117c5565b519151604051634a73404560e11b81526001600160a01b0393841660048201529190921660248201523060448201526064810191909152608490fd5b611634565b9091506020813d60201161185f575b8161184760209383610b9c565b810103126101575761185890610e32565b905f61162c565b3d915061183a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156119b1575b806d04ee2d6d415b85acef8100000000600a921015611996575b662386f26fc10000811015611982575b6305f5e100811015611971575b612710811015611962575b6064811015611954575b1015611949575b600a602160018401936118ee85610bbd565b946118fc6040519687610b9c565b80865261190b601f1991610bbd565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561194457600a9091611916565b505090565b6001909101906118dc565b6064600291049301926118d5565b612710600491049301926118cb565b6305f5e100600891049301926118c0565b662386f26fc10000601091049301926118b3565b6d04ee2d6d415b85acef8100000000602091049301926118a3565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611889565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611a0657565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361015757301490565b6001600160401b036060820151168015159081611a7f575b50611a7057608001516001600160401b0316611a6157600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611a46565b611a9c9060208082518301019101610fdc565b604081015f6020606060018060a01b0384511694019360448551604051948593849263a9059cbb60e01b845260018060a01b038b16600485015260248401525af15f9181611b47575b50611b4257505f5b15611b0957505050604051611b03602082610b9c565b5f815290565b519051604051634a73404560e11b81526001600160a01b0392831660048201523060248201529290911660448301526064820152608490fd5b611aed565b9091506020813d602011611b7b575b81611b6360209383610b9c565b8101031261015757611b7490610e32565b905f611ae5565b3d9150611b5656fea26469706673582212203fac997bdb8d78e2b712ad2f7bef2e9deb34e4cca74210da1ab26354c866454264736f6c634300081b0033",
    "sourceMap": "434:4760:117:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;1045:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;434:4760:117;790:10:9;;434:4760:117;790:10:9;;;789::61;;809:32;;-1:-1:-1;434:4760:117;;;;;;;;;;;872:48:61;;434:4760:117;872:48:61;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;904:4:61;434:4760:117;;;;1045:4;434:4760;;;;;;-1:-1:-1;;434:4760:117;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;434:4760:117;;;;;;;;759:14:6;434:4760:117;;;;;783:14:6;434:4760:117;;;;;807:14:6;434:4760:117;;;;;790:10:9;434:4760:117;;;;;809:32:61;434:4760:117;;;;;789:10:61;434:4760:117;;;;;;;;;;;;;;;;;;;;851:69:61;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;434:4760:117;872:48:61;;434:4760:117;872:48:61;;;;;;434:4760:117;872:48:61;;;:::i;:::-;;;434:4760:117;;;;;872:48:61;;;434:4760:117;-1:-1:-1;434:4760:117;;872:48:61;;;-1:-1:-1;872:48:61;;;434:4760:117;;;-1:-1:-1;434:4760:117;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;;-1:-1:-1;434:4760:117;;;;;;-1:-1:-1;;434:4760:117;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610a855780633ce55d02146109f657806354fd4d50146109085780635bf2f20d146108ce5780636b122fe0146107385780637d2c29311461064a5780638371ef59146105ec57806388e5b2d91461059f578063891d9ea8146105be57806391db0b7e1461059f578063a4f0d517146104cb578063b3b902d414610485578063c6ec50701461037f578063c93844be146102b2578063ce46e04614610298578063e49617e11461027d578063e60c35051461027d578063e6c9714d1461015b5763f0ffa1850361000e5760a0366003190112610157576004356001600160401b0381116101575761014f61012c6020923690600401610cac565b610134610aa8565b61013c610ad2565b90610145610ae8565b92608435946115ba565b604051908152f35b5f80fd5b34610157576060366003190112610157576004356001600160401b038111610157576101406003198236030112610157576040519061019982610b65565b80600401358252602481013560208301526101b660448201610abe565b60408301526101c760648201610abe565b60608301526101d860848201610abe565b608083015260a481013560a08301526101f360c48201610afe565b60c083015261020460e48201610afe565b60e0830152610104810135801515810361015757610100830152610124810135906001600160401b0382116101575760046102429236920101610c0e565b6101208201526024356001600160401b0381116101575760209161026d610273923690600401610c0e565b906114c9565b6040519015158152f35b602061027361028b36610d23565b6102936119d4565b611a15565b34610157575f3660031901126101575760206040515f8152f35b34610157576020366003190112610157576004356001600160401b038111610157576102e2903690600401610cac565b6102ea6114a5565b50810190602081830312610157578035906001600160401b038211610157570190608082820312610157576040519061032282610b36565b61032b83610afe565b82526020830135926001600160401b0384116101575761035260609261037b958301610c0e565b602084015261036360408201610afe565b60408401520135606082015260405191829182610cd9565b0390f35b34610157576020366003190112610157576103986114a5565b506103a1610e75565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561047a575f91610458575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036104495761043d61012061037b92015160208082518301019101610fdc565b60405191829182610cd9565b635527981560e11b5f5260045ffd5b61047491503d805f833e61046c8183610b9c565b810190610f01565b816103f6565b6040513d5f823e3d90fd5b6060366003190112610157576004356001600160401b0381116101575761014f6104b56020923690600401610cac565b6104bd610aa8565b9160443592339233926115ba565b34610157576040366003190112610157576004356001600160401b038111610157576080600319823603011261015757602061054e9161052161052f61050f610aa8565b92604051928391600401868301610d57565b03601f198101835282610b9c565b60405163f0ffa18560e01b815293849283923391829160048601610def565b03815f305af1801561047a575f9061056c575b602090604051908152f35b506020813d602011610597575b8161058660209383610b9c565b810103126101575760209051610561565b3d9150610579565b60206102736105ad36610c5c565b926105b99291926119d4565b611085565b346101575761037b6105d86105d236610a92565b90611129565b604051918291602083526020830190610b12565b34610157576020366003190112610157576004356001600160401b0381116101575761061f610624913690600401610c0e565b61105c565b604080516001600160a01b03909316835260208301819052829161037b91830190610b12565b3461015757602036600319011261015757600435610666610e75565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161071c575b506106cc57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b03606082015116421061070d5761012081015160c090910151610701916001600160a01b0390911690611a89565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6107319192503d805f833e61046c8183610b9c565b90836106b4565b34610157575f3660031901126101575760608060405161075781610b36565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561047a575f9061081e575b60609061037b604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b12565b503d805f833e61082e8183610b9c565b810190602081830312610157578051906001600160401b0382116101575701608081830312610157576040519061086482610b36565b8051825260208101516001600160a01b038116810361015757602083015261088e60408201610e32565b60408301526060810151906001600160401b038211610157570182601f82011215610157576060928160206108c593519101610e3f565b828201526107d8565b34610157575f3660031901126101575760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610157575f3660031901126101575761037b60206105d8600161094b7f0000000000000000000000000000000000000000000000000000000000000000611867565b81846109767f0000000000000000000000000000000000000000000000000000000000000000611867565b81806109a17f0000000000000000000000000000000000000000000000000000000000000000611867565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610b9c565b34610157576080366003190112610157576004356001600160401b0381116101575760806003198236030112610157576020610a30610aa8565b610a5c61054e610a3e610ad2565b94610a6a610a4a610ae8565b91604051948591600401888301610d57565b03601f198101855284610b9c565b60405163f0ffa18560e01b8152958694859460048601610def565b34610157576107016105d2365b6040906003190112610157576004359060243590565b602435906001600160401b038216820361015757565b35906001600160401b038216820361015757565b604435906001600160a01b038216820361015757565b606435906001600160a01b038216820361015757565b35906001600160a01b038216820361015757565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b5157604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610b5157604052565b604081019081106001600160401b03821117610b5157604052565b90601f801991011681019081106001600160401b03821117610b5157604052565b6001600160401b038111610b5157601f01601f191660200190565b929192610be482610bbd565b91610bf26040519384610b9c565b829481845281830111610157578281602093845f960137010152565b9080601f8301121561015757816020610c2993359101610bd8565b90565b9181601f84011215610157578235916001600160401b038311610157576020808501948460051b01011161015757565b6040600319820112610157576004356001600160401b0381116101575781610c8691600401610c2c565b92909291602435906001600160401b03821161015757610ca891600401610c2c565b9091565b9181601f84011215610157578235916001600160401b038311610157576020838186019501011161015757565b6020815260018060a01b03825116602082015260806060610d08602085015183604086015260a0850190610b12565b60408501516001600160a01b03168483015293015191015290565b602060031982011261015757600435906001600160401b038211610157576101409082900360031901126101575760040190565b602081526001600160a01b03610d6c83610afe565b1660208201526020820135601e19833603018112156101575782016020813591016001600160401b0382116101575781360381136101575760c09382606092608060408701528160a0870152868601375f8484018601526001600160a01b03610dd760408301610afe565b168483015201356080830152601f01601f1916010190565b90935f936001600160401b03610e11608095989760a0865260a0860190610b12565b971660208401526001600160a01b0390811660408401521660608201520152565b5190811515820361015757565b929192610e4b82610bbd565b91610e596040519384610b9c565b829481845281830111610157578281602093845f96015e010152565b60405190610e8282610b65565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361015757565b51906001600160a01b038216820361015757565b9080601f83011215610157578151610c2992602001610e3f565b602081830312610157578051906001600160401b0382116101575701610140818303126101575760405191610f3583610b65565b8151835260208201516020840152610f4f60408301610ebf565b6040840152610f6060608301610ebf565b6060840152610f7160808301610ebf565b608084015260a082015160a0840152610f8c60c08301610ed3565b60c0840152610f9d60e08301610ed3565b60e0840152610faf6101008301610e32565b6101008401526101208201516001600160401b03811161015757610fd39201610ee7565b61012082015290565b602081830312610157578051906001600160401b038211610157570190608082820312610157576040519161101083610b36565b61101981610ed3565b835260208101516001600160401b0381116101575760609261103c918301610ee7565b602084015261104d60408201610ed3565b60408401520151606082015290565b61106f9060208082518301019101610fdc565b80516020909101516001600160a01b0390911691565b92909281840361111a575f91345b8584101561110f57818410156110fb578360051b80860135908282116110ec5784013561013e1985360301811215610157576110d0908501611a15565b156110e15760019103930192611093565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611133610e75565b5061113c610e75565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611489575b506111a457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f918161146d575b506111e457866301fb6dd160e01b5f5260045260245ffd5b959192939495926111f482611a2e565b1561145e576112d360206101208085019460c0886112e5611215895161105c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b12565b84810360031901602486015290610b12565b604483019190915203916001600160a01b03165afa90811561047a575f91611424575b50156114155760405161131a81610b81565b8581525f60208201526040519061133082610b81565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156101575760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af19081611400575b506113b25763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0916113ef916001600160a01b031690611a89565b94516001600160a01b03169380a490565b61140d9196505f90610b9c565b5f945f611399565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611456575b8161143f60209383610b9c565b810103126101575761145090610e32565b5f611308565b3d9150611432565b63629cd40b60e11b5f5260045ffd5b6114829192503d805f833e61046c8183610b9c565b905f6111cc565b61149e9192503d805f833e61046c8183610b9c565b905f61118c565b604051906114b282610b36565b5f6060838281528160208201528260408201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036115ab576114fd81611a2e565b156115a55761151d61012061152d92015160208082518301019101610fdc565b9160208082518301019101610fdc565b604082810151908201516001600160a01b039081169116149182611591575b82611578575b8261155c57505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611552565b91506060820151606082015111159161154c565b50505f90565b635f9bd90760e11b5f5260045ffd5b91939594926115dc6115cd368486610bd8565b60208082518301019101610fdc565b90604082015f6020606060018060a01b038451169501946064865160405194859384926323b872dd60e01b845260018060a01b038a16600485015230602485015260448401525af15f918161182b575b5061182657505f5b156117ea5750505090611648913691610bd8565b906040519460c08601908682106001600160401b03831117610b51576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a084015260206040516116a781610b81565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611748608083015160c060e4860152610124850190610b12565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561047a575f936117b6575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d6020116117e2575b816117d260209383610b9c565b810103126101575751915f61178e565b3d91506117c5565b519151604051634a73404560e11b81526001600160a01b0393841660048201529190921660248201523060448201526064810191909152608490fd5b611634565b9091506020813d60201161185f575b8161184760209383610b9c565b810103126101575761185890610e32565b905f61162c565b3d915061183a565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156119b1575b806d04ee2d6d415b85acef8100000000600a921015611996575b662386f26fc10000811015611982575b6305f5e100811015611971575b612710811015611962575b6064811015611954575b1015611949575b600a602160018401936118ee85610bbd565b946118fc6040519687610b9c565b80865261190b601f1991610bbd565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561194457600a9091611916565b505090565b6001909101906118dc565b6064600291049301926118d5565b612710600491049301926118cb565b6305f5e100600891049301926118c0565b662386f26fc10000601091049301926118b3565b6d04ee2d6d415b85acef8100000000602091049301926118a3565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611889565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611a0657565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361015757301490565b6001600160401b036060820151168015159081611a7f575b50611a7057608001516001600160401b0316611a6157600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611a46565b611a9c9060208082518301019101610fdc565b604081015f6020606060018060a01b0384511694019360448551604051948593849263a9059cbb60e01b845260018060a01b038b16600485015260248401525af15f9181611b47575b50611b4257505f5b15611b0957505050604051611b03602082610b9c565b5f815290565b519051604051634a73404560e11b81526001600160a01b0392831660048201523060248201529290911660448301526064820152608490fd5b611aed565b9091506020813d602011611b7b575b81611b6360209383610b9c565b8101031261015757611b7490610e32565b905f611ae5565b3d9150611b5656fea26469706673582212203fac997bdb8d78e2b712ad2f7bef2e9deb34e4cca74210da1ab26354c866454264736f6c634300081b0033",
    "sourceMap": "434:4760:117:-:0;;;;;;;;;-1:-1:-1;434:4760:117;;;;;;;;1183:12:9;;;1054:5;1183:12;434:4760:117;1054:5:9;1183:12;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;434:4760:117;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;434:4760:117:-;;;;;;-1:-1:-1;;434:4760:117;;;;;;;;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;5151:34;;434:4760;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;434:4760:117;;-1:-1:-1;;;2392:23:61;;434:4760:117;;;2392:23:61;;;434:4760:117;-1:-1:-1;434:4760:117;2392:23:61;434:4760:117;2392:3:61;-1:-1:-1;;;;;434:4760:117;2392:23:61;;;;;;;434:4760:117;2392:23:61;;;434:4760:117;2429:19:61;434:4760:117;2429:19:61;;434:4760:117;2452:18:61;2429:41;2425:87;;4966:46:117;4977:16;434:4760;4977:16;;;434:4760;;;;4966:46;;;;;;:::i;:::-;434:4760;;;;;;;:::i;2425:87:61:-;2491:21;;;434:4760:117;2491:21:61;434:4760:117;;2491:21:61;2392:23;;;;;;434:4760:117;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;434:4760:117;;;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;724:142:63;434:4760:117;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;434:4760:117:-;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;4001:187;434:4760;4042:16;;434:4760;;:::i;:::-;;;;;;;;;4042:16;;;;:::i;:::-;;4448;;4042;;;;;;:::i;:::-;434:4760;;-1:-1:-1;;;4001:187:117;;434:4760;;;;;4108:10;;;;434:4760;4001:187;;;:::i;:::-;;:4;434:4760;4001:4;:187;;;;;;434:4760;4001:187;;;434:4760;;;;;;;;;4001:187;;434:4760;4001:187;;434:4760;4001:187;;;;;;434:4760;4001:187;;;:::i;:::-;;;434:4760;;;;;;;4001:187;;;;;-1:-1:-1;4001:187:117;;434:4760;;1442:1461:9;434:4760:117;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;434:4760:117:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;434:4760:117;;;;;;;;:::i;:::-;-1:-1:-1;434:4760:117;;-1:-1:-1;;;3986:23:62;;434:4760:117;3986:23:62;;434:4760:117;;;-1:-1:-1;434:4760:117;3986:23:62;434:4760:117;3986:3:62;-1:-1:-1;;;;;434:4760:117;3986:23:62;;434:4760:117;;3986:23:62;;;434:4760:117;-1:-1:-1;3982:172:62;;4119:24;;;;434:4760:117;4119:24:62;434:4760:117;;3986:23:62;434:4760:117;4119:24:62;3982:172;-1:-1:-1;;;;;4186:26:62;;;434:4760:117;;4168:15:62;:44;4164:87;;4331:16;;;;4349:21;;;;434:4760:117;4331:16:62;;-1:-1:-1;;;;;434:4760:117;;;;4331:16:62;:::i;:::-;;434:4760:117;;;;;;;4164:87:62;4233:18;;;434:4760:117;4233:18:62;434:4760:117;;4233:18:62;3986:23;;;;;;;434:4760:117;3986:23:62;;;;;;:::i;:::-;;;;;434:4760:117;;;;;;-1:-1:-1;;434:4760:117;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;434:4760:117;1497:44:61;;434:4760:117;;;1497:44:61;434:4760:117;;;;;;1497:14:61;434:4760:117;1497:44:61;;;;;;434:4760:117;1497:44:61;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;434:4760:117;1497:44:61;;;;;;:::i;:::-;;;434:4760:117;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;434:4760:117;;;;;;-1:-1:-1;;434:4760:117;;;;;;;542:43:61;434:4760:117;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;1055:104:6;;434:4760:117;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;434:4760:117;;;;;;;;;;;;1055:104:6;;;434:4760:117;;;;-1:-1:-1;;;434:4760:117;;;;;;;;;;;;;;;;;-1:-1:-1;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;1055:104:6;;4448:16:117;;1055:104:6;;;;;;:::i;434:4760:117:-;;;;;;-1:-1:-1;;434:4760:117;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;:::i;:::-;4448:16;4407:181;434:4760;;:::i;:::-;;4448:16;434:4760;;:::i;:::-;;;;;;;;;4448:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;434:4760;;-1:-1:-1;;;4407:181:117;;434:4760;;;;;;4407:181;;;:::i;434:4760::-;;;;4717:37;434:4760;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:4760:117;;;;;;;;-1:-1:-1;;434:4760:117;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;:::o;:::-;;;;-1:-1:-1;434:4760:117;;;;;-1:-1:-1;434:4760:117;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;:::o;:::-;;;4448:16;;434:4760;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;:::o;:::-;-1:-1:-1;;;;;434:4760:117;;;;;;-1:-1:-1;;434:4760:117;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:4760:117;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;434:4760:117;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;434:4760:117;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;-1:-1:-1;;434:4760:117;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;434:4760:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;434:4760:117;;;;:::o;:::-;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;434:4760:117;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;434:4760:117;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;-1:-1:-1;434:4760:117;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;-1:-1:-1;;;;;434:4760:117;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1125:267::-;1301:34;1125:267;1301:34;434:4760;;;1301:34;;;;;;:::i;:::-;434:4760;;1301:34;1370:14;;;;-1:-1:-1;;;;;434:4760:117;;;;1125:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;434:4760:117;;;;;;;;;;;;;4064:22:9;;;;4060:87;;434:4760:117;;;;;;;;;;;;;;4274:33:9;434:4760:117;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;434:4760:117;;3896:19:9;434:4760:117;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;434:4760:117;;;;3881:1:9;434:4760:117;;;;;3881:1:9;434:4760:117;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;434:4760:117;;:::i;:::-;2221:30:62;434:4760:117;;:::i;:::-;-1:-1:-1;434:4760:117;;-1:-1:-1;;;2314:27:62;;;;;434:4760:117;;;2314:3:62;-1:-1:-1;;;;;434:4760:117;;-1:-1:-1;434:4760:117;2314:27:62;434:4760:117;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;434:4760:117;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;434:4760:117;;;;;2543:32:62;;;2314:27;2543:32;;434:4760:117;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;434:4760:117;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;434:4760:117;;2991:11:62;;;;;434:4760:117;2991:11:62;434:4760:117;2954:58:62;2991:11;;2954:58;:::i;:::-;434:4760:117;;;;;;;;;;;;;;;;;3083:66:62;;434:4760:117;2314:27:62;3083:66;;434:4760:117;;;;;;;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;434:4760:117;2314:27:62;434:4760:117;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;434:4760:117;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;434:4760:117;;;;;:::i;:::-;;;;-1:-1:-1;434:4760:117;3369:47:62;;434:4760:117;;;;;;;:::i;:::-;3323:18:62;434:4760:117;;;3275:160:62;;434:4760:117;;;3247:202:62;;;;;434:4760:117;-1:-1:-1;434:4760:117;;;;;;;;;;;;;;3247:202:62;;434:4760:117;2314:27:62;3247:202;;434:4760:117;;;;2314:27:62;434:4760:117;;;;;;;;;3247:202:62;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;434:4760:117;;;2314:27:62;3488:25;;3231:293;3622:11;434:4760:117;;3231:293:62;;;;;3720:61;;2135:766:117;;-1:-1:-1;;;;;434:4760:117;;2135:766;:::i;:::-;434:4760;;-1:-1:-1;;;;;434:4760:117;;3720:61:62;;2051:1760;:::o;3247:202::-;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;434:4760:117;3083:66:62;;434:4760:117;3083:66:62;;;;;;434:4760:117;3083:66:62;;;:::i;:::-;;;434:4760:117;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;434:4760:117;;;;;;;:::i;:::-;-1:-1:-1;434:4760:117;;;;;;;;;;;;;;;;;:::o;3113:696::-;3326:18;1016:17:60;;;434:4760:117;1016:27:60;1012:55;;1084:27;;;:::i;:::-;3298:47:117;3294:65;;3402:79;3426:15;3526:36;3426:15;;;1016:17:60;434:4760:117;;;3402:79;;;;;;:::i;:::-;434:4760;1016:17:60;434:4760:117;;;3526:36;;;;;;:::i;:::-;3592:13;;;;434:4760;3609:16;;;434:4760;-1:-1:-1;;;;;434:4760:117;;;;;3592:33;;;:84;;3113:696;3592:137;;;3113:696;3592:210;;;3573:229;;3113:696;:::o;3592:210::-;1016:17:60;3755:14:117;;;;;;434:4760;;;;;3745:25;3784:17;;;1016::60;434:4760:117;;;;3774:28;3745:57;3113:696;:::o;3592:137::-;434:4760;;;;-1:-1:-1;;;;;434:4760:117;;;;;3692:37;;-1:-1:-1;3592:137:117;;:84;3641:14;;;;;434:4760;3641:14;3659:17;;434:4760;-1:-1:-1;3641:35:117;3592:84;;;3294:65;3347:12;;434:4760;3347:12;:::o;1012:55:60:-;1052:15;;;434:4760:117;1052:15:60;;434:4760:117;1052:15:60;879:385:63;;;;;;1547:34:117;434:4760;;;;;:::i;:::-;1547:34;434:4760;;;1547:34;;;;;;:::i;:::-;1592:12;1637:13;;;-1:-1:-1;1547:34:117;1735:14;434:4760;;;;;;;;1735:14;;434:4760;1630:133;434:4760;;1637:13;434:4760;;;;;;;;;1630:133;;434:4760;;;;;;;1630:133;;;434:4760;1712:4;434:4760;;;;;;;;1630:133;;-1:-1:-1;;1630:133:117;;;879:385:63;-1:-1:-1;1614:268:117;;1856:15;-1:-1:-1;1614:268:117;1896:8;1892:195;;434:4760;;;;;;;;;:::i;:::-;;1637:13;434:4760;;;;;;;;;-1:-1:-1;;;;;434:4760:117;;;;;-1:-1:-1;;;;;434:4760:117;1637:13;434:4760;;;;;;;;;;;;1547:34;1914:299:61;;434:4760:117;2076:4:61;1637:13:117;1914:299:61;;434:4760:117;1735:14;1914:299:61;;434:4760:117;1914:299:61;;;434:4760:117;-1:-1:-1;1914:299:61;;;434:4760:117;1547:34;1637:13;434:4760;;;;:::i;:::-;1868:18:61;434:4760:117;;1819:413:61;;;434:4760:117;;;1637:13;434:4760;;;;;;;;1791:455:61;;;1630:133:117;1791:455:61;;434:4760:117;;;;;;;1637:13;434:4760;;;;;;;;;;;;1630:133;434:4760;;;-1:-1:-1;;;;;434:4760:117;;;;;;;;;1637:13;434:4760;;;;;;;;;1735:14;434:4760;;;;;;;1914:299:61;434:4760:117;1914:299:61;434:4760:117;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;434:4760:117;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;434:4760:117;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;1614:268:117;1150:55:63;;4817:26:62;-1:-1:-1;4817:26:62;;879:385:63:o;1791:455:61:-;;;;1547:34:117;1791:455:61;;1547:34:117;1791:455:61;;;;;;434:4760:117;1791:455:61;;;:::i;:::-;;;434:4760:117;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;1892:195:117;434:4760;;;1637:13;434:4760;-1:-1:-1;;;1927:149:117;;-1:-1:-1;;;;;434:4760:117;;;1630:133;1927:149;;434:4760;;;;;;;;;1712:4;434:4760;;;;;;;;;;;;;1927:149;1614:268;;;1630:133;;;;1547:34;1630:133;;1547:34;1630:133;;;;;;1547:34;1630:133;;;:::i;:::-;;;434:4760;;;;;;;:::i;:::-;1630:133;;;;;;;-1:-1:-1;1630:133:117;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;434:4760:117;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;4448:16;;434:4760;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;434:4760:117;;-1:-1:-1;;;1033:111:50;;;;434:4760:117;1033:111:50;434:4760:117;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;434:4760:117;;;;26127:66:57;;26014:100;26027:7;26098:1;434:4760:117;;;;26014:100:57;;;25901;25914:7;25985:1;434:4760:117;;;;25901:100:57;;;25788;25801:7;25872:1;434:4760:117;;;;25788:100:57;;;25672:103;25685:8;25758:2;434:4760:117;;;;25672:103:57;;;25556;25569:8;25642:2;434:4760:117;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;434:4760:117;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;434:4760:117;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;434:4760:117;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;434:4760:117;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;434:4760:117;-1:-1:-1;;;;;434:4760:117;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;2135:766:117;2339:74;2135:766;2339:74;434:4760;;;2339:74;;;;;;:::i;:::-;2457:13;;;-1:-1:-1;2339:74:117;2485:14;434:4760;;;;;;;;2485:14;;434:4760;2450:50;434:4760;;2457:13;434:4760;;;;;;;;;2450:50;;434:4760;;;;;;;2450:50;;;434:4760;;;;;2450:50;;-1:-1:-1;;2450:50:117;;;2135:766;-1:-1:-1;2446:187:117;;2607:15;-1:-1:-1;2446:187:117;2647:8;2643:193;;434:4760;;;2457:13;434:4760;;2339:74;434:4760;;:::i;:::-;-1:-1:-1;434:4760:117;;2135:766;:::o;2643:193::-;434:4760;;;2457:13;434:4760;-1:-1:-1;;;2678:147:117;;-1:-1:-1;;;;;434:4760:117;;;2450:50;2678:147;;434:4760;2754:4;434:4760;;;;;;;;;;;;;;;;;;1927:149;2446:187;;;2450:50;;;;2339:74;2450:50;;2339:74;2450:50;;;;;;2339:74;2450:50;;;:::i;:::-;;;434:4760;;;;;;;:::i;:::-;2450:50;;;;;;;-1:-1:-1;2450:50:117;",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2343,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2386,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2429,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 6614,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 1961,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 958,
          "length": 32
        },
        {
          "start": 1666,
          "length": 32
        },
        {
          "start": 4435,
          "length": 32
        },
        {
          "start": 5974,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1022,
          "length": 32
        },
        {
          "start": 1911,
          "length": 32
        },
        {
          "start": 2277,
          "length": 32
        },
        {
          "start": 4914,
          "length": 32
        },
        {
          "start": 5323,
          "length": 32
        },
        {
          "start": 5801,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256),uint64)": "a4f0d517",
    "doObligationFor((address,bytes,address,uint256),uint64,address,address)": "3ce55d02",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC20EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC20EscrowObligation.sol":"ERC20EscrowObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xedd7780a40e57c0c3d68f5afc930ce646ef0d348a23fe244af2d95fd95900da3","license":"UNLICENSED","urls":["bzz-raw://1c7bd94267aacd8c34a4f110254b92ca2754b7581d85e0699616f305e8b199c1","dweb:/ipfs/QmZhC7NNxgGgyrZvxzTmoCLmXmjKn7eNKM7jo8tW7HV3HC"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC20EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC20EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC20EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC20EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC20EscrowObligation.sol": "ERC20EscrowObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        "keccak256": "0xedd7780a40e57c0c3d68f5afc930ce646ef0d348a23fe244af2d95fd95900da3",
        "urls": [
          "bzz-raw://1c7bd94267aacd8c34a4f110254b92ca2754b7581d85e0699616f305e8b199c1",
          "dweb:/ipfs/QmZhC7NNxgGgyrZvxzTmoCLmXmjKn7eNKM7jo8tW7HV3HC"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 117
};

// src/contracts/ERC20PaymentObligation.ts
var abi37 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC20PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC20PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC20PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC20PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "PaymentMade",
      "inputs": [
        {
          "name": "payment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC20TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "508:3459:118:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;508:3459:118;;;;1140:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;508:3459:118;790:10:9;;508:3459:118;790:10:9;;;789::61;;809:32;;-1:-1:-1;508:3459:118;;;;;;;;;;;872:48:61;;508:3459:118;872:48:61;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;904:4:61;508:3459:118;;;;1140:4;508:3459;;;;;;-1:-1:-1;;508:3459:118;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;508:3459:118;;;;;;;;759:14:6;508:3459:118;;;;;783:14:6;508:3459:118;;;;;807:14:6;508:3459:118;;;;;790:10:9;508:3459:118;;;;;809:32:61;508:3459:118;;;;;789:10:61;508:3459:118;;;;;;;;;;851:69:61;508:3459:118;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;508:3459:118;872:48:61;;508:3459:118;872:48:61;;;;;;508:3459:118;872:48:61;;;:::i;:::-;;;508:3459:118;;;;;872:48:61;;;508:3459:118;-1:-1:-1;508:3459:118;;872:48:61;;;-1:-1:-1;872:48:61;;;508:3459:118;;;-1:-1:-1;508:3459:118;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;508:3459:118;;;;-1:-1:-1;508:3459:118;;;;;-1:-1:-1;508:3459:118;;;;;;-1:-1:-1;;508:3459:118;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "508:3459:118:-:0;;;;;;;;;-1:-1:-1;508:3459:118;;;;;;;;1183:12:9;;;1054:5;1183:12;508:3459:118;1054:5:9;1183:12;508:3459:118;;;;;;;;;;;;;;;;;;;;;;;;;1677:16;508:3459;1677:16;;;508:3459;;;;;;;;;;1300:16;508:3459;1300:16;;;508:3459;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;:::i;:::-;2936:619;3149:18;508:3459;;1016:27:60;1012:55;;508:3459:118;-1:-1:-1;;;;;508:3459:118;353:30:60;;;;;:89;;508:3459:118;721:55:60;;;508:3459:118;-1:-1:-1;;;;;508:3459:118;786:58:60;;3349:36:118;3225:79;508:3459;3249:15;;508:3459;;;;3225:79;;;;;;:::i;:::-;508:3459;;;;;3349:36;;;;;;:::i;:::-;508:3459;;;;-1:-1:-1;;;;;508:3459:118;;;;;3415:33;;;:84;;508:3459;3415:133;;;508:3459;3396:152;;508:3459;;;;;;;;3415:133;508:3459;3515:13;;;508:3459;3532:16;;508:3459;-1:-1:-1;;;;;508:3459:118;;;;;3515:33;;-1:-1:-1;3415:133:118;;;;:84;3464:14;;;508:3459;3482:17;;;508:3459;-1:-1:-1;3464:35:118;;-1:-1:-1;3415:84:118;;786:58:60;824:20;;;508:3459:118;824:20:60;508:3459:118;;824:20:60;721:55;759:17;;;508:3459:118;759:17:60;508:3459:118;;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1012:55;1052:15;;;508:3459:118;1052:15:60;508:3459:118;;1052:15:60;508:3459:118;;3045:39:9;508:3459:118;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;508:3459:118;;;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;-1:-1:-1;;;;;508:3459:118;;;;3924:34;508:3459;;;;;;;;:::i;:::-;;;:::i;:::-;;3924:34;;;;:::i;:::-;508:3459;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:61;;508:3459:118;;;2392:23:61;;508:3459:118;;;2392:23:61;508:3459:118;;;;;;2392:3:61;508:3459:118;2392:23:61;;;;;;;508:3459:118;2392:23:61;;;508:3459:118;2429:19:61;508:3459:118;2429:19:61;;508:3459:118;2452:18:61;2429:41;2425:87;;3739:46:118;508:3459;;3750:16;;;508:3459;;;;3739:46;;;;;;:::i;2425:87:61:-;2491:21;;;508:3459:118;2491:21:61;508:3459:118;;2491:21:61;2392:23;;;;;508:3459:118;2392:23:61;;;;;;:::i;:::-;;;508:3459:118;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:61;;;;508:3459:118;;;;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;-1:-1:-1;;;;;508:3459:118;;;;724:142:63;508:3459:118;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;508:3459:118:-;;;;;;-1:-1:-1;;508:3459:118;;;;1333:145;1300:16;508:3459;;1300:16;;;;;;;:::i;:::-;;1055:104:6;;1300:16:118;;;;;;:::i;:::-;508:3459;;;;;;;;;1333:145;;1410:10;;;1333:145;508:3459;1333:145;;;:::i;:::-;;:4;508:3459;1333:4;:145;;;;;;508:3459;1333:145;;;508:3459;1300:16;508:3459;;;;;;;1333:145;;1300:16;1333:145;;1300:16;1333:145;;;;;;508:3459;1333:145;;;:::i;:::-;;;508:3459;;;;1300:16;508:3459;;1333:145;;;;;-1:-1:-1;1333:145:118;;508:3459;;1442:1461:9;508:3459:118;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;508:3459:118:-;;;;;-1:-1:-1;;508:3459:118;;;;;;;-1:-1:-1;508:3459:118;;;;:::i;:::-;;;;-1:-1:-1;;;;;508:3459:118;;;;;;1677:16;508:3459;;;1677:16;;;;;;;:::i;:::-;1710:139;508:3459;;;;;;;;;;1710:139;;508:3459;1710:139;;;:::i;508:3459::-;;;;;;-1:-1:-1;;508:3459:118;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;508:3459:118;1497:44:61;;508:3459:118;;;1497:44:61;508:3459:118;;;;;;1497:14:61;508:3459:118;1497:44:61;;;;;;508:3459:118;1497:44:61;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;508:3459:118;1497:44:61;;;;;;:::i;:::-;;;508:3459:118;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;508:3459:118;;;;;;-1:-1:-1;;508:3459:118;;;;;;;542:43:61;508:3459:118;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;1055:104:6;;508:3459:118;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;508:3459:118;;;;;;;;;;;;1055:104:6;;;508:3459:118;;;;-1:-1:-1;;;508:3459:118;;;;;;;;;;;;;;;;;-1:-1:-1;;;508:3459:118;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;508:3459:118;;;;;1055:104:6;508:3459:118;;1055:104:6;508:3459:118;;;;;;;;;;;;;;;;;;;;-1:-1:-1;508:3459:118;;;;;;;;-1:-1:-1;;508:3459:118;;;;:::o;:::-;;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o;:::-;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;508:3459:118;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o;:::-;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o;:::-;;-1:-1:-1;;508:3459:118;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;-1:-1:-1;;508:3459:118;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;:::o;:::-;;;;-1:-1:-1;508:3459:118;;;;;-1:-1:-1;508:3459:118;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;:::o;:::-;;;1055:104:6;;508:3459:118;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;:::o;:::-;-1:-1:-1;;;;;508:3459:118;;;;;;-1:-1:-1;;508:3459:118;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;508:3459:118;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;508:3459:118;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;508:3459:118;;;;;;;;;;;;;4064:22:9;;;;4060:87;;508:3459:118;;;;;;;;;;;;;;4274:33:9;508:3459:118;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;508:3459:118;;3896:19:9;508:3459:118;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;508:3459:118;;;;3881:1:9;508:3459:118;;;;;3881:1:9;508:3459:118;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;508:3459:118;;;;;;;:::i;:::-;-1:-1:-1;508:3459:118;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;879:385:63:-;;;;;;2043:68:118;;;;;;:::i;:::-;508:3459;;2292:20;;;;508:3459;;2330:21;;;;508:3459;;;;-1:-1:-1;;;2210:155:118;;-1:-1:-1;;;;;508:3459:118;;;2210:155;;;508:3459;;;;;;;;;;;;;;;;;2292:20;;508:3459;;2330:21;;2172:12;;508:3459;2330:21;;508:3459;;2210:155;;508:3459;;-1:-1:-1;;508:3459:118;2210:155;;-1:-1:-1;;2210:155:118;;;879:385:63;-1:-1:-1;2194:290:118;;2458:15;-1:-1:-1;2194:290:118;2498:8;2494:217;;508:3459;;;;;;;;;;:::i;:::-;;2292:20;508:3459;;;;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;-1:-1:-1;;;;;508:3459:118;2292:20;508:3459;;;;;;;;;;;;2330:21;1914:299:61;;508:3459:118;2076:4:61;2292:20:118;1914:299:61;;508:3459:118;;1914:299:61;;508:3459:118;1914:299:61;;;508:3459:118;-1:-1:-1;1914:299:61;;;508:3459:118;2292:20;508:3459;2292:20;508:3459;;;;;;-1:-1:-1;;;;;508:3459:118;;;;;2330:21;508:3459;2292:20;508:3459;1868:18:61;508:3459:118;;1819:413:61;;;508:3459:118;;;2292:20;508:3459;;;;;;;;1791:455:61;;;2210:155:118;1791:455:61;;508:3459:118;;;;;;;2292:20;508:3459;;;;;;;;;;;;2210:155;508:3459;;;-1:-1:-1;;;;;508:3459:118;;;;;;;;;2292:20;508:3459;;;;;;;;;;;;;;;;;1914:299:61;508:3459:118;1914:299:61;508:3459:118;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;508:3459:118;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;508:3459:118;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;2194:290:118;1150:55:63;;2896:27:118;-1:-1:-1;2896:27:118;;879:385:63:o;1791:455:61:-;;;;2330:21:118;1791:455:61;;2330:21:118;1791:455:61;;;;;;508:3459:118;1791:455:61;;;:::i;:::-;;;508:3459:118;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;2494:217:118;508:3459;;;;;2292:20;508:3459;-1:-1:-1;;;2529:171:118;;-1:-1:-1;;;;;508:3459:118;;;2210:155;2529:171;;508:3459;;;;;;;;;;;;;;2210:155;508:3459;;;;;;2529:171;;-1:-1:-1;2529:171:118;2194:290;;;2210:155;;;;2330:21;2210:155;;2330:21;2210:155;;;;;;2330:21;2210:155;;;:::i;:::-;;;508:3459;;;;;;;:::i;:::-;2210:155;;;;;;;-1:-1:-1;2210:155:118;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;508:3459:118;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;508:3459:118;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;508:3459:118;;-1:-1:-1;;;1033:111:50;;;;508:3459:118;1033:111:50;508:3459:118;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;508:3459:118;;;;26127:66:57;;26014:100;26027:7;26098:1;508:3459:118;;;;26014:100:57;;;25901;25914:7;25985:1;508:3459:118;;;;25901:100:57;;;25788;25801:7;25872:1;508:3459:118;;;;25788:100:57;;;25672:103;25685:8;25758:2;508:3459:118;;;;25672:103:57;;;25556;25569:8;25642:2;508:3459:118;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;508:3459:118;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;508:3459:118;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;508:3459:118;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;508:3459:118:-;;;-1:-1:-1;;;;;508:3459:118;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2453,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2496,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2539,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 4859,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2071,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1182,
          "length": 32
        },
        {
          "start": 4216,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 600,
          "length": 32
        },
        {
          "start": 1238,
          "length": 32
        },
        {
          "start": 2021,
          "length": 32
        },
        {
          "start": 2387,
          "length": 32
        },
        {
          "start": 4043,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,address))": "9b28978c",
    "doObligationFor((address,uint256,address),address,address)": "88d8b7e2",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC20PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC20PaymentObligation.sol":"ERC20PaymentObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39","license":"UNLICENSED","urls":["bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411","dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "payment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PaymentMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC20PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC20PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC20PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC20PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC20PaymentObligation.sol": "ERC20PaymentObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        "keccak256": "0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39",
        "urls": [
          "bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411",
          "dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 118
};

// src/contracts/ERC20Permit.ts
var abi38 = {
  "abi": [
    {
      "type": "function",
      "name": "DOMAIN_SEPARATOR",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "allowance",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "approve",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decimals",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint8",
          "internalType": "uint8"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "eip712Domain",
      "inputs": [],
      "outputs": [
        {
          "name": "fields",
          "type": "bytes1",
          "internalType": "bytes1"
        },
        {
          "name": "name",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "version",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "verifyingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "salt",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "extensions",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "nonces",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "permit",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "v",
          "type": "uint8",
          "internalType": "uint8"
        },
        {
          "name": "r",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "symbol",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalSupply",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transfer",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferFrom",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "Approval",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "spender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EIP712DomainChanged",
      "inputs": [],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Transfer",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ECDSAInvalidSignature",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ECDSAInvalidSignatureLength",
      "inputs": [
        {
          "name": "length",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ECDSAInvalidSignatureS",
      "inputs": [
        {
          "name": "s",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InsufficientAllowance",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "allowance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "needed",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InsufficientBalance",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "balance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "needed",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidApprover",
      "inputs": [
        {
          "name": "approver",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidReceiver",
      "inputs": [
        {
          "name": "receiver",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidSender",
      "inputs": [
        {
          "name": "sender",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20InvalidSpender",
      "inputs": [
        {
          "name": "spender",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC2612ExpiredSignature",
      "inputs": [
        {
          "name": "deadline",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC2612InvalidSigner",
      "inputs": [
        {
          "name": "signer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "owner",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidAccountNonce",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "currentNonce",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidShortString",
      "inputs": []
    },
    {
      "type": "error",
      "name": "StringTooLong",
      "inputs": [
        {
          "name": "str",
          "type": "string",
          "internalType": "string"
        }
      ]
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "decimals()": "313ce567",
    "eip712Domain()": "84b0196e",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"ERC2612ExpiredSignature","type":"error"},{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC2612InvalidSigner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account\'s ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn\'t need to send a transaction, and thus is not required to hold Ether at all.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC2612ExpiredSignature(uint256)":[{"details":"Permit deadline has expired."}],"ERC2612InvalidSigner(address,address)":[{"details":"Mismatched signature."}],"InvalidAccountNonce(address,uint256)":[{"details":"The nonce used for an `account` is not the expected current nonce."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\"1\\"`. It\'s a good idea to use the same `name` that is defined as the ERC-20 token name."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it\'s overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"eip712Domain()":{"details":"See {IERC-5267}."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``\'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``\'s tokens, given ``owner``\'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``\'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``\'s tokens of at least `value`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol":"ERC20Permit"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@erc8004-oz/contracts/=lib/trustless-agents-erc-ri/lib/reference/lib/openzeppelin-contracts/contracts/",":@erc8004/=lib/trustless-agents-erc-ri/src/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/",":reference/=lib/trustless-agents-erc-ri/lib/reference/",":trustless-agents-erc-ri/=lib/trustless-agents-erc-ri/"],"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol":{"keccak256":"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92","license":"MIT","urls":["bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a","dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"]},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"keccak256":"0x9cac1f97ecc92043dd19235d6677e40cf6bac382886a94f7a80a957846b24229","license":"MIT","urls":["bzz-raw://a1e0c924e0edfdfd4abceeb552d99f1cd95c0d387b38ccb1f67c583607e3d155","dweb:/ipfs/QmZAi6qKa66zuS3jyEhsQR9bBNnZe1wSognYqw9nvseyUz"]},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xc61b3530214f6729db70cc02ffacf6218e601a5e351dd25e369a03c6ca201cfb","license":"MIT","urls":["bzz-raw://48b897a0323b8d04464848832b364ecfd6c002fd15c53a86304ca1eec1475d12","dweb:/ipfs/QmV1S2GmZgU9bDEfdXFyCe1HhDy4nND3z4Jyy4iBvh5wu2"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol":{"keccak256":"0x9f526037191e8215f7e3e0ade7efae2d728b249068767761343a97beb700f4c8","license":"MIT","urls":["bzz-raw://df9b63829446fc57867dab71da27606769ab50237b8bc6480ed6a405d816bb87","dweb:/ipfs/QmSf4J4EgFw9RnGCDR9W12fJ7rwYBYhENKppzsDaMJKXmK"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","license":"MIT","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","license":"MIT","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"]},"lib/openzeppelin-contracts/contracts/utils/Nonces.sol":{"keccak256":"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f","license":"MIT","urls":["bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e","dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol":{"keccak256":"0xbbd677d9730e606a98a8e99c66ea2665e1be7b2218245ab4bc8340f5d148c032","license":"MIT","urls":["bzz-raw://4220d046e8bb1591d65a95fe8f85474f4fd4ef88679f7960c5a25d2be40edd7b","dweb:/ipfs/QmcWmnwx82BAWKBDGxjmtgmHtgf9Mgo4PTTxvGFb2CJ7Kr"]},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0xb38a945832ca380d4ed08d91a6ebaf03fd66ea02057e574384fae3abf3ebc136","license":"MIT","urls":["bzz-raw://f933ce488ce79c1366d44dca530b1cc4db25fa1380ae691effdd5e3eec8fd8a5","dweb:/ipfs/Qmdyk8pSJasc9pZaRFRdmtX85BCs5faQ8xUKiWnzaEkFEt"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x499cb322fe046f09e7accdf52e4c0e3d4fcddecb9eded2e4a23d5303c5a16180","license":"MIT","urls":["bzz-raw://8f1801d1c9baf83d0fdb04515eb752e21a73a2a8973045f42e976821ab168c5f","dweb:/ipfs/QmNYMKSKkrgAW1YTfi9K5FsVzeg3zQh8nDyLdXAct8m8kU"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol":{"keccak256":"0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d","license":"MIT","urls":["bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88","dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0xf56e072d3c3b390275daa0a3f00c7a634604780b5daf4cf8590fc1c2c56b47ff","license":"MIT","urls":["bzz-raw://e48cec5a9338d1c7fd52783831a9fca2cae2152c5aa7cf23b364e789d6f01992","dweb:/ipfs/QmQCPm66skhi1LK9ji3rFk91atc95vqrpbyCmmtKXH8YUX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ECDSAInvalidSignature"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "length",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ECDSAInvalidSignatureLength"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "ECDSAInvalidSignatureS"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20InsufficientAllowance"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needed",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20InsufficientBalance"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidApprover"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidReceiver"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidSender"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC20InvalidSpender"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC2612ExpiredSignature"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ERC2612InvalidSigner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currentNonce",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidAccountNonce"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidShortString"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "str",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "StringTooLong"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "EIP712DomainChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "eip712Domain",
          "outputs": [
            {
              "internalType": "bytes1",
              "name": "fields",
              "type": "bytes1"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifyingContract",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "extensions",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "constructor": {
            "details": 'Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`. It\'s a good idea to use the same `name` that is defined as the ERC-20 token name.'
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "eip712Domain()": {
            "details": "See {IERC-5267}."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@erc8004-oz/contracts/=lib/trustless-agents-erc-ri/lib/reference/lib/openzeppelin-contracts/contracts/",
        "@erc8004/=lib/trustless-agents-erc-ri/src/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "reference/=lib/trustless-agents-erc-ri/lib/reference/",
        "trustless-agents-erc-ri/=lib/trustless-agents-erc-ri/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": "ERC20Permit"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
        "keccak256": "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
        "urls": [
          "bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
          "dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        "keccak256": "0x9cac1f97ecc92043dd19235d6677e40cf6bac382886a94f7a80a957846b24229",
        "urls": [
          "bzz-raw://a1e0c924e0edfdfd4abceeb552d99f1cd95c0d387b38ccb1f67c583607e3d155",
          "dweb:/ipfs/QmZAi6qKa66zuS3jyEhsQR9bBNnZe1wSognYqw9nvseyUz"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xc61b3530214f6729db70cc02ffacf6218e601a5e351dd25e369a03c6ca201cfb",
        "urls": [
          "bzz-raw://48b897a0323b8d04464848832b364ecfd6c002fd15c53a86304ca1eec1475d12",
          "dweb:/ipfs/QmV1S2GmZgU9bDEfdXFyCe1HhDy4nND3z4Jyy4iBvh5wu2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x9f526037191e8215f7e3e0ade7efae2d728b249068767761343a97beb700f4c8",
        "urls": [
          "bzz-raw://df9b63829446fc57867dab71da27606769ab50237b8bc6480ed6a405d816bb87",
          "dweb:/ipfs/QmSf4J4EgFw9RnGCDR9W12fJ7rwYBYhENKppzsDaMJKXmK"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28",
        "urls": [
          "bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323",
          "dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        "urls": [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
        "keccak256": "0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f",
        "urls": [
          "bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e",
          "dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
        "keccak256": "0xbbd677d9730e606a98a8e99c66ea2665e1be7b2218245ab4bc8340f5d148c032",
        "urls": [
          "bzz-raw://4220d046e8bb1591d65a95fe8f85474f4fd4ef88679f7960c5a25d2be40edd7b",
          "dweb:/ipfs/QmcWmnwx82BAWKBDGxjmtgmHtgf9Mgo4PTTxvGFb2CJ7Kr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "keccak256": "0xb38a945832ca380d4ed08d91a6ebaf03fd66ea02057e574384fae3abf3ebc136",
        "urls": [
          "bzz-raw://f933ce488ce79c1366d44dca530b1cc4db25fa1380ae691effdd5e3eec8fd8a5",
          "dweb:/ipfs/Qmdyk8pSJasc9pZaRFRdmtX85BCs5faQ8xUKiWnzaEkFEt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        "keccak256": "0x499cb322fe046f09e7accdf52e4c0e3d4fcddecb9eded2e4a23d5303c5a16180",
        "urls": [
          "bzz-raw://8f1801d1c9baf83d0fdb04515eb752e21a73a2a8973045f42e976821ab168c5f",
          "dweb:/ipfs/QmNYMKSKkrgAW1YTfi9K5FsVzeg3zQh8nDyLdXAct8m8kU"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
        "keccak256": "0xa67f5e17d65eea22581382bd8c2804025f1029bfbd80908dc77b218fad29fb1d",
        "urls": [
          "bzz-raw://db1206248cec67bdd40009d0b57e91a2ce62fd4a85eff8d3ea51b28b550afe88",
          "dweb:/ipfs/QmYcWcZ3XRPSx9r8cFwjokpESjjiCtkebVE4VK3FjE3GVd"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
        "keccak256": "0xf56e072d3c3b390275daa0a3f00c7a634604780b5daf4cf8590fc1c2c56b47ff",
        "urls": [
          "bzz-raw://e48cec5a9338d1c7fd52783831a9fca2cae2152c5aa7cf23b364e789d6f01992",
          "dweb:/ipfs/QmQCPm66skhi1LK9ji3rFk91atc95vqrpbyCmmtKXH8YUX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 45
};

// src/contracts/ERC721EscrowObligation.ts
var abi39 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC721EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC721EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC721EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC721EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC721TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "437:4517:119:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;1053:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;437:4517:119;790:10:9;;437:4517:119;790:10:9;;;789::61;;809:32;;-1:-1:-1;437:4517:119;;;;;;;;;;;872:48:61;;437:4517:119;872:48:61;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;904:4:61;437:4517:119;;;;1053:4;437:4517;;;;;;-1:-1:-1;;437:4517:119;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;437:4517:119;;;;;;;;759:14:6;437:4517:119;;;;;783:14:6;437:4517:119;;;;;807:14:6;437:4517:119;;;;;790:10:9;437:4517:119;;;;;809:32:61;437:4517:119;;;;;789:10:61;437:4517:119;;;;;;;;;;;;;;;;;;;;851:69:61;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;437:4517:119;872:48:61;;437:4517:119;872:48:61;;;;;;437:4517:119;872:48:61;;;:::i;:::-;;;437:4517:119;;;;;872:48:61;;;437:4517:119;-1:-1:-1;437:4517:119;;872:48:61;;;-1:-1:-1;872:48:61;;;437:4517:119;;;-1:-1:-1;437:4517:119;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;;-1:-1:-1;437:4517:119;;;;;;-1:-1:-1;;437:4517:119;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c80632c713cd914610a855780633ce55d02146109f657806354fd4d50146109085780635bf2f20d146108ce5780636b122fe0146107385780637d2c29311461064a5780638371ef59146105ec57806388e5b2d91461059f578063891d9ea8146105be57806391db0b7e1461059f578063a4f0d517146104cb578063b3b902d414610485578063c6ec50701461037f578063c93844be146102b2578063ce46e04614610298578063e49617e11461027d578063e60c35051461027d578063e6c9714d1461015b5763f0ffa1850361000e5760a0366003190112610157576004356001600160401b0381116101575761014f61012c6020923690600401610cac565b610134610aa8565b61013c610ad2565b90610145610ae8565b92608435946115b9565b604051908152f35b5f80fd5b34610157576060366003190112610157576004356001600160401b038111610157576101406003198236030112610157576040519061019982610b65565b80600401358252602481013560208301526101b660448201610abe565b60408301526101c760648201610abe565b60608301526101d860848201610abe565b608083015260a481013560a08301526101f360c48201610afe565b60c083015261020460e48201610afe565b60e0830152610104810135801515810361015757610100830152610124810135906001600160401b0382116101575760046102429236920101610c0e565b6101208201526024356001600160401b0381116101575760209161026d610273923690600401610c0e565b906114c9565b6040519015158152f35b602061027361028b36610d23565b6102936119d1565b611a12565b34610157575f3660031901126101575760206040515f8152f35b34610157576020366003190112610157576004356001600160401b038111610157576102e2903690600401610cac565b6102ea6114a5565b50810190602081830312610157578035906001600160401b038211610157570190608082820312610157576040519061032282610b36565b61032b83610afe565b82526020830135926001600160401b0384116101575761035260609261037b958301610c0e565b602084015261036360408201610afe565b60408401520135606082015260405191829182610cd9565b0390f35b34610157576020366003190112610157576103986114a5565b506103a1610e75565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561047a575f91610458575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036104495761043d61012061037b92015160208082518301019101610fdc565b60405191829182610cd9565b635527981560e11b5f5260045ffd5b61047491503d805f833e61046c8183610b9c565b810190610f01565b816103f6565b6040513d5f823e3d90fd5b6060366003190112610157576004356001600160401b0381116101575761014f6104b56020923690600401610cac565b6104bd610aa8565b9160443592339233926115b9565b34610157576040366003190112610157576004356001600160401b038111610157576080600319823603011261015757602061054e9161052161052f61050f610aa8565b92604051928391600401868301610d57565b03601f198101835282610b9c565b60405163f0ffa18560e01b815293849283923391829160048601610def565b03815f305af1801561047a575f9061056c575b602090604051908152f35b506020813d602011610597575b8161058660209383610b9c565b810103126101575760209051610561565b3d9150610579565b60206102736105ad36610c5c565b926105b99291926119d1565b611085565b346101575761037b6105d86105d236610a92565b90611129565b604051918291602083526020830190610b12565b34610157576020366003190112610157576004356001600160401b0381116101575761061f610624913690600401610c0e565b61105c565b604080516001600160a01b03909316835260208301819052829161037b91830190610b12565b3461015757602036600319011261015757600435610666610e75565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161071c575b506106cc57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b03606082015116421061070d5761012081015160c090910151610701916001600160a01b0390911690611a86565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6107319192503d805f833e61046c8183610b9c565b90836106b4565b34610157575f3660031901126101575760608060405161075781610b36565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561047a575f9061081e575b60609061037b604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610b12565b503d805f833e61082e8183610b9c565b810190602081830312610157578051906001600160401b0382116101575701608081830312610157576040519061086482610b36565b8051825260208101516001600160a01b038116810361015757602083015261088e60408201610e32565b60408301526060810151906001600160401b038211610157570182601f82011215610157576060928160206108c593519101610e3f565b828201526107d8565b34610157575f3660031901126101575760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610157575f3660031901126101575761037b60206105d8600161094b7f0000000000000000000000000000000000000000000000000000000000000000611864565b81846109767f0000000000000000000000000000000000000000000000000000000000000000611864565b81806109a17f0000000000000000000000000000000000000000000000000000000000000000611864565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610b9c565b34610157576080366003190112610157576004356001600160401b0381116101575760806003198236030112610157576020610a30610aa8565b610a5c61054e610a3e610ad2565b94610a6a610a4a610ae8565b91604051948591600401888301610d57565b03601f198101855284610b9c565b60405163f0ffa18560e01b8152958694859460048601610def565b34610157576107016105d2365b6040906003190112610157576004359060243590565b602435906001600160401b038216820361015757565b35906001600160401b038216820361015757565b604435906001600160a01b038216820361015757565b606435906001600160a01b038216820361015757565b35906001600160a01b038216820361015757565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610b5157604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610b5157604052565b604081019081106001600160401b03821117610b5157604052565b90601f801991011681019081106001600160401b03821117610b5157604052565b6001600160401b038111610b5157601f01601f191660200190565b929192610be482610bbd565b91610bf26040519384610b9c565b829481845281830111610157578281602093845f960137010152565b9080601f8301121561015757816020610c2993359101610bd8565b90565b9181601f84011215610157578235916001600160401b038311610157576020808501948460051b01011161015757565b6040600319820112610157576004356001600160401b0381116101575781610c8691600401610c2c565b92909291602435906001600160401b03821161015757610ca891600401610c2c565b9091565b9181601f84011215610157578235916001600160401b038311610157576020838186019501011161015757565b6020815260018060a01b03825116602082015260806060610d08602085015183604086015260a0850190610b12565b60408501516001600160a01b03168483015293015191015290565b602060031982011261015757600435906001600160401b038211610157576101409082900360031901126101575760040190565b602081526001600160a01b03610d6c83610afe565b1660208201526020820135601e19833603018112156101575782016020813591016001600160401b0382116101575781360381136101575760c09382606092608060408701528160a0870152868601375f8484018601526001600160a01b03610dd760408301610afe565b168483015201356080830152601f01601f1916010190565b90935f936001600160401b03610e11608095989760a0865260a0860190610b12565b971660208401526001600160a01b0390811660408401521660608201520152565b5190811515820361015757565b929192610e4b82610bbd565b91610e596040519384610b9c565b829481845281830111610157578281602093845f96015e010152565b60405190610e8282610b65565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361015757565b51906001600160a01b038216820361015757565b9080601f83011215610157578151610c2992602001610e3f565b602081830312610157578051906001600160401b0382116101575701610140818303126101575760405191610f3583610b65565b8151835260208201516020840152610f4f60408301610ebf565b6040840152610f6060608301610ebf565b6060840152610f7160808301610ebf565b608084015260a082015160a0840152610f8c60c08301610ed3565b60c0840152610f9d60e08301610ed3565b60e0840152610faf6101008301610e32565b6101008401526101208201516001600160401b03811161015757610fd39201610ee7565b61012082015290565b602081830312610157578051906001600160401b038211610157570190608082820312610157576040519161101083610b36565b61101981610ed3565b835260208101516001600160401b0381116101575760609261103c918301610ee7565b602084015261104d60408201610ed3565b60408401520151606082015290565b61106f9060208082518301019101610fdc565b80516020909101516001600160a01b0390911691565b92909281840361111a575f91345b8584101561110f57818410156110fb578360051b80860135908282116110ec5784013561013e1985360301811215610157576110d0908501611a12565b156110e15760019103930192611093565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f611133610e75565b5061113c610e75565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611489575b506111a457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f918161146d575b506111e457866301fb6dd160e01b5f5260045260245ffd5b959192939495926111f482611a2b565b1561145e576112d360206101208085019460c0886112e5611215895161105c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610b12565b84810360031901602486015290610b12565b604483019190915203916001600160a01b03165afa90811561047a575f91611424575b50156114155760405161131a81610b81565b8581525f60208201526040519061133082610b81565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b156101575760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af19081611400575b506113b25763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0916113ef916001600160a01b031690611a86565b94516001600160a01b03169380a490565b61140d9196505f90610b9c565b5f945f611399565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611456575b8161143f60209383610b9c565b810103126101575761145090610e32565b5f611308565b3d9150611432565b63629cd40b60e11b5f5260045ffd5b6114829192503d805f833e61046c8183610b9c565b905f6111cc565b61149e9192503d805f833e61046c8183610b9c565b905f61118c565b604051906114b282610b36565b5f6060838281528160208201528260408201520152565b7f00000000000000000000000000000000000000000000000000000000000000006020820151036115aa576114fd81611a2b565b156115a45761151d61012061152d92015160208082518301019101610fdc565b9160208082518301019101610fdc565b604082810151908201516001600160a01b039081169116149182611591575b82611578575b8261155c57505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611552565b915060608201516060820151149161154c565b50505f90565b635f9bd90760e11b5f5260045ffd5b939591909294956115dd6115ce368688610bd8565b60208082518301019101610fdc565b96604088019586519560605f9760018060a01b03169a01998a5190803b15610157576040516323b872dd60e01b81526001600160a01b038c16600482015230602482015260448101929092525f908290606490829084905af1908161184f575b5061167b5787518a5160405163045b391760e01b81526001600160a01b039283166004820152918b1660248301523060448301526064820152608490fd5b91949750919497506116909295503691610bd8565b906040519260c084018481106001600160401b0382111761183b57906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a082015260206040516116ef81610b81565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611790608083015160c060e4860152610124850190610b12565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156118305784916117fe575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611828575b8161181960209383610b9c565b8101031261015757515f6117d6565b3d915061180c565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b61185c9198505f90610b9c565b5f965f61163d565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156119ae575b806d04ee2d6d415b85acef8100000000600a921015611993575b662386f26fc1000081101561197f575b6305f5e10081101561196e575b61271081101561195f575b6064811015611951575b1015611946575b600a602160018401936118eb85610bbd565b946118f96040519687610b9c565b808652611908601f1991610bbd565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561194157600a9091611913565b505090565b6001909101906118d9565b6064600291049301926118d2565b612710600491049301926118c8565b6305f5e100600891049301926118bd565b662386f26fc10000601091049301926118b0565b6d04ee2d6d415b85acef8100000000602091049301926118a0565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611886565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611a0357565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361015757301490565b6001600160401b036060820151168015159081611a7c575b50611a6d57608001516001600160401b0316611a5e57600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611a43565b611a9c9092919260208082518301019101610fdc565b60408101805160609092018051909391925f91906001600160a01b0316803b15610157576040516323b872dd60e01b81523060048201526001600160a01b038816602482015260448101929092525f908290606490829084905af19081611b57575b50611b3e57505051905160405163045b391760e01b81526001600160a01b0392831660048201523060248201529290911660448301526064820152608490fd5b925092505060405190611b52602083610b9c565b815290565b611b649192505f90610b9c565b5f905f611afe56fea26469706673582212205db2a69127426cb5d1603e72a41c714aced7766b21086242a7fc4e8e7733514264736f6c634300081b0033",
    "sourceMap": "437:4517:119:-:0;;;;;;;;;-1:-1:-1;437:4517:119;;;;;;;;1183:12:9;;;1054:5;1183:12;437:4517:119;1054:5:9;1183:12;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;437:4517:119;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;437:4517:119:-;;;;;;-1:-1:-1;;437:4517:119;;;;;;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;4911:34;;437:4517;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;437:4517:119;;-1:-1:-1;;;2392:23:61;;437:4517:119;;;2392:23:61;;;437:4517:119;-1:-1:-1;437:4517:119;2392:23:61;437:4517:119;2392:3:61;-1:-1:-1;;;;;437:4517:119;2392:23:61;;;;;;;437:4517:119;2392:23:61;;;437:4517:119;2429:19:61;437:4517:119;2429:19:61;;437:4517:119;2452:18:61;2429:41;2425:87;;4726:46:119;4737:16;437:4517;4737:16;;;437:4517;;;;4726:46;;;;;;:::i;:::-;437:4517;;;;;;;:::i;2425:87:61:-;2491:21;;;437:4517:119;2491:21:61;437:4517:119;;2491:21:61;2392:23;;;;;;437:4517:119;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;437:4517:119;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;724:142:63;437:4517:119;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;437:4517:119:-;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;3761:187;437:4517;3802:16;;437:4517;;:::i;:::-;;;;;;;;;3802:16;;;;:::i;:::-;;4208;;3802;;;;;;:::i;:::-;437:4517;;-1:-1:-1;;;3761:187:119;;437:4517;;;;;3868:10;;;;437:4517;3761:187;;;:::i;:::-;;:4;437:4517;3761:4;:187;;;;;;437:4517;3761:187;;;437:4517;;;;;;;;;3761:187;;437:4517;3761:187;;437:4517;3761:187;;;;;;437:4517;3761:187;;;:::i;:::-;;;437:4517;;;;;;;3761:187;;;;;-1:-1:-1;3761:187:119;;437:4517;;1442:1461:9;437:4517:119;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;437:4517:119:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;437:4517:119;;;;;;;;:::i;:::-;-1:-1:-1;437:4517:119;;-1:-1:-1;;;3986:23:62;;437:4517:119;3986:23:62;;437:4517:119;;;-1:-1:-1;437:4517:119;3986:23:62;437:4517:119;3986:3:62;-1:-1:-1;;;;;437:4517:119;3986:23:62;;437:4517:119;;3986:23:62;;;437:4517:119;-1:-1:-1;3982:172:62;;4119:24;;;;437:4517:119;4119:24:62;437:4517:119;;3986:23:62;437:4517:119;4119:24:62;3982:172;-1:-1:-1;;;;;4186:26:62;;;437:4517:119;;4168:15:62;:44;4164:87;;4331:16;;;;4349:21;;;;437:4517:119;4331:16:62;;-1:-1:-1;;;;;437:4517:119;;;;4331:16:62;:::i;:::-;;437:4517:119;;;;;;;4164:87:62;4233:18;;;437:4517:119;4233:18:62;437:4517:119;;4233:18:62;3986:23;;;;;;;437:4517:119;3986:23:62;;;;;;:::i;:::-;;;;;437:4517:119;;;;;;-1:-1:-1;;437:4517:119;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;437:4517:119;1497:44:61;;437:4517:119;;;1497:44:61;437:4517:119;;;;;;1497:14:61;437:4517:119;1497:44:61;;;;;;437:4517:119;1497:44:61;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;437:4517:119;1497:44:61;;;;;;:::i;:::-;;;437:4517:119;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;437:4517:119;;;;;;-1:-1:-1;;437:4517:119;;;;;;;542:43:61;437:4517:119;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;1055:104:6;;437:4517:119;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;437:4517:119;;;;;;;;;;;;1055:104:6;;;437:4517:119;;;;-1:-1:-1;;;437:4517:119;;;;;;;;;;;;;;;;;-1:-1:-1;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;1055:104:6;;4208:16:119;;1055:104:6;;;;;;:::i;437:4517:119:-;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;:::i;:::-;4208:16;4167:181;437:4517;;:::i;:::-;;4208:16;437:4517;;:::i;:::-;;;;;;;;;4208:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;437:4517;;-1:-1:-1;;;4167:181:119;;437:4517;;;;;;4167:181;;;:::i;437:4517::-;;;;4477:37;437:4517;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4517:119;;;;;;;;-1:-1:-1;;437:4517:119;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;:::o;:::-;;;;-1:-1:-1;437:4517:119;;;;;-1:-1:-1;437:4517:119;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;:::o;:::-;;;4208:16;;437:4517;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;:::o;:::-;-1:-1:-1;;;;;437:4517:119;;;;;;-1:-1:-1;;437:4517:119;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4517:119;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;437:4517:119;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;437:4517:119;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;437:4517:119;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;:::o;:::-;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;437:4517:119;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;437:4517:119;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;-1:-1:-1;437:4517:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;-1:-1:-1;;;;;437:4517:119;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;1132:267::-;1308:34;1132:267;1308:34;437:4517;;;1308:34;;;;;;:::i;:::-;437:4517;;1308:34;1377:14;;;;-1:-1:-1;;;;;437:4517:119;;;;1132:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;437:4517:119;;;;;;;;;;;;;4064:22:9;;;;4060:87;;437:4517:119;;;;;;;;;;;;;;4274:33:9;437:4517:119;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;437:4517:119;;3896:19:9;437:4517:119;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;437:4517:119;;;;3881:1:9;437:4517:119;;;;;3881:1:9;437:4517:119;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;437:4517:119;;:::i;:::-;2221:30:62;437:4517:119;;:::i;:::-;-1:-1:-1;437:4517:119;;-1:-1:-1;;;2314:27:62;;;;;437:4517:119;;;2314:3:62;-1:-1:-1;;;;;437:4517:119;;-1:-1:-1;437:4517:119;2314:27:62;437:4517:119;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;437:4517:119;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;437:4517:119;;;;;2543:32:62;;;2314:27;2543:32;;437:4517:119;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;437:4517:119;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;437:4517:119;;2991:11:62;;;;;437:4517:119;2991:11:62;437:4517:119;2954:58:62;2991:11;;2954:58;:::i;:::-;437:4517:119;;;;;;;;;;;;;;;;;3083:66:62;;437:4517:119;2314:27:62;3083:66;;437:4517:119;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;437:4517:119;2314:27:62;437:4517:119;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;437:4517:119;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;437:4517:119;;;;;:::i;:::-;;;;-1:-1:-1;437:4517:119;3369:47:62;;437:4517:119;;;;;;;:::i;:::-;3323:18:62;437:4517:119;;;3275:160:62;;437:4517:119;;;3247:202:62;;;;;437:4517:119;-1:-1:-1;437:4517:119;;;;;;;;;;;;;;3247:202:62;;437:4517:119;2314:27:62;3247:202;;437:4517:119;;;;2314:27:62;437:4517:119;;;;;;;;;3247:202:62;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;437:4517:119;;;2314:27:62;3488:25;;3231:293;3622:11;437:4517:119;;3231:293:62;;;;;3720:61;;1997:663:119;;-1:-1:-1;;;;;437:4517:119;;1997:663;:::i;:::-;437:4517;;-1:-1:-1;;;;;437:4517:119;;3720:61:62;;2051:1760;:::o;3247:202::-;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;437:4517:119;3083:66:62;;437:4517:119;3083:66:62;;;;;;437:4517:119;3083:66:62;;;:::i;:::-;;;437:4517:119;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;437:4517:119;;;;;;;:::i;:::-;-1:-1:-1;437:4517:119;;;;;;;;;;;;;;;;;:::o;2871:698::-;3084:18;1016:17:60;;;437:4517:119;1016:27:60;1012:55;;1084:27;;;:::i;:::-;3056:47:119;3052:65;;3160:79;3184:15;3284:36;3184:15;;;1016:17:60;437:4517:119;;;3160:79;;;;;;:::i;:::-;437:4517;1016:17:60;437:4517:119;;;3284:36;;;;;;:::i;:::-;3350:13;;;;437:4517;3367:16;;;437:4517;-1:-1:-1;;;;;437:4517:119;;;;;3350:33;;;:86;;2871:698;3350:139;;;2871:698;3350:212;;;3331:231;;2871:698;:::o;3350:212::-;1016:17:60;3515:14:119;;;;;;437:4517;;;;;3505:25;3544:17;;;1016::60;437:4517:119;;;;3534:28;3505:57;2871:698;:::o;3350:139::-;437:4517;;;;-1:-1:-1;;;;;437:4517:119;;;;;3452:37;;-1:-1:-1;3350:139:119;;:86;3399:15;;;;;437:4517;3399:15;3418:18;;437:4517;3399:37;3350:86;;;3052:65;3105:12;;437:4517;3105:12;:::o;1012:55:60:-;1052:15;;;437:4517:119;1052:15:60;;437:4517:119;1052:15:60;879:385:63;;;;;;;;1553:34:119;437:4517;;;;;:::i;:::-;1553:34;437:4517;;;1553:34;;;;;;:::i;:::-;1622:13;;;;437:4517;;;;1720:15;-1:-1:-1;437:4517:119;;;;;;;1720:15;;437:4517;;;1614:135;;;;;;1622:13;437:4517;-1:-1:-1;;;1614:135:119;;-1:-1:-1;;;;;437:4517:119;;1614:135;;;437:4517;1697:4;437:4517;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;1614:135:119;;;;;;879:385:63;-1:-1:-1;1598:352:119;;437:4517;;;;1622:13;437:4517;-1:-1:-1;;;1788:151:119;;-1:-1:-1;;;;;437:4517:119;;;1614:135;1788:151;;437:4517;;;;;;;;1697:4;437:4517;;;;;;;;;;1788:151;1598:352;;;;;;;;;437:4517;1598:352;;;437:4517;;;:::i;:::-;;1622:13;437:4517;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;-1:-1:-1;;;;;437:4517:119;1622:13;437:4517;;;;;;;;;;;;1553:34;1914:299:61;;437:4517:119;2076:4:61;1622:13:119;1914:299:61;;437:4517:119;1720:15;1914:299:61;;437:4517:119;1914:299:61;;;437:4517:119;1914:299:61;;;;437:4517:119;1553:34;1622:13;437:4517;;;;:::i;:::-;1868:18:61;437:4517:119;;1819:413:61;;;437:4517:119;;;1622:13;437:4517;;;;;;;;1791:455:61;;;1614:135:119;1791:455:61;;437:4517:119;;;;;;;1622:13;437:4517;;;;;;;;;;;;;;;;-1:-1:-1;;;;;437:4517:119;;;;;;;;;1622:13;437:4517;;;;;;;;;1720:15;437:4517;;;;;;;1914:299:61;437:4517:119;1914:299:61;437:4517:119;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;437:4517:119;;1791:3:61;-1:-1:-1;;;;;437:4517:119;1791:455:61;;;;;;;;;;;1598:352:119;1150:55:63;4817:26:62;1150:55:63;4817:26:62;;;879:385:63:o;1791:455:61:-;;;1553:34:119;1791:455:61;;1553:34:119;1791:455:61;;;;;;437:4517:119;1791:455:61;;;:::i;:::-;;;437:4517:119;;;;;1791:455:61;;;;;;-1:-1:-1;1791:455:61;;;1622:13:119;437:4517;;;;;;;;;-1:-1:-1;;;437:4517:119;;;1614:135;437:4517;;;;1614:135;;;;;-1:-1:-1;1614:135:119;;:::i;:::-;-1:-1:-1;1614:135:119;;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;437:4517:119;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;4208:16;;437:4517;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;437:4517:119;;-1:-1:-1;;;1033:111:50;;;;437:4517:119;1033:111:50;437:4517:119;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;437:4517:119;;;;26127:66:57;;26014:100;26027:7;26098:1;437:4517:119;;;;26014:100:57;;;25901;25914:7;25985:1;437:4517:119;;;;25901:100:57;;;25788;25801:7;25872:1;437:4517:119;;;;25788:100:57;;;25672:103;25685:8;25758:2;437:4517:119;;;;25672:103:57;;;25556;25569:8;25642:2;437:4517:119;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;437:4517:119;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;437:4517:119;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;437:4517:119;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;437:4517:119;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;437:4517:119;-1:-1:-1;;;;;437:4517:119;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1997:663:119;2201:74;1997:663;;;;2201:74;437:4517;;;2201:74;;;;;;:::i;:::-;2310:13;;;437:4517;;2406:15;;;;437:4517;;2406:15;;2310:13;;-1:-1:-1;;437:4517:119;-1:-1:-1;;;;;437:4517:119;2302:133;;;;;2310:13;437:4517;-1:-1:-1;;;2302:133:119;;2363:4;2302:133;;;437:4517;-1:-1:-1;;;;;437:4517:119;;;;;;;;;;;;;-1:-1:-1;;437:4517:119;;;;;;-1:-1:-1;;2302:133:119;;;;;;1997:663;-1:-1:-1;2286:348:119;;-1:-1:-1;;437:4517:119;;;2310:13;437:4517;-1:-1:-1;;;2474:149:119;;-1:-1:-1;;;;;437:4517:119;;;2302:133;2474:149;;437:4517;2363:4;437:4517;;;;;;;;;;;;;;;;;;1788:151;2286:348;;;;;;2310:13;437:4517;;;2201:74;437:4517;;:::i;:::-;;;1997:663;:::o;2302:133::-;;;;;-1:-1:-1;2302:133:119;;:::i;:::-;-1:-1:-1;2302:133:119;;;",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2343,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2386,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2429,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 6611,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 1961,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 958,
          "length": 32
        },
        {
          "start": 1666,
          "length": 32
        },
        {
          "start": 4435,
          "length": 32
        },
        {
          "start": 6046,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1022,
          "length": 32
        },
        {
          "start": 1911,
          "length": 32
        },
        {
          "start": 2277,
          "length": 32
        },
        {
          "start": 4914,
          "length": 32
        },
        {
          "start": 5323,
          "length": 32
        },
        {
          "start": 5873,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256),uint64)": "a4f0d517",
    "doObligationFor((address,bytes,address,uint256),uint64,address,address)": "3ce55d02",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct ERC721EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC721EscrowObligation.sol":"ERC721EscrowObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x7684ee96e546789ec68279e62bcf43d4e94995175c6de5969fa2eec20ae366ec","license":"UNLICENSED","urls":["bzz-raw://9860fb81de80488459948c3678539b655055af18d09b3612ffab0f18ff9bed11","dweb:/ipfs/QmRXBNA24fvpN5zVoo2G6YHhvrN2jaGGNZwGWNGn88P7ut"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC721TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC721EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC721EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC721EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC721EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC721EscrowObligation.sol": "ERC721EscrowObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        "keccak256": "0x7684ee96e546789ec68279e62bcf43d4e94995175c6de5969fa2eec20ae366ec",
        "urls": [
          "bzz-raw://9860fb81de80488459948c3678539b655055af18d09b3612ffab0f18ff9bed11",
          "dweb:/ipfs/QmRXBNA24fvpN5zVoo2G6YHhvrN2jaGGNZwGWNGn88P7ut"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 119
};

// src/contracts/TokenBundleEscrowObligation.ts
var abi40 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "onERC1155BatchReceived",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "onERC1155Received",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ArrayLengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC1155TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC20TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ERC721TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x61016080604052346102a657604081612d7f803803809161002082856102e0565b8339810103126102a65780516001600160a01b038116918282036102a65760200151916001600160a01b0383168084036102a65760405161010081016001600160401b038111828210176102cc5760405260cc815260208101927f6164647265737320617262697465722c2062797465732064656d616e642c206184527f6464726573735b5d206572633230546f6b656e732c2075696e743235365b5d2060408301527f6572633230416d6f756e74732c20616464726573735b5d20657263373231546f60608301527f6b656e732c2075696e743235365b5d20657263373231546f6b656e4964732c2060808301527f616464726573735b5d2065726331313535546f6b656e732c2075696e7432353660a08301527f5b5d2065726331313535546f6b656e4964732c2075696e743235365b5d20657260c08301526b6331313535416d6f756e747360a01b60e08301526001608052600360a0525f60c052156102bd576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156102b2575f9161027c575b5061014052604051612a7b9081610304823960805181610bb0015260a05181610bdb015260c05181610c06015260e0518161241c01526101005181610a320152610120518181816106010152818161090b0152818161162f01526121f901526101405181818161064101528181610a0001528181610b6e0152818161180e01528181611c79015261214c0152f35b90506020813d6020116102aa575b81610297602093836102e0565b810103126102a657515f6101ee565b5f80fd5b3d915061028a565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102cc5760405256fe6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816301ffc9a714610c90575080632c713cd914610c7f57806354fd4d5014610b915780635bf2f20d14610b575780636b122fe0146109c15780637d2c2931146108d35780638371ef591461087557806388e5b2d914610828578063891d9ea81461084757806391db0b7e14610828578063b3b902d4146107e2578063bc197c811461074d578063bca73d64146106bd578063c6ec5070146105c2578063c93844be14610412578063cd181c4914610332578063ce46e04614610318578063e49617e1146102fd578063e60c3505146102fd578063e6c9714d146101db578063f0ffa185146101805763f23a6e6114610127575f61000f565b3461017c5760a036600319011261017c57610140610f06565b50610149610f1c565b506084356001600160401b03811161017c57610169903690600401610e11565b5060405163f23a6e6160e01b8152602090f35b5f80fd5b60a036600319011261017c576004356001600160401b03811161017c576101d36101b06020923690600401610eaf565b6101b8610edc565b6101c0610f32565b906101c9610f48565b9260843594611d40565b604051908152f35b3461017c57606036600319011261017c576004356001600160401b03811161017c57610140600319823603011261017c576040519061021982610d68565b806004013582526024810135602083015261023660448201610ef2565b604083015261024760648201610ef2565b606083015261025860848201610ef2565b608083015260a481013560a083015261027360c48201610f5e565b60c083015261028460e48201610f5e565b60e0830152610104810135801515810361017c57610100830152610124810135906001600160401b03821161017c5760046102c29236920101610e11565b6101208201526024356001600160401b03811161017c576020916102ed6102f3923690600401610e11565b90611c77565b6040519015158152f35b60206102f361030b36611136565b61031361241a565b61245b565b3461017c575f36600319011261017c5760206040515f8152f35b3461017c57604036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206103b691610389610397610377610edc565b92604051928391600401868301611a18565b03601f198101835282610d9f565b60405163f0ffa18560e01b815293849283923391829160048601611b8c565b03815f305af18015610407575f906103d4575b602090604051908152f35b506020813d6020116103ff575b816103ee60209383610d9f565b8101031261017c57602090516103c9565b3d91506103e1565b6040513d5f823e3d90fd5b3461017c57602036600319011261017c576004356001600160401b03811161017c57610442903690600401610eaf565b61044a611bcf565b5081019060208183031261017c578035906001600160401b03821161017c57016101208183031261017c576040519061048282610d4c565b61048b81610f5e565b825260208101356001600160401b03811161017c57836104ac918301610e11565b602083015260408101356001600160401b03811161017c57836104d0918301611c12565b604083015260608101356001600160401b03811161017c57836104f4918301610f89565b606083015260808101356001600160401b03811161017c5783610518918301611c12565b608083015260a08101356001600160401b03811161017c578361053c918301610f89565b60a083015260c08101356001600160401b03811161017c5783610560918301611c12565b60c083015260e08101356001600160401b03811161017c5783610584918301610f89565b60e0830152610100810135926001600160401b03841161017c576105be936105ac9201610f89565b61010082015260405191829182611055565b0390f35b3461017c57602036600319011261017c576105db611bcf565b506105e46111ad565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610407575f9161069b575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361068c576106806101206105be920151602080825183010191016113d6565b60405191829182611055565b635527981560e11b5f5260045ffd5b6106b791503d805f833e6106af8183610d9f565b810190611239565b81610639565b3461017c57608036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206106f8610edc565b6107246103b6610706610f32565b94610732610712610f48565b91604051948591600401888301611a18565b03601f198101855284610d9f565b60405163f0ffa18560e01b8152958694859460048601611b8c565b3461017c5760a036600319011261017c57610766610f06565b5061076f610f1c565b506044356001600160401b03811161017c5761078f903690600401610f89565b506064356001600160401b03811161017c576107af903690600401610f89565b506084356001600160401b03811161017c576107cf903690600401610e11565b5060405163bc197c8160e01b8152602090f35b606036600319011261017c576004356001600160401b03811161017c576101d36108126020923690600401610eaf565b61081a610edc565b916044359233923392611d40565b60206102f361083636610e5f565b9261084292919261241a565b611561565b3461017c576105be61086161085b36610ce3565b90611605565b604051918291602083526020830190610cf9565b3461017c57602036600319011261017c576004356001600160401b03811161017c576108a86108ad913690600401610e11565b611538565b604080516001600160a01b0390931683526020830181905282916105be91830190610cf9565b3461017c57602036600319011261017c576004356108ef6111ad565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f91816109a5575b5061095557506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106109965761012081015160c09091015161098a916001600160a01b03909116906124cf565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6109ba9192503d805f833e6106af8183610d9f565b908361093d565b3461017c575f36600319011261017c576060806040516109e081610d1d565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610407575f90610aa7575b6060906105be604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610cf9565b503d805f833e610ab78183610d9f565b81019060208183031261017c578051906001600160401b03821161017c570160808183031261017c5760405190610aed82610d1d565b8051825260208101516001600160a01b038116810361017c576020830152610b176040820161116a565b60408301526060810151906001600160401b03821161017c570182601f8201121561017c57606092816020610b4e93519101611177565b82820152610a61565b3461017c575f36600319011261017c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461017c575f36600319011261017c576105be60206108616001610bd47f00000000000000000000000000000000000000000000000000000000000000006122ad565b8184610bff7f00000000000000000000000000000000000000000000000000000000000000006122ad565b8180610c2a7f00000000000000000000000000000000000000000000000000000000000000006122ad565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610d9f565b3461017c5761098a61085b36610ce3565b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091630271189760e51b8114908115610cd2575b5015158152f35b6301ffc9a760e01b14905083610ccb565b604090600319011261017c576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610d3857604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610d3857604052565b61014081019081106001600160401b03821117610d3857604052565b604081019081106001600160401b03821117610d3857604052565b90601f801991011681019081106001600160401b03821117610d3857604052565b6001600160401b038111610d3857601f01601f191660200190565b929192610de782610dc0565b91610df56040519384610d9f565b82948184528183011161017c578281602093845f960137010152565b9080601f8301121561017c57816020610e2c93359101610ddb565b90565b9181601f8401121561017c578235916001600160401b03831161017c576020808501948460051b01011161017c57565b604060031982011261017c576004356001600160401b03811161017c5781610e8991600401610e2f565b92909291602435906001600160401b03821161017c57610eab91600401610e2f565b9091565b9181601f8401121561017c578235916001600160401b03831161017c576020838186019501011161017c57565b602435906001600160401b038216820361017c57565b35906001600160401b038216820361017c57565b600435906001600160a01b038216820361017c57565b602435906001600160a01b038216820361017c57565b604435906001600160a01b038216820361017c57565b606435906001600160a01b038216820361017c57565b35906001600160a01b038216820361017c57565b6001600160401b038111610d385760051b60200190565b9080601f8301121561017c578135610fa081610f72565b92610fae6040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b828210610fd65750505090565b8135815260209182019101610fc9565b90602080835192838152019201905f5b8181106110035750505090565b82516001600160a01b0316845260209384019390920191600101610ff6565b90602080835192838152019201905f5b81811061103f5750505090565b8251845260209384019390920191600101611032565b90610e2c916020815260018060a01b03825116602082015261010061112061110b6110f56110df6110c96110b361109d60208a015161012060408b01526101408a0190610cf9565b60408a0151898203601f190160608b0152610fe6565b6060890151888203601f190160808a0152611022565b6080880151878203601f190160a0890152610fe6565b60a0870151868203601f190160c0880152611022565b60c0860151858203601f190160e0870152610fe6565b60e0850151848203601f190184860152611022565b92015190610120601f1982850301910152611022565b602060031982011261017c57600435906001600160401b03821161017c5761014090829003600319011261017c5760040190565b5190811515820361017c57565b92919261118382610dc0565b916111916040519384610d9f565b82948184528183011161017c578281602093845f96015e010152565b604051906111ba82610d68565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361017c57565b51906001600160a01b038216820361017c57565b9080601f8301121561017c578151610e2c92602001611177565b60208183031261017c578051906001600160401b03821161017c57016101408183031261017c576040519161126d83610d68565b8151835260208201516020840152611287604083016111f7565b6040840152611298606083016111f7565b60608401526112a9608083016111f7565b608084015260a082015160a08401526112c460c0830161120b565b60c08401526112d560e0830161120b565b60e08401526112e7610100830161116a565b6101008401526101208201516001600160401b03811161017c5761130b920161121f565b61012082015290565b9080601f8301121561017c57815161132b81610f72565b926113396040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b8282106113615750505090565b6020809161136e8461120b565b815201910190611354565b9080601f8301121561017c57815161139081610f72565b9261139e6040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b8282106113c65750505090565b81518152602091820191016113b9565b60208183031261017c578051906001600160401b03821161017c57016101208183031261017c576040519161140a83610d4c565b6114138261120b565b835260208201516001600160401b03811161017c578161143491840161121f565b602084015260408201516001600160401b03811161017c5781611458918401611314565b604084015260608201516001600160401b03811161017c578161147c918401611379565b606084015260808201516001600160401b03811161017c57816114a0918401611314565b608084015260a08201516001600160401b03811161017c57816114c4918401611379565b60a084015260c08201516001600160401b03811161017c57816114e8918401611314565b60c084015260e08201516001600160401b03811161017c578161150c918401611379565b60e08401526101008201516001600160401b03811161017c5761152f9201611379565b61010082015290565b61154b90602080825183010191016113d6565b80516020909101516001600160a01b0390911691565b9290928184036115f6575f91345b858410156115eb57818410156115d7578360051b80860135908282116115c85784013561013e198536030181121561017c576115ac90850161245b565b156115bd576001910393019261156f565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f61160f6111ad565b506116186111ad565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611965575b5061168057856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f9181611949575b506116c057866301fb6dd160e01b5f5260045260245ffd5b959192939495926116d082612474565b1561193a576117af60206101208085019460c0886117c16116f18951611538565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610cf9565b84810360031901602486015290610cf9565b604483019190915203916001600160a01b03165afa908115610407575f91611900575b50156118f1576040516117f681610d84565b8581525f60208201526040519061180c82610d84565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b1561017c5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af190816118dc575b5061188e5763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0916118cb916001600160a01b0316906124cf565b94516001600160a01b03169380a490565b6118e99196505f90610d9f565b5f945f611875565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611932575b8161191b60209383610d9f565b8101031261017c5761192c9061116a565b5f6117e4565b3d915061190e565b63629cd40b60e11b5f5260045ffd5b61195e9192503d805f833e6106af8183610d9f565b905f6116a8565b61197a9192503d805f833e6106af8183610d9f565b905f611668565b9035601e198236030181121561017c5701602081359101916001600160401b03821161017c578160051b3603831361017c57565b916020908281520191905f5b8181106119ce5750505090565b909192602080600192838060a01b036119e688610f5e565b1681520194019291016119c1565b81835290916001600160fb1b03831161017c5760209260051b809284830137010190565b60208152906001600160a01b03611a2e82610f5e565b1660208301526020810135601e198236030181121561017c578101916020833593016001600160401b03841161017c57833603811361017c57611b6d611b4d611b2e611b0f611af0611ad189610e2c9a611b799861012060408c0152816101408c01526101608b01375f610160828b010152601f80199101168801610160611ab960408c018c611981565b919092601f19828d8303010160608d015201916119b5565b611ade60608a018a611981565b898303601f190160808b0152906119f4565b611afd6080890189611981565b888303601f190160a08a0152906119b5565b611b1c60a0880188611981565b878303601f190160c0890152906119f4565b611b3b60c0870187611981565b868303601f190160e0880152906119b5565b611b5a60e0860186611981565b858303601f1901610100870152906119f4565b92610100810190611981565b91610120601f19828603019101526119f4565b90935f936001600160401b03611bae608095989760a0865260a0860190610cf9565b971660208401526001600160a01b0390811660408401521660608201520152565b60405190611bdc82610d4c565b6060610100835f815282602082015282604082015282808201528260808201528260a08201528260c08201528260e08201520152565b9080601f8301121561017c578135611c2981610f72565b92611c376040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b828210611c5f5750505090565b60208091611c6c84610f5e565b815201910190611c52565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611d3157611cab81612474565b15611d2b57611ccb610120611cdb920151602080825183010191016113d6565b91602080825183010191016113d6565b611ce58183612831565b9182611d12575b82611cf657505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611cec565b50505f90565b635f9bd90760e11b5f5260045ffd5b90959194929394611d64611d55368985610ddb565b602080825183010191016113d6565b9160408301948551519860608501998a51510361228d5760808501928351519560a08101968751510361228d5760c081018051519360e083019485515181149081159161229c575b5061228d575f5b8b518051821015611ec7578f8e602091611de585611e2095611ddc8260018060a01b039261281d565b5116925161281d565b516040516323b872dd60e01b81526001600160a01b0390931660048401523060248401526044830152909283919082905f9082906064820190565b03925af15f9181611e8c575b50611e8757505f5b15611e4157600101611db3565b8c8f91611e67818f611e5e611e839460018060a01b03925161281d565b5116945161281d565b51604051634a73404560e11b8152938493309160048601612a1a565b0390fd5b611e34565b9091506020813d8211611ebf575b81611ea760209383610d9f565b8101031261017c57611eb89061116a565b905f611e2c565b3d9150611e9a565b505092959950929597999a9093969b505f995b895180518c1015611f9b57611efc8c8f92611ddc8260018060a01b039261281d565b5190803b1561017c576040516323b872dd60e01b81526001600160a01b038f16600482015230602482015260448101929092525f908290606490829084905af19081611f8b575b50611f80578c8c611e83611f648e8e611e5e8260018060a01b03925161281d565b5160405163045b391760e01b8152938493309160048601612a1a565b6001909a0199611eda565b5f611f9591610d9f565b5f611f43565b5093985093959850939950946101005f9701975b865180518910156120d6576001600160a01b0390611fce908a9061281d565b5116611fdb898d5161281d565b51611fe78a8c5161281d565b51823b1561017c57604051637921219560e11b81526001600160a01b038e1660048201523060248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af190816120c6575b506120bb578a8a611e838b6120788c612070818e6120678260018060a01b03925161281d565b5116975161281d565b51925161281d565b5160405163334a7d1b60e21b81526001600160a01b03958616600482015294909316602485015230604485015260648401526084830191909152819060a4820190565b600190970196611faf565b5f6120d091610d9f565b5f612041565b5096509650965096506120eb92503691610ddb565b906040519460c08601908682106001600160401b03831117610d38576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a0840152602060405161214a81610d84565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a06121eb608083015160c060e4860152610124850190610cf9565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610407575f93612259575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011612285575b8161227560209383610d9f565b8101031261017c5751915f612231565b3d9150612268565b63512509d360e11b5f5260045ffd5b90506101008401515114155f611dac565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156123f7575b806d04ee2d6d415b85acef8100000000600a9210156123dc575b662386f26fc100008110156123c8575b6305f5e1008110156123b7575b6127108110156123a8575b606481101561239a575b101561238f575b600a6021600184019361233485610dc0565b946123426040519687610d9f565b808652612351601f1991610dc0565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561238a57600a909161235c565b505090565b600190910190612322565b60646002910493019261231b565b61271060049104930192612311565b6305f5e10060089104930192612306565b662386f26fc10000601091049301926122f9565b6d04ee2d6d415b85acef8100000000602091049301926122e9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046122cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361244c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361017c57301490565b6001600160401b0360608201511680151590816124c5575b506124b657608001516001600160401b03166124a757600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61248c565b6124e590929192602080825183010191016113d6565b90606082019060408301906001600160a01b038516905f5b835180518210156125ee575f906020906001600160a01b039061252190859061281d565b51166044612530858a5161281d565b51604051948593849263a9059cbb60e01b84528a600485015260248401525af15f91816125b3575b506125ae57505f5b1561256d576001016124fd565b84611e8361259283876125898c9660018060a01b03925161281d565b5116935161281d565b51604051634a73404560e11b8152938493309060048601612a1a565b612560565b9091506020813d82116125e6575b816125ce60209383610d9f565b8101031261017c576125df9061116a565b905f612558565b3d91506125c1565b505060a08501945f945060808101935091505b825180518510156126cf576001600160a01b039061262090869061281d565b511661262d85875161281d565b5190803b1561017c576040516323b872dd60e01b81523060048201526001600160a01b038916602482015260448101929092525f908290606490829084905af190816126bf575b506126b457505051611e8391612698916001600160a01b039061258990839061281d565b5160405163045b391760e01b8152938493309060048601612a1a565b600190930192612601565b5f6126c991610d9f565b5f612674565b5092509250505f60c0830161010060e085019401925b81518051841015612802576001600160a01b039061270490859061281d565b511661271184875161281d565b5161271d85875161281d565b51823b1561017c57604051637921219560e11b81523060048201526001600160a01b038a1660248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af190816127f2575b506127e8575081612070816127a59361279c611e83979660018060a01b03925161281d565b5116965161281d565b5160405163334a7d1b60e21b81526001600160a01b03948516600482015230602482015294909316604485015260648401526084830191909152819060a4820190565b91600101916126e5565b5f6127fc91610d9f565b5f612777565b50945050505050604051612817602082610d9f565b5f815290565b80518210156115d75760209160051b010190565b6040810191825151604082019081515111612a12575f5b8151518110156128c15784516001600160a01b039061286890839061281d565b511660018060a01b0361287c83855161281d565b51161480159061289c575b61289357600101612848565b50505050505f90565b506128ab81606086015161281d565b516128ba82606086015161281d565b5111612887565b505091506080810191825151608082019081515111612a12575f5b81515181101561294d5784516001600160a01b03906128fc90839061281d565b511660018060a01b0361291083855161281d565b511614801590612927575b612893576001016128dc565b506129368160a086015161281d565b516129458260a086015161281d565b51141561291b565b5050915060c08101918251519260c082019384515111612a12575f5b845151811015612a085781516001600160a01b039061298990839061281d565b511660018060a01b0361299d83885161281d565b5116148015906129e2575b80156129bb575b61289357600101612969565b506129cb8161010086015161281d565b516129db8261010086015161281d565b51116129af565b506129f18160e086015161281d565b51612a008260e086015161281d565b5114156129a8565b5050505050600190565b505050505f90565b6001600160a01b0391821681529181166020830152909116604082015260608101919091526080019056fea2646970667358221220cd206aff53402bb98bba95b06a59909c9e599954ae89a672c4ce0ba3c2e39b0664736f6c634300081b0033",
    "sourceMap": "678:10693:124:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;678:10693:124;;;;2018:4;678:10693;759:14:6;688:1:9;678:10693:124;783:14:6;-1:-1:-1;678:10693:124;807:14:6;708:26:9;704:76;;678:10693:124;790:10:9;;678:10693:124;790:10:9;678:10693:124;790:10:9;789::61;;678:10693:124;809:32:61;-1:-1:-1;678:10693:124;;;;;;;;;;;872:48:61;;678:10693:124;872:48:61;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;904:4:61;678:10693:124;;;;2018:4;678:10693;;;;;;-1:-1:-1;;678:10693:124;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:10:61;678:10693:124;;;;;;;;;;;;;;;;;;;;851:69:61;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;678:10693:124;872:48:61;;678:10693:124;872:48:61;;;;;;678:10693:124;872:48:61;;;:::i;:::-;;;678:10693:124;;;;;872:48:61;;;678:10693:124;-1:-1:-1;678:10693:124;;872:48:61;;;-1:-1:-1;872:48:61;;;678:10693:124;;;-1:-1:-1;678:10693:124;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;;-1:-1:-1;678:10693:124;;;;;;-1:-1:-1;;678:10693:124;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816301ffc9a714610c90575080632c713cd914610c7f57806354fd4d5014610b915780635bf2f20d14610b575780636b122fe0146109c15780637d2c2931146108d35780638371ef591461087557806388e5b2d914610828578063891d9ea81461084757806391db0b7e14610828578063b3b902d4146107e2578063bc197c811461074d578063bca73d64146106bd578063c6ec5070146105c2578063c93844be14610412578063cd181c4914610332578063ce46e04614610318578063e49617e1146102fd578063e60c3505146102fd578063e6c9714d146101db578063f0ffa185146101805763f23a6e6114610127575f61000f565b3461017c5760a036600319011261017c57610140610f06565b50610149610f1c565b506084356001600160401b03811161017c57610169903690600401610e11565b5060405163f23a6e6160e01b8152602090f35b5f80fd5b60a036600319011261017c576004356001600160401b03811161017c576101d36101b06020923690600401610eaf565b6101b8610edc565b6101c0610f32565b906101c9610f48565b9260843594611d40565b604051908152f35b3461017c57606036600319011261017c576004356001600160401b03811161017c57610140600319823603011261017c576040519061021982610d68565b806004013582526024810135602083015261023660448201610ef2565b604083015261024760648201610ef2565b606083015261025860848201610ef2565b608083015260a481013560a083015261027360c48201610f5e565b60c083015261028460e48201610f5e565b60e0830152610104810135801515810361017c57610100830152610124810135906001600160401b03821161017c5760046102c29236920101610e11565b6101208201526024356001600160401b03811161017c576020916102ed6102f3923690600401610e11565b90611c77565b6040519015158152f35b60206102f361030b36611136565b61031361241a565b61245b565b3461017c575f36600319011261017c5760206040515f8152f35b3461017c57604036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206103b691610389610397610377610edc565b92604051928391600401868301611a18565b03601f198101835282610d9f565b60405163f0ffa18560e01b815293849283923391829160048601611b8c565b03815f305af18015610407575f906103d4575b602090604051908152f35b506020813d6020116103ff575b816103ee60209383610d9f565b8101031261017c57602090516103c9565b3d91506103e1565b6040513d5f823e3d90fd5b3461017c57602036600319011261017c576004356001600160401b03811161017c57610442903690600401610eaf565b61044a611bcf565b5081019060208183031261017c578035906001600160401b03821161017c57016101208183031261017c576040519061048282610d4c565b61048b81610f5e565b825260208101356001600160401b03811161017c57836104ac918301610e11565b602083015260408101356001600160401b03811161017c57836104d0918301611c12565b604083015260608101356001600160401b03811161017c57836104f4918301610f89565b606083015260808101356001600160401b03811161017c5783610518918301611c12565b608083015260a08101356001600160401b03811161017c578361053c918301610f89565b60a083015260c08101356001600160401b03811161017c5783610560918301611c12565b60c083015260e08101356001600160401b03811161017c5783610584918301610f89565b60e0830152610100810135926001600160401b03841161017c576105be936105ac9201610f89565b61010082015260405191829182611055565b0390f35b3461017c57602036600319011261017c576105db611bcf565b506105e46111ad565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610407575f9161069b575b5060208101517f00000000000000000000000000000000000000000000000000000000000000000361068c576106806101206105be920151602080825183010191016113d6565b60405191829182611055565b635527981560e11b5f5260045ffd5b6106b791503d805f833e6106af8183610d9f565b810190611239565b81610639565b3461017c57608036600319011261017c576004356001600160401b03811161017c57610120600319823603011261017c5760206106f8610edc565b6107246103b6610706610f32565b94610732610712610f48565b91604051948591600401888301611a18565b03601f198101855284610d9f565b60405163f0ffa18560e01b8152958694859460048601611b8c565b3461017c5760a036600319011261017c57610766610f06565b5061076f610f1c565b506044356001600160401b03811161017c5761078f903690600401610f89565b506064356001600160401b03811161017c576107af903690600401610f89565b506084356001600160401b03811161017c576107cf903690600401610e11565b5060405163bc197c8160e01b8152602090f35b606036600319011261017c576004356001600160401b03811161017c576101d36108126020923690600401610eaf565b61081a610edc565b916044359233923392611d40565b60206102f361083636610e5f565b9261084292919261241a565b611561565b3461017c576105be61086161085b36610ce3565b90611605565b604051918291602083526020830190610cf9565b3461017c57602036600319011261017c576004356001600160401b03811161017c576108a86108ad913690600401610e11565b611538565b604080516001600160a01b0390931683526020830181905282916105be91830190610cf9565b3461017c57602036600319011261017c576004356108ef6111ad565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f91816109a5575b5061095557506301fb6dd160e01b5f5260045260245ffd5b6001600160401b0360608201511642106109965761012081015160c09091015161098a916001600160a01b03909116906124cf565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6109ba9192503d805f833e6106af8183610d9f565b908361093d565b3461017c575f36600319011261017c576060806040516109e081610d1d565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610407575f90610aa7575b6060906105be604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610cf9565b503d805f833e610ab78183610d9f565b81019060208183031261017c578051906001600160401b03821161017c570160808183031261017c5760405190610aed82610d1d565b8051825260208101516001600160a01b038116810361017c576020830152610b176040820161116a565b60408301526060810151906001600160401b03821161017c570182601f8201121561017c57606092816020610b4e93519101611177565b82820152610a61565b3461017c575f36600319011261017c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461017c575f36600319011261017c576105be60206108616001610bd47f00000000000000000000000000000000000000000000000000000000000000006122ad565b8184610bff7f00000000000000000000000000000000000000000000000000000000000000006122ad565b8180610c2a7f00000000000000000000000000000000000000000000000000000000000000006122ad565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610d9f565b3461017c5761098a61085b36610ce3565b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091630271189760e51b8114908115610cd2575b5015158152f35b6301ffc9a760e01b14905083610ccb565b604090600319011261017c576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610d3857604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610d3857604052565b61014081019081106001600160401b03821117610d3857604052565b604081019081106001600160401b03821117610d3857604052565b90601f801991011681019081106001600160401b03821117610d3857604052565b6001600160401b038111610d3857601f01601f191660200190565b929192610de782610dc0565b91610df56040519384610d9f565b82948184528183011161017c578281602093845f960137010152565b9080601f8301121561017c57816020610e2c93359101610ddb565b90565b9181601f8401121561017c578235916001600160401b03831161017c576020808501948460051b01011161017c57565b604060031982011261017c576004356001600160401b03811161017c5781610e8991600401610e2f565b92909291602435906001600160401b03821161017c57610eab91600401610e2f565b9091565b9181601f8401121561017c578235916001600160401b03831161017c576020838186019501011161017c57565b602435906001600160401b038216820361017c57565b35906001600160401b038216820361017c57565b600435906001600160a01b038216820361017c57565b602435906001600160a01b038216820361017c57565b604435906001600160a01b038216820361017c57565b606435906001600160a01b038216820361017c57565b35906001600160a01b038216820361017c57565b6001600160401b038111610d385760051b60200190565b9080601f8301121561017c578135610fa081610f72565b92610fae6040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b828210610fd65750505090565b8135815260209182019101610fc9565b90602080835192838152019201905f5b8181106110035750505090565b82516001600160a01b0316845260209384019390920191600101610ff6565b90602080835192838152019201905f5b81811061103f5750505090565b8251845260209384019390920191600101611032565b90610e2c916020815260018060a01b03825116602082015261010061112061110b6110f56110df6110c96110b361109d60208a015161012060408b01526101408a0190610cf9565b60408a0151898203601f190160608b0152610fe6565b6060890151888203601f190160808a0152611022565b6080880151878203601f190160a0890152610fe6565b60a0870151868203601f190160c0880152611022565b60c0860151858203601f190160e0870152610fe6565b60e0850151848203601f190184860152611022565b92015190610120601f1982850301910152611022565b602060031982011261017c57600435906001600160401b03821161017c5761014090829003600319011261017c5760040190565b5190811515820361017c57565b92919261118382610dc0565b916111916040519384610d9f565b82948184528183011161017c578281602093845f96015e010152565b604051906111ba82610d68565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361017c57565b51906001600160a01b038216820361017c57565b9080601f8301121561017c578151610e2c92602001611177565b60208183031261017c578051906001600160401b03821161017c57016101408183031261017c576040519161126d83610d68565b8151835260208201516020840152611287604083016111f7565b6040840152611298606083016111f7565b60608401526112a9608083016111f7565b608084015260a082015160a08401526112c460c0830161120b565b60c08401526112d560e0830161120b565b60e08401526112e7610100830161116a565b6101008401526101208201516001600160401b03811161017c5761130b920161121f565b61012082015290565b9080601f8301121561017c57815161132b81610f72565b926113396040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b8282106113615750505090565b6020809161136e8461120b565b815201910190611354565b9080601f8301121561017c57815161139081610f72565b9261139e6040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b8282106113c65750505090565b81518152602091820191016113b9565b60208183031261017c578051906001600160401b03821161017c57016101208183031261017c576040519161140a83610d4c565b6114138261120b565b835260208201516001600160401b03811161017c578161143491840161121f565b602084015260408201516001600160401b03811161017c5781611458918401611314565b604084015260608201516001600160401b03811161017c578161147c918401611379565b606084015260808201516001600160401b03811161017c57816114a0918401611314565b608084015260a08201516001600160401b03811161017c57816114c4918401611379565b60a084015260c08201516001600160401b03811161017c57816114e8918401611314565b60c084015260e08201516001600160401b03811161017c578161150c918401611379565b60e08401526101008201516001600160401b03811161017c5761152f9201611379565b61010082015290565b61154b90602080825183010191016113d6565b80516020909101516001600160a01b0390911691565b9290928184036115f6575f91345b858410156115eb57818410156115d7578360051b80860135908282116115c85784013561013e198536030181121561017c576115ac90850161245b565b156115bd576001910393019261156f565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f61160f6111ad565b506116186111ad565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f9181611965575b5061168057856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f9181611949575b506116c057866301fb6dd160e01b5f5260045260245ffd5b959192939495926116d082612474565b1561193a576117af60206101208085019460c0886117c16116f18951611538565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610cf9565b84810360031901602486015290610cf9565b604483019190915203916001600160a01b03165afa908115610407575f91611900575b50156118f1576040516117f681610d84565b8581525f60208201526040519061180c82610d84565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b1561017c5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af190816118dc575b5061188e5763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c0916118cb916001600160a01b0316906124cf565b94516001600160a01b03169380a490565b6118e99196505f90610d9f565b5f945f611875565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611932575b8161191b60209383610d9f565b8101031261017c5761192c9061116a565b5f6117e4565b3d915061190e565b63629cd40b60e11b5f5260045ffd5b61195e9192503d805f833e6106af8183610d9f565b905f6116a8565b61197a9192503d805f833e6106af8183610d9f565b905f611668565b9035601e198236030181121561017c5701602081359101916001600160401b03821161017c578160051b3603831361017c57565b916020908281520191905f5b8181106119ce5750505090565b909192602080600192838060a01b036119e688610f5e565b1681520194019291016119c1565b81835290916001600160fb1b03831161017c5760209260051b809284830137010190565b60208152906001600160a01b03611a2e82610f5e565b1660208301526020810135601e198236030181121561017c578101916020833593016001600160401b03841161017c57833603811361017c57611b6d611b4d611b2e611b0f611af0611ad189610e2c9a611b799861012060408c0152816101408c01526101608b01375f610160828b010152601f80199101168801610160611ab960408c018c611981565b919092601f19828d8303010160608d015201916119b5565b611ade60608a018a611981565b898303601f190160808b0152906119f4565b611afd6080890189611981565b888303601f190160a08a0152906119b5565b611b1c60a0880188611981565b878303601f190160c0890152906119f4565b611b3b60c0870187611981565b868303601f190160e0880152906119b5565b611b5a60e0860186611981565b858303601f1901610100870152906119f4565b92610100810190611981565b91610120601f19828603019101526119f4565b90935f936001600160401b03611bae608095989760a0865260a0860190610cf9565b971660208401526001600160a01b0390811660408401521660608201520152565b60405190611bdc82610d4c565b6060610100835f815282602082015282604082015282808201528260808201528260a08201528260c08201528260e08201520152565b9080601f8301121561017c578135611c2981610f72565b92611c376040519485610d9f565b81845260208085019260051b82010192831161017c57602001905b828210611c5f5750505090565b60208091611c6c84610f5e565b815201910190611c52565b7f0000000000000000000000000000000000000000000000000000000000000000602082015103611d3157611cab81612474565b15611d2b57611ccb610120611cdb920151602080825183010191016113d6565b91602080825183010191016113d6565b611ce58183612831565b9182611d12575b82611cf657505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b039081169116149250611cec565b50505f90565b635f9bd90760e11b5f5260045ffd5b90959194929394611d64611d55368985610ddb565b602080825183010191016113d6565b9160408301948551519860608501998a51510361228d5760808501928351519560a08101968751510361228d5760c081018051519360e083019485515181149081159161229c575b5061228d575f5b8b518051821015611ec7578f8e602091611de585611e2095611ddc8260018060a01b039261281d565b5116925161281d565b516040516323b872dd60e01b81526001600160a01b0390931660048401523060248401526044830152909283919082905f9082906064820190565b03925af15f9181611e8c575b50611e8757505f5b15611e4157600101611db3565b8c8f91611e67818f611e5e611e839460018060a01b03925161281d565b5116945161281d565b51604051634a73404560e11b8152938493309160048601612a1a565b0390fd5b611e34565b9091506020813d8211611ebf575b81611ea760209383610d9f565b8101031261017c57611eb89061116a565b905f611e2c565b3d9150611e9a565b505092959950929597999a9093969b505f995b895180518c1015611f9b57611efc8c8f92611ddc8260018060a01b039261281d565b5190803b1561017c576040516323b872dd60e01b81526001600160a01b038f16600482015230602482015260448101929092525f908290606490829084905af19081611f8b575b50611f80578c8c611e83611f648e8e611e5e8260018060a01b03925161281d565b5160405163045b391760e01b8152938493309160048601612a1a565b6001909a0199611eda565b5f611f9591610d9f565b5f611f43565b5093985093959850939950946101005f9701975b865180518910156120d6576001600160a01b0390611fce908a9061281d565b5116611fdb898d5161281d565b51611fe78a8c5161281d565b51823b1561017c57604051637921219560e11b81526001600160a01b038e1660048201523060248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af190816120c6575b506120bb578a8a611e838b6120788c612070818e6120678260018060a01b03925161281d565b5116975161281d565b51925161281d565b5160405163334a7d1b60e21b81526001600160a01b03958616600482015294909316602485015230604485015260648401526084830191909152819060a4820190565b600190970196611faf565b5f6120d091610d9f565b5f612041565b5096509650965096506120eb92503691610ddb565b906040519460c08601908682106001600160401b03831117610d38576001600160401b039160405260018060a01b03169384875216602086015260016040860152606085015260808401525f60a0840152602060405161214a81610d84565b7f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a06121eb608083015160c060e4860152610124850190610cf9565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1928315610407575f93612259575b50827f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d065f80a3565b9092506020813d602011612285575b8161227560209383610d9f565b8101031261017c5751915f612231565b3d9150612268565b63512509d360e11b5f5260045ffd5b90506101008401515114155f611dac565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156123f7575b806d04ee2d6d415b85acef8100000000600a9210156123dc575b662386f26fc100008110156123c8575b6305f5e1008110156123b7575b6127108110156123a8575b606481101561239a575b101561238f575b600a6021600184019361233485610dc0565b946123426040519687610d9f565b808652612351601f1991610dc0565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561238a57600a909161235c565b505090565b600190910190612322565b60646002910493019261231b565b61271060049104930192612311565b6305f5e10060089104930192612306565b662386f26fc10000601091049301926122f9565b6d04ee2d6d415b85acef8100000000602091049301926122e9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046122cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361244c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361017c57301490565b6001600160401b0360608201511680151590816124c5575b506124b657608001516001600160401b03166124a757600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f61248c565b6124e590929192602080825183010191016113d6565b90606082019060408301906001600160a01b038516905f5b835180518210156125ee575f906020906001600160a01b039061252190859061281d565b51166044612530858a5161281d565b51604051948593849263a9059cbb60e01b84528a600485015260248401525af15f91816125b3575b506125ae57505f5b1561256d576001016124fd565b84611e8361259283876125898c9660018060a01b03925161281d565b5116935161281d565b51604051634a73404560e11b8152938493309060048601612a1a565b612560565b9091506020813d82116125e6575b816125ce60209383610d9f565b8101031261017c576125df9061116a565b905f612558565b3d91506125c1565b505060a08501945f945060808101935091505b825180518510156126cf576001600160a01b039061262090869061281d565b511661262d85875161281d565b5190803b1561017c576040516323b872dd60e01b81523060048201526001600160a01b038916602482015260448101929092525f908290606490829084905af190816126bf575b506126b457505051611e8391612698916001600160a01b039061258990839061281d565b5160405163045b391760e01b8152938493309060048601612a1a565b600190930192612601565b5f6126c991610d9f565b5f612674565b5092509250505f60c0830161010060e085019401925b81518051841015612802576001600160a01b039061270490859061281d565b511661271184875161281d565b5161271d85875161281d565b51823b1561017c57604051637921219560e11b81523060048201526001600160a01b038a1660248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af190816127f2575b506127e8575081612070816127a59361279c611e83979660018060a01b03925161281d565b5116965161281d565b5160405163334a7d1b60e21b81526001600160a01b03948516600482015230602482015294909316604485015260648401526084830191909152819060a4820190565b91600101916126e5565b5f6127fc91610d9f565b5f612777565b50945050505050604051612817602082610d9f565b5f815290565b80518210156115d75760209160051b010190565b6040810191825151604082019081515111612a12575f5b8151518110156128c15784516001600160a01b039061286890839061281d565b511660018060a01b0361287c83855161281d565b51161480159061289c575b61289357600101612848565b50505050505f90565b506128ab81606086015161281d565b516128ba82606086015161281d565b5111612887565b505091506080810191825151608082019081515111612a12575f5b81515181101561294d5784516001600160a01b03906128fc90839061281d565b511660018060a01b0361291083855161281d565b511614801590612927575b612893576001016128dc565b506129368160a086015161281d565b516129458260a086015161281d565b51141561291b565b5050915060c08101918251519260c082019384515111612a12575f5b845151811015612a085781516001600160a01b039061298990839061281d565b511660018060a01b0361299d83885161281d565b5116148015906129e2575b80156129bb575b61289357600101612969565b506129cb8161010086015161281d565b516129db8261010086015161281d565b51116129af565b506129f18160e086015161281d565b51612a008260e086015161281d565b5114156129a8565b5050505050600190565b505050505f90565b6001600160a01b0391821681529181166020830152909116604082015260608101919091526080019056fea2646970667358221220cd206aff53402bb98bba95b06a59909c9e599954ae89a672c4ce0ba3c2e39b0664736f6c634300081b0033",
    "sourceMap": "678:10693:124:-:0;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;1183:12:9;;;1054:5;1183:12;678:10693:124;1054:5:9;1183:12;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;:::i;:::-;-1:-1:-1;678:10693:124;;-1:-1:-1;;;678:10693:124;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;678:10693:124;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;678:10693:124:-;;;;;;-1:-1:-1;;678:10693:124;;;;;;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;10178:187;678:10693;10219:16;;678:10693;;:::i;:::-;;;;;;;;;10219:16;;;;:::i;:::-;;1055:104:6;;10219:16:124;;;;;;:::i;:::-;678:10693;;-1:-1:-1;;;10178:187:124;;678:10693;;;;;10285:10;;;;678:10693;10178:187;;;:::i;:::-;;:4;678:10693;10178:4;:187;;;;;;678:10693;10178:187;;;678:10693;;;;;;;;;10178:187;;678:10693;10178:187;;678:10693;10178:187;;;;;;678:10693;10178:187;;;:::i;:::-;;;678:10693;;;;;;;10178:187;;;;;-1:-1:-1;10178:187:124;;;678:10693;;;;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;11328:34;;678:10693;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;678:10693:124;;-1:-1:-1;;;2392:23:61;;678:10693:124;;;2392:23:61;;;678:10693:124;-1:-1:-1;678:10693:124;2392:23:61;678:10693:124;2392:3:61;-1:-1:-1;;;;;678:10693:124;2392:23:61;;;;;;;678:10693:124;2392:23:61;;;678:10693:124;2429:19:61;678:10693:124;2429:19:61;;678:10693:124;2452:18:61;2429:41;2425:87;;11143:46:124;11154:16;678:10693;11154:16;;;678:10693;;;;11143:46;;;;;;:::i;:::-;678:10693;;;;;;;:::i;2425:87:61:-;2491:21;;;678:10693:124;2491:21:61;678:10693:124;;2491:21:61;2392:23;;;;;;678:10693:124;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;678:10693:124;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;:::i;:::-;10625:16;10584:181;678:10693;;:::i;:::-;;10625:16;678:10693;;:::i;:::-;;;;;;;;;10625:16;;;;:::i;:::-;;1055:104:6;;10625:16:124;;;;;;:::i;:::-;678:10693;;-1:-1:-1;;;10584:181:124;;678:10693;;;;;;10584:181;;;:::i;678:10693::-;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;:::i;:::-;-1:-1:-1;678:10693:124;;-1:-1:-1;;;678:10693:124;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;724:142:63;678:10693:124;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;678:10693:124:-;;1442:1461:9;678:10693:124;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;678:10693:124:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;678:10693:124;;;;;;;;:::i;:::-;-1:-1:-1;678:10693:124;;-1:-1:-1;;;3986:23:62;;678:10693:124;3986:23:62;;678:10693:124;;;-1:-1:-1;678:10693:124;3986:23:62;678:10693:124;3986:3:62;-1:-1:-1;;;;;678:10693:124;3986:23:62;;678:10693:124;;3986:23:62;;;678:10693:124;-1:-1:-1;3982:172:62;;4119:24;;;;678:10693:124;4119:24:62;678:10693:124;;3986:23:62;678:10693:124;4119:24:62;3982:172;-1:-1:-1;;;;;4186:26:62;;;678:10693:124;;4168:15:62;:44;4164:87;;4331:16;;;;4349:21;;;;678:10693:124;4331:16:62;;-1:-1:-1;;;;;678:10693:124;;;;4331:16:62;:::i;:::-;;678:10693:124;;;;;;;4164:87:62;4233:18;;;678:10693:124;4233:18:62;678:10693:124;;4233:18:62;3986:23;;;;;;;678:10693:124;3986:23:62;;;;;;:::i;:::-;;;;;678:10693:124;;;;;;-1:-1:-1;;678:10693:124;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;678:10693:124;1497:44:61;;678:10693:124;;;1497:44:61;678:10693:124;;;;;;1497:14:61;678:10693:124;1497:44:61;;;;;;678:10693:124;1497:44:61;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;678:10693:124;1497:44:61;;;;;;:::i;:::-;;;678:10693:124;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;678:10693:124;;;;;;-1:-1:-1;;678:10693:124;;;;;;;542:43:61;678:10693:124;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;;678:10693:124;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;678:10693:124;;;;;;;;;;;;1055:104:6;;;678:10693:124;;;;-1:-1:-1;;;678:10693:124;;;;;;;;;;;;;;;;;-1:-1:-1;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;678:10693:124:-;;;;10894:37;678:10693;;;:::i;:::-;;;;;;-1:-1:-1;;678:10693:124;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;775:49:38;;;:89;;;;678:10693:124;;;;;;;775:89:38;-1:-1:-1;;;862:40:55;;-1:-1:-1;775:89:38;;;678:10693:124;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;-1:-1:-1;;678:10693:124;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;:::o;:::-;;;;-1:-1:-1;678:10693:124;;;;;-1:-1:-1;678:10693:124;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;:::o;:::-;;;1055:104:6;;678:10693:124;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;:::o;:::-;-1:-1:-1;;;;;678:10693:124;;;;;;-1:-1:-1;;678:10693:124;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;678:10693:124;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;-1:-1:-1;;;;;678:10693:124;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;:::i;:::-;;;;1055:104:6;678:10693:124;1055:104:6;;678:10693:124;;;;;;;;:::i;:::-;;-1:-1:-1;;678:10693:124;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;678:10693:124;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;-1:-1:-1;678:10693:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;-1:-1:-1;;;;;678:10693:124;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;:::i;:::-;;;;;;:::o;2592:267::-;2768:34;2592:267;2768:34;678:10693;;;2768:34;;;;;;:::i;:::-;678:10693;;2768:34;2837:14;;;;-1:-1:-1;;;;;678:10693:124;;;;2592:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;678:10693:124;;;;;;;;;;;;;4064:22:9;;;;4060:87;;678:10693:124;;;;;;;;;;;;;;4274:33:9;678:10693:124;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;678:10693:124;;3896:19:9;678:10693:124;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;678:10693:124;;;;3881:1:9;678:10693:124;;;;;3881:1:9;678:10693:124;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;678:10693:124;;:::i;:::-;2221:30:62;678:10693:124;;:::i;:::-;-1:-1:-1;678:10693:124;;-1:-1:-1;;;2314:27:62;;;;;678:10693:124;;;2314:3:62;-1:-1:-1;;;;;678:10693:124;;-1:-1:-1;678:10693:124;2314:27:62;678:10693:124;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;678:10693:124;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;678:10693:124;;;;;2543:32:62;;;2314:27;2543:32;;678:10693:124;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;678:10693:124;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;678:10693:124;;2991:11:62;;;;;678:10693:124;2991:11:62;678:10693:124;2954:58:62;2991:11;;2954:58;:::i;:::-;678:10693:124;;;;;;;;;;;;;;;;;3083:66:62;;678:10693:124;2314:27:62;3083:66;;678:10693:124;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;2314:27:62;678:10693:124;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;678:10693:124;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;678:10693:124;;;;;:::i;:::-;;;;-1:-1:-1;678:10693:124;3369:47:62;;678:10693:124;;;;;;;:::i;:::-;3323:18:62;678:10693:124;;;3275:160:62;;678:10693:124;;;3247:202:62;;;;;678:10693:124;-1:-1:-1;678:10693:124;;;;;;;;;;;;;;3247:202:62;;678:10693:124;2314:27:62;3247:202;;678:10693:124;;;;2314:27:62;678:10693:124;;;;;;;;;3247:202:62;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;678:10693:124;;;2314:27:62;3488:25;;3231:293;3622:11;678:10693:124;;3231:293:62;;;;;3720:61;;3182:388:124;;-1:-1:-1;;;;;678:10693:124;;3182:388;:::i;:::-;678:10693;;-1:-1:-1;;;;;678:10693:124;;3720:61:62;;2051:1760;:::o;3247:202::-;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;678:10693:124;3083:66:62;;678:10693:124;3083:66:62;;;;;;678:10693:124;3083:66:62;;;:::i;:::-;;;678:10693:124;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;678:10693:124;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1055:104:6;;678:10693:124;;;;;;;;;;;;:::i;:::-;1055:104:6;;;;;678:10693:124;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;678:10693:124;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;678:10693:124;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;678:10693:124;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;678:10693:124;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;678:10693:124;;;;;1055:104:6;678:10693:124;:::i;:::-;;;;;;;:::i;:::-;1055:104:6;678:10693:124;1055:104:6;;678:10693:124;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;7954:650;8167:18;1016:17:60;;;678:10693:124;1016:27:60;1012:55;;1084:27;;;:::i;:::-;8139:47:124;8135:65;;8243:79;8267:15;8367:36;8267:15;;;1016:17:60;678:10693:124;;;8243:79;;;;;;:::i;:::-;678:10693;1016:17:60;678:10693:124;;;8367:36;;;;;;:::i;:::-;8433:38;;;;:::i;:::-;:91;;;;7954:650;8433:164;;;8414:183;;7954:650;:::o;8433:164::-;1016:17:60;8550:14:124;;;;;;678:10693;;;;;8540:25;8579:17;;;1016::60;678:10693:124;;;;8569:28;8540:57;7954:650;:::o;8433:91::-;678:10693;;;;-1:-1:-1;;;;;678:10693:124;;;;;8487:37;;-1:-1:-1;8433:91:124;;8135:65;8188:12;;678:10693;8188:12;:::o;1012:55:60:-;1052:15;;;678:10693:124;1052:15:60;;678:10693:124;1052:15:60;879:385:63;;;;;;;;3014:34:124;678:10693;;;;;:::i;:::-;3014:34;678:10693;;;3014:34;;;;;;:::i;:::-;2131:16;;;;;;;678:10693;2158:17;;;;;;;678:10693;2131:51;2127:97;;2238:17;;;;;;678:10693;2266:19;;;;;;;678:10693;2238:54;2234:100;;2361:18;;;;;678:10693;2390:20;;;;;;;678:10693;2361:56;;;;;:127;;;879:385:63;2344:183:124;;;-1:-1:-1;3943:3:124;3918:16;;678:10693;;3914:27;;;;;3962:12;;3014:34;3962:12;4131:20;3962:12;4008:161;3962:12;4015:19;678:10693;;;;;;4015:19;;:::i;:::-;678:10693;;4131:17;;:20;:::i;:::-;678:10693;2131:16;678:10693;-1:-1:-1;;;4008:161:124;;-1:-1:-1;;;;;678:10693:124;;;4008:161;;;678:10693;4104:4;678:10693;;;;;;;;;;;;-1:-1:-1;678:10693:124;;-1:-1:-1;;678:10693:124;;;;;;;4008:161;;;;;-1:-1:-1;;4008:161:124;;;3943:3;-1:-1:-1;3988:320:124;;4278:15;-1:-1:-1;3988:320:124;4326:8;4322:235;;678:10693;;3902:10;;4322:235;678:10693;;;4504:20;678:10693;;4402:19;4361:181;678:10693;;;;;;4402:16;;:19;:::i;:::-;678:10693;;4504:17;;:20;:::i;:::-;678:10693;2131:16;678:10693;-1:-1:-1;;;4361:181:124;;678:10693;;;4104:4;;4008:161;4361:181;;;:::i;:::-;;;;3988:320;;;4008:161;;;;3014:34;4008:161;;;;;;;;;3014:34;4008:161;;;:::i;:::-;;;678:10693;;;;;;;:::i;:::-;4008:161;;;;;;;-1:-1:-1;4008:161:124;;3914:27;;;;;;;;;;;;;;;;;-1:-1:-1;4605:559:124;4652:3;4626:17;;678:10693;;4622:28;;;;;4816:22;678:10693;;;4699:20;678:10693;;;;;;4699:20;;:::i;4816:22::-;678:10693;4691:165;;;;;;2131:16;678:10693;-1:-1:-1;;;4691:165:124;;-1:-1:-1;;;;;678:10693:124;;4008:161;4691:165;;678:10693;4104:4;678:10693;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;4691:165:124;;;;;;4652:3;-1:-1:-1;4671:483:124;;678:10693;;4954:185;5099:22;678:10693;;4996:20;678:10693;;;;;;4996:17;;:20;:::i;5099:22::-;678:10693;2131:16;678:10693;-1:-1:-1;;;4954:185:124;;678:10693;;;4104:4;;4008:161;4954:185;;;:::i;4671:483::-;678:10693;;;;;4610:10;;4691:165;-1:-1:-1;4691:165:124;;;:::i;:::-;;;;4622:28;;;;;;;;;;;;;5466:19;-1:-1:-1;5466:19:124;;5203:682;5251:3;5224:18;;678:10693;;5220:29;;;;;-1:-1:-1;;;;;678:10693:124;5299:21;;678:10693;;5299:21;:::i;:::-;678:10693;;5421:23;:20;;;:23;:::i;:::-;678:10693;5466:22;:19;;;:22;:::i;:::-;678:10693;5290:240;;;;;2131:16;678:10693;-1:-1:-1;;;5290:240:124;;-1:-1:-1;;;;;678:10693:124;;4008:161;5290:240;;678:10693;4104:4;678:10693;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;;;;;;-1:-1:-1;;5290:240:124;;;;;;5251:3;-1:-1:-1;5270:605:124;;678:10693;;5628:232;678:10693;5820:22;678:10693;5775:23;678:10693;;5671:21;678:10693;;;;;;5671:18;;:21;:::i;:::-;678:10693;;5775:20;;:23;:::i;:::-;678:10693;5820:19;;:22;:::i;:::-;678:10693;2131:16;678:10693;-1:-1:-1;;;5628:232:124;;-1:-1:-1;;;;;678:10693:124;;;4008:161;5628:232;;678:10693;;;;;;;;;4104:4;678:10693;;;;;;;;;;;;;;;;;;;;;;5270:605;678:10693;;;;;5208:10;;5290:240;-1:-1:-1;5290:240:124;;;:::i;:::-;;;;5220:29;;;;;;;;;;678:10693;5220:29;;678:10693;;;:::i;:::-;;2131:16;678:10693;;2361:18;678:10693;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;-1:-1:-1;;;;;678:10693:124;2131:16;678:10693;;;;;;;;;;;;3014:34;1914:299:61;;678:10693:124;;2131:16;1914:299:61;;678:10693:124;2158:17;1914:299:61;;678:10693:124;2238:17;1914:299:61;;678:10693:124;-1:-1:-1;2266:19:124;1914:299:61;;678:10693:124;3014:34;2131:16;678:10693;;;;:::i;:::-;1868:18:61;678:10693:124;;1819:413:61;;;678:10693:124;;;2131:16;678:10693;;;;;;;;1791:455:61;;;4008:161:124;1791:455:61;;678:10693:124;;;;;;;2131:16;678:10693;;;;;;;;;;;;;;;;-1:-1:-1;;;;;678:10693:124;;;;;;;;;2131:16;678:10693;;;;;;;;;2158:17;678:10693;;;;;;;2266:19;678:10693;2238:17;678:10693;;;2361:18;678:10693;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;678:10693:124;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;678:10693:124;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;5203:682:124;1150:55:63;;4817:26:62;-1:-1:-1;4817:26:62;;879:385:63:o;1791:455:61:-;;;;3014:34:124;1791:455:61;;3014:34:124;1791:455:61;;;;;;678:10693:124;1791:455:61;;;:::i;:::-;;;678:10693:124;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;2344:183:124;2203:21;;;-1:-1:-1;2506:21:124;;-1:-1:-1;2506:21:124;2361:127;2462:19;;;;;;678:10693;2433:55;;2361:127;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;678:10693:124;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;678:10693:124;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;678:10693:124;;-1:-1:-1;;;1033:111:50;;;;678:10693:124;1033:111:50;678:10693:124;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;678:10693:124;;;;26127:66:57;;26014:100;26027:7;26098:1;678:10693:124;;;;26014:100:57;;;25901;25914:7;25985:1;678:10693:124;;;;25901:100:57;;;25788;25801:7;25872:1;678:10693:124;;;;25788:100:57;;;25672:103;25685:8;25758:2;678:10693:124;;;;25672:103:57;;;25556;25569:8;25642:2;678:10693:124;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;678:10693:124;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;678:10693:124;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;678:10693:124;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;678:10693:124;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;678:10693:124;-1:-1:-1;;;;;678:10693:124;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;3182:388:124;3386:74;3182:388;;;;3386:74;678:10693;;;3386:74;;;;;;:::i;:::-;6042:10;6189:17;;;;6058:16;;;;-1:-1:-1;;;;;678:10693:124;;;6051:1;6083:3;6058:16;;678:10693;;6054:27;;;;;6051:1;;3386:74;;-1:-1:-1;;;;;678:10693:124;6155:19;;678:10693;;6155:19;:::i;:::-;678:10693;;6148:62;6189:20;:17;;;:20;:::i;:::-;678:10693;6058:16;678:10693;;;;;;;;;6148:62;;;;;;678:10693;;;;;6148:62;;6051:1;;6148:62;;;6083:3;-1:-1:-1;6128:221:124;;6319:15;6051:1;6128:221;6367:8;6363:233;;678:10693;;6042:10;;6363:233;678:10693;6402:179;6543:20;678:10693;;6443:19;678:10693;;;;;;;6443:16;;:19;:::i;:::-;678:10693;;6543:17;;:20;:::i;:::-;678:10693;6058:16;678:10693;-1:-1:-1;;;6402:179:124;;678:10693;;;6492:4;;6148:62;6402:179;;;:::i;6128:221::-;;;6148:62;;;;3386:74;6148:62;;;;;;;;;3386:74;6148:62;;;:::i;:::-;;;678:10693;;;;;;;:::i;:::-;6148:62;;;;;;;-1:-1:-1;6148:62:124;;6054:27;-1:-1:-1;;6853:19:124;;;;6051:1;;-1:-1:-1;6665:17:124;;;;-1:-1:-1;6054:27:124;-1:-1:-1;6691:3:124;6665:17;;678:10693;;6661:28;;;;;-1:-1:-1;;;;;678:10693:124;6738:20;;678:10693;;6738:20;:::i;:::-;678:10693;;6853:22;:19;;;:22;:::i;:::-;678:10693;6730:163;;;;;;6058:16;678:10693;-1:-1:-1;;;6730:163:124;;6802:4;6148:62;6730:163;;678:10693;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;-1:-1:-1;;678:10693:124;;;;;;-1:-1:-1;;6730:163:124;;;;;;6691:3;-1:-1:-1;6710:479:124;;-1:-1:-1;;7033:17:124;6991:183;;7134:22;;-1:-1:-1;;;;;678:10693:124;7033:20;;678:10693;;7033:20;:::i;7134:22::-;678:10693;6058:16;678:10693;-1:-1:-1;;;6991:183:124;;678:10693;;;6802:4;;6148:62;6991:183;;;:::i;6710:479::-;678:10693;;;;;6649:10;;6730:163;6051:1;6730:163;;;:::i;:::-;;;;6661:28;;;;;;;6051:1;7259:18;;;7499:19;678:10693;7454:20;;7499:19;;7238:678;7286:3;7259:18;;678:10693;;7255:29;;;;;-1:-1:-1;;;;;678:10693:124;7334:21;;678:10693;;7334:21;:::i;:::-;678:10693;;7454:23;:20;;;:23;:::i;:::-;678:10693;7499:22;:19;;;:22;:::i;:::-;678:10693;7325:238;;;;;6058:16;678:10693;-1:-1:-1;;;7325:238:124;;6802:4;6148:62;7325:238;;678:10693;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;678:10693:124;;;;;;;;;;;;;;-1:-1:-1;;7325:238:124;;;;;;7286:3;-1:-1:-1;7305:601:124;;678:10693;;7806:23;678:10693;7851:22;678:10693;7704:21;7661:230;678:10693;;;;;;;7704:18;;:21;:::i;:::-;678:10693;;7806:20;;:23;:::i;7851:22::-;678:10693;6058:16;678:10693;-1:-1:-1;;;7661:230:124;;-1:-1:-1;;;;;678:10693:124;;;6148:62;7661:230;;678:10693;6802:4;678:10693;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7305:601;;678:10693;;7243:10;;;7325:238;6051:1;7325:238;;;:::i;:::-;;;;7255:29;;;;;;;;6058:16;678:10693;;3386:74;678:10693;;:::i;:::-;6051:1;678:10693;;3182:388;:::o;678:10693::-;;;;;;;;;;;;;;;:::o;8610:1376::-;8787:19;;;;;;678:10693;8787:19;8816:18;;;;;678:10693;-1:-1:-1;8783:84:124;;678:10693;8925:3;8898:18;;678:10693;8894:29;;;;;8965:19;;-1:-1:-1;;;;;678:10693:124;8965:22;;:19;;:22;:::i;:::-;678:10693;;;;;;;8991:21;:18;;;:21;:::i;:::-;678:10693;;8965:47;;;:115;;;8925:3;8944:163;;678:10693;;8882:10;;8944:163;9095:12;;;;;678:10693;9095:12;:::o;8965:115::-;9032:20;:23;:20;;;;;:23;:::i;:::-;678:10693;9058:22;:19;9032:20;9058:19;;;:22;:::i;:::-;678:10693;-1:-1:-1;8965:115:124;;8894:29;;;;;9157:20;;;;;;678:10693;9157:20;9187:19;;;;;678:10693;-1:-1:-1;9153:86:124;;678:10693;9298:3;9270:19;;678:10693;9266:30;;;;;9338:20;;-1:-1:-1;;;;;678:10693:124;9338:23;;:20;;:23;:::i;:::-;678:10693;;;;;;;9365:22;:19;;;:22;:::i;:::-;678:10693;;9338:49;;;:122;;;9298:3;9317:170;;678:10693;;9254:10;;9338:122;9407:22;:25;:22;;;;;:25;:::i;:::-;678:10693;9436:24;:21;9407:22;9436:21;;;:24;:::i;:::-;678:10693;9407:53;;9338:122;;9266:30;;;;;9538:21;;;;;;678:10693;9569:20;9538:21;9569:20;;;;;678:10693;-1:-1:-1;9534:88:124;;678:10693;9682:3;9653:20;;678:10693;9649:31;;;;;9722:21;;-1:-1:-1;;;;;678:10693:124;9722:24;;:21;;:24;:::i;:::-;678:10693;;;;;;;9750:23;:20;;;:23;:::i;:::-;678:10693;;9722:51;;;:126;;;9682:3;9722:198;;;;9682:3;9701:246;;678:10693;;9637:10;;9722:198;9868:22;:25;:22;;;;;:25;:::i;:::-;678:10693;9896:24;:21;9868:22;9896:21;;;:24;:::i;:::-;678:10693;-1:-1:-1;9722:198:124;;:126;9793:23;:26;:23;;;;;:26;:::i;:::-;678:10693;9823:25;:22;9793:23;9823:22;;;:25;:::i;:::-;678:10693;9793:55;;9722:126;;9649:31;;;;;;678:10693;8610:1376;:::o;9534:88::-;9610:12;;;;678:10693;9610:12;:::o;678:10693::-;-1:-1:-1;;;;;678:10693:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2992,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 3035,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 3078,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 9244,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2610,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1537,
          "length": 32
        },
        {
          "start": 2315,
          "length": 32
        },
        {
          "start": 5679,
          "length": 32
        },
        {
          "start": 8697,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1601,
          "length": 32
        },
        {
          "start": 2560,
          "length": 32
        },
        {
          "start": 2926,
          "length": 32
        },
        {
          "start": 6158,
          "length": 32
        },
        {
          "start": 7289,
          "length": 32
        },
        {
          "start": 8524,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64)": "cd181c49",
    "doObligationFor((address,bytes,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64,address,address)": "bca73d64",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "supportsInterface(bytes4)": "01ffc9a7",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20TransferFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/TokenBundleEscrowObligation.sol":"TokenBundleEscrowObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0x55806e3202715452c4e1af5732beec4234237ea725da9374911d9957ec806107","license":"UNLICENSED","urls":["bzz-raw://7b1715789ad2a38f8c09817501cac3b1e945ab63980a5787ef8289d625823029","dweb:/ipfs/QmZHccqkUafrHLDUXBytivd2jHEWoZ7W9uH8Q1FcpxDwYR"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ArrayLengthMismatch"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC1155TransferFailed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC20TransferFailed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC721TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC1155BatchReceived",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC1155Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/TokenBundleEscrowObligation.sol": "TokenBundleEscrowObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        "keccak256": "0x55806e3202715452c4e1af5732beec4234237ea725da9374911d9957ec806107",
        "urls": [
          "bzz-raw://7b1715789ad2a38f8c09817501cac3b1e945ab63980a5787ef8289d625823029",
          "dweb:/ipfs/QmZHccqkUafrHLDUXBytivd2jHEWoZ7W9uH8Q1FcpxDwYR"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 124
};

// src/contracts/TokenBundlePaymentObligation.ts
var abi41 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "BundleTransferred",
      "inputs": [
        {
          "name": "payment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ArrayLengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "617:6299:126:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1599:4;617:6299;759:14:6;688:1:9;617:6299:126;783:14:6;-1:-1:-1;617:6299:126;807:14:6;708:26:9;704:76;;617:6299:126;790:10:9;;617:6299:126;790:10:9;617:6299:126;790:10:9;789::61;;809:32;;-1:-1:-1;617:6299:126;;;;;;;;;;;872:48:61;;617:6299:126;872:48:61;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;904:4:61;617:6299:126;;;;1599:4;617:6299;;;;;;-1:-1:-1;;617:6299:126;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:32:61;617:6299:126;;;;;789:10:61;617:6299:126;;;;;;;;;;851:69:61;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;617:6299:126;872:48:61;;617:6299:126;872:48:61;;;;;;617:6299:126;872:48:61;;;:::i;:::-;;;617:6299:126;;;;;872:48:61;;;617:6299:126;-1:-1:-1;617:6299:126;;872:48:61;;;-1:-1:-1;872:48:61;;;617:6299:126;;;-1:-1:-1;617:6299:126;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;617:6299:126;;;;-1:-1:-1;617:6299:126;;;;;-1:-1:-1;617:6299:126;;;;;;-1:-1:-1;;617:6299:126;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146109705780635bf2f20d146109365780635fc86150146108ca57806368c0553a146107e65780636b122fe01461065057806388e5b2d91461063157806391db0b7e14610631578063b3b902d4146105eb578063c6ec5070146103d2578063c93844be1461037b578063ce46e04614610361578063e49617e11461033c578063e60c35051461033c578063e6c9714d1461013c5763f0ffa1850361000e5760a0366003190112610138576004356001600160401b038111610138576100fb903690600401610b3c565b610103610b69565b9161010c610a92565b606435906001600160a01b0382168203610138576020946101309460843594611520565b604051908152f35b5f80fd5b34610138576060366003190112610138576004356001600160401b038111610138576101406003198236030112610138576040519061017a82610d2d565b8060040135825260208201906024810135825261019960448201610b7f565b60408401526101aa60648201610b7f565b606084019081526101bd60848301610b7f565b916080850192835260a481013560a08601526101db60c48201610aa8565b60c08601526101ec60e48201610aa8565b60e08601526101048101358015158103610138576101008601526101248101356001600160401b0381116101385761012091600461022d9236920101610dd7565b94019384526024356001600160401b03811161013857610251903690600401610dd7565b927f000000000000000000000000000000000000000000000000000000000000000090510361032d57516001600160401b03168015159081610323575b5061031457516001600160401b0316610305576102c86102b9602093518480825183010191016111ea565b918380825183010191016111ea565b6102d28183611c17565b91826102e5575b50506040519015158152f35b60e0908101519101516001600160a01b03908116911614905082806102d9565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042118461028e565b635f9bd90760e11b5f5260045ffd5b602061035761034a36610cca565b610352611b95565b611bd6565b6040519015158152f35b34610138575f3660031901126101385760206040515f8152f35b34610138576020366003190112610138576004356001600160401b038111610138576103c26103b16103ce923690600401610b3c565b6103b96110bb565b508101906113ea565b60405191829182610c02565b0390f35b34610138576020366003190112610138576103eb6110bb565b5060606101206040516103fd81610d2d565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156105e0575f916104db575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036104cc576103c26101206103ce920151602080825183010191016111ea565b635527981560e11b5f5260045ffd5b90503d805f833e6104ec8183610d65565b810190602081830312610138578051906001600160401b03821161013857019061014082820312610138576040519161052483610d2d565b805183526020810151602084015261053e60408201611bef565b604084015261054f60608201611bef565b606084015261056060808201611bef565b608084015260a081015160a084015261057b60c08201611114565b60c084015261058c60e08201611114565b60e084015261059e6101008201610fd4565b610100840152610120810151906001600160401b03821161013857019080601f830112156101385781516105d492602001610fe1565b61012082015281610485565b6040513d5f823e3d90fd5b6060366003190112610138576004356001600160401b0381116101385761013061061b6020923690600401610b3c565b610623610b69565b916044359233923392611520565b602061035761063f36610aec565b9261064b929192611b95565b611017565b34610138575f3660031901126101385760608060405161066f81610cfe565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156105e0575f90610736575b6060906103ce604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a6e565b503d805f833e6107468183610d65565b810190602081830312610138578051906001600160401b0382116101385701608081830312610138576040519061077c82610cfe565b8051825260208101516001600160a01b03811681036101385760208301526107a660408201610fd4565b60408301526060810151906001600160401b038211610138570182601f82011215610138576060928160206107dd93519101610fe1565b828201526106f0565b34610138576060366003190112610138576004356001600160401b038111610138576101006003198236030112610138576024356001600160a01b03811681036101385760209061084d61085b61083b610a92565b94604051928391600401868301610e8c565b03601f198101835282610d65565b610879604051948593849363f0ffa18560e01b855260048501610f9a565b03815f305af180156105e0575f90610897575b602090604051908152f35b506020813d6020116108c2575b816108b160209383610d65565b81010312610138576020905161088c565b3d91506108a4565b34610138576020366003190112610138576004356001600160401b03811161013857610100600319823603011261013857602061084d61091861087993604051928391600401858301610e8c565b6040518093819263f0ffa18560e01b83523390339060048501610f9a565b34610138575f3660031901126101385760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610138575f366003190112610138576103ce6020610a5e60016109b37f0000000000000000000000000000000000000000000000000000000000000000611a28565b81846109de7f0000000000000000000000000000000000000000000000000000000000000000611a28565b8180610a097f0000000000000000000000000000000000000000000000000000000000000000611a28565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610d65565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b604435906001600160a01b038216820361013857565b35906001600160a01b038216820361013857565b9181601f84011215610138578235916001600160401b038311610138576020808501948460051b01011161013857565b6040600319820112610138576004356001600160401b0381116101385781610b1691600401610abc565b92909291602435906001600160401b03821161013857610b3891600401610abc565b9091565b9181601f84011215610138578235916001600160401b038311610138576020838186019501011161013857565b602435906001600160401b038216820361013857565b35906001600160401b038216820361013857565b90602080835192838152019201905f5b818110610bb05750505090565b82516001600160a01b0316845260209384019390920191600101610ba3565b90602080835192838152019201905f5b818110610bec5750505090565b8251845260209384019390920191600101610bdf565b60208152610100610cb5610c9f610c89610c73610c5d610c47610c3189518860208b01526101208a0190610b93565b60208a0151898203601f190160408b0152610bcf565b6040890151888203601f190160608a0152610b93565b6060880151878203601f19016080890152610bcf565b6080870151868203601f190160a0880152610b93565b60a0860151858203601f190160c0870152610bcf565b60c0850151848203601f190160e0860152610bcf565b60e0909301516001600160a01b031691015290565b602060031982011261013857600435906001600160401b038211610138576101409082900360031901126101385760040190565b608081019081106001600160401b03821117610d1957604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610d1957604052565b61010081019081106001600160401b03821117610d1957604052565b90601f801991011681019081106001600160401b03821117610d1957604052565b6001600160401b038111610d1957601f01601f191660200190565b929192610dad82610d86565b91610dbb6040519384610d65565b829481845281830111610138578281602093845f960137010152565b9080601f8301121561013857816020610df293359101610da1565b90565b9035601e19823603018112156101385701602081359101916001600160401b038211610138578160051b3603831361013857565b916020908281520191905f5b818110610e425750505090565b909192602080600192838060a01b03610e5a88610aa8565b168152019401929101610e35565b81835290916001600160fb1b0383116101385760209260051b809284830137010190565b60208152610100610f7d610f5e610f3f610f20610f01610ee2610ec3610eb28a80610df5565b8960208c01526101208b0191610e29565b610ed060208b018b610df5565b8a8303601f190160408c015290610e68565b610eef60408a018a610df5565b898303601f190160608b015290610e29565b610f0e6060890189610df5565b888303601f190160808a015290610e68565b610f2d6080880188610df5565b878303601f190160a089015290610e29565b610f4c60a0870187610df5565b868303601f190160c088015290610e68565b610f6b60c0860186610df5565b858303601f190160e087015290610e68565b926001600160a01b0390610f939060e001610aa8565b1691015290565b5f929493610fb260809360a0845260a0840190610a6e565b602083018590526001600160a01b039687166040840152951660608201520152565b5190811515820361013857565b929192610fed82610d86565b91610ffb6040519384610d65565b829481845281830111610138578281602093845f96015e010152565b9290928184036110ac575f91345b858410156110a1578184101561108d578360051b808601359082821161107e5784013561013e198536030181121561013857611062908501611bd6565b156110735760019103930192611025565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b604051906110c882610d49565b5f60e08360608152606060208201526060604082015260608082015260606080820152606060a0820152606060c08201520152565b6001600160401b038111610d195760051b60200190565b51906001600160a01b038216820361013857565b9080601f8301121561013857815161113f816110fd565b9261114d6040519485610d65565b81845260208085019260051b82010192831161013857602001905b8282106111755750505090565b6020809161118284611114565b815201910190611168565b9080601f830112156101385781516111a4816110fd565b926111b26040519485610d65565b81845260208085019260051b82010192831161013857602001905b8282106111da5750505090565b81518152602091820191016111cd565b602081830312610138578051906001600160401b038211610138570161010081830312610138576040519161121e83610d49565b81516001600160401b038111610138578161123a918401611128565b835260208201516001600160401b038111610138578161125b91840161118d565b602084015260408201516001600160401b038111610138578161127f918401611128565b604084015260608201516001600160401b03811161013857816112a391840161118d565b606084015260808201516001600160401b03811161013857816112c7918401611128565b608084015260a08201516001600160401b03811161013857816112eb91840161118d565b60a084015260c0820151916001600160401b0383116101385761131560e09261132094830161118d565b60c085015201611114565b60e082015290565b9080601f8301121561013857813561133f816110fd565b9261134d6040519485610d65565b81845260208085019260051b82010192831161013857602001905b8282106113755750505090565b6020809161138284610aa8565b815201910190611368565b9080601f830112156101385781356113a4816110fd565b926113b26040519485610d65565b81845260208085019260051b82010192831161013857602001905b8282106113da5750505090565b81358152602091820191016113cd565b602081830312610138578035906001600160401b038211610138570161010081830312610138576040519161141e83610d49565b81356001600160401b038111610138578161143a918401611328565b835260208201356001600160401b038111610138578161145b91840161138d565b602084015260408201356001600160401b038111610138578161147f918401611328565b604084015260608201356001600160401b03811161013857816114a391840161138d565b606084015260808201356001600160401b03811161013857816114c7918401611328565b608084015260a08201356001600160401b03811161013857816114eb91840161138d565b60a084015260c0820135916001600160401b0383116101385761151560e09261132094830161138d565b60c085015201610aa8565b949293959091958286019361153585886113ea565b9485515160208701515103611a0957604086019384515195606088019687515103611a095760808801928351519260a08a0193845151811490811591611a18575b50611a09575f5b8a5180518210156116925760208d8d6115fc936115a18660018060a01b0392611c03565b5116905f6115bf878660018060a01b0360e086015116940151611c03565b516040516323b872dd60e01b81526001600160a01b0395861660048201529290941660248301526044820193909352938492839182906064820190565b03925af19081156105e0575f91611659575b501561161c5760010161157d565b60405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b90506020813d821161168a575b8161167360209383610d65565b810103126101385761168490610fd4565b5f61160e565b3d9150611666565b5050919395979b909294969a5f5b8c51805182101561175457908e6116db828e946116c48260018060a01b0392611c03565b51169460e060018060a01b03910151169251611c03565b51833b156101385761172a938f925f8094604051978895869485936323b872dd60e01b855260048501604091949392606082019560018060a01b0316825260018060a01b031660208201520152565b03925af19182156105e057600192611744575b50016116a0565b5f61174e91610d65565b5f61173d565b505092959a509295989a509296955f9860c088019b60018060a01b0316995b8b5180518210156118265790898b8f93836117b4816117bc9361179d8260018060a01b0392611c03565b51169560e060018060a01b03910151169451611c03565b519551611c03565b51823b15610138578e5f809460c4936040519889968795637921219560e11b8752600487015260248601526044850152606484015260a060848401528160a48401525af19182156105e057600192611816575b5001611773565b5f61182091610d65565b5f61180f565b5050949a5094919796509450611840919750369085610da1565b916040519560c08701918783106001600160401b03841117610d19576001600160401b039260405260018060a01b0316875216602086015260016040860152606085015260808401525f60a084015260405160408101908082106001600160401b03831117610d19576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019485526040518095819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611950608083015160c060e4860152610124850190610a6e565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19283156105e0575f936119d5575b5060e06119ab849660018060a01b03936113ea565b015116917ff499ed54dafb173ee5c0ac81d260b37d4ceba55eb489caab761ba8a1bc663a345f80a4565b9092506020813d602011611a01575b816119f160209383610d65565b810103126101385751915f611996565b3d91506119e4565b63512509d360e11b5f5260045ffd5b905060c08b01515114155f611576565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611b72575b806d04ee2d6d415b85acef8100000000600a921015611b57575b662386f26fc10000811015611b43575b6305f5e100811015611b32575b612710811015611b23575b6064811015611b15575b1015611b0a575b600a60216001840193611aaf85610d86565b94611abd6040519687610d65565b808652611acc601f1991610d86565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611b0557600a9091611ad7565b505090565b600190910190611a9d565b606460029104930192611a96565b61271060049104930192611a8c565b6305f5e10060089104930192611a81565b662386f26fc1000060109104930192611a74565b6d04ee2d6d415b85acef810000000060209104930192611a64565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611a4a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611bc757565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361013857301490565b51906001600160401b038216820361013857565b805182101561108d5760209160051b010190565b80515182515111611df8575f5b825151811015611c9b5781516001600160a01b0390611c44908390611c03565b511660018060a01b03611c58838651611c03565b511614801590611c76575b611c6f57600101611c24565b5050505f90565b50611c85816020840151611c03565b51611c94826020860151611c03565b5111611c63565b506040810191825151604082019081515111611df0575f5b815151811015611d2d5784516001600160a01b0390611cd3908390611c03565b511660018060a01b03611ce7838551611c03565b511614801590611d07575b611cfe57600101611cb3565b50505050505f90565b50611d16816060860151611c03565b51611d25826060860151611c03565b511415611cf2565b50509150608081019182515192608082019384515111611df0575f5b845151811015611de65781516001600160a01b0390611d69908390611c03565b511660018060a01b03611d7d838851611c03565b511614801590611dc0575b8015611d9b575b611cfe57600101611d49565b50611daa8160c0860151611c03565b51611db98260c0860151611c03565b5111611d8f565b50611dcf8160a0860151611c03565b51611dde8260a0860151611c03565b511415611d88565b5050505050600190565b505050505f90565b50505f9056fea2646970667358221220bb7cb1891c075e3a283658fd2340dd5c00c418a5e5b00779136d39c21fa786d364736f6c634300081b0033",
    "sourceMap": "617:6299:126:-:0;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;;;1183:12:9;;;1054:5;1183:12;617:6299:126;1054:5:9;1183:12;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;:::i;:::-;4549:573;4762:18;617:6299;;1016:27:60;1012:55;;617:6299:126;-1:-1:-1;;;;;617:6299:126;353:30:60;;;;;:89;;617:6299:126;721:55:60;;;617:6299:126;-1:-1:-1;;;;;617:6299:126;786:58:60;;4962:36:126;4838:79;617:6299;4862:15;;617:6299;;;;4838:79;;;;;;:::i;:::-;617:6299;;;;;4962:36;;;;;;:::i;:::-;5028:38;;;;:::i;:::-;:87;;;;617:6299;5009:106;;617:6299;;;;;;;;5028:87;617:6299;5082:13;;;617:6299;5099:16;;617:6299;-1:-1:-1;;;;;617:6299:126;;;;;5082:33;;-1:-1:-1;5028:87:126;;;;786:58:60;824:20;;;617:6299:126;824:20:60;617:6299:126;;824:20:60;721:55;759:17;;;617:6299:126;759:17:60;617:6299:126;;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1012:55;1052:15;;;617:6299:126;1052:15:60;617:6299:126;;1052:15:60;617:6299:126;;3045:39:9;617:6299:126;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;617:6299:126;;;;;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;;;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;6873:34;617:6299;;;;;;;;:::i;:::-;;;:::i;:::-;;6873:34;;;;:::i;:::-;617:6299;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:61;;617:6299:126;;;2392:23:61;;617:6299:126;;;2392:23:61;617:6299:126;;;;;;2392:3:61;617:6299:126;2392:23:61;;;;;;;617:6299:126;2392:23:61;;;617:6299:126;2429:19:61;617:6299:126;2429:19:61;;617:6299:126;2452:18:61;2429:41;2425:87;;6688:46:126;617:6299;;6699:16;;;617:6299;;;;6688:46;;;;;;:::i;2425:87:61:-;2491:21;;;617:6299:126;2491:21:61;617:6299:126;;2491:21:61;2392:23;;;;;617:6299:126;2392:23:61;;;;;;:::i;:::-;;;617:6299:126;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:61;;;;617:6299:126;;;;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;724:142:63;617:6299:126;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;617:6299:126:-;;1442:1461:9;617:6299:126;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;617:6299:126:-;;;;;;-1:-1:-1;;617:6299:126;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;617:6299:126;1497:44:61;;617:6299:126;;;1497:44:61;617:6299:126;;;;;;1497:14:61;617:6299:126;1497:44:61;;;;;;617:6299:126;1497:44:61;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;617:6299:126;1497:44:61;;;;;;:::i;:::-;;;617:6299:126;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;617:6299:126;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;2136:16;;617:6299;;:::i;:::-;;;;;;;;;2136:16;;;;:::i;:::-;;1055:104:6;;2136:16:126;;;;;;:::i;:::-;2169:139;617:6299;;;;;;;;;;2169:139;;617:6299;2169:139;;;:::i;:::-;;:4;617:6299;2169:4;:139;;;;;;617:6299;2169:139;;;617:6299;;;;;;;;;2169:139;;617:6299;2169:139;;617:6299;2169:139;;;;;;617:6299;2169:139;;;:::i;:::-;;;617:6299;;;;;;;2169:139;;;;;-1:-1:-1;2169:139:126;;617:6299;;;;;;-1:-1:-1;;617:6299:126;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;1759:16;;1792:145;617:6299;;;;;;;;1759:16;;;;:::i;:::-;617:6299;;;;;;;;;1792:145;;1869:10;;;1792:145;617:6299;1792:145;;;:::i;617:6299::-;;;;;;-1:-1:-1;;617:6299:126;;;;;;;542:43:61;617:6299:126;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;;617:6299:126;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;617:6299:126;;;;;;;;;;;;1055:104:6;;;617:6299:126;;;;-1:-1:-1;;;617:6299:126;;;;;;;;;;;;;;;;;-1:-1:-1;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;617:6299:126;;;;;1055:104:6;617:6299:126;;1055:104:6;617:6299:126;;;;;;;;;;;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;;;-1:-1:-1;;617:6299:126;;;;:::o;:::-;;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;617:6299:126;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;:::o;:::-;;-1:-1:-1;;617:6299:126;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;-1:-1:-1;;617:6299:126;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;:::o;:::-;;;;-1:-1:-1;617:6299:126;;;;;-1:-1:-1;617:6299:126;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;:::o;:::-;;;1055:104:6;;617:6299:126;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;:::o;:::-;-1:-1:-1;;;;;617:6299:126;;;;;;-1:-1:-1;;617:6299:126;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;617:6299:126;;;;;1055:104:6;617:6299:126;:::i;:::-;;-1:-1:-1;;;;;617:6299:126;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;617:6299:126;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;617:6299:126;;;;;;;;;;;;;4064:22:9;;;;4060:87;;617:6299:126;;;;;;;;;;;;;;4274:33:9;617:6299:126;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;617:6299:126;;3896:19:9;617:6299:126;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;617:6299:126;;;;3881:1:9;617:6299:126;;;;;3881:1:9;617:6299:126;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;617:6299:126;;;;;;;:::i;:::-;-1:-1:-1;617:6299:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;617:6299:126;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;879:385:63:-;;;;;;;;2502:68:126;;;;;;;;:::i;:::-;3111:16;;;617:6299;3138:17;;;;617:6299;3111:51;3107:97;;3218:17;;;;;;617:6299;3246:19;;;;;;;617:6299;3218:54;3214:100;;3341:18;;;;;;617:6299;3370:20;;;;;;;617:6299;3341:56;;;;;:127;;;879:385:63;3324:183:126;;;-1:-1:-1;3678:3:126;3653:16;;617:6299;;3649:27;;;;;3138:17;617:6299;;3722:158;617:6299;3729:19;617:6299;;;;;;3729:19;;:::i;:::-;617:6299;;;-1:-1:-1;3842:20:126;617:6299;;;;;;;;3810:10;;617:6299;;3138:17;;3842;:20;:::i;:::-;617:6299;3218:17;617:6299;-1:-1:-1;;;3722:158:126;;-1:-1:-1;;;;;617:6299:126;;;3722:158;;;617:6299;;;;;;;;;;;;;;;;;;;;;;;;;;;;3722:158;;;;;;;;;;-1:-1:-1;3722:158:126;;;3678:3;617:6299;;;;;;3637:10;;617:6299;3218:17;617:6299;-1:-1:-1;;;617:6299:126;;3138:17;3722:158;617:6299;;;;;;;;-1:-1:-1;;;617:6299:126;;;;;;;3722:158;;;3138:17;3722:158;;;;;;;;;3138:17;3722:158;;;:::i;:::-;;;617:6299;;;;;;;:::i;:::-;3722:158;;;;;;-1:-1:-1;3722:158:126;;3649:27;;;;;;;;;;;;;-1:-1:-1;4031:3:126;4005:17;;617:6299;;4001:28;;;;;617:6299;;4160:22;617:6299;;;4058:20;617:6299;;;;;;4058:20;;:::i;:::-;617:6299;;;;;;;;;3810:10;;617:6299;;4160:19;;:22;:::i;:::-;617:6299;4050:146;;;;;;617:6299;;;-1:-1:-1;617:6299:126;;3218:17;617:6299;;;;;;;;;;;4050:146;;3722:158;4050:146;;617:6299;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4050:146;;;;;;;;;;617:6299;4050:146;;;4031:3;;617:6299;3989:10;;4050:146;-1:-1:-1;4050:146:126;;;:::i;:::-;;;;4001:28;;;;;;;;;;;;;;;-1:-1:-1;4470:19:126;;;;617:6299;;;;;;;4246:291;4294:3;4267:18;;617:6299;;4263:29;;;;;617:6299;;;;;;4429:23;617:6299;4470:22;617:6299;4322:21;617:6299;;;;;;4322:21;;:::i;:::-;617:6299;;;;;;;;;3810:10;;617:6299;;4429:20;;:23;:::i;:::-;617:6299;4470:19;;:22;:::i;:::-;617:6299;4313:213;;;;;617:6299;-1:-1:-1;617:6299:126;;4313:213;617:6299;3218:17;617:6299;;;;;;;;;4313:213;;3722:158;4313:213;;617:6299;;;;;;;;;;;;;3370:20;617:6299;;;;;;;;;4313:213;;;;;;;617:6299;4313:213;;;4294:3;;617:6299;4251:10;;4313:213;-1:-1:-1;4313:213:126;;;:::i;:::-;;;;4263:29;;;;;;;;;;;;;617:6299;4263:29;;;617:6299;;;;:::i;:::-;;3218:17;617:6299;;4470:19;617:6299;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;-1:-1:-1;;;;;617:6299:126;3218:17;617:6299;;;;;;;;;;3138:17;1914:299:61;;617:6299:126;;3218:17;1914:299:61;;617:6299:126;3246:19;1914:299:61;;617:6299:126;3341:18;1914:299:61;;617:6299:126;-1:-1:-1;3370:20:126;1914:299:61;;617:6299:126;3218:17;617:6299;3218:17;617:6299;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;3138:17;617:6299;3218:17;617:6299;1868:18:61;617:6299:126;;1819:413:61;;;617:6299:126;;;3218:17;617:6299;;;;;;;;1791:455:61;;;3722:158:126;1791:455:61;;617:6299:126;;;;;;;3218:17;617:6299;;;;;;;;;;;;;;;;-1:-1:-1;;;;;617:6299:126;;;;;;;;;3218:17;617:6299;;;;;;;;;3246:19;617:6299;;;4313:213;617:6299;;;3370:20;617:6299;3341:18;617:6299;;;4470:19;617:6299;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;617:6299:126;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;617:6299:126;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;4246:291:126;1150:55:63;617:6299:126;2878:68;1150:55:63;617:6299:126;;;;;;2878:68;;:::i;:::-;2991:20;617:6299;;2961:51;;-1:-1:-1;2961:51:126;;879:385:63:o;1791:455:61:-;;;;3138:17:126;1791:455:61;;3138:17:126;1791:455:61;;;;;;617:6299:126;1791:455:61;;;:::i;:::-;;;617:6299:126;;;;;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;3324:183:126;3183:21;;;-1:-1:-1;3486:21:126;;-1:-1:-1;3486:21:126;3341:127;3442:19;;;;;;617:6299;3413:55;;3341:127;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;617:6299:126;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;617:6299:126;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;617:6299:126;;-1:-1:-1;;;1033:111:50;;;;617:6299:126;1033:111:50;617:6299:126;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;617:6299:126;;;;26127:66:57;;26014:100;26027:7;26098:1;617:6299:126;;;;26014:100:57;;;25901;25914:7;25985:1;617:6299:126;;;;25901:100:57;;;25788;25801:7;25872:1;617:6299:126;;;;25788:100:57;;;25672:103;25685:8;25758:2;617:6299:126;;;;25672:103:57;;;25556;25569:8;25642:2;617:6299:126;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;617:6299:126;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;617:6299:126;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;617:6299:126;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;617:6299:126:-;;;-1:-1:-1;;;;;617:6299:126;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;5128:1376::-;5305:19;;617:6299;5334:18;;617:6299;-1:-1:-1;5301:84:126;;617:6299;5443:3;5416:18;;617:6299;5412:29;;;;;5483:19;;-1:-1:-1;;;;;617:6299:126;5483:22;;:19;;:22;:::i;:::-;617:6299;;;;;;;5509:21;:18;;;:21;:::i;:::-;617:6299;;5483:47;;;:115;;;5443:3;5462:163;;617:6299;;5400:10;;5462:163;5613:12;;;617:6299;5613:12;:::o;5483:115::-;5550:20;:23;:20;;;;;:23;:::i;:::-;617:6299;5576:22;:19;5550:20;5576:19;;;:22;:::i;:::-;617:6299;-1:-1:-1;5483:115:126;;5412:29;;5675:20;;;;;;617:6299;5675:20;5705:19;;;;;617:6299;-1:-1:-1;5671:86:126;;617:6299;5816:3;5788:19;;617:6299;5784:30;;;;;5856:20;;-1:-1:-1;;;;;617:6299:126;5856:23;;:20;;:23;:::i;:::-;617:6299;;;;;;;5883:22;:19;;;:22;:::i;:::-;617:6299;;5856:49;;;:122;;;5816:3;5835:170;;617:6299;;5772:10;;5835:170;5993:12;;;;;617:6299;5993:12;:::o;5856:122::-;5925:22;:25;:22;;;;;:25;:::i;:::-;617:6299;5954:24;:21;5925:22;5954:21;;;:24;:::i;:::-;617:6299;5925:53;;5856:122;;5784:30;;;;;6056:21;;;;;;617:6299;6087:20;6056:21;6087:20;;;;;617:6299;-1:-1:-1;6052:88:126;;617:6299;6200:3;6171:20;;617:6299;6167:31;;;;;6240:21;;-1:-1:-1;;;;;617:6299:126;6240:24;;:21;;:24;:::i;:::-;617:6299;;;;;;;6268:23;:20;;;:23;:::i;:::-;617:6299;;6240:51;;;:126;;;6200:3;6240:198;;;;6200:3;6219:246;;617:6299;;6155:10;;6240:198;6386:22;:25;:22;;;;;:25;:::i;:::-;617:6299;6414:24;:21;6386:22;6414:21;;;:24;:::i;:::-;617:6299;-1:-1:-1;6240:198:126;;:126;6311:23;:26;:23;;;;;:26;:::i;:::-;617:6299;6341:25;:22;6311:23;6341:22;;;:25;:::i;:::-;617:6299;6311:55;;6240:126;;6167:31;;;;;;617:6299;5128:1376;:::o;6052:88::-;6128:12;;;;617:6299;6128:12;:::o;5301:84::-;5373:12;;617:6299;5373:12;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2447,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2490,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2533,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 7063,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 1729,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1109,
          "length": 32
        },
        {
          "start": 6494,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 596,
          "length": 32
        },
        {
          "start": 1165,
          "length": 32
        },
        {
          "start": 1679,
          "length": 32
        },
        {
          "start": 2381,
          "length": 32
        },
        {
          "start": 6321,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address))": "5fc86150",
    "doObligationFor((address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),address,address)": "68c0553a",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"BundleTransferred","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/TokenBundlePaymentObligation.sol":"TokenBundlePaymentObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5","license":"UNLICENSED","urls":["bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3","dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ArrayLengthMismatch"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "payment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "BundleTransferred",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/TokenBundlePaymentObligation.sol": "TokenBundlePaymentObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        "keccak256": "0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5",
        "urls": [
          "bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3",
          "dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 126
};

// src/clients/erc20.ts
var erc20EscrowDoObligationFunction = (0, import_viem6.getAbiItem)({
  abi: abi36.abi,
  name: "doObligation"
});
var erc20PaymentDoObligationFunction = (0, import_viem6.getAbiItem)({
  abi: abi37.abi,
  name: "doObligation"
});
var erc721EscrowDoObligationFunction = (0, import_viem6.getAbiItem)({
  abi: abi39.abi,
  name: "doObligation"
});
var tokenBundleEscrowDecodeFunction = (0, import_viem6.getAbiItem)({
  abi: abi40.abi,
  name: "decodeObligationData"
});
var tokenBundlePaymentDecodeFunction = (0, import_viem6.getAbiItem)({
  abi: abi41.abi,
  name: "decodeObligationData"
});
var erc20EscrowObligationDataType = erc20EscrowDoObligationFunction.inputs[0];
var erc20PaymentObligationDataType = erc20PaymentDoObligationFunction.inputs[0];
var erc721EscrowObligationDataType = erc721EscrowDoObligationFunction.inputs[0];
var tokenBundleEscrowObligationDataType = tokenBundleEscrowDecodeFunction.outputs[0];
var tokenBundlePaymentObligationDataType = tokenBundlePaymentDecodeFunction.outputs[0];
var makeErc20Client = (viemClient, addresses) => {
  const getEscrowSchema = async () => await viemClient.readContract({
    address: addresses.erc20EscrowObligation,
    abi: abi36.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const getPaymentSchema = async () => await viemClient.readContract({
    address: addresses.erc20PaymentObligation,
    abi: abi37.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  const signPermit = async (props) => {
    const types = {
      Permit: (0, import_viem6.parseAbiParameter)("(address owner, address spender, uint256 value, uint256 nonce, uint256 deadline)").components
    };
    const domainData = {
      name: props.erc20Name,
      /** We assume 1 if permit version is not specified */
      version: props.permitVersion ?? "1",
      chainId: props.chainId,
      verifyingContract: props.contractAddress
    };
    const message = {
      owner: props.ownerAddress,
      spender: props.spenderAddress,
      value: props.value,
      nonce: props.nonce,
      deadline: props.deadline
    };
    const signature = await viemClient.account.signTypedData({
      message,
      domain: domainData,
      primaryType: "Permit",
      types
    });
    const [r, s, v] = [(0, import_viem6.slice)(signature, 0, 32), (0, import_viem6.slice)(signature, 32, 64), (0, import_viem6.slice)(signature, 64, 65)];
    return { r, s, v: (0, import_viem6.hexToNumber)(v) };
  };
  const encodeEscrowObligationRaw = (data) => {
    return (0, import_viem6.encodeAbiParameters)([erc20EscrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return (0, import_viem6.encodeAbiParameters)([erc20PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC20EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC20 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        arbiter: demand.arbiter,
        demand: demand.demand,
        token: token.address,
        amount: token.value
      });
    },
    /**
     * Encodes ERC20PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC20 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        amount: token.value,
        payee
      });
    },
    /**
     * Decodes ERC20EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return (0, import_viem6.decodeAbiParameters)([erc20EscrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes ERC20PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], obligationData)[0];
    },
    getEscrowSchema,
    getPaymentSchema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getEscrowObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getEscrowSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem6.decodeAbiParameters)([erc20EscrowObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getPaymentObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid), getPaymentSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    /**
     * Approves the spender to use tokens
     * @param token - Token details including address and amount
     * @param spender - Address to approve
     * @returns Transaction hash
     */
    approve: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc20EscrowObligation : addresses.erc20PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token.address,
        abi: abi38.abi,
        functionName: "approve",
        args: [to, token.value]
      });
      return hash;
    },
    /**
     * Approves spender if current allowance is less than required amount
     * @param token - Token details including address and amount
     * @param spender - Address to approve
     * @returns Transaction hash or null if approval not needed
     */
    approveIfLess: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const currentAllowance = await viemClient.readContract({
        address: token.address,
        abi: abi38.abi,
        functionName: "allowance",
        args: [viemClient.account.address, to]
      });
      if (currentAllowance < token.value) {
        return viemClient.writeContract({
          address: token.address,
          abi: abi38.abi,
          functionName: "approve",
          args: [to, token.value]
        });
      }
      return null;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      let hash;
      try {
        const { request } = await viemClient.simulateContract({
          address: addresses.erc20EscrowObligation,
          abi: abi36.abi,
          functionName: "collectEscrow",
          args: [buyAttestation, fulfillment]
        });
        hash = await viemClient.writeContract(request);
      } catch (error) {
        throw new Error(`Failed to collect payment for ${buyAttestation} with fulfillment ${fulfillment}: ${error}`);
      }
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20EscrowObligation,
        abi: abi36.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC20 tokens for a custom demand
     * @param price - ERC20 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyWithErc20(
     *   { address: usdc, value: 10n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc20: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20EscrowObligation,
        abi: abi36.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            amount: price.value,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.permitAndBuyWithErc20(
     *   { address: usdc, value: 10n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    permitAndBuyWithErc20: async (price, item, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: price.value,
        nonce: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: price.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyWithErc20",
        args: [
          price.address,
          price.value,
          item.arbiter,
          item.demand,
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.payWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc20: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20PaymentObligation,
        abi: abi37.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            amount: price.value,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.permitAndPayWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    permitAndPayWithErc20: async (price, payee) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20PaymentObligation,
        value: price.value,
        nonce: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: price.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: price.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayWithErc20",
        args: [price.address, price.value, payee, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC20 tokens
     * @param bid - ERC20 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc20ForErc20(
     *   { address: usdc, value: 10n },
     *   { address: eurc, value: 10n },
     *   0n,
     * );
     * ```
     */
    buyErc20ForErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc20ForErc20",
        args: [bid.address, bid.value, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC20 tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.permitAndBuyErc20ForErc20(
     *   { address: usdc, value: 10n },
     *   { address: eurc, value: 10n },
     *   0n,
     * );
     * ```
     */
    permitAndBuyErc20ForErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc20ForErc20",
        args: [bid.address, bid.value, ask.address, ask.value, expiration, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.payErc20ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc20ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC20 tokens using EIP-2612 permit
     * @param price - ERC20 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc20.permitAndPayWithErc20(
     *   { address: usdc, value: 10n },
     *   receiverAddress,
     * );
     * ```
     */
    permitAndPayErc20ForErc20: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = (0, import_viem6.decodeAbiParameters)(
        [erc20EscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20PaymentObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc20",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for an ERC721 token
     * @param bid - ERC20 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc721WithErc20(
     *   { address: usdc, value: 10n },
     *   { address: nft, id: 1n },
     *   0n,
     * );
     * ```
     */
    buyErc721WithErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc721WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for an ERC721 token using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyErc721WithErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc721WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, expiration, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC721 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc721",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC721 trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForErc721: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = (0, import_viem6.decodeAbiParameters)(
        [erc721EscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc721",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC1155 tokens
     * @param bid - ERC20 token offered
     * @param ask - ERC1155 token requested including token ID and amount
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyErc1155WithErc20(
     *   { address: usdc, value: 10n },
     *   { address: token, id: 1n, value: 5n },
     *   0n,
     * );
     * ```
     */
    buyErc1155WithErc20: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyErc1155WithErc20",
        args: [bid.address, bid.value, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for ERC1155 tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param ask - ERC1155 token requested including token ID and amount
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyErc1155WithErc20: async (bid, ask, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyErc1155WithErc20",
        args: [
          bid.address,
          bid.value,
          ask.address,
          ask.id,
          ask.value,
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForErc1155",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-ERC1155 trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForErc1155: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = (0, import_viem6.decodeAbiParameters)(
        [
          {
            type: "tuple",
            components: [
              { name: "token", type: "address" },
              { name: "tokenId", type: "uint256" },
              { name: "amount", type: "uint256" },
              { name: "arbiter", type: "address" },
              { name: "demand", type: "bytes" }
            ]
          }
        ],
        buyAttestationData.data
      )[0];
      const demandData = (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForErc1155",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for a bundle of tokens
     * @param bid - ERC20 token offered
     * @param bundle - Bundle of tokens requested (ERC20, ERC721, ERC1155)
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc20.buyBundleWithErc20(
     *   { address: usdc, value: 10n },
     *   {
     *     erc20: [{ address: dai, value: 5n }],
     *     erc721: [{ address: nft, id: 1n }],
     *     erc1155: [{ address: token, id: 1n, value: 3n }],
     *   },
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc20: async (bid, bundle, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "buyBundleWithErc20",
        args: [bid.address, bid.value, { ...flattenTokenBundle(bundle), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC20 tokens for a bundle of tokens using EIP-2612 permit
     * @param bid - ERC20 token offered
     * @param bundle - Bundle of tokens requested (ERC20, ERC721, ERC1155)
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     */
    permitAndBuyBundleWithErc20: async (bid, bundle, payee, expiration) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: bid.value,
        nonce: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: bid.address,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: bid.address,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndBuyBundleWithErc20",
        args: [
          bid.address,
          bid.value,
          { ...flattenTokenBundle(bundle), payee },
          expiration,
          deadline,
          permit.v,
          permit.r,
          permit.s
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    payErc20ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "payErc20ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC20-bundle trade using EIP-2612 permit
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     */
    permitAndPayErc20ForBundle: async (buyAttestation) => {
      const deadline = BigInt(Math.floor(Date.now() / 1e3)) + 3600n;
      const buyAttestationData = await viemClient.readContract({
        address: addresses.eas,
        abi: abi29.abi,
        functionName: "getAttestation",
        args: [buyAttestation]
      });
      const buyAttestationObligationData = (0, import_viem6.decodeAbiParameters)(
        [tokenBundleEscrowObligationDataType],
        buyAttestationData.data
      )[0];
      const demandData = (0, import_viem6.decodeAbiParameters)([erc20PaymentObligationDataType], buyAttestationObligationData.demand)[0];
      const permit = await signPermit({
        ownerAddress: viemClient.account.address,
        spenderAddress: addresses.erc20EscrowObligation,
        value: demandData.amount,
        nonce: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "nonces",
          args: [viemClient.account.address]
        }),
        deadline,
        erc20Name: await viemClient.readContract({
          address: demandData.token,
          abi: abi38.abi,
          functionName: "name"
        }),
        contractAddress: demandData.token,
        chainId: viemClient.chain.id
      });
      const hash = await viemClient.writeContract({
        address: addresses.erc20BarterUtils,
        abi: abi35.abi,
        functionName: "permitAndPayErc20ForBundle",
        args: [buyAttestation, deadline, permit.v, permit.r, permit.s]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc721.ts
var import_viem7 = require("viem");

// src/contracts/ERC721BarterCrossToken.ts
var abi42 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_erc20Escrow",
          "type": "address",
          "internalType": "contract ERC20EscrowObligation"
        },
        {
          "name": "_erc20Payment",
          "type": "address",
          "internalType": "contract ERC20PaymentObligation"
        },
        {
          "name": "_erc721Escrow",
          "type": "address",
          "internalType": "contract ERC721EscrowObligation"
        },
        {
          "name": "_erc721Payment",
          "type": "address",
          "internalType": "contract ERC721PaymentObligation"
        },
        {
          "name": "_erc1155Escrow",
          "type": "address",
          "internalType": "contract ERC1155EscrowObligation"
        },
        {
          "name": "_erc1155Payment",
          "type": "address",
          "internalType": "contract ERC1155PaymentObligation"
        },
        {
          "name": "_bundleEscrow",
          "type": "address",
          "internalType": "contract TokenBundleEscrowObligation"
        },
        {
          "name": "_bundlePayment",
          "type": "address",
          "internalType": "contract TokenBundlePaymentObligation"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyBundleWithErc721",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askData",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc1155WithErc721",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc20WithErc721",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc721ForErc721",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc721ForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc721ForErc1155",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc721ForErc20",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc721ForErc721",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "error",
      "name": "CouldntCollectEscrow",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x6080346101b057601f61135138819003918201601f19168301916001600160401b038311848410176101b457808492610120946040528339810103126101b05780516001600160a01b03811691908290036101b05760208101516001600160a01b038116908190036101b05760408201516001600160a01b03811691908290036101b05760608301516001600160a01b03811692908390036101b05760808401516001600160a01b03811692908390036101b05760a08501516001600160a01b03811693908490036101b05760c08601516001600160a01b03811695908690036101b05760e08701516001600160a01b03811697908890036101b05761010001516001600160a01b03811698908990036101b05760018060a01b03195f5416175f5560018060a01b0319600154161760015560018060a01b0319600254161760025560018060a01b0319600454161760045560018060a01b0319600354161760035560018060a01b0319600554161760055560018060a01b0319600654161760065560018060a01b0319600754161760075560018060a01b0319600854161760085560405161118890816101c98239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816341b81d5814610a8a575080635f19ead1146109cf5780636590e21b146108b5578063793d455d146105aa578063cb9d3a57146103c6578063e32aa46314610389578063ebb48d901461025f5763eff69b5e14610074575f80fd5b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd576101486100ee60206100de61012082955f98899161023d575b500151828082518301019101610f62565b0151838082518301019101610e94565b6002546040805163446c5bf160e11b815283516001600160a01b03908116600483015260208501516024830152939091015183166044820152336064820181905260848201529586939290911691839190829060a4820190565b03925af19182156101fd575f92610208575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916101bf575b50156101b057602090604051908152f35b63a97a981d60e01b5f5260045ffd5b90506020813d6020116101f5575b816101da60209383610cfd565b810103126101f1576101eb90610d46565b5f61019f565b5f80fd5b3d91506101cd565b6040513d5f823e3d90fd5b9091506020813d602011610235575b8161022460209383610cfd565b810103126101f1575190602061015a565b3d9150610217565b61025991503d808b833e6102518183610cfd565b810190610da8565b5f6100cd565b346101f15761033a602061027236610c75565b60015460025460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b60018060a01b03168252878201523360408201526102e5604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b606081526102f4608082610cfd565b6040519361030185610cc7565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b03925af180156101fd575f90610356575b602090604051908152f35b506020813d602011610381575b8161037060209383610cfd565b810103126101f1576020905161034b565b3d9150610363565b346101f15761033a602061039c36610c75565b60015460035460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b346101f15760803660031901126101f1576103df610c4b565b604435906001600160401b0382116101f1578160040161010060031984360301126101f157606435906001600160401b03821682036101f15761033a9360209361053661056160018060a01b03600154169460018060a01b0360085416946040519384928a808501526105236105186104f96104da6104bb61049c61047d8a604061010061046d8b806110bb565b92909301526101408d01916110ef565b61048a60248b01896110bb565b8c8303603f190160608e01529061112e565b6104a960448a01886110bb565b8b8303603f190160808d0152906110ef565b6104c860648901876110bb565b8a8303603f190160a08c01529061112e565b6104e760848801866110bb565b898303603f190160c08b0152906110ef565b61050660a48701856110bb565b888303603f190160e08a01529061112e565b9160c48501906110bb565b858303603f19016101008701529061112e565b906001600160a01b039061054c9060e401610c61565b1661012083015203601f198101835282610cfd565b6040519261056e84610cc7565b83528583015260018060a01b0316604082015260243560608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b346101f15760203660031901126101f15760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa80156101fd57610120915f9161089b575b500151908151820160208101926020818303126101f1576020810151906001600160401b0382116101f157019061012090829003126101f1576040519261012084018481106001600160401b038211176108875760405261065860208301610d32565b845260408201516001600160401b0381116101f15781602061067c92850101610d53565b906020850191825260608301516001600160401b0381116101f1578160206106a692860101610ff9565b604086015260808301516001600160401b0381116101f1578160206106cd9286010161105e565b606086015260a08301516001600160401b0381116101f1578160206106f492860101610ff9565b608086015260c08301516001600160401b0381116101f15781602061071b9286010161105e565b60a086015260e08301516001600160401b0381116101f15781602061074292860101610ff9565b60c08601526101008301516001600160401b0381116101f15781602061076a9286010161105e565b60e0860152610120830151916001600160401b0383116101f1575f9561010061079f6100ee9460206107b1978199010161105e565b91015251838082518301019101610e94565b03925af19182156101fd575f92610852575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b90506020813d60201161084a575b8161083360209383610cfd565b810103126101f15761084490610d46565b8261019f565b3d9150610826565b9091506020813d60201161087f575b8161086e60209383610cfd565b810103126101f157519060206107c3565b3d9150610861565b634e487b7160e01b5f52604160045260245ffd5b6108af91503d805f833e6102518183610cfd565b836105f5565b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd5761091e6100ee60206100de61012082955f9889916109b557500151828082518301019101610f62565b03925af19182156101fd575f92610980575b5060205f91604460018060a01b0360045416916040519485938492632c713cd960e01b845260048401528760248401525af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d6020116109ad575b8161099c60209383610cfd565b810103126101f15751906020610930565b3d915061098f565b6109c991503d808b833e6102518183610cfd565b896100cd565b346101f15760c03660031901126101f1576109e8610c4b565b6044356001600160a01b038116908190036101f15760a4356001600160401b03811681036101f15760015460065460405161033a956020956001600160a01b0394851694909316929091610a3b81610cc7565b8181528681019060643582526060604082019160843583520191338352604051938985015251604084015251606083015260018060a01b0390511660808201526080815261056160a082610cfd565b346101f15760203660031901126101f157600435905f8160248160018060a01b038454166328c44a9960e21b82528660048301525afa80156101fd57610120915f91610c31575b5001519081518201916020818403126101f1576020810151906001600160401b0382116101f157019160a0838203126101f1576040519060a082018281106001600160401b0382111761088757604052610b2d60208501610d32565b825260408401516001600160401b0381116101f1575f94602093608060a0610b626100ee958880610b95990191870101610d53565b938488850152610b7460608201610d32565b60408501528281015160608501520151910152838082518301019101610e94565b03925af19182156101fd575f92610bfc575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d602011610c29575b81610c1860209383610cfd565b810103126101f15751906020610ba7565b3d9150610c0b565b610c4591503d805f833e6102518183610cfd565b83610ad1565b600435906001600160a01b03821682036101f157565b35906001600160a01b03821682036101f157565b60a09060031901126101f1576004356001600160a01b03811681036101f15790602435906044356001600160a01b03811681036101f15790606435906084356001600160401b03811681036101f15790565b608081019081106001600160401b0382111761088757604052565b606081019081106001600160401b0382111761088757604052565b90601f801991011681019081106001600160401b0382111761088757604052565b51906001600160401b03821682036101f157565b51906001600160a01b03821682036101f157565b519081151582036101f157565b81601f820112156101f1578051906001600160401b0382116108875760405192610d87601f8401601f191660200185610cfd565b828452602083830101116101f157815f9260208093018386015e8301015290565b6020818303126101f1578051906001600160401b0382116101f15701610140818303126101f1576040519161014083018381106001600160401b03821117610887576040528151835260208201516020840152610e0760408301610d1e565b6040840152610e1860608301610d1e565b6060840152610e2960808301610d1e565b608084015260a082015160a0840152610e4460c08301610d32565b60c0840152610e5560e08301610d32565b60e0840152610e676101008301610d46565b6101008401526101208201516001600160401b0381116101f157610e8b9201610d53565b61012082015290565b908160609103126101f157610ecb6040805192610eb084610ce2565b610eb981610d32565b84526020810151602085015201610d32565b604082015290565b926001600160401b036101206020606080969998956080895260018060a01b0381511660808a015282810151608060a08b01528051938491826101008d015201858b015e5f84848b01015260018060a01b0360408201511660c08a0152015160e0880152601f80199101168601019616602085015260018060a01b0316604084015260018060a01b0316910152565b6020818303126101f1578051906001600160401b0382116101f15701906080828203126101f15760405191610f9683610cc7565b610f9f81610d32565b835260208101516001600160401b0381116101f157606092610fc2918301610d53565b6020840152610fd360408201610d32565b60408401520151606082015290565b6001600160401b0381116108875760051b60200190565b9080601f830112156101f157815161101081610fe2565b9261101e6040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110465750505090565b6020809161105384610d32565b815201910190611039565b9080601f830112156101f157815161107581610fe2565b926110836040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110ab5750505090565b815181526020918201910161109e565b9035601e19823603018112156101f15701602081359101916001600160401b0382116101f1578160051b360383136101f157565b916020908281520191905f5b8181106111085750505090565b909192602080600192838060a01b0361112088610c61565b1681520194019291016110fb565b81835290916001600160fb1b0383116101f15760209260051b80928483013701019056fea2646970667358221220c8e5fecba25fc8f77f4e84cddad14c639666cbe167b6e731b877db2bb9e7258164736f6c634300081b0033",
    "sourceMap": "890:6100:87:-:0;;;;;;;;;;;;;-1:-1:-1;;890:6100:87;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;-1:-1:-1;890:6100:87;;;-1:-1:-1;890:6100:87;;;;;;;742:28:88;890:6100:87;;;742:28:88;890:6100:87;;;;;;;780:30:88;890:6100:87;;;780:30:88;890:6100:87;;;;;;;1754:26;890:6100;;;1754:26;890:6100;;;;;;;1790:28;890:6100;;;1790:28;890:6100;;;;;;;1828:30;890:6100;;;1828:30;890:6100;;;;;;;1868:32;890:6100;;;1868:32;890:6100;;;;;;;1910:28;890:6100;;;1910:28;890:6100;;;;;;;1948:30;890:6100;;;1948:30;890:6100;;;;;;;;;;;-1:-1:-1;890:6100:87;;;;;;-1:-1:-1;890:6100:87;;;;;-1:-1:-1;890:6100:87",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c90816341b81d5814610a8a575080635f19ead1146109cf5780636590e21b146108b5578063793d455d146105aa578063cb9d3a57146103c6578063e32aa46314610389578063ebb48d901461025f5763eff69b5e14610074575f80fd5b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd576101486100ee60206100de61012082955f98899161023d575b500151828082518301019101610f62565b0151838082518301019101610e94565b6002546040805163446c5bf160e11b815283516001600160a01b03908116600483015260208501516024830152939091015183166044820152336064820181905260848201529586939290911691839190829060a4820190565b03925af19182156101fd575f92610208575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916101bf575b50156101b057602090604051908152f35b63a97a981d60e01b5f5260045ffd5b90506020813d6020116101f5575b816101da60209383610cfd565b810103126101f1576101eb90610d46565b5f61019f565b5f80fd5b3d91506101cd565b6040513d5f823e3d90fd5b9091506020813d602011610235575b8161022460209383610cfd565b810103126101f1575190602061015a565b3d9150610217565b61025991503d808b833e6102518183610cfd565b810190610da8565b5f6100cd565b346101f15761033a602061027236610c75565b60015460025460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b60018060a01b03168252878201523360408201526102e5604051918883019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b606081526102f4608082610cfd565b6040519361030185610cc7565b84528684015260018060a01b0316604083015260608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b03925af180156101fd575f90610356575b602090604051908152f35b506020813d602011610381575b8161037060209383610cfd565b810103126101f1576020905161034b565b3d9150610363565b346101f15761033a602061039c36610c75565b60015460035460405192966001600160a01b03928316969290911694919390929161029c83610ce2565b346101f15760803660031901126101f1576103df610c4b565b604435906001600160401b0382116101f1578160040161010060031984360301126101f157606435906001600160401b03821682036101f15761033a9360209361053661056160018060a01b03600154169460018060a01b0360085416946040519384928a808501526105236105186104f96104da6104bb61049c61047d8a604061010061046d8b806110bb565b92909301526101408d01916110ef565b61048a60248b01896110bb565b8c8303603f190160608e01529061112e565b6104a960448a01886110bb565b8b8303603f190160808d0152906110ef565b6104c860648901876110bb565b8a8303603f190160a08c01529061112e565b6104e760848801866110bb565b898303603f190160c08b0152906110ef565b61050660a48701856110bb565b888303603f190160e08a01529061112e565b9160c48501906110bb565b858303603f19016101008701529061112e565b906001600160a01b039061054c9060e401610c61565b1661012083015203601f198101835282610cfd565b6040519261056e84610cc7565b83528583015260018060a01b0316604082015260243560608201525f604051809681958294631e72ae8160e11b84523391339160048601610ed3565b346101f15760203660031901126101f15760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa80156101fd57610120915f9161089b575b500151908151820160208101926020818303126101f1576020810151906001600160401b0382116101f157019061012090829003126101f1576040519261012084018481106001600160401b038211176108875760405261065860208301610d32565b845260408201516001600160401b0381116101f15781602061067c92850101610d53565b906020850191825260608301516001600160401b0381116101f1578160206106a692860101610ff9565b604086015260808301516001600160401b0381116101f1578160206106cd9286010161105e565b606086015260a08301516001600160401b0381116101f1578160206106f492860101610ff9565b608086015260c08301516001600160401b0381116101f15781602061071b9286010161105e565b60a086015260e08301516001600160401b0381116101f15781602061074292860101610ff9565b60c08601526101008301516001600160401b0381116101f15781602061076a9286010161105e565b60e0860152610120830151916001600160401b0383116101f1575f9561010061079f6100ee9460206107b1978199010161105e565b91015251838082518301019101610e94565b03925af19182156101fd575f92610852575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b90506020813d60201161084a575b8161083360209383610cfd565b810103126101f15761084490610d46565b8261019f565b3d9150610826565b9091506020813d60201161087f575b8161086e60209383610cfd565b810103126101f157519060206107c3565b3d9150610861565b634e487b7160e01b5f52604160045260245ffd5b6108af91503d805f833e6102518183610cfd565b836105f5565b346101f15760203660031901126101f15760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156101fd5761091e6100ee60206100de61012082955f9889916109b557500151828082518301019101610f62565b03925af19182156101fd575f92610980575b5060205f91604460018060a01b0360045416916040519485938492632c713cd960e01b845260048401528760248401525af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d6020116109ad575b8161099c60209383610cfd565b810103126101f15751906020610930565b3d915061098f565b6109c991503d808b833e6102518183610cfd565b896100cd565b346101f15760c03660031901126101f1576109e8610c4b565b6044356001600160a01b038116908190036101f15760a4356001600160401b03811681036101f15760015460065460405161033a956020956001600160a01b0394851694909316929091610a3b81610cc7565b8181528681019060643582526060604082019160843583520191338352604051938985015251604084015251606083015260018060a01b0390511660808201526080815261056160a082610cfd565b346101f15760203660031901126101f157600435905f8160248160018060a01b038454166328c44a9960e21b82528660048301525afa80156101fd57610120915f91610c31575b5001519081518201916020818403126101f1576020810151906001600160401b0382116101f157019160a0838203126101f1576040519060a082018281106001600160401b0382111761088757604052610b2d60208501610d32565b825260408401516001600160401b0381116101f1575f94602093608060a0610b626100ee958880610b95990191870101610d53565b938488850152610b7460608201610d32565b60408501528281015160608501520151910152838082518301019101610e94565b03925af19182156101fd575f92610bfc575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af19081156101fd575f916108185750156101b057602090604051908152f35b9091506020813d602011610c29575b81610c1860209383610cfd565b810103126101f15751906020610ba7565b3d9150610c0b565b610c4591503d805f833e6102518183610cfd565b83610ad1565b600435906001600160a01b03821682036101f157565b35906001600160a01b03821682036101f157565b60a09060031901126101f1576004356001600160a01b03811681036101f15790602435906044356001600160a01b03811681036101f15790606435906084356001600160401b03811681036101f15790565b608081019081106001600160401b0382111761088757604052565b606081019081106001600160401b0382111761088757604052565b90601f801991011681019081106001600160401b0382111761088757604052565b51906001600160401b03821682036101f157565b51906001600160a01b03821682036101f157565b519081151582036101f157565b81601f820112156101f1578051906001600160401b0382116108875760405192610d87601f8401601f191660200185610cfd565b828452602083830101116101f157815f9260208093018386015e8301015290565b6020818303126101f1578051906001600160401b0382116101f15701610140818303126101f1576040519161014083018381106001600160401b03821117610887576040528151835260208201516020840152610e0760408301610d1e565b6040840152610e1860608301610d1e565b6060840152610e2960808301610d1e565b608084015260a082015160a0840152610e4460c08301610d32565b60c0840152610e5560e08301610d32565b60e0840152610e676101008301610d46565b6101008401526101208201516001600160401b0381116101f157610e8b9201610d53565b61012082015290565b908160609103126101f157610ecb6040805192610eb084610ce2565b610eb981610d32565b84526020810151602085015201610d32565b604082015290565b926001600160401b036101206020606080969998956080895260018060a01b0381511660808a015282810151608060a08b01528051938491826101008d015201858b015e5f84848b01015260018060a01b0360408201511660c08a0152015160e0880152601f80199101168601019616602085015260018060a01b0316604084015260018060a01b0316910152565b6020818303126101f1578051906001600160401b0382116101f15701906080828203126101f15760405191610f9683610cc7565b610f9f81610d32565b835260208101516001600160401b0381116101f157606092610fc2918301610d53565b6020840152610fd360408201610d32565b60408401520151606082015290565b6001600160401b0381116108875760051b60200190565b9080601f830112156101f157815161101081610fe2565b9261101e6040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110465750505090565b6020809161105384610d32565b815201910190611039565b9080601f830112156101f157815161107581610fe2565b926110836040519485610cfd565b81845260208085019260051b8201019283116101f157602001905b8282106110ab5750505090565b815181526020918201910161109e565b9035601e19823603018112156101f15701602081359101916001600160401b0382116101f1578160051b360383136101f157565b916020908281520191905f5b8181106111085750505090565b909192602080600192838060a01b0361112088610c61565b1681520194019291016110fb565b81835290916001600160fb1b0383116101f15760209260051b80928483013701019056fea2646970667358221220c8e5fecba25fc8f77f4e84cddad14c639666cbe167b6e731b877db2bb9e7258164736f6c634300081b0033",
    "sourceMap": "890:6100:87:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2495:204;890:6100;2495:204;;;890:6100;1330:207:88;;;890:6100:87;;;;;;;;;-1:-1:-1;;890:6100:87;;;;2699:34:88;890:6100:87;;;;;;;;;;;;;;;;;;;;2699:34:88;;;890:6100:87;2699:34:88;;890:6100:87;2699:34:88;;;;;;1881:107;2961:105;890:6100:87;2801:95:88;2825:8;2699:34;;890:6100:87;2699:34:88;;;;;890:6100:87;2825:8:88;;;890:6100:87;;;;2801:95:88;;;;;;:::i;:::-;2985:17;;890:6100:87;;;;2961:105:88;;;;;;:::i;:::-;1881:13;890:6100:87;;;;-1:-1:-1;;;1881:107:88;;890:6100:87;;-1:-1:-1;;;;;890:6100:87;;;;1881:107:88;;890:6100:87;;;;;;;;;;;;;;;;;;;;1944:10:88;890:6100:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;1881:107:88;;;;;;;;;;890:6100:87;1881:107:88;;;890:6100:87;-1:-1:-1;890:6100:87;;;;-1:-1:-1;;;2004:59:88;;890:6100:87;2004:59:88;;890:6100:87;;;;2699:34:88;890:6100:87;;;;;;;;;2004:59:88;;890:6100:87;;;;-1:-1:-1;;;;;890:6100:87;2004:59:88;;;;;;;890:6100:87;2004:59:88;;;890:6100:87;2003:60:88;;1999:120;;890:6100:87;;;;;;;;1999:120:88;5982:22:87;;;890:6100;2086:22:88;890:6100:87;;2086:22:88;2004:59;;;890:6100:87;2004:59:88;;890:6100:87;2004:59:88;;;;;;890:6100:87;2004:59:88;;;:::i;:::-;;;890:6100:87;;;;;;;:::i;:::-;2004:59:88;;;890:6100:87;;;;2004:59:88;;;-1:-1:-1;2004:59:88;;;890:6100:87;;;;;;;;;1881:107:88;;;;890:6100:87;1881:107:88;;890:6100:87;1881:107:88;;;;;;890:6100:87;1881:107:88;;;:::i;:::-;;;890:6100:87;;;;;;;1881:107:88;;;;;-1:-1:-1;1881:107:88;;2699:34;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;890:6100:87;;;;1049:627:88;1330:207;890:6100:87;;;:::i;:::-;;;1250:13:88;890:6100:87;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1330:207:88;;;890:6100:87;1500:10:88;890:6100:87;1330:207:88;;890:6100:87;;;;1294:265:88;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1294:265:88;;;;;;:::i;:::-;890:6100:87;;;;;;:::i;:::-;;;1095:483:88;;;890:6100:87;;;;;;;;1095:483:88;;890:6100:87;;1095:483:88;;890:6100:87;;;;;;;;;;;;;1049:627:88;;1500:10;;;1049:627;890:6100:87;1049:627:88;;;:::i;:::-;;;;;;;;;890:6100:87;1049:627:88;;;890:6100:87;1330:207:88;890:6100:87;;;;;;;1049:627:88;;1330:207;1049:627;;1330:207;1049:627;;;;;;890:6100:87;1049:627:88;;;:::i;:::-;;;890:6100:87;;;;1330:207:88;890:6100:87;;1049:627:88;;;;;-1:-1:-1;1049:627:88;;890:6100:87;;;;2215:623;2495:204;890:6100;;;:::i;:::-;;;2416:12;890:6100;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;890:6100:87;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;4036:381;890:6100;;;;4281:19;890:6100;;;;;;;;;;;;;;4237:13;890:6100;;;;;4281:19;;;;;;;890:6100;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;890:6100:87;;;;;;;:::i;:::-;;-1:-1:-1;;;;;890:6100:87;;;;;;:::i;:::-;;;;;;4281:19;890:6100;;4281:19;;;;;;:::i;:::-;890:6100;;;;;;:::i;:::-;;;4082:237;;;890:6100;;;;;;;;4082:237;;890:6100;;;;4082:237;;890:6100;;;;;;;;;;;;;4036:381;;4365:10;;;4036:381;890:6100;4036:381;;;:::i;890:6100::-;;;;;;-1:-1:-1;;890:6100:87;;;;;;6188:34;890:6100;;;;;;;;;;;;;;;;;;6188:34;;;890:6100;6188:34;;890:6100;6188:34;;;;;;6319:8;6188:34;890:6100;6188:34;;;890:6100;6319:8;;;890:6100;;;6295:79;;890:6100;6295:79;;890:6100;;;;;;;;;6295:79;;890:6100;;-1:-1:-1;;;;;890:6100:87;;;;;;6319:8;890:6100;;;;;;;;;;6319:8;890:6100;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;6319:8;890:6100;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;6439:105;890:6100;;6581:107;890:6100;;;;;;:::i;:::-;;;;6463:17;890:6100;;;;6439:105;;;;;;:::i;6581:107::-;;;;;;;;;;890:6100;6581:107;;;890:6100;-1:-1:-1;6834:12:87;890:6100;;;-1:-1:-1;;;6834:59:87;;890:6100;6834:59;;890:6100;;;;6188:34;890:6100;;;;;;;;;6834:59;;890:6100;;;;-1:-1:-1;;;;;890:6100:87;6834:59;;;;;;;890:6100;6834:59;;;6833:60;;6829:120;;890:6100;;;;;;;;6834:59;;;890:6100;6834:59;;890:6100;6834:59;;;;;;890:6100;6834:59;;;:::i;:::-;;;890:6100;;;;;;;:::i;:::-;6834:59;;;;;;-1:-1:-1;6834:59:87;;6581:107;;;;890:6100;6581:107;;890:6100;6581:107;;;;;;890:6100;6581:107;;;:::i;:::-;;;890:6100;;;;;;;6581:107;;;;;-1:-1:-1;6581:107:87;;890:6100;;;;;;;;;6188:34;890:6100;;6188:34;;;;;;890:6100;6188:34;;;;;;:::i;:::-;;;;890:6100;;;;;;-1:-1:-1;;890:6100:87;;;;4557:34;890:6100;;;;;;;;;;;;;;;;;;;;4557:34;;;890:6100;4557:34;;890:6100;4557:34;;;;;;4959:107;4817:105;890:6100;4658:94;4682:8;4557:34;;890:6100;4557:34;;;;;4682:8;;;890:6100;;;;4658:94;;;;;;:::i;4959:107::-;;;;;;;;;;890:6100;4959:107;;;890:6100;;;;;5082:58;890:6100;;;;;;;;;;;;;;;;;;;5082:58;;890:6100;5082:58;;890:6100;;4557:34;890:6100;;;5082:58;;;;;;;890:6100;5082:58;;;5081:59;;5077:119;;890:6100;;;;;;;;4959:107;;;;890:6100;4959:107;;890:6100;4959:107;;;;;;890:6100;4959:107;;;:::i;:::-;;;890:6100;;;;;;;4959:107;;;;;-1:-1:-1;4959:107:87;;4557:34;;;;;;;;;;;;;:::i;:::-;;;;890:6100;;;;;;-1:-1:-1;;890:6100:87;;;;;;:::i;:::-;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;3306:14;890:6100;;;3105:676;;890:6100;;-1:-1:-1;;;;;890:6100:87;;;;;;;;3105:676;;890:6100;;;:::i;:::-;;;;3387:255;;;890:6100;;;;;;;3387:255;;890:6100;;;;;3387:255;3605:10;;890:6100;;;;3351:313;;;;890:6100;;;;;;;;;;;;;;;;;;;;;;;;3351:313;;;890:6100;3351:313;;:::i;890:6100::-;;;;;;-1:-1:-1;;890:6100:87;;;;;;;;;5370:34;890:6100;;;;;;;;;;;;5370:34;;;890:6100;5370:34;;890:6100;5370:34;;;;;;5497:8;5370:34;890:6100;5370:34;;;890:6100;5497:8;;;890:6100;;;5473:96;;890:6100;;;;;;;;;5473:96;;890:6100;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;5473:96;890:6100;5473:96;890:6100;;;5634:105;5473:96;;;5776:107;5473:96;;890:6100;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;5634:105;;;;;;:::i;5776:107::-;;;;;;;;;;890:6100;5776:107;;;890:6100;-1:-1:-1;5899:13:87;890:6100;;;-1:-1:-1;;;5899:60:87;;890:6100;5899:60;;890:6100;;;;5370:34;890:6100;;;;;;;;;5899:60;;890:6100;;;;-1:-1:-1;;;;;890:6100:87;5899:60;;;;;;;890:6100;5899:60;;;5898:61;;5894:121;;890:6100;;;;;;;;5776:107;;;;890:6100;5776:107;;890:6100;5776:107;;;;;;890:6100;5776:107;;;:::i;:::-;;;890:6100;;;;;;;5776:107;;;;;-1:-1:-1;5776:107:87;;5370:34;;;;;;890:6100;5370:34;;;;;;:::i;:::-;;;;890:6100;;;;-1:-1:-1;;;;;890:6100:87;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:87;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:87;;;;;;:::o;:::-;;;-1:-1:-1;;;;;890:6100:87;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;-1:-1:-1;;890:6100:87;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;890:6100:87;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;890:6100:87;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;890:6100:87;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;890:6100:87;;;;;;;;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "buyBundleWithErc721(address,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "cb9d3a57",
    "buyErc1155WithErc721(address,uint256,address,uint256,uint256,uint64)": "5f19ead1",
    "buyErc20WithErc721(address,uint256,address,uint256,uint64)": "e32aa463",
    "buyErc721ForErc721(address,uint256,address,uint256,uint64)": "ebb48d90",
    "payErc721ForBundle(bytes32)": "793d455d",
    "payErc721ForErc1155(bytes32)": "41b81d58",
    "payErc721ForErc20(bytes32)": "6590e21b",
    "payErc721ForErc721(bytes32)": "eff69b5e"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155WithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20WithErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc721ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC721BarterCrossToken.sol":"ERC721BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef","license":"UNLICENSED","urls":["bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf","dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39","license":"UNLICENSED","urls":["bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411","dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019","license":"UNLICENSED","urls":["bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e","dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5","license":"UNLICENSED","urls":["bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3","dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"]},"src/utils/ERC721BarterCrossToken.sol":{"keccak256":"0x51a68dd4171b10ef1f8534bbfbf2d4eece50dcab9fa46b90f42db67338ca60a6","license":"UNLICENSED","urls":["bzz-raw://4d457fe050c936a744b4ebe6478df4e91a065b78905332d3e65511bf50536bbf","dweb:/ipfs/Qmb1qVJibEau7yXL6XedSjoL5gyjNcppr2uheXHpEQy4qf"]},"src/utils/ERC721BarterUtils.sol":{"keccak256":"0x8becdb37d17cde0d5685fe7c135465371575bc2a60ce2cc676782b049d8831cd","license":"UNLICENSED","urls":["bzz-raw://0687d4639ba541092f43d79cbdbfdef276c43a5158a586954f03e9555b0399a8","dweb:/ipfs/Qma1MjADJGGtd5NfFyNVv9UNs1ozxQNz1nbyjwZvjngpyg"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ERC20EscrowObligation",
              "name": "_erc20Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC20PaymentObligation",
              "name": "_erc20Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC721EscrowObligation",
              "name": "_erc721Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC721PaymentObligation",
              "name": "_erc721Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155EscrowObligation",
              "name": "_erc1155Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155PaymentObligation",
              "name": "_erc1155Payment",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundleEscrowObligation",
              "name": "_bundleEscrow",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundlePaymentObligation",
              "name": "_bundlePayment",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CouldntCollectEscrow"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "askData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyBundleWithErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc1155WithErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc20WithErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc721ForErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc721ForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc721ForErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc721ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc721ForErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/utils/ERC721BarterCrossToken.sol": "ERC721BarterCrossToken"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        "keccak256": "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        "urls": [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        "keccak256": "0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef",
        "urls": [
          "bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf",
          "dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        "keccak256": "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        "urls": [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        "keccak256": "0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39",
        "urls": [
          "bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411",
          "dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        "keccak256": "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        "urls": [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        "keccak256": "0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019",
        "urls": [
          "bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e",
          "dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        "keccak256": "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        "urls": [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        "keccak256": "0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5",
        "urls": [
          "bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3",
          "dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC721BarterCrossToken.sol": {
        "keccak256": "0x51a68dd4171b10ef1f8534bbfbf2d4eece50dcab9fa46b90f42db67338ca60a6",
        "urls": [
          "bzz-raw://4d457fe050c936a744b4ebe6478df4e91a065b78905332d3e65511bf50536bbf",
          "dweb:/ipfs/Qmb1qVJibEau7yXL6XedSjoL5gyjNcppr2uheXHpEQy4qf"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC721BarterUtils.sol": {
        "keccak256": "0x8becdb37d17cde0d5685fe7c135465371575bc2a60ce2cc676782b049d8831cd",
        "urls": [
          "bzz-raw://0687d4639ba541092f43d79cbdbfdef276c43a5158a586954f03e9555b0399a8",
          "dweb:/ipfs/Qma1MjADJGGtd5NfFyNVv9UNs1ozxQNz1nbyjwZvjngpyg"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 87
};

// src/contracts/ERC721PaymentObligation.ts
var abi43 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC721PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC721PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC721PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC721PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "PaymentMade",
      "inputs": [
        {
          "name": "payment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC721TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x61016080604052346101d3576040816115dc8038038091610020828561020d565b8339810103126101d35780516001600160a01b038116918282036101d35760200151916001600160a01b0383168084036101d357604051606081016001600160401b038111828210176101f957604052602d815260208101927f6164647265737320746f6b656e2c2075696e7432353620746f6b656e49642c2084526c6164647265737320706179656560981b60408301526001608052600360a0525f60c052156101ea576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101df575f916101a9575b50610140526040516113ab9081610231823960805181610994015260a051816109bf015260c051816109ea015260e051816113090152610100518161081601526101205181818161049d01526110c0015261014051818181610258015281816104d5015281816107e40152818161095201526110130152f35b90506020813d6020116101d7575b816101c46020938361020d565b810103126101d357515f610130565b5f80fd5b3d91506101b7565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176101f95760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146109755780635bf2f20d1461093b5780636b122fe0146107a557806388d8b7e21461073d57806388e5b2d91461071e57806391db0b7e1461071e5780639b28978c14610679578063b3b902d414610633578063c6ec50701461041a578063c93844be1461039d578063ce46e04614610383578063e49617e11461035e578063e60c35051461035e578063e6c9714d146101405763f0ffa1850361000e5760a036600319011261013c576004356001600160401b03811161013c576100fb903690600401610b41565b90610104610b6e565b604435929091906001600160a01b038416840361013c576020936101349361012a610a97565b9260843594610ecc565b604051908152f35b5f80fd5b3461013c57606036600319011261013c576004356001600160401b03811161013c57610140600319823603011261013c576040519061017e82610bfb565b8060040135825260208201906024810135825261019d60448201610b84565b60408401526101ae60648201610b84565b606084019081526101c160848301610b84565b916080850192835260a481013560a08601526101df60c48201610aad565b60c08601526101f060e48201610aad565b60e0860152610104810135801515810361013c576101008601526101248101356001600160401b03811161013c576101209160046102319236920101610ca4565b94019384526024356001600160401b03811161013c57610255903690600401610ca4565b927f000000000000000000000000000000000000000000000000000000000000000090510361034f57516001600160401b03168015159081610345575b5061033657516001600160401b0316610327576102cc6102bd60209351848082518301019101610e56565b91838082518301019101610e56565b815181516001600160a01b039081169116149182610317575b826102f7575b50506040519015158152f35b6040908101519101516001600160a01b03908116911614905082806102eb565b83810151828501511492506102e5565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610292565b635f9bd90760e11b5f5260045ffd5b602061037961036c36610b98565b610374611307565b611348565b6040519015158152f35b3461013c575f36600319011261013c5760206040515f8152f35b3461013c57602036600319011261013c576004356001600160401b03811161013c576103e46103d3610416923690600401610b41565b6103db610e24565b50810190610e95565b6040805182516001600160a01b0390811682526020808501519083015292820151909216908201529081906060820190565b0390f35b3461013c57602036600319011261013c57610433610e24565b50606061012060405161044581610bfb565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610628575f91610523575b5060208101517f000000000000000000000000000000000000000000000000000000000000000003610514576103e461012061041692015160208082518301019101610e56565b635527981560e11b5f5260045ffd5b90503d805f833e6105348183610c32565b81019060208183031261013c578051906001600160401b03821161013c5701906101408282031261013c576040519161056c83610bfb565b805183526020810151602084015261058660408201611361565b604084015261059760608201611361565b60608401526105a860808201611361565b608084015260a081015160a08401526105c360c08201610e42565b60c08401526105d460e08201610e42565b60e08401526105e66101008201610cc2565b610100840152610120810151906001600160401b03821161013c57019080601f8301121561013c57815161061c92602001610ccf565b610120820152816104cd565b6040513d5f823e3d90fd5b606036600319011261013c576004356001600160401b03811161013c576101346106636020923690600401610b41565b61066b610b6e565b916044359233923392610ecc565b3461013c57606036600319011261013c576106cd60206040516106af816106a1848201610d05565b03601f198101835282610c32565b6040518093819263f0ffa18560e01b83523390339060048501610d46565b03815f305af18015610628575f906106eb575b602090604051908152f35b506020813d602011610716575b8161070560209383610c32565b8101031261013c57602090516106e0565b3d91506106f8565b602061037961072c36610af1565b92610738929192611307565b610d80565b3461013c57366003190160a0811261013c5760601361013c5761075e610a97565b608435906001600160a01b038216820361013c57602090604051610787816106a1858201610d05565b6106cd604051948593849363f0ffa18560e01b855260048501610d46565b3461013c575f36600319011261013c576060806040516107c481610bcc565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610628575f9061088b575b606090610416604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610a73565b503d805f833e61089b8183610c32565b81019060208183031261013c578051906001600160401b03821161013c570160808183031261013c57604051906108d182610bcc565b8051825260208101516001600160a01b038116810361013c5760208301526108fb60408201610cc2565b60408301526060810151906001600160401b03821161013c570182601f8201121561013c5760609281602061093293519101610ccf565b82820152610845565b3461013c575f36600319011261013c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461013c575f36600319011261013c576104166020610a6360016109b87f000000000000000000000000000000000000000000000000000000000000000061119a565b81846109e37f000000000000000000000000000000000000000000000000000000000000000061119a565b8180610a0e7f000000000000000000000000000000000000000000000000000000000000000061119a565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c32565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b606435906001600160a01b038216820361013c57565b35906001600160a01b038216820361013c57565b9181601f8401121561013c578235916001600160401b03831161013c576020808501948460051b01011161013c57565b604060031982011261013c576004356001600160401b03811161013c5781610b1b91600401610ac1565b92909291602435906001600160401b03821161013c57610b3d91600401610ac1565b9091565b9181601f8401121561013c578235916001600160401b03831161013c576020838186019501011161013c57565b602435906001600160401b038216820361013c57565b35906001600160401b038216820361013c57565b602060031982011261013c57600435906001600160401b03821161013c5761014090829003600319011261013c5760040190565b608081019081106001600160401b03821117610be757604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610be757604052565b606081019081106001600160401b03821117610be757604052565b90601f801991011681019081106001600160401b03821117610be757604052565b6001600160401b038111610be757601f01601f191660200190565b929192610c7a82610c53565b91610c886040519384610c32565b82948184528183011161013c578281602093845f960137010152565b9080601f8301121561013c57816020610cbf93359101610c6e565b90565b5190811515820361013c57565b929192610cdb82610c53565b91610ce96040519384610c32565b82948184528183011161013c578281602093845f96015e010152565b6060810191906004356001600160a01b0381169081900361013c57815260243560208201526044356001600160a01b038116919082900361013c5760400152565b5f929493610d5e60809360a0845260a0840190610a73565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e15575f91345b85841015610e0a5781841015610df6578360051b8086013590828211610de75784013561013e198536030181121561013c57610dcb908501611348565b15610ddc5760019103930192610d8e565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e3182610c17565b5f6040838281528260208201520152565b51906001600160a01b038216820361013c57565b9081606091031261013c57610e8d6040805192610e7284610c17565b610e7b81610e42565b84526020810151602085015201610e42565b604082015290565b9081606091031261013c57610e8d6040805192610eb184610c17565b610eba81610aad565b84526020810135602085015201610aad565b939195909495610ede86860186610e95565b928351975f9860018060a01b031696604086019860018060a01b038a5116986020880198895190823b1561013c5760405192839283926323b872dd60e01b8452600160a01b60019003169d8e6004850152602484015260448301525a925f6064928195f19081611185575b50610f8b5786518a51895160405163045b391760e01b81526001600160a01b039384166004820152602481018d90529290911660448301526064820152608490fd5b9296509296509350610fa09296503691610c6e565b906040519260c084018481106001600160401b0382111761117157906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a0820152604051604081018181106001600160401b0382111761115d57906020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a06110b2608083015160c060e4860152610124850190610a73565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611152578491611120575b507f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad05819480a3565b90506020813d60201161114a575b8161113b60209383610c32565b8101031261013c57515f6110f8565b3d915061112e565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526041600452602488fd5b611192919c505f90610c32565b5f9a5f610f49565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8210156112e4575b806d04ee2d6d415b85acef8100000000600a9210156112c9575b662386f26fc100008110156112b5575b6305f5e1008110156112a4575b612710811015611295575b6064811015611287575b101561127c575b600a6021600184019361122185610c53565b9461122f6040519687610c32565b80865261123e601f1991610c53565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304801561127757600a9091611249565b505090565b60019091019061120f565b606460029104930192611208565b612710600491049301926111fe565b6305f5e100600891049301926111f3565b662386f26fc10000601091049301926111e6565b6d04ee2d6d415b85acef8100000000602091049301926111d6565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b81046111bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361133957565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361013c57301490565b51906001600160401b038216820361013c5756fea2646970667358221220471ebce8c2a9621796500c64d7a2417481179ac2e64608fe68ab49a7d783e38e64736f6c634300081b0033",
    "sourceMap": "511:3366:120:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;511:3366:120;;;;1148:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;511:3366:120;790:10:9;;511:3366:120;790:10:9;;;789::61;;809:32;;-1:-1:-1;511:3366:120;;;;;;;;;;;872:48:61;;511:3366:120;872:48:61;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;904:4:61;511:3366:120;;;;1148:4;511:3366;;;;;;-1:-1:-1;;511:3366:120;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;511:3366:120;;;;;;;;759:14:6;511:3366:120;;;;;783:14:6;511:3366:120;;;;;807:14:6;511:3366:120;;;;;790:10:9;511:3366:120;;;;;809:32:61;511:3366:120;;;;;789:10:61;511:3366:120;;;;;;;;;;851:69:61;511:3366:120;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;511:3366:120;872:48:61;;511:3366:120;872:48:61;;;;;;511:3366:120;872:48:61;;;:::i;:::-;;;511:3366:120;;;;;872:48:61;;;511:3366:120;-1:-1:-1;511:3366:120;;872:48:61;;;-1:-1:-1;872:48:61;;;511:3366:120;;;-1:-1:-1;511:3366:120;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;511:3366:120;;;;-1:-1:-1;511:3366:120;;;;;-1:-1:-1;511:3366:120;;;;;;-1:-1:-1;;511:3366:120;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "511:3366:120:-:0;;;;;;;;;-1:-1:-1;511:3366:120;;;;;;;;1183:12:9;;;1054:5;1183:12;511:3366:120;1054:5:9;1183:12;511:3366:120;;;;;;;;;;;;;;;;;;;;;;;;;1685:16;511:3366;1685:16;;;511:3366;;;;;;;;;;1308:16;511:3366;1308:16;;;511:3366;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;:::i;:::-;2844:621;3057:18;511:3366;;1016:27:60;1012:55;;511:3366:120;-1:-1:-1;;;;;511:3366:120;353:30:60;;;;;:89;;511:3366:120;721:55:60;;;511:3366:120;-1:-1:-1;;;;;511:3366:120;786:58:60;;3257:36:120;3133:79;511:3366;3157:15;;511:3366;;;;3133:79;;;;;;:::i;:::-;511:3366;;;;;3257:36;;;;;;:::i;:::-;511:3366;;;;-1:-1:-1;;;;;511:3366:120;;;;;3323:33;;;:86;;511:3366;3323:135;;;511:3366;3304:154;;511:3366;;;;;;;;3323:135;511:3366;3425:13;;;511:3366;3442:16;;511:3366;-1:-1:-1;;;;;511:3366:120;;;;;3425:33;;-1:-1:-1;3323:135:120;;;;:86;3372:15;;;511:3366;3391:18;;;511:3366;3372:37;;-1:-1:-1;3323:86:120;;786:58:60;824:20;;;511:3366:120;824:20:60;511:3366:120;;824:20:60;721:55;759:17;;;511:3366:120;759:17:60;511:3366:120;;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1012:55;1052:15;;;511:3366:120;1052:15:60;511:3366:120;;1052:15:60;511:3366:120;;3045:39:9;511:3366:120;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;511:3366:120;;;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;-1:-1:-1;;;;;511:3366:120;;;;3834:34;511:3366;;;;;;;;:::i;:::-;;;:::i;:::-;;3834:34;;;;:::i;:::-;511:3366;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:61;;511:3366:120;;;2392:23:61;;511:3366:120;;;2392:23:61;511:3366:120;;;;;;2392:3:61;511:3366:120;2392:23:61;;;;;;;511:3366:120;2392:23:61;;;511:3366:120;2429:19:61;511:3366:120;2429:19:61;;511:3366:120;2452:18:61;2429:41;2425:87;;3649:46:120;511:3366;;3660:16;;;511:3366;;;;3649:46;;;;;;:::i;2425:87:61:-;2491:21;;;511:3366:120;2491:21:61;511:3366:120;;2491:21:61;2392:23;;;;;511:3366:120;2392:23:61;;;;;;:::i;:::-;;;511:3366:120;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:61;;;;511:3366:120;;;;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;-1:-1:-1;;;;;511:3366:120;;;;724:142:63;511:3366:120;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;511:3366:120:-;;;;;;-1:-1:-1;;511:3366:120;;;;1341:145;1308:16;511:3366;;1308:16;;;;;;;:::i;:::-;;1055:104:6;;1308:16:120;;;;;;:::i;:::-;511:3366;;;;;;;;;1341:145;;1418:10;;;1341:145;511:3366;1341:145;;;:::i;:::-;;:4;511:3366;1341:4;:145;;;;;;511:3366;1341:145;;;511:3366;1308:16;511:3366;;;;;;;1341:145;;1308:16;1341:145;;1308:16;1341:145;;;;;;511:3366;1341:145;;;:::i;:::-;;;511:3366;;;;1308:16;511:3366;;1341:145;;;;;-1:-1:-1;1341:145:120;;511:3366;;1442:1461:9;511:3366:120;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;511:3366:120:-;;;;;-1:-1:-1;;511:3366:120;;;;;;;-1:-1:-1;511:3366:120;;;;:::i;:::-;;;;-1:-1:-1;;;;;511:3366:120;;;;;;1685:16;511:3366;;;1685:16;;;;;;;:::i;:::-;1718:139;511:3366;;;;;;;;;;1718:139;;511:3366;1718:139;;;:::i;511:3366::-;;;;;;-1:-1:-1;;511:3366:120;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;511:3366:120;1497:44:61;;511:3366:120;;;1497:44:61;511:3366:120;;;;;;1497:14:61;511:3366:120;1497:44:61;;;;;;511:3366:120;1497:44:61;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;511:3366:120;1497:44:61;;;;;;:::i;:::-;;;511:3366:120;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;511:3366:120;;;;;;-1:-1:-1;;511:3366:120;;;;;;;542:43:61;511:3366:120;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;1055:104:6;;511:3366:120;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;511:3366:120;;;;;;;;;;;;1055:104:6;;;511:3366:120;;;;-1:-1:-1;;;511:3366:120;;;;;;;;;;;;;;;;;-1:-1:-1;;;511:3366:120;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;511:3366:120;;;;;1055:104:6;511:3366:120;;1055:104:6;511:3366:120;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:3366:120;;;;;;;;-1:-1:-1;;511:3366:120;;;;:::o;:::-;;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;511:3366:120;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o;:::-;;-1:-1:-1;;511:3366:120;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;-1:-1:-1;;511:3366:120;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;:::o;:::-;;;;-1:-1:-1;511:3366:120;;;;;-1:-1:-1;511:3366:120;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;:::o;:::-;;;1055:104:6;;511:3366:120;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;:::o;:::-;-1:-1:-1;;;;;511:3366:120;;;;;;-1:-1:-1;;511:3366:120;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;511:3366:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;511:3366:120;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;511:3366:120;;;;;;;;;;;;;4064:22:9;;;;4060:87;;511:3366:120;;;;;;;;;;;;;;4274:33:9;511:3366:120;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;511:3366:120;;3896:19:9;511:3366:120;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;511:3366:120;;;;3881:1:9;511:3366:120;;;;;3881:1:9;511:3366:120;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;511:3366:120;;;;;;;:::i;:::-;-1:-1:-1;511:3366:120;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;879:385:63:-;;;;;;;2051:68:120;;;;;;:::i;:::-;511:3366;;;;-1:-1:-1;511:3366:120;;;;;;;2279:20;;;;511:3366;;;;;;;;;2317:22;;;;511:3366;;;2196:157;;;;;;2279:20;511:3366;;;;;;;;;2196:157;;511:3366;;;;;;;2196:157;;;;;511:3366;;;;;;;;;2196:157;;-1:-1:-1;2196:157:120;;;;;;;;;879:385:63;-1:-1:-1;2180:439:120;;511:3366;;;;;;2279:20;511:3366;-1:-1:-1;;;2435:173:120;;-1:-1:-1;;;;;511:3366:120;;;2196:157;2435:173;;511:3366;;;;;;;;;;;;;;;2196:157;511:3366;;;2435:173;;;2180:439;;;;;;;;;511:3366;2180:439;;;511:3366;;;:::i;:::-;;2279:20;511:3366;;;;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;-1:-1:-1;;;;;511:3366:120;2279:20;511:3366;;;;;;;;;;;;2317:22;1914:299:61;;511:3366:120;2076:4:61;2279:20:120;1914:299:61;;511:3366:120;;1914:299:61;;511:3366:120;1914:299:61;;;511:3366:120;1914:299:61;;;;511:3366:120;2279:20;511:3366;2279:20;511:3366;;;;;-1:-1:-1;;;;;511:3366:120;;;;;;2317:22;511:3366;2279:20;511:3366;1868:18:61;511:3366:120;;1819:413:61;;;511:3366:120;;;2279:20;511:3366;;;;;;;;1791:455:61;;;2196:157:120;1791:455:61;;511:3366:120;;;;;;;2279:20;511:3366;;;;;;;;;;;;2196:157;511:3366;;;-1:-1:-1;;;;;511:3366:120;;;;;;;;;2279:20;511:3366;;;;;;;;;;;;;;;;;1914:299:61;511:3366:120;1914:299:61;511:3366:120;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;511:3366:120;;1791:3:61;-1:-1:-1;;;;;511:3366:120;1791:455:61;;;;;;;;;;;2180:439:120;1150:55:63;2804:27:120;1150:55:63;2804:27:120;;;879:385:63:o;1791:455:61:-;;;2317:22:120;1791:455:61;;2317:22:120;1791:455:61;;;;;;511:3366:120;1791:455:61;;;:::i;:::-;;;511:3366:120;;;;;1791:455:61;;;;;;-1:-1:-1;1791:455:61;;;2279:20:120;511:3366;;;;;;;;;-1:-1:-1;;;511:3366:120;;;2196:157;511:3366;;;;;-1:-1:-1;;;511:3366:120;;;2196:157;511:3366;;;;2196:157;;;;;-1:-1:-1;2196:157:120;;:::i;:::-;-1:-1:-1;2196:157:120;;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;511:3366:120;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;511:3366:120;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;511:3366:120;;-1:-1:-1;;;1033:111:50;;;;511:3366:120;1033:111:50;511:3366:120;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;511:3366:120;;;;26127:66:57;;26014:100;26027:7;26098:1;511:3366:120;;;;26014:100:57;;;25901;25914:7;25985:1;511:3366:120;;;;25901:100:57;;;25788;25801:7;25872:1;511:3366:120;;;;25788:100:57;;;25672:103;25685:8;25758:2;511:3366:120;;;;25672:103:57;;;25556;25569:8;25642:2;511:3366:120;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;511:3366:120;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;511:3366:120;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;511:3366:120;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;511:3366:120:-;;;-1:-1:-1;;;;;511:3366:120;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2452,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2495,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2538,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 4873,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2070,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1181,
          "length": 32
        },
        {
          "start": 4288,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 600,
          "length": 32
        },
        {
          "start": 1237,
          "length": 32
        },
        {
          "start": 2020,
          "length": 32
        },
        {
          "start": 2386,
          "length": 32
        },
        {
          "start": 4115,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,address))": "9b28978c",
    "doObligationFor((address,uint256,address),address,address)": "88d8b7e2",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC721PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC721PaymentObligation.sol":"ERC721PaymentObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019","license":"UNLICENSED","urls":["bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e","dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC721TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "payment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PaymentMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC721PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC721PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC721PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC721PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC721PaymentObligation.sol": "ERC721PaymentObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        "keccak256": "0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019",
        "urls": [
          "bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e",
          "dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 120
};

// src/contracts/IERC721.ts
var abi44 = {
  "abi": [
    {
      "type": "function",
      "name": "approve",
      "inputs": [
        {
          "name": "_approved",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getApproved",
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isApprovedForAll",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_operator",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "ownerOf",
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "setApprovalForAll",
      "inputs": [
        {
          "name": "_operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_approved",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceID",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferFrom",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "event",
      "name": "Approval",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_approved",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ApprovalForAll",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_operator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_approved",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Transfer",
      "inputs": [
        {
          "name": "_from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "getApproved(uint256)": "081812fc",
    "isApprovedForAll(address,address)": "e985e9c5",
    "ownerOf(uint256)": "6352211e",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721 Note: the ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"details":"This emits when the approved address for an NFT is changed or reaffirmed. The zero address indicates there is no approved address. When a Transfer event emits, this also indicates that the approved address for that NFT (if any) is reset to none."},"ApprovalForAll(address,address,bool)":{"details":"This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner."},"Transfer(address,address,uint256)":{"details":"This emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any number of NFTs may be created and assigned without emitting Transfer. At the time of any transfer, the approved address for that NFT (if any) is reset to none."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.","params":{"_approved":"The new approved NFT controller","_tokenId":"The NFT to approve"}},"balanceOf(address)":{"details":"NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","params":{"_owner":"An address for whom to query the balance"},"returns":{"_0":"The number of NFTs owned by `_owner`, possibly zero"}},"getApproved(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"The NFT to find the approved address for"},"returns":{"_0":"The approved address for this NFT, or the zero address if there is none"}},"isApprovedForAll(address,address)":{"params":{"_operator":"The address that acts on behalf of the owner","_owner":"The address that owns the NFTs"},"returns":{"_0":"True if `_operator` is an approved operator for `_owner`, false otherwise"}},"ownerOf(uint256)":{"details":"NFTs assigned to zero address are considered invalid, and queries about them do throw.","params":{"_tokenId":"The identifier for an NFT"},"returns":{"_0":"The address of the owner of the NFT"}},"safeTransferFrom(address,address,uint256)":{"details":"This works identically to the other function with an extra data parameter, except this function just sets data to \\"\\".","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\\"onERC721Received(address,address,uint256,bytes)\\"))`.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer","data":"Additional data with no specified format, sent in call to `_to`"}},"setApprovalForAll(address,bool)":{"details":"Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.","params":{"interfaceID":"The interface identifier, as specified in ERC-165"},"returns":{"_0":"`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise"}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}}},"title":"ERC-721 Non-Fungible Token Standard","version":1},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Change or reaffirm the approved address for an NFT"},"balanceOf(address)":{"notice":"Count all NFTs assigned to an owner"},"getApproved(uint256)":{"notice":"Get the approved address for a single NFT"},"isApprovedForAll(address,address)":{"notice":"Query if an address is an authorized operator for another address"},"ownerOf(uint256)":{"notice":"Find the owner of an NFT"},"safeTransferFrom(address,address,uint256)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\\"operator\\") to manage all of `msg.sender`\'s assets"},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"},"transferFrom(address,address,uint256)":{"notice":"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST"}},"version":1}},"settings":{"compilationTarget":{"lib/forge-std/src/interfaces/IERC721.sol":"IERC721"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/forge-std/src/interfaces/IERC165.sol":{"keccak256":"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600","license":"MIT","urls":["bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc","dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT"]},"lib/forge-std/src/interfaces/IERC721.sol":{"keccak256":"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15","license":"MIT","urls":["bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f","dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceID",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "transferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.",
            "params": {
              "_approved": "The new approved NFT controller",
              "_tokenId": "The NFT to approve"
            }
          },
          "balanceOf(address)": {
            "details": "NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
            "params": {
              "_owner": "An address for whom to query the balance"
            },
            "returns": {
              "_0": "The number of NFTs owned by `_owner`, possibly zero"
            }
          },
          "getApproved(uint256)": {
            "details": "Throws if `_tokenId` is not a valid NFT.",
            "params": {
              "_tokenId": "The NFT to find the approved address for"
            },
            "returns": {
              "_0": "The approved address for this NFT, or the zero address if there is none"
            }
          },
          "isApprovedForAll(address,address)": {
            "params": {
              "_operator": "The address that acts on behalf of the owner",
              "_owner": "The address that owns the NFTs"
            },
            "returns": {
              "_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
            }
          },
          "ownerOf(uint256)": {
            "details": "NFTs assigned to zero address are considered invalid, and queries about them do throw.",
            "params": {
              "_tokenId": "The identifier for an NFT"
            },
            "returns": {
              "_0": "The address of the owner of the NFT"
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": 'This works identically to the other function with an extra data parameter, except this function just sets data to "".',
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_tokenId": "The NFT to transfer"
            }
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": 'Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.',
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_tokenId": "The NFT to transfer",
              "data": "Additional data with no specified format, sent in call to `_to`"
            }
          },
          "setApprovalForAll(address,bool)": {
            "details": "Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.",
            "params": {
              "_approved": "True if the operator is approved, false to revoke approval",
              "_operator": "Address to add to the set of authorized operators"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Interface identification is specified in ERC-165. This function uses less than 30,000 gas.",
            "params": {
              "interfaceID": "The interface identifier, as specified in ERC-165"
            },
            "returns": {
              "_0": "`true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise"
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.",
            "params": {
              "_from": "The current owner of the NFT",
              "_to": "The new owner",
              "_tokenId": "The NFT to transfer"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "approve(address,uint256)": {
            "notice": "Change or reaffirm the approved address for an NFT"
          },
          "balanceOf(address)": {
            "notice": "Count all NFTs assigned to an owner"
          },
          "getApproved(uint256)": {
            "notice": "Get the approved address for a single NFT"
          },
          "isApprovedForAll(address,address)": {
            "notice": "Query if an address is an authorized operator for another address"
          },
          "ownerOf(uint256)": {
            "notice": "Find the owner of an NFT"
          },
          "safeTransferFrom(address,address,uint256)": {
            "notice": "Transfers the ownership of an NFT from one address to another address"
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "notice": "Transfers the ownership of an NFT from one address to another address"
          },
          "setApprovalForAll(address,bool)": {
            "notice": 'Enable or disable approval for a third party ("operator") to manage all of `msg.sender`\'s assets'
          },
          "supportsInterface(bytes4)": {
            "notice": "Query if a contract implements an interface"
          },
          "transferFrom(address,address,uint256)": {
            "notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/forge-std/src/interfaces/IERC721.sol": "IERC721"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/forge-std/src/interfaces/IERC165.sol": {
        "keccak256": "0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600",
        "urls": [
          "bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc",
          "dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/interfaces/IERC721.sol": {
        "keccak256": "0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15",
        "urls": [
          "bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f",
          "dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 28
};

// src/clients/erc721.ts
var erc721EscrowDecodeFunction = (0, import_viem7.getAbiItem)({
  abi: abi39.abi,
  name: "decodeObligationData"
});
var erc721PaymentDecodeFunction = (0, import_viem7.getAbiItem)({
  abi: abi43.abi,
  name: "decodeObligationData"
});
var erc721EscrowObligationDataType2 = erc721EscrowDecodeFunction.outputs[0];
var erc721PaymentObligationDataType = erc721PaymentDecodeFunction.outputs[0];
var makeErc721Client = (viemClient, addresses) => {
  const encodeEscrowObligationRaw = (data) => {
    return (0, import_viem7.encodeAbiParameters)([erc721EscrowObligationDataType2], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return (0, import_viem7.encodeAbiParameters)([erc721PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC721EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC721 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        token: token.address,
        tokenId: token.id,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes ERC721PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC721 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        tokenId: token.id,
        payee
      });
    },
    /**
     * Decodes ERC721EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return (0, import_viem7.decodeAbiParameters)([erc721EscrowObligationDataType2], obligationData)[0];
    },
    /**
     * Decodes ERC721PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return (0, import_viem7.decodeAbiParameters)([erc721PaymentObligationDataType], obligationData)[0];
    },
    /**
     * Approves a specific token for trading
     * @param token - Token details including address and id
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approve: async (token, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token.address,
        abi: abi44.abi,
        functionName: "approve",
        args: [to, token.id]
      });
      return hash;
    },
    /**
     * Approves all tokens from a contract for trading
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approveAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi44.abi,
        functionName: "setApprovalForAll",
        args: [to, true]
      });
      return hash;
    },
    /**
     * Revokes approval for all tokens from a contract
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval to revoke (escrow or payment)
     * @returns Transaction hash
     */
    revokeAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc721EscrowObligation : addresses.erc721PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi44.abi,
        functionName: "setApprovalForAll",
        args: [to, false]
      });
      return hash;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC721 tokens for a custom demand
     * @param price - ERC721 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyWithErc721(
     *   { address: nft, id: 1n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc721: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721EscrowObligation,
        abi: abi39.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC721 tokens
     * @param price - ERC721 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payWithErc721(
     *   { address: nft, id: 1n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc721: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721PaymentObligation,
        abi: abi43.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC721 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc721ForErc721(
     *   { address: myNft, id: 1n },
     *   { address: theirNft, id: 2n },
     *   0n,
     * );
     * ```
     */
    buyErc721ForErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc721ForErc721",
        args: [bid.address, bid.id, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC721 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc721(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc721",
        args: [buyAttestation]
      });
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      return { hash };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC20 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc20WithErc721(
     *   { address: nft, id: 1n },
     *   { address: usdc, value: 1000n },
     *   0n,
     * );
     * ```
     */
    buyErc20WithErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc20WithErc721",
        args: [bid.address, bid.id, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for ERC1155 tokens
     * @param bid - ERC721 token offered
     * @param ask - ERC1155 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyErc1155WithErc721(
     *   { address: nft, id: 1n },
     *   { address: multiToken, id: 2n, value: 5n },
     *   0n,
     * );
     * ```
     */
    buyErc1155WithErc721: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyErc1155WithErc721",
        args: [bid.address, bid.id, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForErc1155(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForErc1155",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC721 tokens for a bundle of tokens
     * @param bid - ERC721 token offered
     * @param ask - Bundle of tokens requested
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc721.buyBundleWithErc721(
     *   { address: nft, id: 1n },
     *   tokenBundle,
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc721: async (bid, ask, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "buyBundleWithErc721",
        args: [bid.address, bid.id, { ...flattenTokenBundle(ask), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-Bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc721.payErc721ForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc721ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc721BarterUtils,
        abi: abi42.abi,
        functionName: "payErc721ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/erc1155.ts
var import_viem8 = require("viem");

// src/contracts/ERC1155BarterCrossToken.ts
var abi45 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_erc20Escrow",
          "type": "address",
          "internalType": "contract ERC20EscrowObligation"
        },
        {
          "name": "_erc20Payment",
          "type": "address",
          "internalType": "contract ERC20PaymentObligation"
        },
        {
          "name": "_erc721Escrow",
          "type": "address",
          "internalType": "contract ERC721EscrowObligation"
        },
        {
          "name": "_erc721Payment",
          "type": "address",
          "internalType": "contract ERC721PaymentObligation"
        },
        {
          "name": "_erc1155Escrow",
          "type": "address",
          "internalType": "contract ERC1155EscrowObligation"
        },
        {
          "name": "_erc1155Payment",
          "type": "address",
          "internalType": "contract ERC1155PaymentObligation"
        },
        {
          "name": "_bundleEscrow",
          "type": "address",
          "internalType": "contract TokenBundleEscrowObligation"
        },
        {
          "name": "_bundlePayment",
          "type": "address",
          "internalType": "contract TokenBundlePaymentObligation"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyBundleWithErc1155",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askData",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation.ObligationData",
          "components": [
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc1155ForErc1155",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc20WithErc1155",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyErc721WithErc1155",
      "inputs": [
        {
          "name": "bidToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "bidTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bidAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "askToken",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "askTokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc1155ForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc1155ForErc1155",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc1155ForErc20",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payErc1155ForErc721",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "error",
      "name": "CouldntCollectEscrow",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "892:6105:83:-:0;;;;;;;;;;;;;-1:-1:-1;;892:6105:83;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;-1:-1:-1;892:6105:83;;;-1:-1:-1;892:6105:83;;;;;;;758:30:84;892:6105:83;;;758:30:84;892:6105:83;;;;;;;798:32:84;892:6105:83;;;798:32:84;892:6105:83;;;;;;;1757:26;892:6105;;;1757:26;892:6105;;;;;;;1793:28;892:6105;;;1793:28;892:6105;;;;;;;1831:28;892:6105;;;1831:28;892:6105;;;;;;;1869:30;892:6105;;;1869:30;892:6105;;;;;;;1909:28;892:6105;;;1909:28;892:6105;;;;;;;1947:30;892:6105;;;1947:30;892:6105;;;;;;;;;;;-1:-1:-1;892:6105:83;;;;;;-1:-1:-1;892:6105:83;;;;;-1:-1:-1;892:6105:83",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610012575f80fd5b5f3560e01c90816301d71c0f14610b51575080631fa56b2014610b1357806333666e5f1461095e57806336bdb00c146107c35780636d1d261f146106e257806378a56f8f14610570578063af808a2a1461040b5763d7452d9014610074575f80fd5b346103895760203660031901126103895760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa801561039557610120915f916103e9575b50015190815182016020810192602081830312610389576020810151906001600160401b0382116103895701906101209082900312610389576040519261012084018481106001600160401b038211176103d55760405261012260208301610d57565b845260408201516001600160401b0381116103895781602061014692850101610d78565b906020850191825260608301516001600160401b03811161038957816020610170928601016110c8565b604086015260808301516001600160401b038111610389578160206101979286010161112d565b606086015260a08301516001600160401b038111610389578160206101be928601016110c8565b608086015260c08301516001600160401b038111610389578160206101e59286010161112d565b60a086015260e08301516001600160401b0381116103895781602061020c928601016110c8565b60c08601526101008301516001600160401b038111610389578160206102349286010161112d565b60e0860152610120830151916001600160401b038311610389575f9561010061026961027b9460206102e0978199010161112d565b91015251838082518301019101610f39565b60025460408051633785506f60e11b815283516001600160a01b0390811660048301526020850151602483015291840151604482015260609093015181166064840152336084840181905260a4840152919586939290911691839190829060c4820190565b03925af1918215610395575f926103a0575b50600754604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610395575f91610357575b501561034857602090604051908152f35b63a97a981d60e01b5f5260045ffd5b90506020813d60201161038d575b8161037260209383610d22565b810103126103895761038390610d6b565b5f610337565b5f80fd5b3d9150610365565b6040513d5f823e3d90fd5b9091506020813d6020116103cd575b816103bc60209383610d22565b8101031261038957519060206102f2565b3d91506103af565b634e487b7160e01b5f52604160045260245ffd5b61040591503d805f833e6103fd8183610d22565b810190610dcd565b5f6100bf565b346103895760203660031901126103895760246004355f60018060a01b03815416604051938480926328c44a9960e21b82528560048301525afa80156103955761048561027b602061047561012082955f988991610556575b500151828082518301019101610eb9565b0151838082518301019101610f39565b03925af1918215610395575f92610521575b5060205f91604460018060a01b0360045416916040519485938492632c713cd960e01b845260048401528760248401525af1908115610395575f916104e757501561034857602090604051908152f35b90506020813d602011610519575b8161050260209383610d22565b810103126103895761051390610d6b565b82610337565b3d91506104f5565b9091506020813d60201161054e575b8161053d60209383610d22565b810103126103895751906020610497565b3d9150610530565b61056a91503d808b833e6103fd8183610d22565b89610464565b346103895760e036600319011261038957610589610c51565b6064356001600160a01b038116908190036103895760c4356001600160401b038116810361038957600154600254604051610693956020956001600160a01b0394851694909316929091906105dd82610d07565b81526084358682015260a4356040820152336060820152610633604051918783019060609060018060a01b03815116835260208101516020840152604081015160408401528160018060a01b0391015116910152565b6080815261064260a082610d22565b6040519261064f84610cec565b83528583015260018060a01b03166040820152602435606082015260443560808201525f6040518096819582946303dc9f3560e41b84523391339160048601610f83565b03925af18015610395575f906106af575b602090604051908152f35b506020813d6020116106da575b816106c960209383610d22565b8101031261038957602090516106a4565b3d91506106bc565b346103895761069360206106f536610c7b565b60015460035460405192976001600160a01b0392831697929091169594919390929161072083610cd1565b60018060a01b0316825288820152336040820152610769604051918983019060409060018060a01b038151168352602081015160208401528160018060a01b0391015116910152565b60608152610778608082610d22565b6040519461078586610cec565b85528785015260018060a01b03166040840152606083015260808201525f6040518096819582946303dc9f3560e41b84523391339160048601610f83565b346103895760a0366003190112610389576107dc610c51565b606435906001600160401b0382116103895781600401610100600319843603011261038957608435906001600160401b0382168203610389576106939360209361093361064260018060a01b03600154169460018060a01b0360085416946040519384928a808501526109206109156108f66108d76108b861089961087a8a604061010061086a8b8061101a565b92909301526101408d019161104e565b61088760248b018961101a565b8c8303603f190160608e01529061108d565b6108a660448a018861101a565b8b8303603f190160808d01529061104e565b6108c5606489018761101a565b8a8303603f190160a08c01529061108d565b6108e4608488018661101a565b898303603f190160c08b01529061104e565b61090360a487018561101a565b888303603f190160e08a01529061108d565b9160c485019061101a565b858303603f19016101008701529061108d565b906001600160a01b03906109499060e401610c67565b1661012083015203601f198101835282610d22565b346103895760203660031901126103895760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa801561039557610120915f91610af9575b500151908151820191602081840312610389576020810151906001600160401b03821161038957019160a08382031261038957604051906109e982610cec565b6109f560208501610d57565b825260408401516001600160401b038111610389575f94602093608060a0610a2a61027b958880610a5d990191870101610d78565b938488850152610a3c60608201610d57565b60408501528281015160608501520151910152838082518301019101610f39565b03925af1918215610395575f92610ac4575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610395575f916104e757501561034857602090604051908152f35b9091506020813d602011610af1575b81610ae060209383610d22565b810103126103895751906020610a6f565b3d9150610ad3565b610b0d91503d805f833e6103fd8183610d22565b836109a9565b34610389576106936020610b2636610c7b565b60015460065460405192976001600160a01b0392831697929091169594919390929161072083610cd1565b34610389576020366003190112610389576004355f8260248160018060a01b038454166328c44a9960e21b82528560048301525afa801561039557610bb561027b602061047561012082955f98899161055657500151828082518301019101610eb9565b03925af1918215610395575f92610c1c575b50600554604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610395575f916104e757501561034857602090604051908152f35b9091506020813d602011610c49575b81610c3860209383610d22565b810103126103895751906020610bc7565b3d9150610c2b565b600435906001600160a01b038216820361038957565b35906001600160a01b038216820361038957565b60c0906003190112610389576004356001600160a01b0381168103610389579060243590604435906064356001600160a01b038116810361038957906084359060a4356001600160401b03811681036103895790565b606081019081106001600160401b038211176103d557604052565b60a081019081106001600160401b038211176103d557604052565b608081019081106001600160401b038211176103d557604052565b90601f801991011681019081106001600160401b038211176103d557604052565b51906001600160401b038216820361038957565b51906001600160a01b038216820361038957565b5190811515820361038957565b81601f82011215610389578051906001600160401b0382116103d55760405192610dac601f8401601f191660200185610d22565b8284526020838301011161038957815f9260208093018386015e8301015290565b602081830312610389578051906001600160401b038211610389570161014081830312610389576040519161014083018381106001600160401b038211176103d5576040528151835260208201516020840152610e2c60408301610d43565b6040840152610e3d60608301610d43565b6060840152610e4e60808301610d43565b608084015260a082015160a0840152610e6960c08301610d57565b60c0840152610e7a60e08301610d57565b60e0840152610e8c6101008301610d6b565b6101008401526101208201516001600160401b03811161038957610eb09201610d78565b61012082015290565b602081830312610389578051906001600160401b0382116103895701906080828203126103895760405191610eed83610d07565b610ef681610d57565b835260208101516001600160401b03811161038957606092610f19918301610d78565b6020840152610f2a60408201610d57565b60408401520151606082015290565b9081608091031261038957610f7b606060405192610f5684610d07565b610f5f81610d57565b8452602081015160208501526040810151604085015201610d57565b606082015290565b926001600160401b036101406020608060609699989581895260018060a01b03815116828a01528281015160a0808b01528051938491826101208d015201858b015e5f84848b01015260018060a01b0360408201511660c08a01528781015160e08a01520151610100880152601f80199101168601019616602085015260018060a01b0316604084015260018060a01b0316910152565b9035601e19823603018112156103895701602081359101916001600160401b038211610389578160051b3603831361038957565b916020908281520191905f5b8181106110675750505090565b909192602080600192838060a01b0361107f88610c67565b16815201940192910161105a565b81835290916001600160fb1b0383116103895760209260051b809284830137010190565b6001600160401b0381116103d55760051b60200190565b9080601f830112156103895781516110df816110b1565b926110ed6040519485610d22565b81845260208085019260051b82010192831161038957602001905b8282106111155750505090565b6020809161112284610d57565b815201910190611108565b9080601f83011215610389578151611144816110b1565b926111526040519485610d22565b81845260208085019260051b82010192831161038957602001905b82821061117a5750505090565b815181526020918201910161116d56fea2646970667358221220c018f4506999bca43de0e6089f44d669d2b7eee288522f38dd96bdd046ccf4a164736f6c634300081b0033",
    "sourceMap": "892:6105:83:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3495:207;892:6105;3495:207;;;892:6105;;;;;;;;;;2563:204;892:6105;2563:204;;;892:6105;;;;;;;;;;;;;;;;;;-1:-1:-1;;892:6105:83;;;;;;6322:34;892:6105;;;;;;;;;;;;;;;;;;6322:34;;;892:6105;6322:34;;892:6105;6322:34;;;;;;6453:8;6322:34;892:6105;6322:34;;;892:6105;6453:8;;;892:6105;;;6429:79;;892:6105;6429:79;;892:6105;;;;;;;;;6429:79;;892:6105;;-1:-1:-1;;;;;892:6105:83;;;;;;6453:8;892:6105;;;;;;;;;;6453:8;892:6105;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;:::i;:::-;;;;;6453:8;892:6105;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;6574:106;892:6105;;6717:108;892:6105;;;;;;:::i;:::-;;;;6598:17;892:6105;;;;6574:106;;;;;;:::i;:::-;6717:14;892:6105;;;;-1:-1:-1;;;6717:108:83;;892:6105;;-1:-1:-1;;;;;892:6105:83;;;;6717:108;;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;6781:10;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6717:108;;;;;;;;;;892:6105;6717:108;;;892:6105;-1:-1:-1;6841:12:83;892:6105;;;-1:-1:-1;;;6841:59:83;;892:6105;6841:59;;892:6105;;;;6322:34;892:6105;;;;;;;;;6841:59;;892:6105;;;;-1:-1:-1;;;;;892:6105:83;6841:59;;;;;;;892:6105;6841:59;;;892:6105;6840:60;;6836:120;;892:6105;;;;;;;;6836:120;6115:22;;;892:6105;6923:22;892:6105;;6923:22;6841:59;;;892:6105;6841:59;;892:6105;6841:59;;;;;;892:6105;6841:59;;;:::i;:::-;;;892:6105;;;;;;;:::i;:::-;6841:59;;;892:6105;;;;6841:59;;;-1:-1:-1;6841:59:83;;;892:6105;;;;;;;;;6717:108;;;;892:6105;6717:108;;892:6105;6717:108;;;;;;892:6105;6717:108;;;:::i;:::-;;;892:6105;;;;;;;6717:108;;;;;-1:-1:-1;6717:108:83;;892:6105;;;;;;;;;6322:34;892:6105;;6322:34;;;;;;892:6105;6322:34;;;;;;:::i;:::-;;;;;:::i;:::-;;;;892:6105;;;;;;-1:-1:-1;;892:6105:83;;;;4687:34;892:6105;;;;;;;;;;;;;;;;;;;;4687:34;;;892:6105;4687:34;;892:6105;4687:34;;;;;;5091:108;4948:106;892:6105;4788:94;4812:8;4687:34;;892:6105;4687:34;;;;;892:6105;4812:8;;;892:6105;;;;4788:94;;;;;;:::i;:::-;4972:17;;892:6105;;;;4948:106;;;;;;:::i;5091:108::-;;;;;;;;;;892:6105;5091:108;;;892:6105;;;;;5215:58;892:6105;;;;;;;;;;;;;;;;;;;5215:58;;892:6105;5215:58;;892:6105;;4687:34;892:6105;;;5215:58;;;;;;;892:6105;5215:58;;;5214:59;;5210:119;;892:6105;;;;;;;;5215:58;;;892:6105;5215:58;;892:6105;5215:58;;;;;;892:6105;5215:58;;;:::i;:::-;;;892:6105;;;;;;;:::i;:::-;5215:58;;;;;;-1:-1:-1;5215:58:83;;5091:108;;;;892:6105;5091:108;;892:6105;5091:108;;;;;;892:6105;5091:108;;;:::i;:::-;;;892:6105;;;;;;;5091:108;;;;;-1:-1:-1;5091:108:83;;4687:34;;;;;;;;;;;;;:::i;:::-;;;;892:6105;;;;;;-1:-1:-1;;892:6105:83;;;;;;:::i;:::-;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;1362:14:84;892:6105:83;;;1120:712:84;;892:6105:83;;-1:-1:-1;;;;;892:6105:83;;;;;;;;1120:712:84;;892:6105:83;;;;:::i;:::-;;;;;1443:250:84;;;892:6105:83;;;;1443:250:84;;892:6105:83;1656:10:84;892:6105:83;1443:250:84;;892:6105:83;;;;1407:308:84;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1407:308:84;;;892:6105:83;1407:308:84;;:::i;:::-;892:6105:83;;;;;;:::i;:::-;;;1167:567:84;;;892:6105:83;;;;;;;;1167:567:84;;892:6105:83;;;;1167:567:84;;892:6105:83;;;;1167:567:84;;892:6105:83;;;;;;;;;;;;;1120:712:84;;1656:10;;;1120:712;892:6105:83;1120:712:84;;;:::i;:::-;;;;;;;;;892:6105:83;1120:712:84;;;892:6105:83;;;;;;;;;1120:712:84;;892:6105:83;1120:712:84;;892:6105:83;1120:712:84;;;;;;892:6105:83;1120:712:84;;;:::i;:::-;;;892:6105:83;;;;;;;1120:712:84;;;;;-1:-1:-1;1120:712:84;;892:6105:83;;;;2242:664;2563:204;892:6105;;;:::i;:::-;;;2484:12;892:6105;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2563:204;;;892:6105;2730:10;892:6105;2563:204;;892:6105;;;;2527:262;;;;892:6105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2527:262;;;;;;:::i;:::-;892:6105;;;;;;:::i;:::-;;;2289:519;;;892:6105;;;;;;;;2289:519;;892:6105;;2289:519;;892:6105;2527:262;2289:519;;892:6105;;;;;;;;;;;;;2242:664;;2730:10;;;2242:664;892:6105;2242:664;;;:::i;892:6105::-;;;;;;-1:-1:-1;;892:6105:83;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;4124:422;892:6105;;;;4410:19;892:6105;;;;;;;;;;;;;;4366:13;892:6105;;;;;4410:19;;;;;;;892:6105;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;892:6105:83;;;;;;;:::i;:::-;;-1:-1:-1;;;;;892:6105:83;;;;;;:::i;:::-;;;;;;4410:19;892:6105;;4410:19;;;;;;:::i;892:6105::-;;;;;;-1:-1:-1;;892:6105:83;;;;;;2964:34:84;892:6105:83;;;;;;;;;;;;;;;;;;2964:34:84;;;892:6105:83;2964:34:84;;892:6105:83;2964:34:84;;;;;;3091:8;2964:34;892:6105:83;2964:34:84;;;892:6105:83;3091:8:84;;;892:6105:83;;;3067:96:84;;892:6105:83;;;;;;;;;3067:96:84;;892:6105:83;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;3067:96:84;892:6105:83;3067:96:84;892:6105:83;;;3229:106:84;3067:96;;;2040:108;3067:96;;892:6105:83;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;3229:106:84;;;;;;:::i;2040:108::-;;;;;;;;;;892:6105:83;2040:108:84;;;892:6105:83;-1:-1:-1;892:6105:83;;;;-1:-1:-1;;;2164:60:84;;892:6105:83;2164:60:84;;892:6105:83;;;;2964:34:84;892:6105:83;;;;;;;;;2164:60:84;;892:6105:83;;;;-1:-1:-1;;;;;892:6105:83;2164:60:84;;;;;;;892:6105:83;2164:60:84;;;2163:61;;2159:121;;892:6105:83;;;;;;;;2040:108:84;;;;892:6105:83;2040:108:84;;892:6105:83;2040:108:84;;;;;;892:6105:83;2040:108:84;;;:::i;:::-;;;892:6105:83;;;;;;;2040:108:84;;;;;-1:-1:-1;2040:108:84;;2964:34;;;;;;892:6105:83;2964:34:84;;;;;;:::i;:::-;;;;892:6105:83;;;;3173:668;3495:207;892:6105;;;:::i;:::-;;;3415:13;892:6105;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;892:6105:83;;;;;;;;5503:34;892:6105;;;;;;;;;;;;5503:34;;;892:6105;5503:34;;892:6105;5503:34;;;;;;5909:108;5766:106;892:6105;5605:95;5629:8;5503:34;;892:6105;5503:34;;;;;5629:8;;;892:6105;;;;5605:95;;;;;;:::i;5909:108::-;;;;;;;;;;892:6105;5909:108;;;892:6105;-1:-1:-1;6033:12:83;892:6105;;;-1:-1:-1;;;6033:59:83;;892:6105;6033:59;;892:6105;;;;5503:34;892:6105;;;;;;;;;6033:59;;892:6105;;;;-1:-1:-1;;;;;892:6105:83;6033:59;;;;;;;892:6105;6033:59;;;6032:60;;6028:120;;892:6105;;;;;;;;5909:108;;;;892:6105;5909:108;;892:6105;5909:108;;;;;;892:6105;5909:108;;;:::i;:::-;;;892:6105;;;;;;;5909:108;;;;;-1:-1:-1;5909:108:83;;892:6105;;;;-1:-1:-1;;;;;892:6105:83;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:83;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:83;;;;;;:::o;:::-;;;-1:-1:-1;;;;;892:6105:83;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;-1:-1:-1;;892:6105:83;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;892:6105:83;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;892:6105:83;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;892:6105:83;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;892:6105:83;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "buyBundleWithErc1155(address,uint256,uint256,(address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "36bdb00c",
    "buyErc1155ForErc1155(address,uint256,uint256,address,uint256,uint256,uint64)": "78a56f8f",
    "buyErc20WithErc1155(address,uint256,uint256,address,uint256,uint64)": "6d1d261f",
    "buyErc721WithErc1155(address,uint256,uint256,address,uint256,uint64)": "1fa56b20",
    "payErc1155ForBundle(bytes32)": "d7452d90",
    "payErc1155ForErc1155(bytes32)": "33666e5f",
    "payErc1155ForErc20(bytes32)": "af808a2a",
    "payErc1155ForErc721(bytes32)": "01d71c0f"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ERC20EscrowObligation","name":"_erc20Escrow","type":"address"},{"internalType":"contract ERC20PaymentObligation","name":"_erc20Payment","type":"address"},{"internalType":"contract ERC721EscrowObligation","name":"_erc721Escrow","type":"address"},{"internalType":"contract ERC721PaymentObligation","name":"_erc721Payment","type":"address"},{"internalType":"contract ERC1155EscrowObligation","name":"_erc1155Escrow","type":"address"},{"internalType":"contract ERC1155PaymentObligation","name":"_erc1155Payment","type":"address"},{"internalType":"contract TokenBundleEscrowObligation","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation.ObligationData","name":"askData","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleWithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askId","type":"uint256"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc1155ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askAmount","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc20WithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bidToken","type":"address"},{"internalType":"uint256","name":"bidTokenId","type":"uint256"},{"internalType":"uint256","name":"bidAmount","type":"uint256"},{"internalType":"address","name":"askToken","type":"address"},{"internalType":"uint256","name":"askTokenId","type":"uint256"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyErc721WithErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc1155","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc20","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payErc1155ForErc721","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ERC1155BarterCrossToken.sol":"ERC1155BarterCrossToken"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d","license":"UNLICENSED","urls":["bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a","dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef","license":"UNLICENSED","urls":["bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf","dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"]},"src/obligations/ERC20EscrowObligation.sol":{"keccak256":"0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67","license":"UNLICENSED","urls":["bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169","dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"]},"src/obligations/ERC20PaymentObligation.sol":{"keccak256":"0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39","license":"UNLICENSED","urls":["bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411","dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"]},"src/obligations/ERC721EscrowObligation.sol":{"keccak256":"0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f","license":"UNLICENSED","urls":["bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f","dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"]},"src/obligations/ERC721PaymentObligation.sol":{"keccak256":"0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019","license":"UNLICENSED","urls":["bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e","dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"]},"src/obligations/TokenBundleEscrowObligation.sol":{"keccak256":"0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f","license":"UNLICENSED","urls":["bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d","dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"]},"src/obligations/TokenBundlePaymentObligation.sol":{"keccak256":"0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5","license":"UNLICENSED","urls":["bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3","dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"]},"src/utils/ERC1155BarterCrossToken.sol":{"keccak256":"0x8e0125f089e8459bd2155aa55e5ceb0fa9df2f53ca09e66443f820db52e3d69b","license":"UNLICENSED","urls":["bzz-raw://995b09ed7bae244b7134bf57d8094fb572b5c646159b4f0fa7089414eb64fc19","dweb:/ipfs/QmZdTrMi7cihuJZyE3Kxag9Zm5UM52A7nToG8Z2q3SexnL"]},"src/utils/ERC1155BarterUtils.sol":{"keccak256":"0xd754c5fadfa23b6a1d7493a9cae0429f520727315118032ef654bc86421dba15","license":"UNLICENSED","urls":["bzz-raw://05c653e4c6c6dc0a789937a1b66f7850c4b1d095ae69304ef3267ee383f82117","dweb:/ipfs/QmXT9z3Xyq6ba27aN6JcZPnqgJf1QKCevVKAjccmTFTFzF"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ERC20EscrowObligation",
              "name": "_erc20Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC20PaymentObligation",
              "name": "_erc20Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC721EscrowObligation",
              "name": "_erc721Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC721PaymentObligation",
              "name": "_erc721Payment",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155EscrowObligation",
              "name": "_erc1155Escrow",
              "type": "address"
            },
            {
              "internalType": "contract ERC1155PaymentObligation",
              "name": "_erc1155Payment",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundleEscrowObligation",
              "name": "_bundleEscrow",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundlePaymentObligation",
              "name": "_bundlePayment",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CouldntCollectEscrow"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "struct TokenBundlePaymentObligation.ObligationData",
              "name": "askData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyBundleWithErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc1155ForErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc20WithErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "bidToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "askToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "askTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyErc721WithErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc1155ForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc1155ForErc1155",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc1155ForErc20",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payErc1155ForErc721",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/utils/ERC1155BarterCrossToken.sol": "ERC1155BarterCrossToken"
      },
      "evmVersion": "cancun",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        "keccak256": "0xf165b0949da505bde9cd545aa33efa2db13c675e5a29f45c9ea66a2a6835c57d",
        "urls": [
          "bzz-raw://447cfe616af420b5cb10f82e24357a17ddf45c486f4a54a3732387e289a9783a",
          "dweb:/ipfs/QmZsB7w1YXScya3L97WqMFNijzBkAEDxsnudB7hdLV5sRd"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        "keccak256": "0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef",
        "urls": [
          "bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf",
          "dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20EscrowObligation.sol": {
        "keccak256": "0xea0a753d1408265a0a25414afb20c82681d4bb9d34238471af4c30c555dbaf67",
        "urls": [
          "bzz-raw://7a259ee4dbb03d35de1190c6e7d8ea5cd20e3941490c398eee8a98dcfac9f169",
          "dweb:/ipfs/Qmc5BtgKF8cL5xwytyombbadyTM5X7Rq3xZ1fC2rQsvX2m"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC20PaymentObligation.sol": {
        "keccak256": "0x89fe431757fdbe4e68bba2b5fc5b2572f1da3decbb99227654f84a8e9a28de39",
        "urls": [
          "bzz-raw://62d54941027cfe4412362defe6f42605b41f5957ba22bc45a9342877d40f5411",
          "dweb:/ipfs/Qmeot3W9Rd1Do4sdfZTm1W3Pw1fe8sXQAFzsZXQniUcCV5"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721EscrowObligation.sol": {
        "keccak256": "0x3fb62073e89a68923ea06b79f75f126d112691b947a7ea3689d8d2fbebe4f50f",
        "urls": [
          "bzz-raw://122c00892e91cb2d2369b13b22b1089b73c5bc8bcc39f59886b34c0c72bee72f",
          "dweb:/ipfs/QmYkyB3z1LXeVgRJYiLaD3k7nhBEiGswuSzSxxVDpjwStF"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC721PaymentObligation.sol": {
        "keccak256": "0xd4932ab574a33c18acd0d5595d785fc6e6de1472cc8a44d76f1c7100269f4019",
        "urls": [
          "bzz-raw://fc2fdccfa311255188fe39d7c51a6e51b956f645bbaa70d423574de6a2aee19e",
          "dweb:/ipfs/QmXPp4EV6RThDA43RympGKNGrqAGqSg6gKbPRZBqTsSHQW"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation.sol": {
        "keccak256": "0xd2079b67055a91767f04e42cc89265ca238454fb4ea4bedb49c73ef3bdff925f",
        "urls": [
          "bzz-raw://a4542a4268e2720db043bb6523dfcdf7213beb37e6c358351e2a09d9dedf8e0d",
          "dweb:/ipfs/QmTY3VvoUGrB8HauME4GFt6QksBp8SzpEmFnFviUqUkcFm"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation.sol": {
        "keccak256": "0xe059d8cf34fb04578ccdd4954355bfbebdf7e5a992ba0f200bcfa9a12f6c55e5",
        "urls": [
          "bzz-raw://ff96d33e8c915a8717d099ff1edb4f243455bd40b138da36fc95df5d2b1d9cd3",
          "dweb:/ipfs/QmZnNcc4KXcjy8bFkfVy1QB3Cb5hRZTVXm2GahMaM21EaL"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC1155BarterCrossToken.sol": {
        "keccak256": "0x8e0125f089e8459bd2155aa55e5ceb0fa9df2f53ca09e66443f820db52e3d69b",
        "urls": [
          "bzz-raw://995b09ed7bae244b7134bf57d8094fb572b5c646159b4f0fa7089414eb64fc19",
          "dweb:/ipfs/QmZdTrMi7cihuJZyE3Kxag9Zm5UM52A7nToG8Z2q3SexnL"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/ERC1155BarterUtils.sol": {
        "keccak256": "0xd754c5fadfa23b6a1d7493a9cae0429f520727315118032ef654bc86421dba15",
        "urls": [
          "bzz-raw://05c653e4c6c6dc0a789937a1b66f7850c4b1d095ae69304ef3267ee383f82117",
          "dweb:/ipfs/QmXT9z3Xyq6ba27aN6JcZPnqgJf1QKCevVKAjccmTFTFzF"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 83
};

// src/contracts/ERC1155EscrowObligation.ts
var abi46 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "collectEscrow",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "collectEscrowRaw",
      "inputs": [
        {
          "name": "_escrow",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_fulfillment",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC1155EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC1155EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC1155EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "extractArbiterAndDemand",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "arbiter",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC1155EscrowObligation.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "onERC1155BatchReceived",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "onERC1155Received",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "reclaimExpired",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "EscrowCollected",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfillment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "fulfiller",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EscrowMade",
      "inputs": [
        {
          "name": "escrow",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationNotFound",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC1155TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEscrowAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidFulfillment",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    },
    {
      "type": "error",
      "name": "RevocationFailed",
      "inputs": [
        {
          "name": "attestationId",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "UnauthorizedCall",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "533:4969:115:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;533:4969:115;;;;1242:4;533:4969;759:14:6;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;533:4969:115;790:10:9;;533:4969:115;790:10:9;;;789::61;;809:32;;-1:-1:-1;533:4969:115;;;;;;;;;;;872:48:61;;533:4969:115;872:48:61;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;904:4:61;533:4969:115;;;;1242:4;533:4969;;;;;;-1:-1:-1;;533:4969:115;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;533:4969:115;;;;;;;;;;;;;;783:14:6;533:4969:115;;;;;807:14:6;533:4969:115;;;;;790:10:9;533:4969:115;;;;;809:32:61;533:4969:115;;;;;789:10:61;533:4969:115;;;;;;;;;;;;;;;;;;;;851:69:61;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;533:4969:115;872:48:61;;533:4969:115;872:48:61;;;;;;533:4969:115;872:48:61;;;:::i;:::-;;;533:4969:115;;;;;872:48:61;;;533:4969:115;-1:-1:-1;533:4969:115;;872:48:61;;;-1:-1:-1;872:48:61;;;533:4969:115;;;-1:-1:-1;533:4969:115;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;;-1:-1:-1;533:4969:115;;;;;;-1:-1:-1;;533:4969:115;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080806040526004361015610029575b50361561001a575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c90816301ffc9a714610bb5575080632c713cd914610ba45780633dc9f35014610b1557806354fd4d5014610a275780635bf2f20d146109ed5780636b122fe0146108575780637d2c2931146107695780638371ef591461070b57806388e5b2d9146106be578063891d9ea8146106dd57806391db0b7e146106be578063b3b902d414610678578063bc197c81146105e3578063c6ec5070146104e8578063c93844be14610411578063ce46e046146103f7578063cecf1aff14610318578063e49617e1146102fd578063e60c3505146102fd578063e6c9714d146101db578063f0ffa185146101805763f23a6e6114610127575f61000f565b3461017c5760a036600319011261017c57610140610c74565b50610149610c8a565b506084356001600160401b03811161017c57610169903690600401610dcb565b5060405163f23a6e6160e01b8152602090f35b5f80fd5b60a036600319011261017c576004356001600160401b03811161017c576101d36101b06020923690600401610e69565b6101b8610c1e565b6101c0610c48565b906101c9610c5e565b926084359461181a565b604051908152f35b3461017c57606036600319011261017c576004356001600160401b03811161017c57610140600319823603011261017c576040519061021982610d22565b806004013582526024810135602083015261023660448201610c34565b604083015261024760648201610c34565b606083015261025860848201610c34565b608083015260a481013560a083015261027360c48201610ca0565b60c083015261028460e48201610ca0565b60e0830152610104810135801515810361017c57610100830152610124810135906001600160401b03821161017c5760046102c29236920101610dcb565b6101208201526024356001600160401b03811161017c576020916102ed6102f3923690600401610dcb565b90611710565b6040519015158152f35b60206102f361030b36610f4f565b610313611c58565b611c99565b3461017c57604036600319011261017c576004356001600160401b03811161017c5760a0600319823603011261017c57602061039b9161036e61037c61035c610c1e565b92604051928391600401868301610f83565b03601f198101835282610d59565b60405163f0ffa18560e01b815293849283923391829160048601611025565b03815f305af180156103ec575f906103b9575b602090604051908152f35b506020813d6020116103e4575b816103d360209383610d59565b8101031261017c57602090516103ae565b3d91506103c6565b6040513d5f823e3d90fd5b3461017c575f36600319011261017c5760206040515f8152f35b3461017c57602036600319011261017c576004356001600160401b03811161017c57610441903690600401610e69565b6104496116e5565b5081019060208183031261017c578035906001600160401b03821161017c57019060a08282031261017c576040519061048182610d07565b61048a83610ca0565b82526020830135926001600160401b03841161017c576104b16080926104e4958301610dcb565b60208401526104c260408201610ca0565b6040840152606081013560608401520135608082015260405191829182610efd565b0390f35b3461017c57602036600319011261017c576105016116e5565b5061050a6110ab565b506040516328c44a9960e21b815260048035908201525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156103ec575f916105c1575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105b2576105a66101206104e492015160208082518301019101611212565b60405191829182610efd565b635527981560e11b5f5260045ffd5b6105dd91503d805f833e6105d58183610d59565b810190611137565b8161055f565b3461017c5760a036600319011261017c576105fc610c74565b50610605610c8a565b506044356001600160401b03811161017c57610625903690600401610e96565b506064356001600160401b03811161017c57610645903690600401610e96565b506084356001600160401b03811161017c57610665903690600401610dcb565b5060405163bc197c8160e01b8152602090f35b606036600319011261017c576004356001600160401b03811161017c576101d36106a86020923690600401610e69565b6106b0610c1e565b91604435923392339261181a565b60206102f36106cc36610e19565b926106d8929192611c58565b6112c5565b3461017c576104e46106f76106f136610c08565b90611369565b604051918291602083526020830190610cb4565b3461017c57602036600319011261017c576004356001600160401b03811161017c5761073e610743913690600401610dcb565b61129c565b604080516001600160a01b0390931683526020830181905282916104e491830190610cb4565b3461017c57602036600319011261017c576004356107856110ab565b506040516328c44a9960e21b8152600481018290525f816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa5f918161083b575b506107eb57506301fb6dd160e01b5f5260045260245ffd5b6001600160401b03606082015116421061082c5761012081015160c090910151610820916001600160a01b0390911690611d0d565b50602060405160018152f35b637bf6a16f60e01b5f5260045ffd5b6108509192503d805f833e6105d58183610d59565b90836107d3565b3461017c575f36600319011261017c5760608060405161087681610cd8565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156103ec575f9061093d575b6060906104e4604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610cb4565b503d805f833e61094d8183610d59565b81019060208183031261017c578051906001600160401b03821161017c570160808183031261017c576040519061098382610cd8565b8051825260208101516001600160a01b038116810361017c5760208301526109ad60408201611068565b60408301526060810151906001600160401b03821161017c570182601f8201121561017c576060928160206109e493519101611075565b828201526108f7565b3461017c575f36600319011261017c5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461017c575f36600319011261017c576104e460206106f76001610a6a7f0000000000000000000000000000000000000000000000000000000000000000611aeb565b8184610a957f0000000000000000000000000000000000000000000000000000000000000000611aeb565b8180610ac07f0000000000000000000000000000000000000000000000000000000000000000611aeb565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610d59565b3461017c57608036600319011261017c576004356001600160401b03811161017c5760a0600319823603011261017c576020610b4f610c1e565b610b7b61039b610b5d610c48565b94610b89610b69610c5e565b91604051948591600401888301610f83565b03601f198101855284610d59565b60405163f0ffa18560e01b8152958694859460048601611025565b3461017c576108206106f136610c08565b3461017c57602036600319011261017c576004359063ffffffff60e01b821680920361017c57602091630271189760e51b8114908115610bf7575b5015158152f35b6301ffc9a760e01b14905083610bf0565b604090600319011261017c576004359060243590565b602435906001600160401b038216820361017c57565b35906001600160401b038216820361017c57565b604435906001600160a01b038216820361017c57565b606435906001600160a01b038216820361017c57565b600435906001600160a01b038216820361017c57565b602435906001600160a01b038216820361017c57565b35906001600160a01b038216820361017c57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b608081019081106001600160401b03821117610cf357604052565b634e487b7160e01b5f52604160045260245ffd5b60a081019081106001600160401b03821117610cf357604052565b61014081019081106001600160401b03821117610cf357604052565b604081019081106001600160401b03821117610cf357604052565b90601f801991011681019081106001600160401b03821117610cf357604052565b6001600160401b038111610cf357601f01601f191660200190565b929192610da182610d7a565b91610daf6040519384610d59565b82948184528183011161017c578281602093845f960137010152565b9080601f8301121561017c57816020610de693359101610d95565b90565b9181601f8401121561017c578235916001600160401b03831161017c576020808501948460051b01011161017c57565b604060031982011261017c576004356001600160401b03811161017c5781610e4391600401610de9565b92909291602435906001600160401b03821161017c57610e6591600401610de9565b9091565b9181601f8401121561017c578235916001600160401b03831161017c576020838186019501011161017c57565b9080601f8301121561017c578135916001600160401b038311610cf3578260051b9060405193610ec96020840186610d59565b845260208085019282010192831161017c57602001905b828210610eed5750505090565b8135815260209182019101610ee0565b6020815260018060a01b03825116602082015260a06080610f2c602085015183604086015260c0850190610cb4565b93600180841b036040820151166060850152606081015182850152015191015290565b602060031982011261017c57600435906001600160401b03821161017c5761014090829003600319011261017c5760040190565b602081526001600160a01b03610f9883610ca0565b1660208201526020820135601e198336030181121561017c5782016020813591016001600160401b03821161017c57813603811361017c5760e0938260809260a060408701528160c0870152868601375f8484018601526001600160a01b0361100360408301610ca0565b166060850152606081013582850152013560a0830152601f8019910116010190565b90935f936001600160401b03611047608095989760a0865260a0860190610cb4565b971660208401526001600160a01b0390811660408401521660608201520152565b5190811515820361017c57565b92919261108182610d7a565b9161108f6040519384610d59565b82948184528183011161017c578281602093845f96015e010152565b604051906110b882610d22565b6060610120835f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f6101008201520152565b51906001600160401b038216820361017c57565b51906001600160a01b038216820361017c57565b9080601f8301121561017c578151610de692602001611075565b60208183031261017c578051906001600160401b03821161017c57016101408183031261017c576040519161116b83610d22565b8151835260208201516020840152611185604083016110f5565b6040840152611196606083016110f5565b60608401526111a7608083016110f5565b608084015260a082015160a08401526111c260c08301611109565b60c08401526111d360e08301611109565b60e08401526111e56101008301611068565b6101008401526101208201516001600160401b03811161017c57611209920161111d565b61012082015290565b60208183031261017c578051906001600160401b03821161017c57019060a08282031261017c576040519161124683610d07565b61124f81611109565b835260208101516001600160401b03811161017c5760809261127291830161111d565b602084015261128360408201611109565b6040840152606081015160608401520151608082015290565b6112af9060208082518301019101611212565b80516020909101516001600160a01b0390911691565b92909281840361135a575f91345b8584101561134f578184101561133b578360051b808601359082821161132c5784013561013e198536030181121561017c57611310908501611c99565b1561132157600191039301926112d3565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b915f6113736110ab565b5061137c6110ab565b506040516328c44a9960e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316905f81602481855afa5f91816116c9575b506113e457856301fb6dd160e01b5f5260045260245ffd5b94919293946040516328c44a9960e21b81528660048201525f81602481865afa5f91816116ad575b5061142457866301fb6dd160e01b5f5260045260245ffd5b9591929394959261143482611cb2565b1561169e5761151360206101208085019460c088611525611455895161129c565b91909451916040519889978896879663e6c9714d60e01b885260606004890152805160648901528b81015160848901526001600160401b0360408201511660a48901526001600160401b0360608201511660c48901526001600160401b0360808201511660e489015260a0810151610104890152019e8f60018060a01b0390511661012488015260018060a01b0360e082015116610144880152610100810151151561016488015201516101406101848701526101a4860190610cb4565b84810360031901602486015290610cb4565b604483019190915203916001600160a01b03165afa9081156103ec575f91611664575b50156116555760405161155a81610d3e565b8581525f60208201526040519061157082610d3e565b7f0000000000000000000000000000000000000000000000000000000000000000825260208201908152823b1561017c5760645f92836020956040519687958694634692626760e01b86525160048601525180516024860152015160448401525af19081611640575b506115f25763614cf93960e01b85526004849052602485fd5b51825192949391927ff96e77bc177ae8e2ff25185e7c6d85f8ba97c8bdd9d46933aac70a7a33edf6c09161162f916001600160a01b031690611d0d565b94516001600160a01b03169380a490565b61164d9196505f90610d59565b5f945f6115d9565b630ebe58ef60e11b5f5260045ffd5b90506020813d602011611696575b8161167f60209383610d59565b8101031261017c5761169090611068565b5f611548565b3d9150611672565b63629cd40b60e11b5f5260045ffd5b6116c29192503d805f833e6105d58183610d59565b905f61140c565b6116de9192503d805f833e6105d58183610d59565b905f6113cc565b604051906116f282610d07565b5f608083828152606060208201528260408201528260608201520152565b7f000000000000000000000000000000000000000000000000000000000000000060208201510361180b5761174481611cb2565b156118055761176461012061177492015160208082518301019101611212565b9160208082518301019101611212565b604082810151908201516001600160a01b0390811691161491826117f2575b826117de575b826117c5575b826117a957505090565b6020919250810151818151910120910151602081519101201490565b805182516001600160a01b03908116911614925061179f565b915060808201516080820151111591611799565b9150606082015160608201511491611793565b50505f90565b635f9bd90760e11b5f5260045ffd5b9195909594929461183e61182f368986610d95565b60208082518301019101611212565b9460408601948551945f9560018060a01b031699606089019a60808c519a01998a51823b1561017c57604051637921219560e11b81526001600160a01b038e1660048201523060248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081611ad6575b506119015787518b518a5160405163334a7d1b60e21b81526001600160a01b039384166004820152928d1660248401523060448401526064830191909152608482015260a490fd5b9296509296509397506119179296503691610d95565b906040519260c084018481106001600160401b03821117611ac257906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a0820152602060405161197681610d3e565b7f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611a17608083015160c060e4860152610124850190610cb4565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611ab7578491611a85575b507f8f7f2dbafd79125e808bf16a53d7fa4e17b8b6374ced76d946a45f94b7bf4d06819480a3565b90506020813d602011611aaf575b81611aa060209383610d59565b8101031261017c57515f611a5d565b3d9150611a93565b6040513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b611ae39198505f90610d59565b5f965f6118b9565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015611c35575b806d04ee2d6d415b85acef8100000000600a921015611c1a575b662386f26fc10000811015611c06575b6305f5e100811015611bf5575b612710811015611be6575b6064811015611bd8575b1015611bcd575b600a60216001840193611b7285610d7a565b94611b806040519687610d59565b808652611b8f601f1991610d7a565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015611bc857600a9091611b9a565b505090565b600190910190611b60565b606460029104930192611b59565b61271060049104930192611b4f565b6305f5e10060089104930192611b44565b662386f26fc1000060109104930192611b37565b6d04ee2d6d415b85acef810000000060209104930192611b27565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611b0d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611c8a57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361017c57301490565b6001600160401b036060820151168015159081611d03575b50611cf457608001516001600160401b0316611ce557600190565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b905042115f611cca565b611d239092919260208082518301019101611212565b604081018051925f9360018060a01b0316936060840194608086519501948551823b1561017c57604051637921219560e11b81523060048201526001600160a01b038a1660248201526044810192909252606482015260a060848201525f60a482018190529091829060c490829084905af19081611dfd575b50611de3575050519151905160405163334a7d1b60e21b81526001600160a01b0393841660048201523060248201529390921660448401526064830152608482015260a490fd5b93509350505060405190611df8602083610d59565b815290565b611e0a9192505f90610d59565b5f905f611d9c56fea26469706673582212205c246de3a1b84d3badb5979e11d6dcd46a9deac940626195fbb53b1d2d2f893b64736f6c634300081b0033",
    "sourceMap": "533:4969:115:-:0;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;;;;1183:12:9;;;1054:5;1183:12;533:4969:115;1054:5:9;1183:12;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;-1:-1:-1;533:4969:115;;-1:-1:-1;;;533:4969:115;;;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;3045:39:9;533:4969:115;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;533:4969:115:-;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;4309:187;533:4969;4350:16;;533:4969;;:::i;:::-;;;;;;;;;4350:16;;;;:::i;:::-;;4756;;4350;;;;;;:::i;:::-;533:4969;;-1:-1:-1;;;4309:187:115;;533:4969;;;;;4416:10;;;;533:4969;4309:187;;;:::i;:::-;;:4;533:4969;4309:4;:187;;;;;;533:4969;4309:187;;;533:4969;;;;;;;;;4309:187;;533:4969;4309:187;;533:4969;4309:187;;;;;;533:4969;4309:187;;;:::i;:::-;;;533:4969;;;;;;;4309:187;;;;;-1:-1:-1;4309:187:115;;;533:4969;;;;;;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;;;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;5459:34;;533:4969;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;533:4969:115;;-1:-1:-1;;;2392:23:61;;533:4969:115;;;2392:23:61;;;533:4969:115;-1:-1:-1;533:4969:115;2392:23:61;533:4969:115;2392:3:61;-1:-1:-1;;;;;533:4969:115;2392:23:61;;;;;;;533:4969:115;2392:23:61;;;533:4969:115;2429:19:61;533:4969:115;2429:19:61;;533:4969:115;2452:18:61;2429:41;2425:87;;5274:46:115;5285:16;533:4969;5285:16;;;533:4969;;;;5274:46;;;;;;:::i;:::-;533:4969;;;;;;;:::i;2425:87:61:-;2491:21;;;533:4969:115;2491:21:61;533:4969:115;;2491:21:61;2392:23;;;;;;533:4969:115;2392:23:61;;;;;;:::i;:::-;;;;;:::i;:::-;;;;533:4969:115;;;;;;-1:-1:-1;;533:4969:115;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;-1:-1:-1;533:4969:115;;-1:-1:-1;;;533:4969:115;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;724:142:63;533:4969:115;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;533:4969:115:-;;1442:1461:9;533:4969:115;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;533:4969:115:-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;533:4969:115;;;;;;;;:::i;:::-;-1:-1:-1;533:4969:115;;-1:-1:-1;;;3986:23:62;;533:4969:115;3986:23:62;;533:4969:115;;;-1:-1:-1;533:4969:115;3986:23:62;533:4969:115;3986:3:62;-1:-1:-1;;;;;533:4969:115;3986:23:62;;533:4969:115;;3986:23:62;;;533:4969:115;-1:-1:-1;3982:172:62;;4119:24;;;;533:4969:115;4119:24:62;533:4969:115;;3986:23:62;533:4969:115;4119:24:62;3982:172;-1:-1:-1;;;;;4186:26:62;;;533:4969:115;;4168:15:62;:44;4164:87;;4331:16;;;;4349:21;;;;533:4969:115;4331:16:62;;-1:-1:-1;;;;;533:4969:115;;;;4331:16:62;:::i;:::-;;533:4969:115;;;;;;;4164:87:62;4233:18;;;533:4969:115;4233:18:62;533:4969:115;;4233:18:62;3986:23;;;;;;;533:4969:115;3986:23:62;;;;;;:::i;:::-;;;;;533:4969:115;;;;;;-1:-1:-1;;533:4969:115;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;533:4969:115;1497:44:61;;533:4969:115;;;1497:44:61;533:4969:115;;;;;;1497:14:61;533:4969:115;1497:44:61;;;;;;533:4969:115;1497:44:61;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;533:4969:115;1497:44:61;;;;;;:::i;:::-;;;533:4969:115;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;533:4969:115;;;;;;-1:-1:-1;;533:4969:115;;;;;;;542:43:61;533:4969:115;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;1055:104:6;;533:4969:115;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;533:4969:115;;;;;;;;;;;;1055:104:6;;;533:4969:115;;;;-1:-1:-1;;;533:4969:115;;;;;;;;;;;;;;;;;-1:-1:-1;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;1055:104:6;;4756:16:115;;1055:104:6;;;;;;:::i;533:4969:115:-;;;;;;-1:-1:-1;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;:::i;:::-;4756:16;4715:181;533:4969;;:::i;:::-;;4756:16;533:4969;;:::i;:::-;;;;;;;;;4756:16;;;;:::i;:::-;;;;;;;;;;:::i;:::-;533:4969;;-1:-1:-1;;;4715:181:115;;533:4969;;;;;;4715:181;;;:::i;533:4969::-;;;;5025:37;533:4969;;;:::i;:::-;;;;;;-1:-1:-1;;533:4969:115;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;775:49:38;;;:89;;;;533:4969:115;;;;;;;775:89:38;-1:-1:-1;;;862:40:55;;-1:-1:-1;775:89:38;;;533:4969:115;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;;;-1:-1:-1;;533:4969:115;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;:::o;:::-;;;;-1:-1:-1;533:4969:115;;;;;-1:-1:-1;533:4969:115;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;:::o;:::-;;;4756:16;;533:4969;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;:::o;:::-;-1:-1:-1;;;;;533:4969:115;;;;;;-1:-1:-1;;533:4969:115;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;533:4969:115;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;533:4969:115;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;-1:-1:-1;;533:4969:115;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;533:4969:115;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4756:16;;533:4969;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;533:4969:115;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;-1:-1:-1;533:4969:115;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;-1:-1:-1;;;;;533:4969:115;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;1321:267::-;1497:34;1321:267;1497:34;533:4969;;;1497:34;;;;;;:::i;:::-;533:4969;;1497:34;1566:14;;;;-1:-1:-1;;;;;533:4969:115;;;;1321:267::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;533:4969:115;;;;;;;;;;;;;4064:22:9;;;;4060:87;;533:4969:115;;;;;;;;;;;;;;4274:33:9;533:4969:115;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;533:4969:115;;3896:19:9;533:4969:115;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;533:4969:115;;;;3881:1:9;533:4969:115;;;;;3881:1:9;533:4969:115;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;2051:1760:62;;-1:-1:-1;533:4969:115;;:::i;:::-;2221:30:62;533:4969:115;;:::i;:::-;-1:-1:-1;533:4969:115;;-1:-1:-1;;;2314:27:62;;;;;533:4969:115;;;2314:3:62;-1:-1:-1;;;;;533:4969:115;;-1:-1:-1;533:4969:115;2314:27:62;533:4969:115;;2314:27:62;;-1:-1:-1;;2314:27:62;;;2051:1760;-1:-1:-1;2310:219:62;;4119:24;;;;-1:-1:-1;2490:28:62;2314:27;533:4969:115;2314:27:62;-1:-1:-1;2490:28:62;2310:219;2425:26;;;;;533:4969:115;;;;;2543:32:62;;;2314:27;2543:32;;533:4969:115;-1:-1:-1;2543:32:62;2314:27;2543:32;;;;-1:-1:-1;;2543:32:62;;;2310:219;-1:-1:-1;2539:234:62;;4119:24;;;;-1:-1:-1;2729:33:62;2314:27;533:4969:115;2314:27:62;-1:-1:-1;2729:33:62;2539:234;2659:31;;;;;;2539:234;2788:24;;;:::i;:::-;2787:25;2783:64;;533:4969:115;;2991:11:62;;;;;533:4969:115;2991:11:62;533:4969:115;2954:58:62;2991:11;;2954:58;:::i;:::-;533:4969:115;;;;;;;;;;;;;;;;;3083:66:62;;533:4969:115;2314:27:62;3083:66;;533:4969:115;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;533:4969:115;2314:27:62;533:4969:115;;;;;:::i;:::-;;;;;;;;3083:66:62;;-1:-1:-1;;;;;533:4969:115;3083:66:62;;;;;;;-1:-1:-1;3083:66:62;;;2539:234;3082:67;;3078:112;;533:4969:115;;;;;:::i;:::-;;;;-1:-1:-1;533:4969:115;3369:47:62;;533:4969:115;;;;;;;:::i;:::-;3323:18:62;533:4969:115;;;3275:160:62;;533:4969:115;;;3247:202:62;;;;;533:4969:115;-1:-1:-1;533:4969:115;;;;;;;;;;;;;;3247:202:62;;533:4969:115;2314:27:62;3247:202;;533:4969:115;;;;2314:27:62;533:4969:115;;;;;;;;;3247:202:62;;;;;;2539:234;-1:-1:-1;3231:293:62;;-1:-1:-1;;;3488:25:62;;2314:27;533:4969:115;;;2314:27:62;3488:25;;3231:293;3622:11;533:4969:115;;3231:293:62;;;;;3720:61;;2321:835:115;;-1:-1:-1;;;;;533:4969:115;;2321:835;:::i;:::-;533:4969;;-1:-1:-1;;;;;533:4969:115;;3720:61:62;;2051:1760;:::o;3247:202::-;;;;;-1:-1:-1;3247:202:62;;:::i;:::-;-1:-1:-1;3247:202:62;;;;3078:112;3170:20;;;-1:-1:-1;3170:20:62;2314:27;-1:-1:-1;3170:20:62;3083:66;;;533:4969:115;3083:66:62;;533:4969:115;3083:66:62;;;;;;533:4969:115;3083:66:62;;;:::i;:::-;;;533:4969:115;;;;;;;:::i;:::-;3083:66:62;;;;;;-1:-1:-1;3083:66:62;;2783:64;2821:26;;;-1:-1:-1;2821:26:62;2314:27;-1:-1:-1;2821:26:62;2543:32;;;;;;;-1:-1:-1;2543:32:62;;;;;;:::i;:::-;;;;;2314:27;;;;;;;-1:-1:-1;2314:27:62;;;;;;:::i;:::-;;;;;533:4969:115;;;;;;;:::i;:::-;-1:-1:-1;533:4969:115;;;;;;;;;;;;;;;;;;;;;;:::o;3368:749::-;3581:18;1016:17:60;;;533:4969:115;1016:27:60;1012:55;;1084:27;;;:::i;:::-;3553:47:115;3549:65;;3657:79;3681:15;3781:36;3681:15;;;1016:17:60;533:4969:115;;;3657:79;;;;;;:::i;:::-;533:4969;1016:17:60;533:4969:115;;;3781:36;;;;;;:::i;:::-;3847:13;;;;533:4969;3864:16;;;533:4969;-1:-1:-1;;;;;533:4969:115;;;;;3847:33;;;:86;;3368:749;3847:137;;;3368:749;3847:190;;;3368:749;3847:263;;;3828:282;;3368:749;:::o;3847:263::-;1016:17:60;4063:14:115;;;;;;533:4969;;;;;4053:25;4092:17;;;1016::60;533:4969:115;;;;4082:28;4053:57;3368:749;:::o;3847:190::-;533:4969;;;;-1:-1:-1;;;;;533:4969:115;;;;;4000:37;;-1:-1:-1;3847:190:115;;:137;3949:14;;;;;533:4969;3949:14;3967:17;;533:4969;-1:-1:-1;3949:35:115;3847:137;;;:86;3896:15;;;;;533:4969;3896:15;3915:18;;533:4969;3896:37;3847:86;;;3549:65;3602:12;;533:4969;3602:12;:::o;1012:55:60:-;1052:15;;;533:4969:115;1052:15:60;;533:4969:115;1052:15:60;879:385:63;;;;;;;;1743:34:115;533:4969;;;;;:::i;:::-;1743:34;533:4969;;;1743:34;;;;;;:::i;:::-;1813:13;;;;533:4969;;;;-1:-1:-1;533:4969:115;;;;;;;1915:15;;;;533:4969;1948:14;533:4969;;1948:14;;533:4969;;;1804:192;;;;;1813:13;533:4969;-1:-1:-1;;;1804:192:115;;-1:-1:-1;;;;;533:4969:115;;1804:192;;;533:4969;1892:4;533:4969;;;;;;;;;;;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;;;;;;;;;-1:-1:-1;;1804:192:115;;;;;;879:385:63;-1:-1:-1;1788:485:115;;533:4969;;;;;;1813:13;533:4969;-1:-1:-1;;;2078:184:115;;-1:-1:-1;;;;;533:4969:115;;;1804:192;2078:184;;533:4969;;;;;;;;1892:4;533:4969;;;;;;;;;;;;;;;;;2078:184;1788:485;;;;;;;;;;533:4969;1788:485;;;533:4969;;;:::i;:::-;;1813:13;533:4969;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;-1:-1:-1;;;;;533:4969:115;1813:13;533:4969;;;;;;;;;;;;1743:34;1914:299:61;;533:4969:115;2076:4:61;1813:13:115;1914:299:61;;533:4969:115;1915:15;1914:299:61;;533:4969:115;1948:14;1914:299:61;;533:4969:115;1914:299:61;;;;533:4969:115;1743:34;1813:13;533:4969;;;;:::i;:::-;1868:18:61;533:4969:115;;1819:413:61;;;533:4969:115;;;1813:13;533:4969;;;;;;;;1791:455:61;;;1804:192:115;1791:455:61;;533:4969:115;;;;;;;1813:13;533:4969;;;;;;;;;;;;;;;;-1:-1:-1;;;;;533:4969:115;;;;;;;;;1813:13;533:4969;;;;;;;;;1915:15;533:4969;;;;;;;1914:299:61;533:4969:115;1948:14;533:4969;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;533:4969:115;;1791:3:61;-1:-1:-1;;;;;533:4969:115;1791:455:61;;;;;;;;;;;1788:485:115;1150:55:63;4817:26:62;1150:55:63;4817:26:62;;;879:385:63:o;1791:455:61:-;;;1743:34:115;1791:455:61;;1743:34:115;1791:455:61;;;;;;533:4969:115;1791:455:61;;;:::i;:::-;;;533:4969:115;;;;;1791:455:61;;;;;;-1:-1:-1;1791:455:61;;;1813:13:115;533:4969;;;;;;;;;-1:-1:-1;;;533:4969:115;;;1804:192;533:4969;;;;1804:192;;;;;-1:-1:-1;1804:192:115;;:::i;:::-;-1:-1:-1;1804:192:115;;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;533:4969:115;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;4756:16;;533:4969;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;533:4969:115;;-1:-1:-1;;;1033:111:50;;;;533:4969:115;1033:111:50;533:4969:115;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;533:4969:115;;;;26127:66:57;;26014:100;26027:7;26098:1;533:4969:115;;;;26014:100:57;;;25901;25914:7;25985:1;533:4969:115;;;;25901:100:57;;;25788;25801:7;25872:1;533:4969:115;;;;25788:100:57;;;25672:103;25685:8;25758:2;533:4969:115;;;;25672:103:57;;;25556;25569:8;25642:2;533:4969:115;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;533:4969:115;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;533:4969:115;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;533:4969:115;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;612:261:60:-;-1:-1:-1;;;;;353:25:60;;;533:4969:115;;353:30:60;;;:89;;;;612:261;721:55;;;569:25;;533:4969:115;-1:-1:-1;;;;;533:4969:115;786:58:60;;862:4;612:261;:::o;786:58::-;824:20;;;-1:-1:-1;824:20:60;;-1:-1:-1;824:20:60;721:55;759:17;;;-1:-1:-1;759:17:60;;-1:-1:-1;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;2321:835:115;2525:74;2321:835;;;;2525:74;533:4969;;;2525:74;;;;;;:::i;:::-;2635:13;;;533:4969;;;-1:-1:-1;533:4969:115;;;;;;;2735:15;;;;533:4969;2768:14;533:4969;;2768:14;;533:4969;;;2626:190;;;;;2635:13;533:4969;-1:-1:-1;;;2626:190:115;;2692:4;2626:190;;;533:4969;-1:-1:-1;;;;;533:4969:115;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;533:4969:115;;;;;;;;;;;;;;-1:-1:-1;;2626:190:115;;;;;;2321:835;-1:-1:-1;2610:481:115;;-1:-1:-1;;533:4969:115;;;;;2635:13;533:4969;-1:-1:-1;;;2898:182:115;;-1:-1:-1;;;;;533:4969:115;;;2626:190;2898:182;;533:4969;2692:4;533:4969;;;;;;;;;;;;;;;;;;;;;;2078:184;2610:481;;;;;;;2635:13;533:4969;;;2525:74;533:4969;;:::i;:::-;;;2321:835;:::o;2626:190::-;;;;;-1:-1:-1;2626:190:115;;:::i;:::-;-1:-1:-1;2626:190:115;;;",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2630,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2673,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2716,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 7258,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2248,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1319,
          "length": 32
        },
        {
          "start": 1953,
          "length": 32
        },
        {
          "start": 5011,
          "length": 32
        },
        {
          "start": 6693,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 1383,
          "length": 32
        },
        {
          "start": 2198,
          "length": 32
        },
        {
          "start": 2564,
          "length": 32
        },
        {
          "start": 5490,
          "length": 32
        },
        {
          "start": 5906,
          "length": 32
        },
        {
          "start": 6520,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "collectEscrow(bytes32,bytes32)": "2c713cd9",
    "collectEscrowRaw(bytes32,bytes32)": "891d9ea8",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,bytes,address,uint256,uint256),uint64)": "cecf1aff",
    "doObligationFor((address,bytes,address,uint256,uint256),uint64,address,address)": "3dc9f350",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "extractArbiterAndDemand(bytes)": "8371ef59",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "reclaimExpired(bytes32)": "7d2c2931",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "supportsInterface(bytes4)": "01ffc9a7",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"AttestationNotFound","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidEscrowAttestation","type":"error"},{"inputs":[],"name":"InvalidFulfillment","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"name":"RevocationFailed","type":"error"},{"inputs":[],"name":"UnauthorizedCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"fulfillment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"fulfiller","type":"address"}],"name":"EscrowCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"escrow","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"EscrowMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"escrow","type":"bytes32"},{"internalType":"bytes32","name":"fulfillment","type":"bytes32"}],"name":"collectEscrow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_escrow","type":"bytes32"},{"internalType":"bytes32","name":"_fulfillment","type":"bytes32"}],"name":"collectEscrowRaw","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"extractArbiterAndDemand","outputs":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ERC1155EscrowObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"reclaimExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC1155EscrowObligation.sol":"ERC1155EscrowObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155EscrowObligation.sol":{"keccak256":"0xc0c4425e72b2b29730afd4f34f9163e6188e1cf314aa7fccc05fe56dd7e900f3","license":"UNLICENSED","urls":["bzz-raw://a2355618f2447bc67ccf27c50eb78802a36abaff1abb1abbdb4ffb4bafeb44c1","dweb:/ipfs/QmTakuBV7d8KM3oAnSNQ5N9DbiF5Ai7doKKBVYW38C8Cjg"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AttestationNotFound"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC1155TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEscrowAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "attestationId",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "RevocationFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnauthorizedCall"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fulfiller",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowCollected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "EscrowMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrow",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_escrow",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_fulfillment",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "collectEscrowRaw",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC1155EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC1155EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC1155EscrowObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "extractArbiterAndDemand",
          "outputs": [
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC1155EscrowObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC1155BatchReceived",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC1155Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reclaimExpired",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC1155EscrowObligation.sol": "ERC1155EscrowObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155EscrowObligation.sol": {
        "keccak256": "0xc0c4425e72b2b29730afd4f34f9163e6188e1cf314aa7fccc05fe56dd7e900f3",
        "urls": [
          "bzz-raw://a2355618f2447bc67ccf27c50eb78802a36abaff1abb1abbdb4ffb4bafeb44c1",
          "dweb:/ipfs/QmTakuBV7d8KM3oAnSNQ5N9DbiF5Ai7doKKBVYW38C8Cjg"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 115
};

// src/contracts/ERC1155PaymentObligation.ts
var abi47 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "checkObligation",
      "inputs": [
        {
          "name": "obligation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "demand",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC1155PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC1155PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationFor",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct ERC1155PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ERC1155PaymentObligation.ObligationData",
          "components": [
            {
              "name": "token",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "tokenId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "PaymentMade",
      "inputs": [
        {
          "name": "payment",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "buyer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AttestationRevoked",
      "inputs": []
    },
    {
      "type": "error",
      "name": "DeadlineExpired",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ERC1155TransferFailed",
      "inputs": [
        {
          "name": "token",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSchema",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x61016080604052346101e3576040816116428038038091610020828561021d565b8339810103126101e35780516001600160a01b038116918282036101e35760200151916001600160a01b0383168084036101e357604051606081016001600160401b0381118282101761020957604052603d815260208101927f6164647265737320746f6b656e2c2075696e7432353620746f6b656e49642c2084527f75696e7432353620616d6f756e742c206164647265737320706179656500000060408301526001608052600360a0525f60c052156101fa576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101ef575f916101b9575b506101405260405161140190816102418239608051816109d0015260a051816109fb015260c05181610a26015260e0518161135f0152610100518161085201526101205181818161057e015261111601526101405181818161025f015281816105b6015281816108200152818161098e01526110690152f35b90506020813d6020116101e7575b816101d46020938361021d565b810103126101e357515f610140565b5f80fd5b3d91506101c7565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176102095760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146109b15780635bf2f20d146109775780636b122fe0146107e15780636f0aa0de1461076e57806388e5b2d91461074f57806391db0b7e1461074f578063b3b902d414610709578063c6ec5070146104fb578063c93844be1461046e578063ce46e04614610454578063e49617e11461042f578063e60c35051461042f578063e665ba151461037f578063e6c9714d146101475763f0ffa1850361000e5760a0366003190112610143576004356001600160401b038111610143576100fb903690600401610b67565b610103610b94565b916044356001600160a01b038116810361014357606435906001600160a01b03821682036101435760209461013b9460843594610efb565b604051908152f35b5f80fd5b34610143576060366003190112610143576004356001600160401b038111610143576101406003198236030112610143576040519061018582610c21565b806004013582526020820190602481013582526101a460448201610baa565b60408401526101b560648201610baa565b606084019081526101c860848301610baa565b916080850192835260a481013560a08601526101e660c48201610ad3565b60c08601526101f760e48201610ad3565b60e08601526101048101358015158103610143576101008601526101248101356001600160401b038111610143576101209160046102389236920101610caf565b94019384526024356001600160401b0381116101435761025c903690600401610caf565b927f000000000000000000000000000000000000000000000000000000000000000090510361037057516001600160401b03168015159081610366575b5061035757516001600160401b0316610348576102d36102c460209351848082518301019101610e6f565b91838082518301019101610e6f565b815181516001600160a01b039081169116149182610338575b82610324575b82610304575b50506040519015158152f35b6060908101519101516001600160a01b03908116911614905082806102f8565b9150604082015160408201511115916102f2565b83810151828501511492506102ec565b637b6227e960e11b5f5260045ffd5b631ab7da6b60e01b5f5260045ffd5b9050421184610299565b635f9bd90760e11b5f5260045ffd5b34610143576080366003190112610143576103d360206040516103b5816103a7848201610d10565b03601f198101835282610c3d565b6040518093819263f0ffa18560e01b83523390339060048501610d59565b03815f305af18015610424575f906103f1575b602090604051908152f35b506020813d60201161041c575b8161040b60209383610c3d565b8101031261014357602090516103e6565b3d91506103fe565b6040513d5f823e3d90fd5b602061044a61043d36610bbe565b61044561135d565b61139e565b6040519015158152f35b34610143575f3660031901126101435760206040515f8152f35b34610143576020366003190112610143576004356001600160401b038111610143576104b56104a46104f7923690600401610b67565b6104ac610e37565b50810190610eb9565b604051918291829190916060608082019360018060a01b03815116835260208101516020840152604081015160408401528160018060a01b0391015116910152565b0390f35b3461014357602036600319011261014357610514610e37565b50606061012060405161052681610c21565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610424575f91610604575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036105f5576104b56101206104f792015160208082518301019101610e6f565b635527981560e11b5f5260045ffd5b90503d805f833e6106158183610c3d565b810190602081830312610143578051906001600160401b03821161014357019061014082820312610143576040519161064d83610c21565b8051835260208101516020840152610667604082016113b7565b6040840152610678606082016113b7565b6060840152610689608082016113b7565b608084015260a081015160a08401526106a460c08201610e5b565b60c08401526106b560e08201610e5b565b60e08401526106c76101008201610ccd565b610100840152610120810151906001600160401b03821161014357019080601f830112156101435781516106fd92602001610cda565b610120820152816105ae565b6060366003190112610143576004356001600160401b0381116101435761013b6107396020923690600401610b67565b610741610b94565b916044359233923392610efb565b602061044a61075d36610b17565b9261076992919261135d565b610d93565b3461014357366003190160c0811261014357608013610143576084356001600160a01b03811681036101435760a435906001600160a01b0382168203610143576020906040516107c3816103a7858201610d10565b6103d3604051948593849363f0ffa18560e01b855260048501610d59565b34610143575f3660031901126101435760608060405161080081610bf2565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610424575f906108c7575b6060906104f7604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a0830190610aaf565b503d805f833e6108d78183610c3d565b810190602081830312610143578051906001600160401b0382116101435701608081830312610143576040519061090d82610bf2565b8051825260208101516001600160a01b038116810361014357602083015261093760408201610ccd565b60408301526060810151906001600160401b038211610143570182601f820112156101435760609281602061096e93519101610cda565b82820152610881565b34610143575f3660031901126101435760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610143575f366003190112610143576104f76020610a9f60016109f47f00000000000000000000000000000000000000000000000000000000000000006111f0565b8184610a1f7f00000000000000000000000000000000000000000000000000000000000000006111f0565b8180610a4a7f00000000000000000000000000000000000000000000000000000000000000006111f0565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610c3d565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b35906001600160a01b038216820361014357565b9181601f84011215610143578235916001600160401b038311610143576020808501948460051b01011161014357565b6040600319820112610143576004356001600160401b0381116101435781610b4191600401610ae7565b92909291602435906001600160401b03821161014357610b6391600401610ae7565b9091565b9181601f84011215610143578235916001600160401b038311610143576020838186019501011161014357565b602435906001600160401b038216820361014357565b35906001600160401b038216820361014357565b602060031982011261014357600435906001600160401b038211610143576101409082900360031901126101435760040190565b608081019081106001600160401b03821117610c0d57604052565b634e487b7160e01b5f52604160045260245ffd5b61014081019081106001600160401b03821117610c0d57604052565b90601f801991011681019081106001600160401b03821117610c0d57604052565b6001600160401b038111610c0d57601f01601f191660200190565b929192610c8582610c5e565b91610c936040519384610c3d565b829481845281830111610143578281602093845f960137010152565b9080601f8301121561014357816020610cca93359101610c79565b90565b5190811515820361014357565b929192610ce682610c5e565b91610cf46040519384610c3d565b829481845281830111610143578281602093845f96015e010152565b6080810191906004356001600160a01b03811690819003610143578152602435602082015260443560408201526064356001600160a01b03811691908290036101435760600152565b5f929493610d7160809360a0845260a0840190610aaf565b602083018590526001600160a01b039687166040840152951660608201520152565b929092818403610e28575f91345b85841015610e1d5781841015610e09578360051b8086013590828211610dfa5784013561013e198536030181121561014357610dde90850161139e565b15610def5760019103930192610da1565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b60405190610e4482610bf2565b5f6060838281528260208201528260408201520152565b51906001600160a01b038216820361014357565b9081608091031261014357610eb1606060405192610e8c84610bf2565b610e9581610e5b565b8452602081015160208501526040810151604085015201610e5b565b606082015290565b9081608091031261014357610eb1606060405192610ed684610bf2565b610edf81610ad3565b8452602081013560208501526040810135604085015201610ad3565b95909491939293610f0e86880188610eb9565b938451935f98606087019860018060a01b038a5116602089019788519160408b015160018060a01b0383163b1561014357604051637921219560e11b81526001600160a01b03808f16600483015260248201939093526044810194909452606484015260a060848401525f60a4840181905291839160c49183918591165af190816111db575b50610fe15787518a5188516040808c0151905163334a7d1b60e21b81526001600160a01b0394851660048201528d851660248201529390921660448401526064830152608482015260a490fd5b9296509296509350610ff69296503691610c79565b906040519260c084018481106001600160401b038211176111c757906001600160401b039160405260018060a01b03169485855216602084015260016040840152606083015260808201528360a0820152604051604081018181106001600160401b038211176111b357906020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0611108608083015160c060e4860152610124850190610aaf565b9101516101048301520381877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156111a8578491611176575b507f4b5d781b1f4414459813c44d669c7821fcdec72a83b67c0303229be68d03ad05819480a3565b90506020813d6020116111a0575b8161119160209383610c3d565b8101031261014357515f61114e565b3d9150611184565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526041600452602488fd5b6111e8919c505f90610c3d565b5f9a5f610f94565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b82101561133a575b806d04ee2d6d415b85acef8100000000600a92101561131f575b662386f26fc1000081101561130b575b6305f5e1008110156112fa575b6127108110156112eb575b60648110156112dd575b10156112d2575b600a6021600184019361127785610c5e565b946112856040519687610c3d565b808652611294601f1991610c5e565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530480156112cd57600a909161129f565b505090565b600190910190611265565b60646002910493019261125e565b61271060049104930192611254565b6305f5e10060089104930192611249565b662386f26fc100006010910493019261123c565b6d04ee2d6d415b85acef81000000006020910493019261122c565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104611212565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361138f57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361014357301490565b51906001600160401b03821682036101435756fea2646970667358221220b0e3b55c879b48efcdd77c43d4a62d4f3855999adc3ae6ab78cc6d59aad689f164736f6c634300081b0033",
    "sourceMap": "514:3587:116:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;;;1217:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;514:3587:116;790:10:9;;514:3587:116;790:10:9;;;789::61;;809:32;;-1:-1:-1;514:3587:116;;;;;;;;;;;872:48:61;;514:3587:116;872:48:61;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;904:4:61;514:3587:116;;;;1217:4;514:3587;;;;;;-1:-1:-1;;514:3587:116;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;514:3587:116;;;;;;;;759:14:6;514:3587:116;;;;;783:14:6;514:3587:116;;;;;807:14:6;514:3587:116;;;;;790:10:9;514:3587:116;;;;;809:32:61;514:3587:116;;;;;789:10:61;514:3587:116;;;;;;;;;;851:69:61;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;;;;872:48:61;;;514:3587:116;872:48:61;;514:3587:116;872:48:61;;;;;;514:3587:116;872:48:61;;;:::i;:::-;;;514:3587:116;;;;;872:48:61;;;514:3587:116;-1:-1:-1;514:3587:116;;872:48:61;;;-1:-1:-1;872:48:61;;;514:3587:116;;;-1:-1:-1;514:3587:116;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;514:3587:116;;;;-1:-1:-1;514:3587:116;;;;;-1:-1:-1;514:3587:116;;;;;;-1:-1:-1;;514:3587:116;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "514:3587:116:-:0;;;;;;;;;-1:-1:-1;514:3587:116;;;;;;;;1183:12:9;;;1054:5;1183:12;514:3587:116;1054:5:9;1183:12;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;;;1754:16;514:3587;1754:16;;;514:3587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1377:16;514:3587;1377:16;;;514:3587;;;;;;-1:-1:-1;;514:3587:116;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;:::i;:::-;3017:672;3230:18;514:3587;;1016:27:60;1012:55;;514:3587:116;-1:-1:-1;;;;;514:3587:116;353:30:60;;;;;:89;;514:3587:116;721:55:60;;;514:3587:116;-1:-1:-1;;;;;514:3587:116;786:58:60;;3430:36:116;3306:79;514:3587;3330:15;;514:3587;;;;3306:79;;;;;;:::i;:::-;514:3587;;;;;3430:36;;;;;;:::i;:::-;514:3587;;;;-1:-1:-1;;;;;514:3587:116;;;;;3496:33;;;:86;;514:3587;3496:137;;;514:3587;3496:186;;;514:3587;3477:205;;514:3587;;;;;;;;3496:186;514:3587;3649:13;;;514:3587;3666:16;;514:3587;-1:-1:-1;;;;;514:3587:116;;;;;3649:33;;-1:-1:-1;3496:186:116;;;;:137;3598:14;;514:3587;3598:14;;514:3587;;3616:17;;514:3587;-1:-1:-1;3598:35:116;3496:137;;;:86;3545:15;;;514:3587;3564:18;;;514:3587;3545:37;;-1:-1:-1;3496:86:116;;786:58:60;824:20;;;514:3587:116;824:20:60;514:3587:116;;824:20:60;721:55;759:17;;;514:3587:116;759:17:60;514:3587:116;;759:17:60;353:89;427:15;;;-1:-1:-1;353:89:60;;;1012:55;1052:15;;;514:3587:116;1052:15:60;514:3587:116;;1052:15:60;514:3587:116;;;;;;-1:-1:-1;;514:3587:116;;;;1410:145;1377:16;514:3587;;1377:16;;;;;;;:::i;:::-;;1055:104:6;;1377:16:116;;;;;;:::i;:::-;514:3587;;;;;;;;;1410:145;;1487:10;;;1410:145;514:3587;1410:145;;;:::i;:::-;;:4;514:3587;1410:4;:145;;;;;;514:3587;1410:145;;;514:3587;1377:16;514:3587;;;;;;;1410:145;;1377:16;1410:145;;1377:16;1410:145;;;;;;514:3587;1410:145;;;:::i;:::-;;;514:3587;;;;1377:16;514:3587;;1410:145;;;;;-1:-1:-1;1410:145:116;;;514:3587;;;;;;;;;;;3045:39:9;514:3587:116;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;514:3587:116;;;;;;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;;-1:-1:-1;;;;;514:3587:116;;;;4058:34;514:3587;;;;;;;;:::i;:::-;;;:::i;:::-;;4058:34;;;;:::i;:::-;514:3587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:61;;514:3587:116;;;2392:23:61;;514:3587:116;;;2392:23:61;514:3587:116;;;;;;2392:3:61;514:3587:116;2392:23:61;;;;;;;514:3587:116;2392:23:61;;;514:3587:116;2429:19:61;514:3587:116;2429:19:61;;514:3587:116;2452:18:61;2429:41;2425:87;;3873:46:116;514:3587;;3884:16;;;514:3587;;;;3873:46;;;;;;:::i;2425:87:61:-;2491:21;;;514:3587:116;2491:21:61;514:3587:116;;2491:21:61;2392:23;;;;;514:3587:116;2392:23:61;;;;;;:::i;:::-;;;514:3587:116;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:61;;;514:3587:116;;;-1:-1:-1;;514:3587:116;;;;;;-1:-1:-1;;;;;514:3587:116;;;;724:142:63;514:3587:116;;;;;;;;:::i;:::-;;;:::i;:::-;;;;802:10:63;;;;724:142;;:::i;514:3587:116:-;;1442:1461:9;514:3587:116;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;514:3587:116:-;;;;;-1:-1:-1;;514:3587:116;;;;;;;-1:-1:-1;514:3587:116;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;1754:16;514:3587;;;1754:16;;;;;;;:::i;:::-;1787:139;514:3587;;;;;;;;;;1787:139;;514:3587;1787:139;;;:::i;514:3587::-;;;;;;-1:-1:-1;;514:3587:116;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;514:3587:116;1497:44:61;;514:3587:116;;;1497:44:61;514:3587:116;;;;;;1497:14:61;514:3587:116;1497:44:61;;;;;;514:3587:116;1497:44:61;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;514:3587:116;1497:44:61;;;;;;:::i;:::-;;;514:3587:116;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;514:3587:116;;;;;;-1:-1:-1;;514:3587:116;;;;;;;542:43:61;514:3587:116;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;1055:104:6;;514:3587:116;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;514:3587:116;;;;;;;;;;;;1055:104:6;;;514:3587:116;;;;-1:-1:-1;;;514:3587:116;;;;;;;;;;;;;;;;;-1:-1:-1;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;514:3587:116;;;;;1055:104:6;514:3587:116;;1055:104:6;514:3587:116;;;;;;;;;;;;;;;;;;;;-1:-1:-1;514:3587:116;;;;;;;;-1:-1:-1;;514:3587:116;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3587:116;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;514:3587:116;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;514:3587:116;;;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3587:116;;;;;;:::o;:::-;;-1:-1:-1;;514:3587:116;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;-1:-1:-1;;514:3587:116;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;:::o;:::-;;;;-1:-1:-1;514:3587:116;;;;;-1:-1:-1;514:3587:116;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;:::o;:::-;;;1055:104:6;;514:3587:116;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;:::o;:::-;-1:-1:-1;;;;;514:3587:116;;;;;;-1:-1:-1;;514:3587:116;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;514:3587:116;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;514:3587:116;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;;;;;;;:::o;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;514:3587:116;;;;;;;;;;;;;4064:22:9;;;;4060:87;;514:3587:116;;;;;;;;;;;;;;4274:33:9;514:3587:116;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;514:3587:116;;3896:19:9;514:3587:116;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;514:3587:116;;;;3881:1:9;514:3587:116;;;;;3881:1:9;514:3587:116;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;514:3587:116;;;;;;;:::i;:::-;-1:-1:-1;514:3587:116;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;514:3587:116;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;879:385:63:-;;;;;;;;2120:68:116;;;;;;:::i;:::-;514:3587;;;;-1:-1:-1;2353:20:116;;;;514:3587;;;;;;;;;2391:22;;;514:3587;;;2431:21;;;;514:3587;;;;;;;;2265:221;;;;2431:21;514:3587;-1:-1:-1;;;2265:221:116;;-1:-1:-1;;;;;514:3587:116;;;2265:221;;;514:3587;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;514:3587:116;;;;;;-1:-1:-1;514:3587:116;;2265:221;;514:3587;;-1:-1:-1;;514:3587:116;2265:221;;;;;;879:385:63;-1:-1:-1;2249:543:116;;514:3587;;;;;;2431:21;;;;514:3587;;;-1:-1:-1;;;2568:213:116;;-1:-1:-1;;;;;514:3587:116;;;2265:221;2568:213;;514:3587;;;;;;;;;;;;;;;;;;;;;;;;;;2568:213;2249:543;;;;;;;;;514:3587;2249:543;;;514:3587;;;:::i;:::-;;2431:21;514:3587;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;-1:-1:-1;;;;;514:3587:116;2431:21;514:3587;;;;;;;;;;;;2391:22;1914:299:61;;514:3587:116;2076:4:61;2431:21:116;1914:299:61;;514:3587:116;2353:20;1914:299:61;;514:3587:116;;1914:299:61;;514:3587:116;1914:299:61;514:3587:116;1914:299:61;;514:3587:116;2431:21;514:3587;2431:21;514:3587;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;2391:22;514:3587;2431:21;514:3587;1868:18:61;514:3587:116;;1819:413:61;;;514:3587:116;;;2431:21;514:3587;;;;;;;;1791:455:61;;;2265:221:116;1791:455:61;;514:3587:116;;;;;;;2431:21;514:3587;;;;;;;;;;;;;;;;-1:-1:-1;;;;;514:3587:116;;;;;;;;;2431:21;514:3587;;;;;;;;;2353:20;514:3587;;;2265:221;514:3587;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;514:3587:116;;1791:3:61;-1:-1:-1;;;;;514:3587:116;1791:455:61;;;;;;;;;;;2249:543:116;1150:55:63;2977:27:116;1150:55:63;2977:27:116;;;879:385:63:o;1791:455:61:-;;;2391:22:116;1791:455:61;;2391:22:116;1791:455:61;;;;;;514:3587:116;1791:455:61;;;:::i;:::-;;;514:3587:116;;;;;1791:455:61;;;;;;-1:-1:-1;1791:455:61;;;2431:21:116;514:3587;;;;;;;;;-1:-1:-1;;;514:3587:116;;;2265:221;514:3587;;;;;-1:-1:-1;;;514:3587:116;;;2265:221;514:3587;;;;2265:221;;;;;-1:-1:-1;2265:221:116;;:::i;:::-;-1:-1:-1;2265:221:116;;;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;514:3587:116;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;514:3587:116;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;514:3587:116;;-1:-1:-1;;;1033:111:50;;;;514:3587:116;1033:111:50;514:3587:116;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;514:3587:116;;;;26127:66:57;;26014:100;26027:7;26098:1;514:3587:116;;;;26014:100:57;;;25901;25914:7;25985:1;514:3587:116;;;;25901:100:57;;;25788;25801:7;25872:1;514:3587:116;;;;25788:100:57;;;25672:103;25685:8;25758:2;514:3587:116;;;;25672:103:57;;;25556;25569:8;25642:2;514:3587:116;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;514:3587:116;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;514:3587:116;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;514:3587:116;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;514:3587:116:-;;;-1:-1:-1;;;;;514:3587:116;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2512,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2555,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2598,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 4959,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 2130,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 1406,
          "length": 32
        },
        {
          "start": 4374,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 607,
          "length": 32
        },
        {
          "start": 1462,
          "length": 32
        },
        {
          "start": 2080,
          "length": 32
        },
        {
          "start": 2446,
          "length": 32
        },
        {
          "start": 4201,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "checkObligation((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes),bytes,bytes32)": "e6c9714d",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((address,uint256,uint256,address))": "e665ba15",
    "doObligationFor((address,uint256,uint256,address),address,address)": "6f0aa0de",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"AttestationRevoked","type":"error"},{"inputs":[],"name":"DeadlineExpired","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC1155TransferFailed","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"InvalidSchema","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"payment","type":"bytes32"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"}],"name":"PaymentMade","type":"event"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"obligation","type":"tuple"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"checkObligation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"data","type":"tuple"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"doObligationFor","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct ERC1155PaymentObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/ERC1155PaymentObligation.sol":"ERC1155PaymentObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/ERC1155PaymentObligation.sol":{"keccak256":"0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef","license":"UNLICENSED","urls":["bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf","dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AttestationRevoked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DeadlineExpired"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ERC1155TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSchema"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "payment",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PaymentMade",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "obligation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "demand",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkObligation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct ERC1155PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC1155PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ERC1155PaymentObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligationFor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct ERC1155PaymentObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/ERC1155PaymentObligation.sol": "ERC1155PaymentObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/ERC1155PaymentObligation.sol": {
        "keccak256": "0x6ce8f25cc3fca5be408664c810edfdb16006dde224163f96ed8c8db97c4088ef",
        "urls": [
          "bzz-raw://575137e6ec249d429a3a7caa30243f146cb383c2cacec0ec1c01fec8a75e6eaf",
          "dweb:/ipfs/QmSKN1PvJ55fFPtouWLjG8pd6fYixoR3ywVb7CsyGb4R7r"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 116
};

// src/contracts/IERC1155.ts
var abi48 = {
  "abi": [
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "balanceOfBatch",
      "inputs": [
        {
          "name": "accounts",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "ids",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isApprovedForAll",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "safeBatchTransferFrom",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setApprovalForAll",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "approved",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ApprovalForAll",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "operator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "approved",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TransferBatch",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "ids",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "values",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TransferSingle",
      "inputs": [
        {
          "name": "operator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "URI",
      "inputs": [
        {
          "name": "value",
          "type": "string",
          "indexed": false,
          "internalType": "string"
        },
        {
          "name": "id",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "balanceOf(address,uint256)": "00fdd58e",
    "balanceOfBatch(address[],uint256[])": "4e1273f4",
    "isApprovedForAll(address,address)": "e985e9c5",
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
    "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC-1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[ERC].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``\'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``\'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the zero address."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":"IERC1155"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferBatch",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferSingle",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "value",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "URI",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeBatchTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address,uint256)": {
            "details": "Returns the value of tokens of token type `id` owned by `account`."
          },
          "balanceOfBatch(address[],uint256[])": {
            "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
          },
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
          },
          "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            "details": "Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the zero address."
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": "IERC1155"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 36
};

// src/clients/erc1155.ts
var erc1155EscrowDecodeFunction = (0, import_viem8.getAbiItem)({
  abi: abi46.abi,
  name: "decodeObligationData"
});
var erc1155PaymentDecodeFunction = (0, import_viem8.getAbiItem)({
  abi: abi47.abi,
  name: "decodeObligationData"
});
var erc1155EscrowObligationDataType = erc1155EscrowDecodeFunction.outputs[0];
var erc1155PaymentObligationDataType = erc1155PaymentDecodeFunction.outputs[0];
var makeErc1155Client = (viemClient, addresses) => {
  const encodeEscrowObligationRaw = (data) => {
    return (0, import_viem8.encodeAbiParameters)([erc1155EscrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return (0, import_viem8.encodeAbiParameters)([erc1155PaymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes ERC1155EscrowObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC1155 token details
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (token, demand) => {
      return encodeEscrowObligationRaw({
        token: token.address,
        tokenId: token.id,
        amount: token.value,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes ERC1155PaymentObligation.ObligationData to bytes using type-based parameters.
     * @param token - ERC1155 token details
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (token, payee) => {
      return encodePaymentObligationRaw({
        token: token.address,
        tokenId: token.id,
        amount: token.value,
        payee
      });
    },
    /**
     * Decodes ERC1155EscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return (0, import_viem8.decodeAbiParameters)([erc1155EscrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes ERC1155PaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return (0, import_viem8.decodeAbiParameters)([erc1155PaymentObligationDataType], obligationData)[0];
    },
    /**
     * Approves all tokens from a contract for trading
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Transaction hash
     */
    approveAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc1155EscrowObligation : addresses.erc1155PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi48.abi,
        functionName: "setApprovalForAll",
        args: [to, true]
      });
      return hash;
    },
    /**
     * Revokes approval for all tokens from a contract
     * @param token_contract - Address of the token contract
     * @param purpose - Purpose of approval to revoke (escrow or payment)
     * @returns Transaction hash
     */
    revokeAll: async (token_contract, purpose) => {
      const to = purpose === "escrow" ? addresses.erc1155EscrowObligation : addresses.erc1155PaymentObligation;
      const hash = await viemClient.writeContract({
        address: token_contract,
        abi: abi48.abi,
        functionName: "setApprovalForAll",
        args: [to, false]
      });
      return hash;
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with ERC1155 tokens for a custom demand
     * @param price - ERC1155 token details for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithErc1155: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155EscrowObligation,
        abi: abi46.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            amount: price.value,
            arbiter: item.arbiter,
            demand: item.demand
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with ERC1155 tokens
     * @param price - ERC1155 token details for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   receiverAddress,
     * );
     * ```
     */
    payWithErc1155: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155PaymentObligation,
        abi: abi47.abi,
        functionName: "doObligation",
        args: [
          {
            token: price.address,
            tokenId: price.id,
            amount: price.value,
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC1155 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC1155 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc1155ForErc1155(
     *   { address: myMultiToken, id: 1n, value: 5n },
     *   { address: theirMultiToken, id: 2n, value: 10n },
     *   0n,
     * );
     * ```
     */
    buyErc1155ForErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc1155ForErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.id, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc1155(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc1155: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc1155",
        args: [buyAttestation]
      });
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      return { hash };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC20 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC20 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc20WithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   { address: usdc, value: 1000n },
     *   0n,
     * );
     * ```
     */
    buyErc20WithErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc20WithErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.value, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-ERC20 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc20(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc20: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc20",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for ERC721 tokens
     * @param bid - ERC1155 token offered
     * @param ask - ERC721 token requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyErc721WithErc1155(
     */
    buyErc721WithErc1155: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyErc721WithErc1155",
        args: [bid.address, bid.id, bid.value, ask.address, ask.id, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC721-ERC1155 trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForErc721(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForErc721: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForErc721",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading ERC1155 tokens for a bundle of tokens
     * @param bid - ERC1155 token offered
     * @param ask - Bundle of tokens requested
     * @param payee - Address to receive the payment
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.erc1155.buyBundleWithErc1155(
     *   { address: multiToken, id: 1n, value: 5n },
     *   tokenBundle,
     *   receiverAddress,
     *   0n,
     * );
     * ```
     */
    buyBundleWithErc1155: async (bid, ask, payee, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "buyBundleWithErc1155",
        args: [bid.address, bid.id, bid.value, { ...flattenTokenBundle(ask), payee }, expiration]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills an ERC1155-Bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.erc1155.payErc1155ForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payErc1155ForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.erc1155BarterUtils,
        abi: abi45.abi,
        functionName: "payErc1155ForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    }
  };
};

// src/clients/stringObligation.ts
var import_viem9 = require("viem");

// src/contracts/StringObligation.ts
var abi49 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_schemaRegistry",
          "type": "address",
          "internalType": "contract ISchemaRegistry"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "ATTESTATION_SCHEMA",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "decodeObligationData",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct StringObligation.ObligationData",
          "components": [
            {
              "name": "item",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "doObligation",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct StringObligation.ObligationData",
          "components": [
            {
              "name": "item",
              "type": "string",
              "internalType": "string"
            }
          ]
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "doObligationForRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "payer",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "doObligationRaw",
      "inputs": [
        {
          "name": "data",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "expirationTime",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "refUID",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "uid_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getObligationData",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct StringObligation.ObligationData",
          "components": [
            {
              "name": "item",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchema",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract ISchemaResolver"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "schema",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPayable",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "multiAttest",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "multiRevoke",
      "inputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct Attestation[]",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        },
        {
          "name": "values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct Attestation",
          "components": [
            {
              "name": "uid",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "schema",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "time",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "expirationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "revocationTime",
              "type": "uint64",
              "internalType": "uint64"
            },
            {
              "name": "refUID",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "recipient",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "revocable",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "data",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "version",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "error",
      "name": "AccessDenied",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InsufficientValue",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidEAS",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidLength",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotFromThisAttester",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotPayable",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x61016080604052346101a4576040816111c4803803809161002082856101de565b8339810103126101a45780516001600160a01b038116918282036101a45760200151916001600160a01b0383168084036101a457604080519081016001600160401b038111828210176101ca57604052600b815260208101926a737472696e67206974656d60a81b84526001608052600360a0525f60c052156101bb576084948460209560e05261012052610100525f604051958680958194630c1af44f60e31b8352606060048401525180918160648501528484015e818101830184905230602483015260016044830152601f01601f191681010301925af19081156101b0575f9161017a575b5061014052604051610fc29081610202823960805181610802015260a0518161082d015260c05181610858015260e05181610f0c015261010051816106950152610120518181816102a50152610d330152610140518181816102dd01528181610663015281816107c00152610c860152f35b90506020813d6020116101a8575b81610195602093836101de565b810103126101a457515f610108565b5f80fd5b3d9150610188565b6040513d5f823e3d90fd5b6341bc07ff60e11b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b601f909101601f19168101906001600160401b038211908210176101ca5760405256fe60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146107e35780635bf2f20d146107a95780636b122fe0146106245780637e431351146104eb57806388e5b2d9146104cc57806391db0b7e146104cc578063b3b902d414610488578063c6ec50701461021c578063c93844be14610165578063ce46e0461461014b578063e49617e114610126578063e60c3505146101265763f0ffa1850361000e5760a0366003190112610122576004356001600160401b038111610122576100e5903690600401610985565b6100ed6109b2565b916100f6610a18565b506064356001600160a01b03811681036101225760209361011a9360843593610c07565b604051908152f35b5f80fd5b6020610141610134366109e4565b61013c610f0a565b610f4b565b6040519015158152f35b34610122575f3660031901126101225760206040515f8152f35b34610122576020366003190112610122576004356001600160401b03811161012257610195903690600401610985565b60606040516101a381610a5d565b52810190602081830312610122578035906001600160401b038211610122570160208183031261012257604051906101da82610a5d565b8035906001600160401b038211610122570182601f82011215610122576102189281602061020a93359101610bd1565b8152604051918291826109c8565b0390f35b3461012257602036600319011261012257606060405161023b81610a5d565b52606061012060405161024d81610a78565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561047d575f91610378575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036103695761012001518051810190602081830312610122576020810151906001600160401b0382116101225701602081830312610122576040519061034182610a5d565b6020810151906001600160401b03821161012257602061020a92816102189601920101610b13565b635527981560e11b5f5260045ffd5b90503d805f833e6103898183610a94565b810190602081830312610122578051906001600160401b0382116101225701906101408282031261012257604051916103c183610a78565b80518352602081015160208401526103db60408201610f64565b60408401526103ec60608201610f64565b60608401526103fd60808201610f64565b608084015260a081015160a084015261041860c08201610f78565b60c084015261042960e08201610f78565b60e084015261043b6101008201610ab5565b610100840152610120810151906001600160401b03821161012257019080601f8301121561012257815161047192602001610add565b610120820152816102d5565b6040513d5f823e3d90fd5b6060366003190112610122576004356001600160401b0381116101225761011a6104b86020923690600401610985565b906104c16109b2565b604435923392610c07565b60206101416104da36610935565b926104e6929192610f0a565b610b2d565b34610122576040366003190112610122576004356001600160401b038111610122578036039060206003198301126101225760405160208082015291600482013590602219018112156101225701602460048201359101916001600160401b03821161012257813603831361012257610597608082846020956105b997876040850152816060850152848401375f838284010152601f801991011681010301601f198101835282610a94565b6040518093819263f0ffa18560e01b835260a0600484015260a48301906108e1565b5f6024830152336044830152336064830152602435608483015203815f305af1801561047d575f906105f1575b602090604051908152f35b506020813d60201161061c575b8161060b60209383610a94565b8101031261012257602090516105e6565b3d91506105fe565b34610122575f3660031901126101225760608060405161064381610a2e565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561047d575f9061070a575b606090610218604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a08301906108e1565b503d805f833e61071a8183610a94565b810190602081830312610122578051906001600160401b0382116101225701608081830312610122576040519061075082610a2e565b8051825260208101516001600160a01b038116810361012257602083015261077a60408201610ab5565b60408301526060810151926001600160401b038411610122576060936107a09201610b13565b828201526106c4565b34610122575f3660031901126101225760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610122575f3660031901126101225761021860206108d160016108267f0000000000000000000000000000000000000000000000000000000000000000610d9d565b81846108517f0000000000000000000000000000000000000000000000000000000000000000610d9d565b818061087c7f0000000000000000000000000000000000000000000000000000000000000000610d9d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610a94565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610122578235916001600160401b038311610122576020808501948460051b01011161012257565b6040600319820112610122576004356001600160401b038111610122578161095f91600401610905565b92909291602435906001600160401b0382116101225761098191600401610905565b9091565b9181601f84011215610122578235916001600160401b038311610122576020838186019501011161012257565b602435906001600160401b038216820361012257565b60406109e19260208352519160208082015201906108e1565b90565b602060031982011261012257600435906001600160401b038211610122576101409082900360031901126101225760040190565b604435906001600160a01b038216820361012257565b608081019081106001600160401b03821117610a4957604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b03821117610a4957604052565b61014081019081106001600160401b03821117610a4957604052565b90601f801991011681019081106001600160401b03821117610a4957604052565b5190811515820361012257565b6001600160401b038111610a4957601f01601f191660200190565b929192610ae982610ac2565b91610af76040519384610a94565b829481845281830111610122578281602093845f96015e010152565b9080601f830112156101225781516109e192602001610add565b929092818403610bc2575f91345b85841015610bb75781841015610ba3578360051b8086013590828211610b945784013561013e198536030181121561012257610b78908501610f4b565b15610b895760019103930192610b3b565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b929192610bdd82610ac2565b91610beb6040519384610a94565b829481845281830111610122578281602093845f960137010152565b610c15919492943691610bd1565b916040519360c08501918583106001600160401b03841117610a49576001600160401b039260405260018060a01b0316855216602084015260016040840152606083015260808201525f60a082015260405160408101908082106001600160401b03831117610a49576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610d25608083015160c060e48601526101248501906108e1565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561047d575f91610d6e575090565b90506020813d602011610d95575b81610d8960209383610a94565b81010312610122575190565b3d9150610d7c565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ee7575b806d04ee2d6d415b85acef8100000000600a921015610ecc575b662386f26fc10000811015610eb8575b6305f5e100811015610ea7575b612710811015610e98575b6064811015610e8a575b1015610e7f575b600a60216001840193610e2485610ac2565b94610e326040519687610a94565b808652610e41601f1991610ac2565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e7a57600a9091610e4c565b505090565b600190910190610e12565b606460029104930192610e0b565b61271060049104930192610e01565b6305f5e10060089104930192610df6565b662386f26fc1000060109104930192610de9565b6d04ee2d6d415b85acef810000000060209104930192610dd9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610dbf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f3c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361012257301490565b51906001600160401b038216820361012257565b51906001600160a01b03821682036101225756fea26469706673582212207e8e6df64f7e0e631d530148a51898e7d6eaad47fc82a99ad7570ff6ca61156f64736f6c634300081b0033",
    "sourceMap": "303:1001:123:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:1001:123;;540:4;759:14:6;;688:1:9;783:14:6;;-1:-1:-1;807:14:6;;708:26:9;704:76;;303:1001:123;790:10:9;;303:1001:123;790:10:9;;;789::61;;809:32;;-1:-1:-1;303:1001:123;;;;;;;;;;;872:48:61;;303:1001:123;872:48:61;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;904:4:61;303:1001:123;;;;540:4;303:1001;;;;;;-1:-1:-1;;303:1001:123;;;872:48:61;;;;;;;;;;-1:-1:-1;872:48:61;;;-1:-1:-1;851:69:61;;;303:1001:123;;;;;;;;759:14:6;303:1001:123;;;;;783:14:6;303:1001:123;;;;;807:14:6;303:1001:123;;;;;790:10:9;303:1001:123;;;;;809:32:61;303:1001:123;;;;;789:10:61;303:1001:123;;;;;;;;;;851:69:61;303:1001:123;;;;;;;;;;;;;;;;;;;;;872:48:61;;;303:1001:123;872:48:61;;303:1001:123;872:48:61;;;;;;303:1001:123;872:48:61;;;:::i;:::-;;;303:1001:123;;;;;872:48:61;;;303:1001:123;-1:-1:-1;303:1001:123;;872:48:61;;;-1:-1:-1;872:48:61;;;303:1001:123;;;-1:-1:-1;303:1001:123;;;;;704:76:9;757:12;;;-1:-1:-1;757:12:9;;-1:-1:-1;757:12:9;303:1001:123;;;;-1:-1:-1;303:1001:123;;;;;-1:-1:-1;303:1001:123;;;;;;-1:-1:-1;;303:1001:123;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610027575b3615610018575f80fd5b631574f9f360e01b5f5260045ffd5b5f3560e01c806354fd4d50146107e35780635bf2f20d146107a95780636b122fe0146106245780637e431351146104eb57806388e5b2d9146104cc57806391db0b7e146104cc578063b3b902d414610488578063c6ec50701461021c578063c93844be14610165578063ce46e0461461014b578063e49617e114610126578063e60c3505146101265763f0ffa1850361000e5760a0366003190112610122576004356001600160401b038111610122576100e5903690600401610985565b6100ed6109b2565b916100f6610a18565b506064356001600160a01b03811681036101225760209361011a9360843593610c07565b604051908152f35b5f80fd5b6020610141610134366109e4565b61013c610f0a565b610f4b565b6040519015158152f35b34610122575f3660031901126101225760206040515f8152f35b34610122576020366003190112610122576004356001600160401b03811161012257610195903690600401610985565b60606040516101a381610a5d565b52810190602081830312610122578035906001600160401b038211610122570160208183031261012257604051906101da82610a5d565b8035906001600160401b038211610122570182601f82011215610122576102189281602061020a93359101610bd1565b8152604051918291826109c8565b0390f35b3461012257602036600319011261012257606060405161023b81610a5d565b52606061012060405161024d81610a78565b5f81525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201525f60e08201525f61010082015201526040516328c44a9960e21b815260043560048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561047d575f91610378575b5060208101517f0000000000000000000000000000000000000000000000000000000000000000036103695761012001518051810190602081830312610122576020810151906001600160401b0382116101225701602081830312610122576040519061034182610a5d565b6020810151906001600160401b03821161012257602061020a92816102189601920101610b13565b635527981560e11b5f5260045ffd5b90503d805f833e6103898183610a94565b810190602081830312610122578051906001600160401b0382116101225701906101408282031261012257604051916103c183610a78565b80518352602081015160208401526103db60408201610f64565b60408401526103ec60608201610f64565b60608401526103fd60808201610f64565b608084015260a081015160a084015261041860c08201610f78565b60c084015261042960e08201610f78565b60e084015261043b6101008201610ab5565b610100840152610120810151906001600160401b03821161012257019080601f8301121561012257815161047192602001610add565b610120820152816102d5565b6040513d5f823e3d90fd5b6060366003190112610122576004356001600160401b0381116101225761011a6104b86020923690600401610985565b906104c16109b2565b604435923392610c07565b60206101416104da36610935565b926104e6929192610f0a565b610b2d565b34610122576040366003190112610122576004356001600160401b038111610122578036039060206003198301126101225760405160208082015291600482013590602219018112156101225701602460048201359101916001600160401b03821161012257813603831361012257610597608082846020956105b997876040850152816060850152848401375f838284010152601f801991011681010301601f198101835282610a94565b6040518093819263f0ffa18560e01b835260a0600484015260a48301906108e1565b5f6024830152336044830152336064830152602435608483015203815f305af1801561047d575f906105f1575b602090604051908152f35b506020813d60201161061c575b8161060b60209383610a94565b8101031261012257602090516105e6565b3d91506105fe565b34610122575f3660031901126101225760608060405161064381610a2e565b5f81525f60208201525f604082015201526040516351753e3760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f8160248160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa801561047d575f9061070a575b606090610218604051928392602084528051602085015260018060a01b0360208201511660408501526040810151151582850152015160808084015260a08301906108e1565b503d805f833e61071a8183610a94565b810190602081830312610122578051906001600160401b0382116101225701608081830312610122576040519061075082610a2e565b8051825260208101516001600160a01b038116810361012257602083015261077a60408201610ab5565b60408301526060810151926001600160401b038411610122576060936107a09201610b13565b828201526106c4565b34610122575f3660031901126101225760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610122575f3660031901126101225761021860206108d160016108267f0000000000000000000000000000000000000000000000000000000000000000610d9d565b81846108517f0000000000000000000000000000000000000000000000000000000000000000610d9d565b818061087c7f0000000000000000000000000000000000000000000000000000000000000000610d9d565b9260405199878b985191829101848a015e870190601760f91b83830152805192839101602183015e010190601760f91b84830152805192839101600283015e01015f838201520301601f198101835282610a94565b6040519182916020835260208301905b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b9181601f84011215610122578235916001600160401b038311610122576020808501948460051b01011161012257565b6040600319820112610122576004356001600160401b038111610122578161095f91600401610905565b92909291602435906001600160401b0382116101225761098191600401610905565b9091565b9181601f84011215610122578235916001600160401b038311610122576020838186019501011161012257565b602435906001600160401b038216820361012257565b60406109e19260208352519160208082015201906108e1565b90565b602060031982011261012257600435906001600160401b038211610122576101409082900360031901126101225760040190565b604435906001600160a01b038216820361012257565b608081019081106001600160401b03821117610a4957604052565b634e487b7160e01b5f52604160045260245ffd5b602081019081106001600160401b03821117610a4957604052565b61014081019081106001600160401b03821117610a4957604052565b90601f801991011681019081106001600160401b03821117610a4957604052565b5190811515820361012257565b6001600160401b038111610a4957601f01601f191660200190565b929192610ae982610ac2565b91610af76040519384610a94565b829481845281830111610122578281602093845f96015e010152565b9080601f830112156101225781516109e192602001610add565b929092818403610bc2575f91345b85841015610bb75781841015610ba3578360051b8086013590828211610b945784013561013e198536030181121561012257610b78908501610f4b565b15610b895760019103930192610b3b565b505050505050505f90565b63044044a560e21b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b505050505050600190565b63251f56a160e21b5f5260045ffd5b929192610bdd82610ac2565b91610beb6040519384610a94565b829481845281830111610122578281602093845f960137010152565b610c15919492943691610bd1565b916040519360c08501918583106001600160401b03841117610a49576001600160401b039260405260018060a01b0316855216602084015260016040840152606083015260808201525f60a082015260405160408101908082106001600160401b03831117610a49576020916040527f000000000000000000000000000000000000000000000000000000000000000081528181019283526040518093819263f17325e760e01b8352846004840152516024830152516040604483015260018060a01b0381511660648301526001600160401b03848201511660848301526040810151151560a4830152606081015160c483015260a0610d25608083015160c060e48601526101248501906108e1565b91015161010483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561047d575f91610d6e575090565b90506020813d602011610d95575b81610d8960209383610a94565b81010312610122575190565b3d9150610d7c565b805f9172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b821015610ee7575b806d04ee2d6d415b85acef8100000000600a921015610ecc575b662386f26fc10000811015610eb8575b6305f5e100811015610ea7575b612710811015610e98575b6064811015610e8a575b1015610e7f575b600a60216001840193610e2485610ac2565b94610e326040519687610a94565b808652610e41601f1991610ac2565b013660208701378401015b5f1901916f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353048015610e7a57600a9091610e4c565b505090565b600190910190610e12565b606460029104930192610e0b565b61271060049104930192610e01565b6305f5e10060089104930192610df6565b662386f26fc1000060109104930192610de9565b6d04ee2d6d415b85acef810000000060209104930192610dd9565b506040915072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8104610dbf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610f3c57565b634ca8886760e01b5f5260045ffd5b60e0013560018060a01b03811680910361012257301490565b51906001600160401b038216820361012257565b51906001600160a01b03821682036101225756fea26469706673582212207e8e6df64f7e0e631d530148a51898e7d6eaad47fc82a99ad7570ff6ca61156f64736f6c634300081b0033",
    "sourceMap": "303:1001:123:-:0;;;;;;;;;-1:-1:-1;303:1001:123;;;;;;;;1183:12:9;;;1054:5;1183:12;303:1001:123;1054:5:9;1183:12;303:1001:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;303:1001:123;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3045:39:9;303:1001:123;;;:::i;:::-;881:58:9;;:::i;:::-;3045:39;:::i;:::-;303:1001:123;;;;;;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;;;;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;1261:34;;303:1001;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2392:23:61;;303:1001:123;;;2392:23:61;;303:1001:123;;;2392:23:61;303:1001:123;;;;;;2392:3:61;303:1001:123;2392:23:61;;;;;;;303:1001:123;2392:23:61;;;303:1001:123;2429:19:61;303:1001:123;2429:19:61;;303:1001:123;2452:18:61;2429:41;2425:87;;303:1001:123;1087:16;;303:1001;;1076:46;;303:1001;;;;;;;;;1076:46;;303:1001;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;1076:46;;303:1001;1076:46;;303:1001;;;;:::i;2425:87:61:-;2491:21;;;303:1001:123;2491:21:61;303:1001:123;;2491:21:61;2392:23;;;;;303:1001:123;2392:23:61;;;;;;:::i;:::-;;;303:1001:123;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2392:23:61;;;;303:1001:123;;;;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;-1:-1:-1;;;;;303:1001:123;;;;717:149:63;303:1001:123;;;;;;;;:::i;:::-;;;;:::i;:::-;;;802:10:63;;717:149;;:::i;303:1001:123:-;;1442:1461:9;303:1001:123;;;:::i;:::-;881:58:9;;;;;;:::i;:::-;1442:1461;:::i;303:1001:123:-;;;;;;-1:-1:-1;;303:1001:123;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;711:16;;;303:1001;;;;;;;-1:-1:-1;;303:1001:123;;;;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;711:16;303:1001;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1055:104:6;;303:1001:123;;;;;711:16;;1055:104:6;;711:16:123;;;;;;:::i;:::-;303:1001;;;;;;;;;744:141;;303:1001;;744:141;;303:1001;;;;;;:::i;:::-;;;;;;821:10;303:1001;;;;821:10;303:1001;;;;;;;;;;744:141;:4;303:1001;744:4;:141;;;;;;303:1001;744:141;;;303:1001;;;;;;;;;744:141;;303:1001;744:141;;303:1001;744:141;;;;;;303:1001;744:141;;;:::i;:::-;;;303:1001;;;;;;;744:141;;;;;-1:-1:-1;744:141:123;;303:1001;;;;;;-1:-1:-1;;303:1001:123;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1497:44:61;;1522:18;303:1001:123;1497:44:61;;303:1001:123;;;1497:44:61;303:1001:123;;;;;;1497:14:61;303:1001:123;1497:44:61;;;;;;303:1001:123;1497:44:61;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1497:44:61:-;;;;303:1001:123;1497:44:61;;;;;;:::i;:::-;;;303:1001:123;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;:::i;:::-;;;;;1497:44:61;;303:1001:123;;;;;;-1:-1:-1;;303:1001:123;;;;;;;542:43:61;303:1001:123;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;1055:104:6;;303:1001:123;1072:24:6;1089:6;1072:24;:::i;:::-;1120:6;;1103:24;1120:6;1103:24;:::i;:::-;1151:6;;1134:24;1151:6;1134:24;:::i;:::-;303:1001:123;;;;;;;;;;;;1055:104:6;;;303:1001:123;;;;-1:-1:-1;;;303:1001:123;;;;;;;;;;;;;;;;;-1:-1:-1;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;1055:104:6;;;;;;;;;;:::i;:::-;303:1001:123;;;;;1055:104:6;303:1001:123;;1055:104:6;303:1001:123;;;;;;;;;;;;;;;;;;;;-1:-1:-1;303:1001:123;;;;;;;;-1:-1:-1;;303:1001:123;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;303:1001:123;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;303:1001:123;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;-1:-1:-1;;303:1001:123;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;-1:-1:-1;;303:1001:123;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;303:1001:123;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;:::o;:::-;;;;-1:-1:-1;303:1001:123;;;;;-1:-1:-1;303:1001:123;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;:::o;:::-;;;1055:104:6;;303:1001:123;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;303:1001:123;;;;;;-1:-1:-1;;303:1001:123;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;303:1001:123;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;3133:1460:9:-;;;;3340:23;;;3336:76;;3881:1;;3844:9;3896:19;3884:10;;;;;;303:1001:123;;;;;;;;;;;;;4064:22:9;;;;4060:87;;303:1001:123;;;;;;;;;;;;;;4274:33:9;303:1001:123;;;4274:33:9;:::i;:::-;;4270:84;;1489:1:0;303:1001:123;;3896:19:9;303:1001:123;3869:13:9;;;4270:84;4327:12;;;;;;;3881:1;4327:12;:::o;4060:87::-;4113:19;;;3881:1;4113:19;;3881:1;4113:19;303:1001:123;;;;3881:1:9;303:1001:123;;;;;3881:1:9;303:1001:123;3884:10:9;;;;;;;1489:1:0;3133:1460:9;:::o;3336:76::-;3386:15;;;;;;;;303:1001:123;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;303:1001:123;;;;;;:::o;879:385:63:-;303:1001:123;879:385:63;;;;303:1001:123;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;1914:299:61;;;303:1001:123;2076:4:61;303:1001:123;1914:299:61;;303:1001:123;1914:299:61;;;303:1001:123;1914:299:61;;;303:1001:123;-1:-1:-1;1914:299:61;;;303:1001:123;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;1914:299:61;303:1001:123;;;1868:18:61;303:1001:123;;1819:413:61;;;303:1001:123;;;;;;;;;;;;1791:455:61;;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;303:1001:123;;;;;;;;;;;;;;;;;;;1914:299:61;303:1001:123;;;;;;;1914:299:61;303:1001:123;1914:299:61;303:1001:123;;;;;;;;;;;;;:::i;:::-;;;;;;;;1791:455:61;303:1001:123;-1:-1:-1;1791:3:61;-1:-1:-1;;;;;303:1001:123;1791:455:61;;;;;;;-1:-1:-1;1791:455:61;;;1150:55:63;879:385;:::o;1791:455:61:-;;;1914:299;1791:455;;1914:299;1791:455;;;;;;303:1001:123;1791:455:61;;;:::i;:::-;;;303:1001:123;;;;;879:385:63;:::o;1791:455:61:-;;;-1:-1:-1;1791:455:61;;637:632:50;759:17;-1:-1:-1;25444:17:57;-1:-1:-1;;;25444:17:57;;;25440:103;;637:632:50;25560:17:57;25569:8;26140:7;25560:17;;;25556:103;;637:632:50;25685:8:57;25676:17;;;25672:103;;637:632:50;25801:7:57;25792:16;;;25788:100;;637:632:50;25914:7:57;25905:16;;;25901:100;;637:632:50;26027:7:57;26018:16;;;26014:100;;637:632:50;26131:16:57;;26127:66;;637:632:50;26140:7:57;874:92:50;779:1;303:1001:123;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1055:104:6;;303:1001:123;;:::i;:::-;;;;;;;874:92:50;;;979:247;-1:-1:-1;;303:1001:123;;-1:-1:-1;;;1033:111:50;;;;303:1001:123;1033:111:50;303:1001:123;1194:10:50;;1190:21;;26140:7:57;979:247:50;;;;1190:21;1206:5;;637:632;:::o;26127:66:57:-;26177:1;303:1001:123;;;;26127:66:57;;26014:100;26027:7;26098:1;303:1001:123;;;;26014:100:57;;;25901;25914:7;25985:1;303:1001:123;;;;25901:100:57;;;25788;25801:7;25872:1;303:1001:123;;;;25788:100:57;;;25672:103;25685:8;25758:2;303:1001:123;;;;25672:103:57;;;25556;25569:8;25642:2;303:1001:123;;;;25556:103:57;;;25440;-1:-1:-1;25526:2:57;;-1:-1:-1;;;;303:1001:123;;25440:103:57;;6040:128:9;6109:4;-1:-1:-1;;;;;303:1001:123;6087:10:9;:27;6083:79;;6040:128::o;6083:79::-;6137:14;;;;;;;;1174:235:61;1365:20;;303:1001:123;;;;;;;;;;;;;1397:4:61;1365:37;1174:235;:::o;303:1001:123:-;;;-1:-1:-1;;;;;303:1001:123;;;;;;:::o;:::-;;;-1:-1:-1;;;;;303:1001:123;;;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2532": [
        {
          "start": 2050,
          "length": 32
        }
      ],
      "2534": [
        {
          "start": 2093,
          "length": 32
        }
      ],
      "2536": [
        {
          "start": 2136,
          "length": 32
        }
      ],
      "3008": [
        {
          "start": 3852,
          "length": 32
        }
      ],
      "49128": [
        {
          "start": 1685,
          "length": 32
        }
      ],
      "49131": [
        {
          "start": 677,
          "length": 32
        },
        {
          "start": 3379,
          "length": 32
        }
      ],
      "49133": [
        {
          "start": 733,
          "length": 32
        },
        {
          "start": 1635,
          "length": 32
        },
        {
          "start": 1984,
          "length": 32
        },
        {
          "start": 3206,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ATTESTATION_SCHEMA()": "5bf2f20d",
    "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e60c3505",
    "decodeObligationData(bytes)": "c93844be",
    "doObligation((string),bytes32)": "7e431351",
    "doObligationForRaw(bytes,uint64,address,address,bytes32)": "f0ffa185",
    "doObligationRaw(bytes,uint64,bytes32)": "b3b902d4",
    "getObligationData(bytes32)": "c6ec5070",
    "getSchema()": "6b122fe0",
    "isPayable()": "ce46e046",
    "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "91db0b7e",
    "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": "88e5b2d9",
    "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": "e49617e1",
    "version()": "54fd4d50"
  },
  "rawMetadata": `{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract ISchemaRegistry","name":"_schemaRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessDenied","type":"error"},{"inputs":[],"name":"InsufficientValue","type":"error"},{"inputs":[],"name":"InvalidEAS","type":"error"},{"inputs":[],"name":"InvalidLength","type":"error"},{"inputs":[],"name":"NotFromThisAttester","type":"error"},{"inputs":[],"name":"NotPayable","type":"error"},{"inputs":[],"name":"ATTESTATION_SCHEMA","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeObligationData","outputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"data","type":"tuple"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligation","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationForRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"}],"name":"doObligationRaw","outputs":[{"internalType":"bytes32","name":"uid_","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getObligationData","outputs":[{"components":[{"internalType":"string","name":"item","type":"string"}],"internalType":"struct StringObligation.ObligationData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."},"version()":{"notice":"Returns the full semver contract version."}},"version":1}},"settings":{"compilationTarget":{"src/obligations/StringObligation.sol":"StringObligation"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/StringObligation.sol":{"keccak256":"0x2602aa6e68ba6072a9ea9c489b343e21013bb9bb70dfdaddfd4d3a68d3dbd523","license":"UNLICENSED","urls":["bzz-raw://7da4540dcdccf57865d89c5ef3df1cef416b3c82b0294701d0fc8b0f4eaca834","dweb:/ipfs/Qmd1XT8BTqrzz14gAEYdnxGieCVtVQscSHrTJqdK5FVFXf"]}},"version":1}`,
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract ISchemaRegistry",
              "name": "_schemaRegistry",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AccessDenied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidEAS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotFromThisAttester"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotPayable"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ATTESTATION_SCHEMA",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "attest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "decodeObligationData",
          "outputs": [
            {
              "internalType": "struct StringObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "string",
                  "name": "item",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct StringObligation.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "string",
                  "name": "item",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "doObligation",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationForRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "doObligationRaw",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "uid_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObligationData",
          "outputs": [
            {
              "internalType": "struct StringObligation.ObligationData",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "string",
                  "name": "item",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract ISchemaResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "schema",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "isPayable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiAttest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiRevoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "uid",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "schema",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "time",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "expirationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "revocationTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "refUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "revocable",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "revoke",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The new attestation."
            },
            "returns": {
              "_0": "Whether the attestation is valid."
            }
          },
          "isPayable()": {
            "returns": {
              "_0": "Whether the resolver supports ETH transfers."
            }
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The new attestations.",
              "values": "Explicit ETH amounts which were sent with each attestation."
            },
            "returns": {
              "_0": "Whether all the attestations are valid."
            }
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "params": {
              "attestations": "The existing attestations to be revoked.",
              "values": "Explicit ETH amounts which were sent with each revocation."
            },
            "returns": {
              "_0": "Whether the attestations can be revoked."
            }
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "params": {
              "attestation": "The existing attestation to be revoked."
            },
            "returns": {
              "_0": "Whether the attestation can be revoked."
            }
          },
          "version()": {
            "returns": {
              "_0": "Semver contract version as a string."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation and verifies whether it's valid."
          },
          "isPayable()": {
            "notice": "Checks if the resolver can be sent ETH."
          },
          "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes multiple attestations and verifies whether they are valid."
          },
          "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
            "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
          },
          "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
            "notice": "Processes an attestation revocation and verifies if it can be revoked."
          },
          "version()": {
            "notice": "Returns the full semver contract version."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/obligations/StringObligation.sol": "StringObligation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/StringObligation.sol": {
        "keccak256": "0x2602aa6e68ba6072a9ea9c489b343e21013bb9bb70dfdaddfd4d3a68d3dbd523",
        "urls": [
          "bzz-raw://7da4540dcdccf57865d89c5ef3df1cef416b3c82b0294701d0fc8b0f4eaca834",
          "dweb:/ipfs/Qmd1XT8BTqrzz14gAEYdnxGieCVtVQscSHrTJqdK5FVFXf"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 123
};

// src/clients/stringObligation.ts
var stringObligationDecodeFunction = (0, import_viem9.getAbiItem)({
  abi: abi49.abi,
  name: "decodeObligationData"
});
var stringObligationDataType = stringObligationDecodeFunction.outputs[0];
var makeStringObligationClient = (viemClient, addresses) => {
  const decode = (obligationData) => {
    return (0, import_viem9.decodeAbiParameters)([stringObligationDataType], obligationData)[0];
  };
  const doObligation = async (item, refUID = "0x0000000000000000000000000000000000000000000000000000000000000000") => {
    const { request } = await viemClient.simulateContract({
      address: addresses.stringObligation,
      abi: abi49.abi,
      functionName: "doObligation",
      args: [{ item }, refUID]
    });
    const hash = await viemClient.writeContract(request);
    const attested = await getAttestedEventFromTxHash(viemClient, hash);
    return { hash, attested };
  };
  const getZodParseFunc = (opts) => {
    let command = opts.safe ? "safeParse" : "parse";
    if (opts.async) {
      command += "Async";
    }
    return command;
  };
  const getSchema = async () => await viemClient.readContract({
    address: addresses.stringObligation,
    abi: abi49.abi,
    functionName: "ATTESTATION_SCHEMA"
  });
  return {
    encode: (data) => {
      return (0, import_viem9.encodeAbiParameters)([stringObligationDataType], [data]);
    },
    decode,
    decodeJson: (obligationData) => {
      const decoded = decode(obligationData);
      return JSON.parse(decoded.item);
    },
    decodeZod: (obligationData, schema, schemaOptions, parseOptions = { async: false, safe: false }) => {
      const parseFunc = getZodParseFunc(parseOptions);
      const decoded = decode(obligationData);
      return schema[parseFunc](JSON.parse(decoded.item), schemaOptions);
    },
    decodeArkType: (obligationData, schema) => {
      const decoded = decode(obligationData);
      return schema(JSON.parse(decoded.item));
    },
    doObligation,
    doObligationJson: async (item, refUid) => {
      return await doObligation(JSON.stringify(item), refUid);
    },
    getSchema,
    /**
     * Gets a complete obligation from its attestation UID, combining attestation metadata with decoded obligation data
     * @param uid - UID of the attestation
     * @returns The complete obligation including attestation metadata and decoded obligation data
     */
    getObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid, addresses), getSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem9.decodeAbiParameters)([stringObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data
      };
    },
    getJsonObligation: async (uid) => {
      const [attestation, schema] = await Promise.all([getAttestation(viemClient, uid, addresses), getSchema()]);
      if (attestation.schema !== schema) {
        throw new Error(`Unsupported schema: ${attestation.schema}`);
      }
      const data = (0, import_viem9.decodeAbiParameters)([stringObligationDataType], attestation.data)[0];
      return {
        ...attestation,
        data: {
          item: JSON.parse(data.item)
        }
      };
    }
  };
};

// src/clients/tokenBundle.ts
var import_viem10 = require("viem");

// src/contracts/TokenBundleBarterUtils.ts
var abi50 = {
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_eas",
          "type": "address",
          "internalType": "contract IEAS"
        },
        {
          "name": "_bundleEscrow",
          "type": "address",
          "internalType": "contract TokenBundleEscrowObligation2"
        },
        {
          "name": "_bundlePayment",
          "type": "address",
          "internalType": "contract TokenBundlePaymentObligation2"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "buyBundleForBundle",
      "inputs": [
        {
          "name": "bidBundle",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "askBundle",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
          "components": [
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "payBundleForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndEscrowBundle",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "permits",
          "type": "tuple[]",
          "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "deadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndEscrowBundleForBundle",
      "inputs": [
        {
          "name": "bidBundle",
          "type": "tuple",
          "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
          "components": [
            {
              "name": "arbiter",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "demand",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "askBundle",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
          "components": [
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "expiration",
          "type": "uint64",
          "internalType": "uint64"
        },
        {
          "name": "permits",
          "type": "tuple[]",
          "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "deadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayBundle",
      "inputs": [
        {
          "name": "data",
          "type": "tuple",
          "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
          "components": [
            {
              "name": "nativeAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "erc20Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc20Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc721Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc721TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Tokens",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "erc1155TokenIds",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "erc1155Amounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "payee",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "permits",
          "type": "tuple[]",
          "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "deadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "permitAndPayBundleForBundle",
      "inputs": [
        {
          "name": "buyAttestation",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "permits",
          "type": "tuple[]",
          "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "deadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "error",
      "name": "CouldntCollectEscrow",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidSignatureLength",
      "inputs": []
    }
  ],
  "bytecode": {
    "object": "0x60803460b957601f611b2938819003918201601f19168301916001600160401b0383118484101760bd5780849260609460405283398101031260b95780516001600160a01b038116919082900360b95760208101516001600160a01b038116919082900360b957604001516001600160a01b038116929083900360b95760018060a01b03195f5416175f5560018060a01b0319600154161760015560018060a01b03196002541617600255604051611a5790816100d28239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c806307cadb2c1461096e5780630dfaf3d6146106c35780631f5c022814610531578063304b6b82146104af578063319b52b0146101145763e8be0b831461005b575f80fd5b346101105760203660031901126101105760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa918215610105576100d560206100c561012082966100db965f916100e3575b5001518280825183010191016112d8565b015184808251830101910161143d565b90611900565b604051908152f35b6100ff91503d805f833e6100f78183610c02565b81019061113b565b5f6100b4565b6040513d5f823e3d90fd5b5f80fd5b34610110576060366003190112610110576004356001600160401b03811161011057806004019080360361014060031982011261011057602435926001600160401b038416809403610110576044356001600160401b0381116101105761017f903690600401610afb565b94909260648501906101918285610b2b565b905087036104a05791946084810192905f5b6101ad8487610b2b565b905081101561029a5780878a926101de6101d96101ca898c610b2b565b6001600160a01b039491610b60565b610b84565b6001546001600160a01b03169116610200846101fa8b8d610b2b565b90610b60565b35606061020e868887610b98565b01359260406102408761022a610225828c8b610b98565b610ba8565b99602061023883838c610b98565b013598610b98565b013590833b15610110576102705f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af19182156101055760019261028a575b50016101a3565b5f61029491610c02565b8a610283565b5060015460405163632faedd60e01b8152608060048201529591946001600160a01b039182169389926102cc85610c64565b1660848901526024870135906022190181121561011057860191602460048401359301916001600160401b038411610110578336038313610110578761042c866101246104246104036103e38f9d60209f8f9d998e6103925f9f829f946101e461043f9f6103c3986103739160448661038b976103a59c61014060a48d0152816101c48d0152878c01375f86828c010152601f8019910116890195013560c4890152611029565b91909260831982888303010160e4880152019161105d565b928a611029565b916101046083198286030191015261109c565b6103b260a48a0188611029565b8d830360831901888f01529061105d565b6103d060c4890187611029565b8c8303608319016101448e01529061109c565b6103f060e4880186611029565b8b8303608319016101648d01529061105d565b610411610104870185611029565b8a8303608319016101848c01529061109c565b930190611029565b858303608319016101a48701529061109c565b90602483015233604483015233606483015203925af18015610105575f9061046d575b602090604051908152f35b506020813d602011610498575b8161048760209383610c02565b810103126101105760209051610462565b3d915061047a565b634be6321b60e01b5f5260045ffd5b34610110576060366003190112610110576004356001600160401b038111610110576101406003198236030112610110576024356001600160401b038111610110576101206003198236030112610110576020916100db9161052b610520610515610ae5565b933690600401610d6c565b913690600401610efc565b906116be565b34610110576040366003190112610110576004356024356001600160401b03811161011057610564903690600401610afb565b919060245f60018060a01b03815416604051928380926328c44a9960e21b82528760048301525afa908115610105576105b76101206105c8936020935f916106a9575001518280825183010191016112d8565b01516020808251830101910161143d565b91602083019081515185036104a05790926040810191905f5b8551805182101561069d5787919086906001600160a01b0390610605908490611587565b511660018060a01b03600254169061061e848951611587565b51606061062c868887610b98565b01359260406106438761022a610225828c8b610b98565b013590833b15610110576106735f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af19182156101055760019261068d575b50016105e1565b5f61069791610c02565b88610686565b60206100db8486611900565b6106bd91503d805f833e6100f78183610c02565b886100b4565b34610110576040366003190112610110576004356001600160401b0381116101105780600401906101206003198236030112610110576024356001600160401b03811161011057610718903690600401610afb565b9260248301926107288483610b2b565b905085036104a0579260448401905f5b6107428285610b2b565b90508110156107fa578085889261075f6101d96101ca878a610b2b565b6002546001600160a01b0316911661077b846101fa898b610b2b565b356060610789868887610b98565b01359260406107a08761022a610225828c8b610b98565b013590833b15610110576107d05f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af1918215610105576001926107ea575b5001610738565b5f6107f491610c02565b886107e3565b50600254604051635a63ba4b60e01b81526060600482015284356064820152936001600160a01b039091169284928392889290916108389083611029565b6084860161012090526101848601906108509261105d565b9061085b9083611029565b8583036063190160a4870152610871929161109c565b61087e6064840183611029565b8583036063190160c4870152610894929161105d565b6108a16084840183611029565b8583036063190160e48701526108b7929161109c565b6108c460a4840183611029565b858303606319016101048701526108db929161105d565b6108e860c4840183611029565b858303606319016101248701526108ff929161109c565b9060e4830161090d91611029565b84830360631901610144860152610924929161109c565b906001600160a01b039061093b9061010401610c64565b1661016483015233602483015233604483015203815a6020945f91f18015610105575f9061046d57602090604051908152f35b34610110576080366003190112610110576004356001600160401b038111610110578060040190610140600319823603011261011057602435916001600160401b038311610110576101206003198436030112610110576109cd610ae5565b906064356001600160401b038111610110576109ed903690600401610afb565b94909260648501906109ff8285610b2b565b905087036104a0579194608401915f5b610a198386610b2b565b9050811015610ad15780868992610a366101d96101ca888b610b2b565b6001546001600160a01b03169116610a52846101fa8a8c610b2b565b356060610a60868887610b98565b0135926040610a778761022a610225828c8b610b98565b013590833b1561011057610aa75f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af191821561010557600192610ac1575b5001610a0f565b5f610acb91610c02565b89610aba565b60206100db838961052b610520368b610d6c565b604435906001600160401b038216820361011057565b9181601f84011215610110578235916001600160401b038311610110576020808501948460071b01011161011057565b903590601e198136030182121561011057018035906001600160401b03821161011057602001918160051b3603831361011057565b9190811015610b705760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101105790565b9190811015610b705760071b0190565b3560ff811681036101105790565b61014081019081106001600160401b03821117610bd257604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610bd257604052565b90601f801991011681019081106001600160401b03821117610bd257604052565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b35906001600160a01b038216820361011057565b6001600160401b038111610bd257601f01601f191660200190565b6001600160401b038111610bd25760051b60200190565b9080601f83011215610110578135610cc181610c93565b92610ccf6040519485610c02565b81845260208085019260051b82010192831161011057602001905b828210610cf75750505090565b60208091610d0484610c64565b815201910190610cea565b9080601f83011215610110578135610d2681610c93565b92610d346040519485610c02565b81845260208085019260051b82010192831161011057602001905b828210610d5c5750505090565b8135815260209182019101610d4f565b9190610140838203126101105760405190610d8682610bb6565b8193610d9181610c64565b835260208101356001600160401b03811161011057810182601f82011215610110578035610dbe81610c78565b91610dcc6040519384610c02565b818352846020838301011161011057815f926020809301838601378301015260208401526040810135604084015260608101356001600160401b0381116101105782610e19918301610caa565b606084015260808101356001600160401b0381116101105782610e3d918301610d0f565b608084015260a08101356001600160401b0381116101105782610e61918301610caa565b60a084015260c08101356001600160401b0381116101105782610e85918301610d0f565b60c084015260e08101356001600160401b0381116101105782610ea9918301610caa565b60e08401526101008101356001600160401b0381116101105782610ece918301610d0f565b610100840152610120810135916001600160401b0383116101105761012092610ef79201610d0f565b910152565b919091610120818403126101105760405190610f1782610be6565b81938135835260208201356001600160401b0381116101105781610f3c918401610caa565b602084015260408201356001600160401b0381116101105781610f60918401610d0f565b604084015260608201356001600160401b0381116101105781610f84918401610caa565b606084015260808201356001600160401b0381116101105781610fa8918401610d0f565b608084015260a08201356001600160401b0381116101105781610fcc918401610caa565b60a084015260c08201356001600160401b0381116101105781610ff0918401610d0f565b60c084015260e0820135906001600160401b038211610110578261101e6101009492610ef794869401610d0f565b60e086015201610c64565b9035601e19823603018112156101105701602081359101916001600160401b038211610110578160051b3603831361011057565b916020908281520191905f5b8181106110765750505090565b909192602080600192838060a01b0361108e88610c64565b168152019401929101611069565b81835290916001600160fb1b0383116101105760209260051b809284830137010190565b51906001600160401b038216820361011057565b51906001600160a01b038216820361011057565b5190811515820361011057565b81601f820112156101105780519061110c82610c78565b9261111a6040519485610c02565b8284526020838301011161011057815f9260208093018386015e8301015290565b602081830312610110578051906001600160401b038211610110570161014081830312610110576040519161116f83610bb6565b8151835260208201516020840152611189604083016110c0565b604084015261119a606083016110c0565b60608401526111ab608083016110c0565b608084015260a082015160a08401526111c660c083016110d4565b60c08401526111d760e083016110d4565b60e08401526111e961010083016110e8565b6101008401526101208201516001600160401b0381116101105761120d92016110f5565b61012082015290565b9080601f8301121561011057815161122d81610c93565b9261123b6040519485610c02565b81845260208085019260051b82010192831161011057602001905b8282106112635750505090565b60208091611270846110d4565b815201910190611256565b9080601f8301121561011057815161129281610c93565b926112a06040519485610c02565b81845260208085019260051b82010192831161011057602001905b8282106112c85750505090565b81518152602091820191016112bb565b602081830312610110578051906001600160401b038211610110570161014081830312610110576040519161130c83610bb6565b611315826110d4565b835260208201516001600160401b03811161011057816113369184016110f5565b60208401526040820151604084015260608201516001600160401b0381116101105781611364918401611216565b606084015260808201516001600160401b038111610110578161138891840161127b565b608084015260a08201516001600160401b03811161011057816113ac918401611216565b60a084015260c08201516001600160401b03811161011057816113d091840161127b565b60c084015260e08201516001600160401b03811161011057816113f4918401611216565b60e08401526101008201516001600160401b038111610110578161141991840161127b565b6101008401526101208201516001600160401b0381116101105761120d920161127b565b602081830312610110578051906001600160401b038211610110570161012081830312610110576040519161147183610be6565b8151835260208201516001600160401b0381116101105781611494918401611216565b602084015260408201516001600160401b03811161011057816114b891840161127b565b604084015260608201516001600160401b03811161011057816114dc918401611216565b606084015260808201516001600160401b038111610110578161150091840161127b565b608084015260a08201516001600160401b0381116101105781611524918401611216565b60a084015260c08201516001600160401b038111610110578161154891840161127b565b60c084015260e0820151916001600160401b038311610110576115736101009261157e94830161127b565b60e0850152016110d4565b61010082015290565b8051821015610b705760209160051b010190565b90602080835192838152019201905f5b8181106115b85750505090565b82516001600160a01b03168452602093840193909201916001016115ab565b90602080835192838152019201905f5b8181106115f45750505090565b82518452602093840193909201916001016115e7565b90815181526101006116ab61169961168761167561166361165161163f60208a015161012060208b01526101208a019061159b565b60408a015189820360408b01526115d7565b606089015188820360608a015261159b565b608088015187820360808901526115d7565b60a087015186820360a088015261159b565b60c086015185820360c08701526115d7565b60e085015184820360e08601526115d7565b928101516001600160a01b031691015290565b6001546002546040805160208082015293956001600160a01b0393841695939092169284916116f0919083019061160a565b03601f19810184526117029084610c02565b6040850151606086015195608081015160a082015160c08301519060e084015192610100850151946101200151956040519861173d8a610bb6565b89526020808a019a8b526040808b0192835260608b019d8e526080808c0194855260a08c0195865260c08c0196875260e08c019788526101008c019889526101208c01998a52905163632faedd60e01b8152600481019190915299516001600160a01b031660848b0152995161014060a48b015280516101c48b01819052999c8d9b8c9b91928291016101e48d015e808b016101e4015f9052601f1990601f01168a01915160c48b015251906083198a82036101e4010160e48b01526101e4016118069161159b565b9051888203608319016101048a015261181f91906115d7565b905187820360831901610124890152611838919061159b565b90518682036083190161014488015261185191906115d7565b90518582036083190161016487015261186a919061159b565b90518482036083190161018486015261188391906115d7565b9051838203608319016101a485015261189c91906115d7565b906001600160401b0316602483015233604483015233606483015203815a6020945f91f1908115610105575f916118d1575090565b90506020813d6020116118f8575b816118ec60209383610c02565b81010312610110575190565b3d91506118df565b60206119375f9360018060a01b036002541690604051958680948193635a63ba4b60e01b835260606004840152606483019061160a565b33602483015233604483015203925af1918215610105575f926119ec575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610105575f916119b2575b50156119a35790565b63a97a981d60e01b5f5260045ffd5b90506020813d6020116119e4575b816119cd60209383610c02565b81010312610110576119de906110e8565b5f61199a565b3d91506119c0565b9091506020813d602011611a19575b81611a0860209383610c02565b810103126101105751906020611955565b3d91506119fb56fea26469706673582212208c7f3cfa24410ac94ba621f2649fb2ec9aecd0358c8eae87b6e4ead654ccc6d664736f6c634300081b0033",
    "sourceMap": "431:6770:139:-:0;;;;;;;;;;;;;-1:-1:-1;;431:6770:139;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;-1:-1:-1;431:6770:139;;;;;;;973:28;431:6770;;;973:28;431:6770;;;;;;;1011:30;431:6770;;;1011:30;431:6770;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;-1:-1:-1;431:6770:139;;;;;-1:-1:-1;431:6770:139",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610011575f80fd5b5f3560e01c806307cadb2c1461096e5780630dfaf3d6146106c35780631f5c022814610531578063304b6b82146104af578063319b52b0146101145763e8be0b831461005b575f80fd5b346101105760203660031901126101105760043560245f60018060a01b03815416604051928380926328c44a9960e21b82528660048301525afa918215610105576100d560206100c561012082966100db965f916100e3575b5001518280825183010191016112d8565b015184808251830101910161143d565b90611900565b604051908152f35b6100ff91503d805f833e6100f78183610c02565b81019061113b565b5f6100b4565b6040513d5f823e3d90fd5b5f80fd5b34610110576060366003190112610110576004356001600160401b03811161011057806004019080360361014060031982011261011057602435926001600160401b038416809403610110576044356001600160401b0381116101105761017f903690600401610afb565b94909260648501906101918285610b2b565b905087036104a05791946084810192905f5b6101ad8487610b2b565b905081101561029a5780878a926101de6101d96101ca898c610b2b565b6001600160a01b039491610b60565b610b84565b6001546001600160a01b03169116610200846101fa8b8d610b2b565b90610b60565b35606061020e868887610b98565b01359260406102408761022a610225828c8b610b98565b610ba8565b99602061023883838c610b98565b013598610b98565b013590833b15610110576102705f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af19182156101055760019261028a575b50016101a3565b5f61029491610c02565b8a610283565b5060015460405163632faedd60e01b8152608060048201529591946001600160a01b039182169389926102cc85610c64565b1660848901526024870135906022190181121561011057860191602460048401359301916001600160401b038411610110578336038313610110578761042c866101246104246104036103e38f9d60209f8f9d998e6103925f9f829f946101e461043f9f6103c3986103739160448661038b976103a59c61014060a48d0152816101c48d0152878c01375f86828c010152601f8019910116890195013560c4890152611029565b91909260831982888303010160e4880152019161105d565b928a611029565b916101046083198286030191015261109c565b6103b260a48a0188611029565b8d830360831901888f01529061105d565b6103d060c4890187611029565b8c8303608319016101448e01529061109c565b6103f060e4880186611029565b8b8303608319016101648d01529061105d565b610411610104870185611029565b8a8303608319016101848c01529061109c565b930190611029565b858303608319016101a48701529061109c565b90602483015233604483015233606483015203925af18015610105575f9061046d575b602090604051908152f35b506020813d602011610498575b8161048760209383610c02565b810103126101105760209051610462565b3d915061047a565b634be6321b60e01b5f5260045ffd5b34610110576060366003190112610110576004356001600160401b038111610110576101406003198236030112610110576024356001600160401b038111610110576101206003198236030112610110576020916100db9161052b610520610515610ae5565b933690600401610d6c565b913690600401610efc565b906116be565b34610110576040366003190112610110576004356024356001600160401b03811161011057610564903690600401610afb565b919060245f60018060a01b03815416604051928380926328c44a9960e21b82528760048301525afa908115610105576105b76101206105c8936020935f916106a9575001518280825183010191016112d8565b01516020808251830101910161143d565b91602083019081515185036104a05790926040810191905f5b8551805182101561069d5787919086906001600160a01b0390610605908490611587565b511660018060a01b03600254169061061e848951611587565b51606061062c868887610b98565b01359260406106438761022a610225828c8b610b98565b013590833b15610110576106735f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af19182156101055760019261068d575b50016105e1565b5f61069791610c02565b88610686565b60206100db8486611900565b6106bd91503d805f833e6100f78183610c02565b886100b4565b34610110576040366003190112610110576004356001600160401b0381116101105780600401906101206003198236030112610110576024356001600160401b03811161011057610718903690600401610afb565b9260248301926107288483610b2b565b905085036104a0579260448401905f5b6107428285610b2b565b90508110156107fa578085889261075f6101d96101ca878a610b2b565b6002546001600160a01b0316911661077b846101fa898b610b2b565b356060610789868887610b98565b01359260406107a08761022a610225828c8b610b98565b013590833b15610110576107d05f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af1918215610105576001926107ea575b5001610738565b5f6107f491610c02565b886107e3565b50600254604051635a63ba4b60e01b81526060600482015284356064820152936001600160a01b039091169284928392889290916108389083611029565b6084860161012090526101848601906108509261105d565b9061085b9083611029565b8583036063190160a4870152610871929161109c565b61087e6064840183611029565b8583036063190160c4870152610894929161105d565b6108a16084840183611029565b8583036063190160e48701526108b7929161109c565b6108c460a4840183611029565b858303606319016101048701526108db929161105d565b6108e860c4840183611029565b858303606319016101248701526108ff929161109c565b9060e4830161090d91611029565b84830360631901610144860152610924929161109c565b906001600160a01b039061093b9061010401610c64565b1661016483015233602483015233604483015203815a6020945f91f18015610105575f9061046d57602090604051908152f35b34610110576080366003190112610110576004356001600160401b038111610110578060040190610140600319823603011261011057602435916001600160401b038311610110576101206003198436030112610110576109cd610ae5565b906064356001600160401b038111610110576109ed903690600401610afb565b94909260648501906109ff8285610b2b565b905087036104a0579194608401915f5b610a198386610b2b565b9050811015610ad15780868992610a366101d96101ca888b610b2b565b6001546001600160a01b03169116610a52846101fa8a8c610b2b565b356060610a60868887610b98565b0135926040610a778761022a610225828c8b610b98565b013590833b1561011057610aa75f969287936040519a8b988997889663d505accf60e01b88523360048901610c23565b03925af191821561010557600192610ac1575b5001610a0f565b5f610acb91610c02565b89610aba565b60206100db838961052b610520368b610d6c565b604435906001600160401b038216820361011057565b9181601f84011215610110578235916001600160401b038311610110576020808501948460071b01011161011057565b903590601e198136030182121561011057018035906001600160401b03821161011057602001918160051b3603831361011057565b9190811015610b705760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101105790565b9190811015610b705760071b0190565b3560ff811681036101105790565b61014081019081106001600160401b03821117610bd257604052565b634e487b7160e01b5f52604160045260245ffd5b61012081019081106001600160401b03821117610bd257604052565b90601f801991011681019081106001600160401b03821117610bd257604052565b9360c095919897969360ff9360e087019a60018060a01b0316875260018060a01b031660208701526040860152606085015216608083015260a08201520152565b35906001600160a01b038216820361011057565b6001600160401b038111610bd257601f01601f191660200190565b6001600160401b038111610bd25760051b60200190565b9080601f83011215610110578135610cc181610c93565b92610ccf6040519485610c02565b81845260208085019260051b82010192831161011057602001905b828210610cf75750505090565b60208091610d0484610c64565b815201910190610cea565b9080601f83011215610110578135610d2681610c93565b92610d346040519485610c02565b81845260208085019260051b82010192831161011057602001905b828210610d5c5750505090565b8135815260209182019101610d4f565b9190610140838203126101105760405190610d8682610bb6565b8193610d9181610c64565b835260208101356001600160401b03811161011057810182601f82011215610110578035610dbe81610c78565b91610dcc6040519384610c02565b818352846020838301011161011057815f926020809301838601378301015260208401526040810135604084015260608101356001600160401b0381116101105782610e19918301610caa565b606084015260808101356001600160401b0381116101105782610e3d918301610d0f565b608084015260a08101356001600160401b0381116101105782610e61918301610caa565b60a084015260c08101356001600160401b0381116101105782610e85918301610d0f565b60c084015260e08101356001600160401b0381116101105782610ea9918301610caa565b60e08401526101008101356001600160401b0381116101105782610ece918301610d0f565b610100840152610120810135916001600160401b0383116101105761012092610ef79201610d0f565b910152565b919091610120818403126101105760405190610f1782610be6565b81938135835260208201356001600160401b0381116101105781610f3c918401610caa565b602084015260408201356001600160401b0381116101105781610f60918401610d0f565b604084015260608201356001600160401b0381116101105781610f84918401610caa565b606084015260808201356001600160401b0381116101105781610fa8918401610d0f565b608084015260a08201356001600160401b0381116101105781610fcc918401610caa565b60a084015260c08201356001600160401b0381116101105781610ff0918401610d0f565b60c084015260e0820135906001600160401b038211610110578261101e6101009492610ef794869401610d0f565b60e086015201610c64565b9035601e19823603018112156101105701602081359101916001600160401b038211610110578160051b3603831361011057565b916020908281520191905f5b8181106110765750505090565b909192602080600192838060a01b0361108e88610c64565b168152019401929101611069565b81835290916001600160fb1b0383116101105760209260051b809284830137010190565b51906001600160401b038216820361011057565b51906001600160a01b038216820361011057565b5190811515820361011057565b81601f820112156101105780519061110c82610c78565b9261111a6040519485610c02565b8284526020838301011161011057815f9260208093018386015e8301015290565b602081830312610110578051906001600160401b038211610110570161014081830312610110576040519161116f83610bb6565b8151835260208201516020840152611189604083016110c0565b604084015261119a606083016110c0565b60608401526111ab608083016110c0565b608084015260a082015160a08401526111c660c083016110d4565b60c08401526111d760e083016110d4565b60e08401526111e961010083016110e8565b6101008401526101208201516001600160401b0381116101105761120d92016110f5565b61012082015290565b9080601f8301121561011057815161122d81610c93565b9261123b6040519485610c02565b81845260208085019260051b82010192831161011057602001905b8282106112635750505090565b60208091611270846110d4565b815201910190611256565b9080601f8301121561011057815161129281610c93565b926112a06040519485610c02565b81845260208085019260051b82010192831161011057602001905b8282106112c85750505090565b81518152602091820191016112bb565b602081830312610110578051906001600160401b038211610110570161014081830312610110576040519161130c83610bb6565b611315826110d4565b835260208201516001600160401b03811161011057816113369184016110f5565b60208401526040820151604084015260608201516001600160401b0381116101105781611364918401611216565b606084015260808201516001600160401b038111610110578161138891840161127b565b608084015260a08201516001600160401b03811161011057816113ac918401611216565b60a084015260c08201516001600160401b03811161011057816113d091840161127b565b60c084015260e08201516001600160401b03811161011057816113f4918401611216565b60e08401526101008201516001600160401b038111610110578161141991840161127b565b6101008401526101208201516001600160401b0381116101105761120d920161127b565b602081830312610110578051906001600160401b038211610110570161012081830312610110576040519161147183610be6565b8151835260208201516001600160401b0381116101105781611494918401611216565b602084015260408201516001600160401b03811161011057816114b891840161127b565b604084015260608201516001600160401b03811161011057816114dc918401611216565b606084015260808201516001600160401b038111610110578161150091840161127b565b608084015260a08201516001600160401b0381116101105781611524918401611216565b60a084015260c08201516001600160401b038111610110578161154891840161127b565b60c084015260e0820151916001600160401b038311610110576115736101009261157e94830161127b565b60e0850152016110d4565b61010082015290565b8051821015610b705760209160051b010190565b90602080835192838152019201905f5b8181106115b85750505090565b82516001600160a01b03168452602093840193909201916001016115ab565b90602080835192838152019201905f5b8181106115f45750505090565b82518452602093840193909201916001016115e7565b90815181526101006116ab61169961168761167561166361165161163f60208a015161012060208b01526101208a019061159b565b60408a015189820360408b01526115d7565b606089015188820360608a015261159b565b608088015187820360808901526115d7565b60a087015186820360a088015261159b565b60c086015185820360c08701526115d7565b60e085015184820360e08601526115d7565b928101516001600160a01b031691015290565b6001546002546040805160208082015293956001600160a01b0393841695939092169284916116f0919083019061160a565b03601f19810184526117029084610c02565b6040850151606086015195608081015160a082015160c08301519060e084015192610100850151946101200151956040519861173d8a610bb6565b89526020808a019a8b526040808b0192835260608b019d8e526080808c0194855260a08c0195865260c08c0196875260e08c019788526101008c019889526101208c01998a52905163632faedd60e01b8152600481019190915299516001600160a01b031660848b0152995161014060a48b015280516101c48b01819052999c8d9b8c9b91928291016101e48d015e808b016101e4015f9052601f1990601f01168a01915160c48b015251906083198a82036101e4010160e48b01526101e4016118069161159b565b9051888203608319016101048a015261181f91906115d7565b905187820360831901610124890152611838919061159b565b90518682036083190161014488015261185191906115d7565b90518582036083190161016487015261186a919061159b565b90518482036083190161018486015261188391906115d7565b9051838203608319016101a485015261189c91906115d7565b906001600160401b0316602483015233604483015233606483015203815a6020945f91f1908115610105575f916118d1575090565b90506020813d6020116118f8575b816118ec60209383610c02565b81010312610110575190565b3d91506118df565b60206119375f9360018060a01b036002541690604051958680948193635a63ba4b60e01b835260606004840152606483019061160a565b33602483015233604483015203925af1918215610105575f926119ec575b50600154604051632c713cd960e01b8152600481019290925260248201839052602090829060449082905f906001600160a01b03165af1908115610105575f916119b2575b50156119a35790565b63a97a981d60e01b5f5260045ffd5b90506020813d6020116119e4575b816119cd60209383610c02565b81010312610110576119de906110e8565b5f61199a565b3d91506119c0565b9091506020813d602011611a19575b81611a0860209383610c02565b810103126101105751906020611955565b3d91506119fb56fea26469706673582212208c7f3cfa24410ac94ba621f2649fb2ec9aecd0358c8eae87b6e4ead654ccc6d664736f6c634300081b0033",
    "sourceMap": "431:6770:139:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;431:6770:139;;;;;;6761:34;431:6770;;;;;;;;;;;;;;;;;;6761:34;;;431:6770;6761:34;;431:6770;6761:34;;;;;;;7020:111;431:6770;6869:80;6893:8;6761:34;;7149:43;6761:34;431:6770;6761:34;;;431:6770;6893:8;;;431:6770;;;;6869:80;;;;;;:::i;:::-;7044:17;;431:6770;;;;7020:111;;;;;;:::i;:::-;7149:43;;:::i;:::-;431:6770;;;;;;6761:34;;;;;;431:6770;6761:34;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;431:6770;;;;;;;;;;;;;;;;;;;-1:-1:-1;;431:6770:139;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;:::i;:::-;1293:16;;;;;;;;;;;:::i;:::-;1275:41;;;;1271:90;;1409:10;;1594:17;;;;-1:-1:-1;431:6770:139;1450:3;1425:16;;;;:::i;:::-;1421:27;;;;;;;1482:16;;;;:19;;:16;;;;:::i;:::-;-1:-1:-1;;;;;431:6770:139;;1482:19;:::i;:::-;;:::i;:::-;431:6770;;-1:-1:-1;;;;;431:6770:139;;;1594:20;:17;;;;;:::i;:::-;:20;;:::i;:::-;431:6770;;1632:10;;;;;:::i;:::-;:19;431:6770;1669:10;431:6770;1729:10;1669;:12;:10;;;;;:::i;:::-;:12;:::i;:::-;1699:10;431:6770;1699:10;;;;;:::i;:::-;:12;431:6770;1729:10;;:::i;:::-;:12;431:6770;1469:286;;;;;;;431:6770;;;;;;;;;;;;;;;;;1469:286;;1527:10;431:6770;1469:286;;;:::i;:::-;;;;;;;;;;431:6770;1469:286;;;1450:3;;431:6770;1409:10;;1469:286;431:6770;1469:286;;;:::i;:::-;;;;1421:27;-1:-1:-1;431:6770:139;;;;-1:-1:-1;;;1795:148:139;;1594:17;431:6770;1795:148;;431:6770;;1421:27;;-1:-1:-1;;;;;431:6770:139;;;;1421:27;;431:6770;1421:27;431:6770;:::i;:::-;;1594:17;431:6770;;;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;:::i;:::-;;;;;;1527:10;431:6770;;;;1527:10;1293:16;431:6770;;;1795:148;;;;;;;;431:6770;1795:148;;;1404:362;431:6770;;;;;;;;1795:148;;431:6770;1795:148;;431:6770;1795:148;;;;;;431:6770;1795:148;;;:::i;:::-;;;431:6770;;;;;;;1795:148;;;;;-1:-1:-1;1795:148:139;;1271:90;4646:24;;;431:6770;1337:24;431:6770;;1337:24;431:6770;;;;;;-1:-1:-1;;431:6770:139;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;6567:53;431:6770;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;6567:53;;:::i;431:6770::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;5359:34;;;431:6770;5359:34;;431:6770;5359:34;;;;;;;5467:80;5491:8;5618:111;5359:34;431:6770;5359:34;431:6770;5359:34;;;5491:8;;;431:6770;;;;5467:80;;;;;;:::i;:::-;5642:17;;431:6770;;;;5618:111;;;;;;:::i;:::-;5762:18;431:6770;5762:18;;;;;431:6770;5744:43;;5740:92;;5880:10;;431:6770;6070:19;;;-1:-1:-1;431:6770:139;5923:3;5896:18;;431:6770;;5892:29;;;;;431:6770;;;;;-1:-1:-1;;;;;431:6770:139;5955:21;;431:6770;;5955:21;:::i;:::-;431:6770;;;;;;;6038:13;431:6770;;6070:19;:22;:19;;;:22;:::i;:::-;431:6770;6110:19;:10;;;;;:::i;:::-;:19;431:6770;6147:10;431:6770;6207:10;6147;:12;:10;;;;;:::i;6207:::-;:12;431:6770;5942:291;;;;;;;431:6770;;;;;;;;;;;;;;;;;5942:291;;6002:10;431:6770;5942:291;;;:::i;:::-;;;;;;;;;;431:6770;5942:291;;;5923:3;;431:6770;5880:10;;5942:291;431:6770;5942:291;;;:::i;:::-;;;;5892:29;431:6770;6261:43;5892:29;;6261:43;:::i;5359:34::-;;;;;;431:6770;5359:34;;;;;;:::i;:::-;;;;431:6770;;;;;;-1:-1:-1;;431:6770:139;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;:::i;:::-;2166:16;431:6770;2166:16;;;;;;;:::i;:::-;2148:41;;;;2144:90;;2282:10;2468:17;;;;431:6770;2323:3;2298:16;;;;:::i;:::-;2294:27;;;;;;;2355:16;;;;:19;;:16;;;;:::i;:19::-;2436:13;431:6770;-1:-1:-1;;;;;431:6770:139;;;2468:20;:17;;;;;:::i;:20::-;431:6770;2506:19;:10;;;;;:::i;:::-;:19;431:6770;2543:10;431:6770;2603:10;2543;:12;:10;;;;;:::i;2603:::-;:12;431:6770;2342:287;;;;;;;431:6770;;;;;;;;;;;;;;;;;2342:287;;2400:10;431:6770;2342:287;;;:::i;:::-;;;;;;;;;;431:6770;2342:287;;;2323:3;;431:6770;2282:10;;2342:287;431:6770;2342:287;;;:::i;:::-;;;;2294:27;-1:-1:-1;2436:13:139;431:6770;;;-1:-1:-1;;;2657:59:139;;2506:19;431:6770;2657:59;;431:6770;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;2294:27;;431:6770;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;431:6770:139;;;;;;:::i;:::-;;;;;;2400:10;431:6770;;;;2400:10;2468:17;431:6770;;;2657:59;;;431:6770;2657:59;431:6770;2657:59;;;;;;431:6770;2657:59;;;431:6770;;;;;;;;;;;;;;-1:-1:-1;;431:6770:139;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;:::i;:::-;4597:21;;;431:6770;4597:21;;;;;;;:::i;:::-;4579:46;;;;4575:95;;4718:10;;4913:22;;;431:6770;4764:3;4734:21;;;;:::i;:::-;4730:32;;;;;;;4796:21;;;;:24;;:21;;;;:::i;:24::-;431:6770;;-1:-1:-1;;;;;431:6770:139;;;4913:25;:22;;;;;:::i;:25::-;431:6770;;4956:10;;;;;:::i;:::-;:19;431:6770;4993:10;431:6770;5053:10;4993;:12;:10;;;;;:::i;5053:::-;:12;431:6770;4783:296;;;;;;;431:6770;;;;;;;;;;;;;;;;;4783:296;;4846:10;431:6770;4783:296;;;:::i;:::-;;;;;;;;;;431:6770;4783:296;;;4764:3;;431:6770;4718:10;;4783:296;431:6770;4783:296;;;:::i;:::-;;;;4730:32;431:6770;5107:53;4730:32;;431:6770;;;4730:32;431:6770;:::i;:::-;;;;-1:-1:-1;;;;;431:6770:139;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;:::o;:::-;;;;-1:-1:-1;431:6770:139;;;;;-1:-1:-1;431:6770:139;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;431:6770:139;;;;;;:::o;:::-;-1:-1:-1;;;;;431:6770:139;;;;;;-1:-1:-1;;431:6770:139;;;;:::o;:::-;-1:-1:-1;;;;;431:6770:139;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;431:6770:139;;;;;;:::o;:::-;;;-1:-1:-1;;;;;431:6770:139;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;431:6770:139;;;;;:::o;2729:1055::-;431:6770;;3117:13;431:6770;;;;3161:21;;;;431:6770;2729:1055;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;:::i;:::-;3161:21;431:6770;;3161:21;;;;;;;;:::i;:::-;431:6770;3218:22;;431:6770;3275:21;;;;3332:22;;;;;3390;;;;3450:24;;;;3511:23;;;;;3573:25;;;;;3636:24;;;;431:6770;;;;;;;:::i;:::-;;;3161:21;3034:645;;;431:6770;;;;3034:645;;;431:6770;;;3275:21;3034:645;;431:6770;;;3332:22;3034:645;;;431:6770;;;3390:22;3034:645;;431:6770;;;3450:24;3034:645;;431:6770;;;3511:23;3034:645;;431:6770;;;3573:25;3034:645;;431:6770;;;3636:24;3034:645;;431:6770;;;;;-1:-1:-1;;;2988:789:139;;;;;431:6770;;;;;;-1:-1:-1;;;;;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;;3034:645;;431:6770;;;;;;;;;;;;-1:-1:-1;431:6770:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;431:6770:139;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;431:6770:139;;;;;3725:10;431:6770;;;;3725:10;431:6770;;;;2988:789;;;3161:21;2988:789;-1:-1:-1;2988:789:139;;;;;;;-1:-1:-1;2988:789:139;;;2969:808;2729:1055;:::o;2988:789::-;;;3161:21;2988:789;;3161:21;2988:789;;;;;;431:6770;2988:789;;;:::i;:::-;;;431:6770;;;;;2729:1055;:::o;2988:789::-;;;-1:-1:-1;2988:789:139;;3790:475;431:6770;;-1:-1:-1;3790:475:139;431:6770;;;;;3988:13;431:6770;;;;;;;;;;;;;;3988:107;;431:6770;3988:107;;;431:6770;;;;;;:::i;:::-;4051:10;431:6770;;;;4051:10;431:6770;;;;3988:107;;;;;;;;;-1:-1:-1;3988:107:139;;;3790:475;-1:-1:-1;431:6770:139;;;;-1:-1:-1;;;4111:59:139;;3988:107;4111:59;;431:6770;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;431:6770:139;4111:59;;;;;;;-1:-1:-1;4111:59:139;;;3790:475;4110:60;;4106:120;;3790:475;:::o;4106:120::-;4193:22;;;-1:-1:-1;4193:22:139;3988:107;-1:-1:-1;4193:22:139;4111:59;;;431:6770;4111:59;;431:6770;4111:59;;;;;;431:6770;4111:59;;;:::i;:::-;;;431:6770;;;;;;;:::i;:::-;4111:59;;;;;;-1:-1:-1;4111:59:139;;3988:107;;;;431:6770;3988:107;;431:6770;3988:107;;;;;;431:6770;3988:107;;;:::i;:::-;;;431:6770;;;;;;;3988:107;;;;;-1:-1:-1;3988:107:139;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "buyBundleForBundle((address,bytes,uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),(uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64)": "304b6b82",
    "payBundleForBundle(bytes32)": "e8be0b83",
    "permitAndEscrowBundle((address,bytes,uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),uint64,(uint8,bytes32,bytes32,uint256)[])": "319b52b0",
    "permitAndEscrowBundleForBundle((address,bytes,uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[]),(uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),uint64,(uint8,bytes32,bytes32,uint256)[])": "07cadb2c",
    "permitAndPayBundle((uint256,address[],uint256[],address[],uint256[],address[],uint256[],uint256[],address),(uint8,bytes32,bytes32,uint256)[])": "0dfaf3d6",
    "permitAndPayBundleForBundle(bytes32,(uint8,bytes32,bytes32,uint256)[])": "1f5c0228"
  },
  "rawMetadata": '{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEAS","name":"_eas","type":"address"},{"internalType":"contract TokenBundleEscrowObligation2","name":"_bundleEscrow","type":"address"},{"internalType":"contract TokenBundlePaymentObligation2","name":"_bundlePayment","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CouldntCollectEscrow","type":"error"},{"inputs":[],"name":"InvalidSignatureLength","type":"error"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation2.ObligationData","name":"bidBundle","type":"tuple"},{"components":[{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation2.ObligationData","name":"askBundle","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"}],"name":"buyBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"}],"name":"payBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation2.ObligationData","name":"data","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndEscrowBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"arbiter","type":"address"},{"internalType":"bytes","name":"demand","type":"bytes"},{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"}],"internalType":"struct TokenBundleEscrowObligation2.ObligationData","name":"bidBundle","type":"tuple"},{"components":[{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation2.ObligationData","name":"askBundle","type":"tuple"},{"internalType":"uint64","name":"expiration","type":"uint64"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndEscrowBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"nativeAmount","type":"uint256"},{"internalType":"address[]","name":"erc20Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc20Amounts","type":"uint256[]"},{"internalType":"address[]","name":"erc721Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc721TokenIds","type":"uint256[]"},{"internalType":"address[]","name":"erc1155Tokens","type":"address[]"},{"internalType":"uint256[]","name":"erc1155TokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"erc1155Amounts","type":"uint256[]"},{"internalType":"address","name":"payee","type":"address"}],"internalType":"struct TokenBundlePaymentObligation2.ObligationData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndPayBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"buyAttestation","type":"bytes32"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct TokenBundleBarterUtils.ERC20PermitSignature[]","name":"permits","type":"tuple[]"}],"name":"permitAndPayBundleForBundle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/TokenBundleBarterUtils.sol":"TokenBundleBarterUtils"},"evmVersion":"prague","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@eas/=lib/eas-contracts/contracts/",":@openzeppelin/=lib/openzeppelin-contracts/",":@src/=src/",":@test/=test/",":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",":eas-contracts/=lib/eas-contracts/contracts/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"sources":{"lib/eas-contracts/contracts/Common.sol":{"keccak256":"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685","license":"MIT","urls":["bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d","dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"]},"lib/eas-contracts/contracts/IEAS.sol":{"keccak256":"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12","license":"MIT","urls":["bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880","dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"]},"lib/eas-contracts/contracts/ISchemaRegistry.sol":{"keccak256":"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754","license":"MIT","urls":["bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158","dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"]},"lib/eas-contracts/contracts/ISemver.sol":{"keccak256":"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18","license":"MIT","urls":["bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0","dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"]},"lib/eas-contracts/contracts/Semver.sol":{"keccak256":"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9","license":"MIT","urls":["bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808","dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"]},"lib/eas-contracts/contracts/resolver/ISchemaResolver.sol":{"keccak256":"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb","license":"MIT","urls":["bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f","dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"]},"lib/eas-contracts/contracts/resolver/SchemaResolver.sol":{"keccak256":"0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983","license":"MIT","urls":["bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828","dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7","license":"MIT","urls":["bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746","dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7","license":"MIT","urls":["bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce","dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol":{"keccak256":"0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50","license":"MIT","urls":["bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd","dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","license":"MIT","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"]},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1","license":"MIT","urls":["bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd","dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de","license":"MIT","urls":["bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827","dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c","license":"MIT","urls":["bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4","dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2","license":"MIT","urls":["bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440","dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e","license":"MIT","urls":["bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9","dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","license":"MIT","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c","license":"MIT","urls":["bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966","dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481","license":"MIT","urls":["bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb","dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0","license":"MIT","urls":["bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426","dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"]},"src/ArbiterUtils.sol":{"keccak256":"0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab","license":"UNLICENSED","urls":["bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12","dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"]},"src/BaseAttester.sol":{"keccak256":"0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa","license":"UNLICENSED","urls":["bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084","dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"]},"src/BaseEscrowObligation.sol":{"keccak256":"0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7","license":"UNLICENSED","urls":["bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a","dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"]},"src/BaseObligation.sol":{"keccak256":"0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8","license":"UNLICENSED","urls":["bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707","dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"]},"src/IArbiter.sol":{"keccak256":"0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab","license":"UNLICENSED","urls":["bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038","dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"]},"src/obligations/TokenBundleEscrowObligation2.sol":{"keccak256":"0xe3cde4fcad8804af87adde0ddee8572295ed1824b87ddbb250c494ea57618448","license":"UNLICENSED","urls":["bzz-raw://b1e9814b52e5d1bbf8835f8c8915e2becfeae764e9b9197a09195daa30fe203c","dweb:/ipfs/QmVBaUumVpsrePhM9eFw98oqHP7PU1YMhpJ69AS6YqgaUE"]},"src/obligations/TokenBundlePaymentObligation2.sol":{"keccak256":"0x34523578b407b96be7a4185436ad80ae3586667e79d71995f535985e7d19b080","license":"UNLICENSED","urls":["bzz-raw://9826ec72414c6c19c08373a2d0a0920466ee3bd59d38e9c2463d68a7f33719ca","dweb:/ipfs/QmVjNey3Hb8wD7qxD1jiSMiPwVsJic5pgKPZudocd8PhzV"]},"src/utils/TokenBundleBarterUtils.sol":{"keccak256":"0xd1214c81e271e4dadffdee5d1b42f7aa9a6fc2818e6945a97368b9630a701259","license":"UNLICENSED","urls":["bzz-raw://682d52d1c56cf81d6f296ad79cb31d0a9e1bd30a7165a07b7e7908dfcf4d1e09","dweb:/ipfs/QmNTeBmSVhoygyZmci7drv3RWFVRsqzQybdLdPQoFMa1xN"]}},"version":1}',
  "metadata": {
    "compiler": {
      "version": "0.8.27+commit.40a35a09"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IEAS",
              "name": "_eas",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundleEscrowObligation2",
              "name": "_bundleEscrow",
              "type": "address"
            },
            {
              "internalType": "contract TokenBundlePaymentObligation2",
              "name": "_bundlePayment",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CouldntCollectEscrow"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSignatureLength"
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
              "name": "bidBundle",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
              "name": "askBundle",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "buyBundleForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payBundleForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              "name": "permits",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndEscrowBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundleEscrowObligation2.ObligationData",
              "name": "bidBundle",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "arbiter",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "demand",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
              "name": "askBundle",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "uint64",
              "name": "expiration",
              "type": "uint64"
            },
            {
              "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              "name": "permits",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndEscrowBundleForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct TokenBundlePaymentObligation2.ObligationData",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "erc20Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc20Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc721Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc721TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address[]",
                  "name": "erc1155Tokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155TokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "erc1155Amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "address",
                  "name": "payee",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              "name": "permits",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "buyAttestation",
              "type": "bytes32"
            },
            {
              "internalType": "struct TokenBundleBarterUtils.ERC20PermitSignature[]",
              "name": "permits",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permitAndPayBundleForBundle",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eas/=lib/eas-contracts/contracts/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@src/=src/",
        "@test/=test/",
        "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
        "eas-contracts/=lib/eas-contracts/contracts/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/utils/TokenBundleBarterUtils.sol": "TokenBundleBarterUtils"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/eas-contracts/contracts/Common.sol": {
        "keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
        "urls": [
          "bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
          "dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/IEAS.sol": {
        "keccak256": "0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12",
        "urls": [
          "bzz-raw://49e448c26c08952df034692d2ab3519dd40a1ebbeae4ce68b294567441933880",
          "dweb:/ipfs/QmWHcudjskUSCjgqsNWE65LVfWvcYB2vBn8RB1SmzvRLNR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISchemaRegistry.sol": {
        "keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
        "urls": [
          "bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
          "dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/ISemver.sol": {
        "keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
        "urls": [
          "bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
          "dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/Semver.sol": {
        "keccak256": "0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9",
        "urls": [
          "bzz-raw://30c36e580cd93d9acb13e1a11e833946a8bd0bd2a8d1b2be049f0d96e0989808",
          "dweb:/ipfs/QmXmQTxKjSrUWutafQsqkbGufXqtzxuDAiMMJjXCHXiEqh"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
        "keccak256": "0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb",
        "urls": [
          "bzz-raw://cf1cabacfb15c9bace8280b540b52e5aa440e1b4eba675f9782c34ce0f03902f",
          "dweb:/ipfs/QmakYcK4xbrijzvoaBCmBJK6HeaBqbXxWKtDQ1z62aXwCR"
        ],
        "license": "MIT"
      },
      "lib/eas-contracts/contracts/resolver/SchemaResolver.sol": {
        "keccak256": "0x385d8c0edbdc96af15cf8f22333183162561cbf7d3fb0df95287741e59899983",
        "urls": [
          "bzz-raw://ff7e8a17f69dcb7ddc937446e868d34baea61bbe249a8f5d8be486ab93001828",
          "dweb:/ipfs/QmUz9i7ViNK9kUWHeJRtE44HmpbxBDGJBjyec2aPD6Nn3Q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "keccak256": "0xb6503f663515b6713adb63eb2acf19401d8f73af39c7194f7dc3d8249c8643c7",
        "urls": [
          "bzz-raw://abdedc1b84ae26c1a151825e9f785fa8187ead91be438671fd18c7a41958b746",
          "dweb:/ipfs/QmdYFTdzQbrWJsJgH8mX1rPTt8V7DZFAXxjxNTaY6LEa6b"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "keccak256": "0x0f8b8696348d5a57b13d44f5cc63894f0368038c06f6d00bdeda6f9aa13127e7",
        "urls": [
          "bzz-raw://718159abc22da25c2de7e70f6b7bbbf6b6e20c3db6681893f8049b57f4ee65ce",
          "dweb:/ipfs/QmPJeQ7Qj7mrAwfR69sLjyjUSb44B7yAJXvMG1NFtoTJKv"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
        "keccak256": "0xf4852d52ec991c38fb7875f3573e42509c8414a8c1e3106e7c12ef8c8a568b50",
        "urls": [
          "bzz-raw://b0e4b3479f7c4c56beb0116700862f5595fa00af74739fafd6ba39cdcc7e13fd",
          "dweb:/ipfs/QmS6sMpcUqXQQR1LTS7gCyXi3D2bafoS2PsfVKqFFywmLw"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
        "urls": [
          "bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
          "dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0xe9d36d0c892aea68546d53f21e02223f7f542295c10110a0764336f9ffeab6d1",
        "urls": [
          "bzz-raw://34d4d72a89193f4d5223763e6d871443fb32a22d6024566843f4ee42eed68bdd",
          "dweb:/ipfs/Qmbsc6kJJNhrkNXP7g7KeqzRETQEvzSXg3ZmJmVLhaEahB"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de",
        "urls": [
          "bzz-raw://36a3930518e5c4a3c83839aaa136b863af513e6eeee6a3654e8f910f8007f827",
          "dweb:/ipfs/QmcU1b6SYYUMiXJ6jd5HY6sgYjJLdBu4smak1X1FDgkoaA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        "keccak256": "0x156d11cd8394cb9245b0bb9d7a27f5b3e7193e3cec7b91a66474ae01af8d818c",
        "urls": [
          "bzz-raw://6f171e65be237fe4aaa2f7a74862c10a06535b8c04baa42e848a63c6fc96bcd4",
          "dweb:/ipfs/QmUdz8WHcrjqYmbRaz5PFN2N2thfvQjcqTorZUfcmWTfat"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0xca3b393fc1c04a4411d3776adb9763a8780f6fb04b618f2807faa5f295ef19d2",
        "urls": [
          "bzz-raw://597006f69dd3711b302e2cf4fea2ee0f3b016a9c609dc05d2aac541911503440",
          "dweb:/ipfs/QmUHZnXu6tTDKqaSNWU4iwyovyL7fXTrZrabu7ijnHNUJG"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x6fac27fb1885a1d9fd2ce3f8fac4e44a6596ca4d44207c9ef2541ba8c941291e",
        "urls": [
          "bzz-raw://2079378abdb36baec15c23bc2353b73a3d28d1d0610b436b0c1c4e6fa61d65c9",
          "dweb:/ipfs/QmVZkRFMzKW7sLaugKSTbMNnUBKWF3QDsoMi5uoQFyVMjf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
        "urls": [
          "bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
          "dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xd2fb25b789ccaf6bf50b147ecff4c9d62d05d3f5c5d562fdf568f6926a2a280c",
        "urls": [
          "bzz-raw://521e2df6ed2080c9ae2f442b27a827551ab96ff2e5f920ad6dc978c355b4b966",
          "dweb:/ipfs/Qme1Z6dU7ZDQMfKiHwpLejAyFGsP9HpijvX9uzxivEGjga"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x8cdcfbd2484c2e7db797f57ff8731fe11d7ab0092c7a1112f8ad6047ad6d4481",
        "urls": [
          "bzz-raw://356742c148ca77b9d953059072c32cf9d0d98ae782129fe442c73a6736bfd7cb",
          "dweb:/ipfs/QmZN5jdoBbCihsv1RK8n6pf6cC89pi77KGAasn7ZvyuNTn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xb569f4a67508470689fe1152c382b20c9332039fe80ff5953b1dba5bcdca0dd0",
        "urls": [
          "bzz-raw://bfbe7b1a9f44e94489c0490811b894fcc74d8362202e8f2ccf4a8c2ecca63426",
          "dweb:/ipfs/QmZyNhacF4B4WC8r1mDKyWuzjdVsWgA6RmYt31yoxAPsNY"
        ],
        "license": "MIT"
      },
      "src/ArbiterUtils.sol": {
        "keccak256": "0x331f8ec571b787c47c25bffd13ae354ac37b737e8776b04330895bce0eb3f7ab",
        "urls": [
          "bzz-raw://acec88f2f4780f0ce633ce968c34aa5ecee60a6462ec6d2c972e8712c05aca12",
          "dweb:/ipfs/QmXcTvFKsyqHKxNBoAM46NGwuzj8ASuCPbCde4idcQbqit"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseAttester.sol": {
        "keccak256": "0x3f26ee96b6ef02860fafb1c2c97399fc3aa8e183d32063a8736b3761ecbe25aa",
        "urls": [
          "bzz-raw://c6568d73465cc18236f309bd56fae4bbd541ca3eb8cb35c481318279c956d084",
          "dweb:/ipfs/QmWJfeD2KPjU5G3gKcbKzMf6cnDUtkE4kE7ANne43pjVAa"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseEscrowObligation.sol": {
        "keccak256": "0x338b77b9aa4457afd08cf279d2bd94b6fedaaa26e61ac4701dd225f9cc4722d7",
        "urls": [
          "bzz-raw://486a2a4dfd68ea0330ee7eae88c2a0771f96fc85ffcbb2532b0f814773e4829a",
          "dweb:/ipfs/QmNgCRPUAYCyneeogULmz18ErtECVsypmT186RWj2wFzWd"
        ],
        "license": "UNLICENSED"
      },
      "src/BaseObligation.sol": {
        "keccak256": "0xfc182e8549bc93747c5ded3b4ed124d9b1308b24af4cc3fa7c8c672955c32eb8",
        "urls": [
          "bzz-raw://6ae0065b6035fff36b95cc1b8fa0d53f7df527aa5384aea5091f185d6b01f707",
          "dweb:/ipfs/Qma79wHXnb5EcweiQ7upwwA4Syt5iw9QCpZodwzLw4R2iv"
        ],
        "license": "UNLICENSED"
      },
      "src/IArbiter.sol": {
        "keccak256": "0x5e37834970553135dbd3f5cdf4aa9cd8dc20f57a8642cee85366b211b1d111ab",
        "urls": [
          "bzz-raw://b57275fcd9c40acc33af244aa3d19b62bb7291a9b1b3cb3592ecedb0202d1038",
          "dweb:/ipfs/Qmd9YTFnardXdksfuUQkm2TcxREaFNG2j4MazYmaui5Bff"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundleEscrowObligation2.sol": {
        "keccak256": "0xe3cde4fcad8804af87adde0ddee8572295ed1824b87ddbb250c494ea57618448",
        "urls": [
          "bzz-raw://b1e9814b52e5d1bbf8835f8c8915e2becfeae764e9b9197a09195daa30fe203c",
          "dweb:/ipfs/QmVBaUumVpsrePhM9eFw98oqHP7PU1YMhpJ69AS6YqgaUE"
        ],
        "license": "UNLICENSED"
      },
      "src/obligations/TokenBundlePaymentObligation2.sol": {
        "keccak256": "0x34523578b407b96be7a4185436ad80ae3586667e79d71995f535985e7d19b080",
        "urls": [
          "bzz-raw://9826ec72414c6c19c08373a2d0a0920466ee3bd59d38e9c2463d68a7f33719ca",
          "dweb:/ipfs/QmVjNey3Hb8wD7qxD1jiSMiPwVsJic5pgKPZudocd8PhzV"
        ],
        "license": "UNLICENSED"
      },
      "src/utils/TokenBundleBarterUtils.sol": {
        "keccak256": "0xd1214c81e271e4dadffdee5d1b42f7aa9a6fc2818e6945a97368b9630a701259",
        "urls": [
          "bzz-raw://682d52d1c56cf81d6f296ad79cb31d0a9e1bd30a7165a07b7e7908dfcf4d1e09",
          "dweb:/ipfs/QmNTeBmSVhoygyZmci7drv3RWFVRsqzQybdLdPQoFMa1xN"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "id": 139
};

// src/clients/tokenBundle.ts
var makeTokenBundleClient = (viemClient, addresses) => {
  const escrowObligationDataType = (0, import_viem10.getAbiItem)({
    abi: abi40.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const paymentObligationDataType = (0, import_viem10.getAbiItem)({
    abi: abi41.abi,
    name: "decodeObligationData"
  }).outputs[0];
  const encodeEscrowObligationRaw = (data) => {
    return (0, import_viem10.encodeAbiParameters)([escrowObligationDataType], [data]);
  };
  const encodePaymentObligationRaw = (data) => {
    return (0, import_viem10.encodeAbiParameters)([paymentObligationDataType], [data]);
  };
  return {
    encodeEscrowObligationRaw,
    encodePaymentObligationRaw,
    /**
     * Encodes TokenBundleEscrowObligation.ObligationData to bytes using type-based parameters.
     * @param bundle - Bundle of tokens for payment
     * @param demand - Custom demand details
     * @returns the abi encoded ObligationData as bytes
     */
    encodeEscrowObligation: (bundle, demand) => {
      const flatBundle = flattenTokenBundle(bundle);
      return encodeEscrowObligationRaw({
        ...flatBundle,
        arbiter: demand.arbiter,
        demand: demand.demand
      });
    },
    /**
     * Encodes TokenBundlePaymentObligation.ObligationData to bytes using type-based parameters.
     * @param bundle - Bundle of tokens for payment
     * @param payee - Address to receive the payment
     * @returns the abi encoded ObligationData as bytes
     */
    encodePaymentObligation: (bundle, payee) => {
      const flatBundle = flattenTokenBundle(bundle);
      return encodePaymentObligationRaw({
        ...flatBundle,
        payee
      });
    },
    /**
     * Decodes TokenBundleEscrowObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodeEscrowObligation: (obligationData) => {
      return (0, import_viem10.decodeAbiParameters)([escrowObligationDataType], obligationData)[0];
    },
    /**
     * Decodes TokenBundlePaymentObligation.ObligationData from bytes.
     * @param obligationData - ObligationData as abi encoded bytes
     * @returns the decoded ObligationData object
     */
    decodePaymentObligation: (obligationData) => {
      return (0, import_viem10.decodeAbiParameters)([paymentObligationDataType], obligationData)[0];
    },
    /**
     * Collects payment from an escrow after fulfillment
     * @param buyAttestation - UID of the buy attestation
     * @param fulfillment - UID of the fulfillment attestation
     * @returns Transaction hash
     */
    collectEscrow: async (buyAttestation, fulfillment) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "collectEscrow",
        args: [buyAttestation, fulfillment]
      });
      return hash;
    },
    /**
     * Collects expired escrow funds
     * @param buyAttestation - UID of the expired buy attestation
     * @returns Transaction hash
     */
    reclaimExpired: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "reclaimExpired",
        args: [buyAttestation]
      });
      return hash;
    },
    /**
     * Creates an escrow with a bundle of tokens for a custom demand
     * @param price - Bundle of tokens for payment
     * @param item - Custom demand details including arbiter and demand data
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.tokenBundle.buyWithBundle(
     *   tokenBundle,
     *   { arbiter: arbitratorAddress, demand: encodedDemand },
     *   0n,
     * );
     * ```
     */
    buyWithBundle: async (price, item, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleEscrowObligation,
        abi: abi40.abi,
        functionName: "doObligation",
        args: [
          {
            ...flattenTokenBundle(price),
            ...item
          },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates a direct payment obligation with a bundle of tokens
     * @param price - Bundle of tokens for payment
     * @param payee - Address to receive the payment
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const payment = await client.tokenBundle.payWithBundle(
     *   tokenBundle,
     *   receiverAddress,
     * );
     * ```
     */
    payWithBundle: async (price, payee) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundlePaymentObligation,
        abi: abi41.abi,
        functionName: "doObligation",
        args: [
          {
            ...flattenTokenBundle(price),
            payee
          }
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Creates an escrow for trading one bundle of tokens for another
     * @param bid - Bundle of tokens offered
     * @param ask - Bundle of tokens requested
     * @param expiration - Escrow expiration time (0 for no expiration)
     * @returns Transaction hash and attestation
     *
     * @example
     * ```ts
     * const escrow = await client.tokenBundle.buyBundleForBundle(
     *   myTokenBundle,
     *   theirTokenBundle,
     *   0n,
     * );
     * ```
     */
    buyBundleForBundle: async (bid, ask, expiration) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleBarterUtils,
        abi: abi50.abi,
        functionName: "buyBundleForBundle",
        args: [
          {
            ...flattenTokenBundle(bid),
            arbiter: "0x0000000000000000000000000000000000000000",
            demand: "0x",
            nativeAmount: 0n
          },
          { ...flattenTokenBundle(ask), payee: viemClient.account.address, nativeAmount: 0n },
          expiration
        ]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Fulfills a bundle-bundle trade
     * @param buyAttestation - UID of the buy attestation to fulfill
     * @returns Transaction hash
     *
     * @example
     * ```ts
     * const payment = await client.tokenBundle.payBundleForBundle(
     *   escrow.attested.uid,
     * );
     * ```
     */
    payBundleForBundle: async (buyAttestation) => {
      const hash = await viemClient.writeContract({
        address: addresses.tokenBundleBarterUtils,
        abi: abi50.abi,
        functionName: "payBundleForBundle",
        args: [buyAttestation]
      });
      const attested = await getAttestedEventFromTxHash(viemClient, hash);
      return { hash, attested };
    },
    /**
     * Approves all tokens in a bundle for trading
     * @param bundle - Bundle of tokens to approve
     * @param purpose - Purpose of approval (escrow or payment)
     * @returns Array of transaction hashes
     *
     * @example
     * ```ts
     * const approvals = await client.tokenBundle.approve(
     *   tokenBundle,
     *   "escrow"
     * );
     * ```
     */
    approve: async (bundle, purpose) => {
      const target = purpose === "escrow" ? addresses.tokenBundleEscrowObligation : addresses.tokenBundlePaymentObligation;
      const results = [];
      for (const token of bundle.erc20s) {
        const hash = await viemClient.writeContract({
          address: token.address,
          abi: abi38.abi,
          functionName: "approve",
          args: [target, token.value]
        });
        results.push(hash);
      }
      const erc721AddressesSet = new Set(bundle.erc721s.map((token) => token.address));
      for (const address of erc721AddressesSet) {
        const hash = await viemClient.writeContract({
          address,
          abi: abi44.abi,
          functionName: "setApprovalForAll",
          args: [target, true]
        });
        results.push(hash);
      }
      const erc1155AddressesSet = new Set(bundle.erc1155s.map((token) => token.address));
      for (const address of erc1155AddressesSet) {
        const hash = await viemClient.writeContract({
          address,
          abi: abi48.abi,
          functionName: "setApprovalForAll",
          args: [target, true]
        });
        results.push(hash);
      }
      await Promise.all(results.map((hash) => viemClient.waitForTransactionReceipt({ hash })));
      return results;
    }
  };
};

// src/oracle/oracle.ts
var import_viem11 = require("viem");
var makeOracleClient = (viemClient, addresses) => {
  const arbitrationRequestedEvent = (0, import_viem11.parseAbiItem)(
    "event ArbitrationRequested(bytes32 indexed obligation, address indexed oracle)"
  );
  const arbitrationMadeEvent = (0, import_viem11.parseAbiItem)(
    "event ArbitrationMade(bytes32 indexed obligation, address indexed oracle, bool decision)"
  );
  const arbitrateOnchain = async (obligationUid, decision) => await viemClient.writeContract({
    address: addresses.trustedOracleArbiter,
    abi: abi27.abi,
    functionName: "arbitrate",
    args: [obligationUid, decision],
    account: viemClient.account,
    chain: viemClient.chain
  });
  const requestArbitration = async (obligationUid, oracle) => {
    return await viemClient.writeContract({
      address: addresses.trustedOracleArbiter,
      abi: abi27.abi,
      functionName: "requestArbitration",
      args: [obligationUid, oracle],
      account: viemClient.account,
      chain: viemClient.chain
    });
  };
  const getArbitrationRequests = async (options = {}) => {
    const logs = await viemClient.getLogs({
      address: addresses.trustedOracleArbiter,
      event: arbitrationRequestedEvent,
      args: {
        oracle: viemClient.account.address
      },
      fromBlock: options.fromBlock || "earliest",
      toBlock: options.toBlock || "latest"
    });
    const attestations = await Promise.all(
      logs.map(async (log) => await getAttestation(viemClient, log.args.obligation, addresses))
    );
    const now = BigInt(Math.floor(Date.now() / 1e3));
    const validAttestations = attestations.filter(
      (attestation) => (attestation.expirationTime === BigInt(0) || attestation.expirationTime >= now) && (attestation.revocationTime === BigInt(0) || attestation.revocationTime >= now)
    );
    if (options.skipAlreadyArbitrated) {
      const filteredAttestations = await Promise.all(
        validAttestations.map(async (attestation) => {
          const existingLogs = await viemClient.getLogs({
            address: addresses.trustedOracleArbiter,
            event: arbitrationMadeEvent,
            args: {
              obligation: attestation.uid,
              oracle: viemClient.account.address
            },
            fromBlock: "earliest",
            toBlock: "latest"
          });
          return existingLogs.length === 0 ? attestation : null;
        })
      );
      return filteredAttestations.filter((a) => a !== null);
    }
    return validAttestations;
  };
  const arbitratePast = async (arbitrate, options = {}) => {
    const attestations = await getArbitrationRequests(options);
    const decisions = [];
    for (const attestation of attestations) {
      const decision = await arbitrate(attestation);
      if (decision === null) {
        decisions.push(null);
        continue;
      }
      const hash = await arbitrateOnchain(attestation.uid, decision);
      decisions.push({ hash, attestation, decision });
    }
    const validDecisions = decisions.filter((d) => d !== null);
    await Promise.all(validDecisions.map((d) => viemClient.waitForTransactionReceipt({ hash: d.hash })));
    return validDecisions;
  };
  const listenAndArbitrate = async (arbitrate, options = {}) => {
    const decisions = options.onlyNew ? [] : await arbitratePast(arbitrate, options);
    const optimalInterval = getOptimalPollingInterval(viemClient, options.pollingInterval);
    const unwatch = viemClient.watchEvent({
      address: addresses.trustedOracleArbiter,
      event: arbitrationRequestedEvent,
      args: {
        oracle: viemClient.account.address
      },
      onLogs: async (logs) => {
        await Promise.all(
          logs.map(async (log) => {
            const attestation = await getAttestation(viemClient, log.args.obligation, addresses);
            if (options.skipAlreadyArbitrated) {
              const existingLogs = await viemClient.getLogs({
                address: addresses.trustedOracleArbiter,
                event: arbitrationMadeEvent,
                args: {
                  obligation: attestation.uid,
                  oracle: viemClient.account.address
                },
                fromBlock: "earliest",
                toBlock: "latest"
              });
              if (existingLogs.length > 0) {
                return;
              }
            }
            const _decision = await arbitrate(attestation);
            if (_decision === null) return;
            const hash = await arbitrateOnchain(attestation.uid, _decision);
            const decision = {
              hash,
              attestation,
              decision: _decision
            };
            if (options.onAfterArbitrate) {
              await options.onAfterArbitrate(decision);
            }
          })
        );
      },
      pollingInterval: optimalInterval
    });
    return { decisions, unwatch };
  };
  return {
    requestArbitration,
    getArbitrationRequests,
    arbitratePast,
    listenAndArbitrate
  };
};

// src/extensions.ts
var makeDefaultExtension = (client) => ({
  /** Unified client for all arbiter functionality */
  arbiters: makeArbitersClient(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC20 tokens */
  erc20: makeErc20Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC721 tokens */
  erc721: makeErc721Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with ERC1155 tokens */
  erc1155: makeErc1155Client(client.viemClient, client.contractAddresses),
  /** Methods for interacting with token bundles */
  bundle: makeTokenBundleClient(client.viemClient, client.contractAddresses),
  /** Methods for interacting with attestations */
  attestation: makeAttestationClient(client.viemClient, client.contractAddresses),
  /** Utilities for StringObligation */
  stringObligation: makeStringObligationClient(client.viemClient, client.contractAddresses),
  oracle: makeOracleClient(client.viemClient, client.contractAddresses)
});

// src/index.ts
function makeExtendableClient(base) {
  function extend(current) {
    return (extendFn) => {
      const extensions = extendFn(current);
      for (const key in base) delete extensions[key];
      const combined = { ...current, ...extensions };
      return Object.assign(combined, { extend: extend(combined) });
    };
  }
  return Object.assign(base, { extend: extend(base) });
}
var makeClient = (walletClient, contractAddresses2) => {
  const client = makeMinimalClient(walletClient, contractAddresses2);
  return client.extend(makeDefaultExtension);
};
var makeMinimalClient = (walletClient, contractAddresses2) => {
  const viemClient = walletClient.extend(import_viem12.publicActions);
  let baseAddresses;
  if (supportedChains.includes(viemClient.chain.name)) {
    baseAddresses = contractAddresses[viemClient.chain.name];
  }
  if (!baseAddresses && !contractAddresses2) {
    throw new Error(
      `Chain "${viemClient.chain.name}" is not supported and no custom contract addresses were provided.`
    );
  }
  const zeroAddress = "0x0000000000000000000000000000000000000000";
  const addresses = {
    eas: contractAddresses2?.eas || baseAddresses?.eas || zeroAddress,
    easSchemaRegistry: contractAddresses2?.easSchemaRegistry || baseAddresses?.easSchemaRegistry || zeroAddress,
    erc20EscrowObligation: contractAddresses2?.erc20EscrowObligation || baseAddresses?.erc20EscrowObligation || zeroAddress,
    erc20PaymentObligation: contractAddresses2?.erc20PaymentObligation || baseAddresses?.erc20PaymentObligation || zeroAddress,
    erc20BarterUtils: contractAddresses2?.erc20BarterUtils || baseAddresses?.erc20BarterUtils || zeroAddress,
    erc721EscrowObligation: contractAddresses2?.erc721EscrowObligation || baseAddresses?.erc721EscrowObligation || zeroAddress,
    erc721PaymentObligation: contractAddresses2?.erc721PaymentObligation || baseAddresses?.erc721PaymentObligation || zeroAddress,
    erc721BarterUtils: contractAddresses2?.erc721BarterUtils || baseAddresses?.erc721BarterUtils || zeroAddress,
    erc1155EscrowObligation: contractAddresses2?.erc1155EscrowObligation || baseAddresses?.erc1155EscrowObligation || zeroAddress,
    erc1155PaymentObligation: contractAddresses2?.erc1155PaymentObligation || baseAddresses?.erc1155PaymentObligation || zeroAddress,
    erc1155BarterUtils: contractAddresses2?.erc1155BarterUtils || baseAddresses?.erc1155BarterUtils || zeroAddress,
    tokenBundleEscrowObligation: contractAddresses2?.tokenBundleEscrowObligation || baseAddresses?.tokenBundleEscrowObligation || zeroAddress,
    tokenBundlePaymentObligation: contractAddresses2?.tokenBundlePaymentObligation || baseAddresses?.tokenBundlePaymentObligation || zeroAddress,
    tokenBundleBarterUtils: contractAddresses2?.tokenBundleBarterUtils || baseAddresses?.tokenBundleBarterUtils || zeroAddress,
    attestationEscrowObligation: contractAddresses2?.attestationEscrowObligation || baseAddresses?.attestationEscrowObligation || zeroAddress,
    attestationEscrowObligation2: contractAddresses2?.attestationEscrowObligation2 || baseAddresses?.attestationEscrowObligation2 || zeroAddress,
    attestationBarterUtils: contractAddresses2?.attestationBarterUtils || baseAddresses?.attestationBarterUtils || zeroAddress,
    stringObligation: contractAddresses2?.stringObligation || baseAddresses?.stringObligation || zeroAddress,
    trustedPartyArbiter: contractAddresses2?.trustedPartyArbiter || baseAddresses?.trustedPartyArbiter || zeroAddress,
    trivialArbiter: contractAddresses2?.trivialArbiter || baseAddresses?.trivialArbiter || zeroAddress,
    specificAttestationArbiter: contractAddresses2?.specificAttestationArbiter || baseAddresses?.specificAttestationArbiter || zeroAddress,
    trustedOracleArbiter: contractAddresses2?.trustedOracleArbiter || baseAddresses?.trustedOracleArbiter || zeroAddress,
    intrinsicsArbiter: contractAddresses2?.intrinsicsArbiter || baseAddresses?.intrinsicsArbiter || zeroAddress,
    intrinsicsArbiter2: contractAddresses2?.intrinsicsArbiter2 || baseAddresses?.intrinsicsArbiter2 || zeroAddress,
    anyArbiter: contractAddresses2?.anyArbiter || baseAddresses?.anyArbiter || zeroAddress,
    allArbiter: contractAddresses2?.allArbiter || baseAddresses?.allArbiter || zeroAddress,
    notArbiter: contractAddresses2?.notArbiter || baseAddresses?.notArbiter || zeroAddress,
    erc8004Arbiter: contractAddresses2?.erc8004Arbiter || baseAddresses?.erc8004Arbiter || zeroAddress,
    confirmationArbiter: contractAddresses2?.confirmationArbiter || baseAddresses?.confirmationArbiter || zeroAddress,
    confirmationArbiterComposing: contractAddresses2?.confirmationArbiterComposing || baseAddresses?.confirmationArbiterComposing || zeroAddress,
    revocableConfirmationArbiter: contractAddresses2?.revocableConfirmationArbiter || baseAddresses?.revocableConfirmationArbiter || zeroAddress,
    revocableConfirmationArbiterComposing: contractAddresses2?.revocableConfirmationArbiterComposing || baseAddresses?.revocableConfirmationArbiterComposing || zeroAddress,
    unrevocableConfirmationArbiter: contractAddresses2?.unrevocableConfirmationArbiter || baseAddresses?.unrevocableConfirmationArbiter || zeroAddress,
    unrevocableArbiterComposing: contractAddresses2?.unrevocableArbiterComposing || baseAddresses?.unrevocableArbiterComposing || zeroAddress,
    nativeTokenEscrowObligation: contractAddresses2?.nativeTokenEscrowObligation || baseAddresses?.nativeTokenEscrowObligation || zeroAddress,
    nativeTokenPaymentObligation: contractAddresses2?.nativeTokenPaymentObligation || baseAddresses?.nativeTokenPaymentObligation || zeroAddress,
    nativeTokenBarterUtils: contractAddresses2?.nativeTokenBarterUtils || baseAddresses?.nativeTokenBarterUtils || zeroAddress,
    // Attestation Properties Arbiters - Composing
    attesterArbiterComposing: contractAddresses2?.attesterArbiterComposing || baseAddresses?.attesterArbiterComposing || zeroAddress,
    expirationTimeArbiterComposing: contractAddresses2?.expirationTimeArbiterComposing || baseAddresses?.expirationTimeArbiterComposing || zeroAddress,
    recipientArbiterComposing: contractAddresses2?.recipientArbiterComposing || baseAddresses?.recipientArbiterComposing || zeroAddress,
    refUidArbiterComposing: contractAddresses2?.refUidArbiterComposing || baseAddresses?.refUidArbiterComposing || zeroAddress,
    revocableArbiterComposing: contractAddresses2?.revocableArbiterComposing || baseAddresses?.revocableArbiterComposing || zeroAddress,
    revocationTimeArbiterComposing: contractAddresses2?.revocationTimeArbiterComposing || baseAddresses?.revocationTimeArbiterComposing || zeroAddress,
    schemaArbiterComposing: contractAddresses2?.schemaArbiterComposing || baseAddresses?.schemaArbiterComposing || zeroAddress,
    timestampArbiterComposing: contractAddresses2?.timestampArbiterComposing || baseAddresses?.timestampArbiterComposing || zeroAddress,
    uidArbiterComposing: contractAddresses2?.uidArbiterComposing || baseAddresses?.uidArbiterComposing || zeroAddress,
    valueArbiterComposing: contractAddresses2?.valueArbiterComposing || baseAddresses?.valueArbiterComposing || zeroAddress,
    // Attestation Properties Arbiters - Non-Composing
    attesterArbiterNonComposing: contractAddresses2?.attesterArbiterNonComposing || baseAddresses?.attesterArbiterNonComposing || zeroAddress,
    expirationTimeArbiterNonComposing: contractAddresses2?.expirationTimeArbiterNonComposing || baseAddresses?.expirationTimeArbiterNonComposing || zeroAddress,
    recipientArbiterNonComposing: contractAddresses2?.recipientArbiterNonComposing || baseAddresses?.recipientArbiterNonComposing || zeroAddress,
    refUidArbiterNonComposing: contractAddresses2?.refUidArbiterNonComposing || baseAddresses?.refUidArbiterNonComposing || zeroAddress,
    revocableArbiterNonComposing: contractAddresses2?.revocableArbiterNonComposing || baseAddresses?.revocableArbiterNonComposing || zeroAddress,
    revocationTimeArbiterNonComposing: contractAddresses2?.revocationTimeArbiterNonComposing || baseAddresses?.revocationTimeArbiterNonComposing || zeroAddress,
    schemaArbiterNonComposing: contractAddresses2?.schemaArbiterNonComposing || baseAddresses?.schemaArbiterNonComposing || zeroAddress,
    timestampArbiterNonComposing: contractAddresses2?.timestampArbiterNonComposing || baseAddresses?.timestampArbiterNonComposing || zeroAddress,
    uidArbiterNonComposing: contractAddresses2?.uidArbiterNonComposing || baseAddresses?.uidArbiterNonComposing || zeroAddress,
    valueArbiterNonComposing: contractAddresses2?.valueArbiterNonComposing || baseAddresses?.valueArbiterNonComposing || zeroAddress
  };
  const client = {
    /** The underlying Viem client */
    viemClient,
    makeExtendableClient,
    /** Address of the account used to create this client */
    address: viemClient.account.address,
    /** Contract addresses being used */
    contractAddresses: addresses,
    /**
     * Retrieves an attestation by its UID
     * @param uid - The unique identifier of the attestation
     * @returns The attestation data
     */
    getAttestation: async (uid) => {
      return await getAttestation(viemClient, uid, addresses);
    },
    /**
     * Gets an attestation from a transaction hash
     * @param hash - The transaction hash
     * @returns The attestation event args
     */
    getAttestedEventFromTxHash: async (hash) => {
      const tx = await viemClient.waitForTransactionReceipt({ hash });
      const events = (0, import_viem12.parseEventLogs)({
        abi: abi29.abi,
        eventName: "Attested",
        logs: tx.logs
      });
      if (!events[0]) throw new Error("No Attested event found in transaction");
      return events[0].args;
    },
    /**
     * Waits for an escrow to be fulfilled
     * @param contractAddress - The address of the escrow contract
     * @param buyAttestation - The UID of the buy attestation
     * @returns Object containing payment, fulfillment and fulfiller details
     *
     * @example
     * ```ts
     * // Wait for fulfillment of an escrow
     * const fulfillment = await client.waitForFulfillment(
     *   contractAddresses.erc20EscrowObligation,
     *   escrow.attested.uid,
     * );
     * ```
     */
    waitForFulfillment: async (contractAddress, buyAttestation, pollingInterval) => {
      const fulfillmentEvent = (0, import_viem12.parseAbiItem)(
        "event EscrowCollected(bytes32 indexed escrow, bytes32 indexed fulfillment, address indexed fulfiller)"
      );
      const logs = await viemClient.getLogs({
        address: contractAddress,
        event: fulfillmentEvent,
        args: { escrow: buyAttestation },
        fromBlock: "earliest",
        toBlock: "latest"
      });
      if (logs.length && logs[0])
        return {
          payment: logs[0].args.escrow,
          fulfillment: logs[0].args.fulfillment,
          fulfiller: logs[0].args.fulfiller
        };
      const optimalInterval = getOptimalPollingInterval(viemClient, pollingInterval);
      return new Promise((resolve) => {
        const unwatch = viemClient.watchEvent({
          address: contractAddress,
          event: fulfillmentEvent,
          args: { escrow: buyAttestation },
          onLogs: (logs2) => {
            if (!logs2[0]) return;
            resolve({
              payment: logs2[0].args.escrow,
              fulfillment: logs2[0].args.fulfillment,
              fulfiller: logs2[0].args.fulfiller
            });
            unwatch();
          },
          pollingInterval: optimalInterval
        });
      });
    },
    /**
     * Extract obligation data from a fulfillment attestation
     * @param obligationAbi - ABI parameters for the obligation data
     * @param attestation - The attestation containing the obligation data
     * @returns Decoded obligation data
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const obligationAbi = parseAbiParameters("(string item)");
     * const obligation = client.extractObligationData(obligationAbi, attestation);
     * ```
     */
    extractObligationData: (obligationAbi, attestation) => {
      return (0, import_viem12.decodeAbiParameters)(obligationAbi, attestation.data);
    },
    /**
     * Get the escrow attestation that this fulfillment references via refUID
     * @param fulfillment - The fulfillment attestation
     * @returns The escrow attestation
     *
     * @example
     * ```ts
     * const escrowAttestation = await client.getEscrowAttestation(fulfillmentAttestation);
     * ```
     */
    getEscrowAttestation: async (fulfillment) => {
      return await getAttestation(viemClient, fulfillment.refUID, addresses);
    },
    /**
     * Extract demand data from an escrow attestation
     * @param demandAbi - ABI parameters for the demand data
     * @param escrowAttestation - The escrow attestation
     * @returns Decoded demand data
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const demandAbi = parseAbiParameters("(address oracle, bytes data)");
     * const demand = client.extractDemandData(demandAbi, escrowAttestation);
     * ```
     */
    extractDemandData: (demandAbi, escrowAttestation) => {
      const arbiterDemandAbi = (0, import_viem12.parseAbiParameters)("(address arbiter, bytes demand)");
      const arbiterDemand = (0, import_viem12.decodeAbiParameters)(arbiterDemandAbi, escrowAttestation.data)[0];
      const trustedOracleDemandAbi = (0, import_viem12.parseAbiParameters)("(address oracle, bytes data)");
      const trustedOracleDemand = (0, import_viem12.decodeAbiParameters)(trustedOracleDemandAbi, arbiterDemand.demand)[0];
      return (0, import_viem12.decodeAbiParameters)(demandAbi, trustedOracleDemand.data);
    },
    /**
     * Get escrow attestation and extract demand data in one call
     * @param demandAbi - ABI parameters for the demand data
     * @param fulfillment - The fulfillment attestation
     * @returns Tuple of [escrow attestation, decoded demand data]
     *
     * @example
     * ```ts
     * import { parseAbiParameters } from "viem";
     *
     * const demandAbi = parseAbiParameters("(address oracle, bytes data)");
     * const [escrow, demand] = await client.getEscrowAndDemand(demandAbi, fulfillment);
     * ```
     */
    getEscrowAndDemand: async (demandAbi, fulfillment) => {
      const escrow = await getAttestation(viemClient, fulfillment.refUID, addresses);
      const arbiterDemandAbi = (0, import_viem12.parseAbiParameters)("(address arbiter, bytes demand)");
      const arbiterDemand = (0, import_viem12.decodeAbiParameters)(arbiterDemandAbi, escrow.data)[0];
      const trustedOracleDemandAbi = (0, import_viem12.parseAbiParameters)("(address oracle, bytes data)");
      const trustedOracleDemand = (0, import_viem12.decodeAbiParameters)(trustedOracleDemandAbi, arbiterDemand.demand)[0];
      const demand = (0, import_viem12.decodeAbiParameters)(demandAbi, trustedOracleDemand.data);
      return [escrow, demand];
    }
  };
  return makeExtendableClient(client);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  contractAddresses,
  flattenTokenBundle,
  getAttestation,
  getAttestedEventFromTxHash,
  getOptimalPollingInterval,
  isWebSocketTransport,
  makeArbitersClient,
  makeAttestationPropertiesArbitersClient,
  makeClient,
  makeDefaultExtension,
  makeGeneralArbitersClient,
  makeLogicalArbitersClient,
  makeMinimalClient,
  supportedChains
});
